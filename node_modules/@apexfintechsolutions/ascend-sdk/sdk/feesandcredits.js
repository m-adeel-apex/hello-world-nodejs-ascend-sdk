"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeesAndCredits = void 0;
const feesAndCreditsCancelCredit_js_1 = require("../funcs/feesAndCreditsCancelCredit.js");
const feesAndCreditsCancelFee_js_1 = require("../funcs/feesAndCreditsCancelFee.js");
const feesAndCreditsCreateCredit_js_1 = require("../funcs/feesAndCreditsCreateCredit.js");
const feesAndCreditsCreateFee_js_1 = require("../funcs/feesAndCreditsCreateFee.js");
const feesAndCreditsGetCredit_js_1 = require("../funcs/feesAndCreditsGetCredit.js");
const feesAndCreditsGetFee_js_1 = require("../funcs/feesAndCreditsGetFee.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class FeesAndCredits extends sdks_js_1.ClientSDK {
    /**
     * Create Fee
     *
     * @remarks
     * Create a fee
     */
    async createFee(transfersFeeCreate, accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, feesAndCreditsCreateFee_js_1.feesAndCreditsCreateFee)(this, transfersFeeCreate, accountId, options));
    }
    /**
     * Get Fee
     *
     * @remarks
     * Retrieve an existing fee
     */
    async getFee(accountId, feeId, options) {
        return (0, fp_js_1.unwrapAsync)((0, feesAndCreditsGetFee_js_1.feesAndCreditsGetFee)(this, accountId, feeId, options));
    }
    /**
     * Cancel Fee
     *
     * @remarks
     * Cancel an existing fee
     */
    async cancelFee(cancelFeeRequestCreate, accountId, feeId, options) {
        return (0, fp_js_1.unwrapAsync)((0, feesAndCreditsCancelFee_js_1.feesAndCreditsCancelFee)(this, cancelFeeRequestCreate, accountId, feeId, options));
    }
    /**
     * Create Credit
     *
     * @remarks
     * Create a credit
     */
    async createCredit(transfersCreditCreate, accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, feesAndCreditsCreateCredit_js_1.feesAndCreditsCreateCredit)(this, transfersCreditCreate, accountId, options));
    }
    /**
     * Get Credit
     *
     * @remarks
     * Retrieve an existing credit
     */
    async getCredit(accountId, creditId, options) {
        return (0, fp_js_1.unwrapAsync)((0, feesAndCreditsGetCredit_js_1.feesAndCreditsGetCredit)(this, accountId, creditId, options));
    }
    /**
     * Cancel Credit
     *
     * @remarks
     * Cancel an existing credit
     */
    async cancelCredit(cancelCreditRequestCreate, accountId, creditId, options) {
        return (0, fp_js_1.unwrapAsync)((0, feesAndCreditsCancelCredit_js_1.feesAndCreditsCancelCredit)(this, cancelCreditRequestCreate, accountId, creditId, options));
    }
}
exports.FeesAndCredits = FeesAndCredits;
//# sourceMappingURL=feesandcredits.js.map