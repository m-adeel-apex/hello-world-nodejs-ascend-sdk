"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonManagement = void 0;
const personManagementAssignLargeTrader_js_1 = require("../funcs/personManagementAssignLargeTrader.js");
const personManagementAssignLargeTraderLegalEntity_js_1 = require("../funcs/personManagementAssignLargeTraderLegalEntity.js");
const personManagementCreateLegalEntity_js_1 = require("../funcs/personManagementCreateLegalEntity.js");
const personManagementCreateLegalNaturalPerson_js_1 = require("../funcs/personManagementCreateLegalNaturalPerson.js");
const personManagementEndLargeTrader_js_1 = require("../funcs/personManagementEndLargeTrader.js");
const personManagementEndLargeTraderLegalNaturalPerson_js_1 = require("../funcs/personManagementEndLargeTraderLegalNaturalPerson.js");
const personManagementGetLegalEntity_js_1 = require("../funcs/personManagementGetLegalEntity.js");
const personManagementGetLegalNaturalPerson_js_1 = require("../funcs/personManagementGetLegalNaturalPerson.js");
const personManagementListLegalEntities_js_1 = require("../funcs/personManagementListLegalEntities.js");
const personManagementListLegalNaturalPersons_js_1 = require("../funcs/personManagementListLegalNaturalPersons.js");
const personManagementUpdateLegalEntity_js_1 = require("../funcs/personManagementUpdateLegalEntity.js");
const personManagementUpdateLegalNaturalPerson_js_1 = require("../funcs/personManagementUpdateLegalNaturalPerson.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class PersonManagement extends sdks_js_1.ClientSDK {
    /**
     * Create Legal Natural Person
     *
     * @remarks
     * Creates a Legal Natural Person.
     */
    async createLegalNaturalPerson(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementCreateLegalNaturalPerson_js_1.personManagementCreateLegalNaturalPerson)(this, request, options));
    }
    /**
     * List Legal Natural Persons
     *
     * @remarks
     * Gets a list of Legal Natural Person records based on search criteria.
     */
    async listLegalNaturalPersons(pageSize, pageToken, orderBy, filter, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementListLegalNaturalPersons_js_1.personManagementListLegalNaturalPersons)(this, pageSize, pageToken, orderBy, filter, options));
    }
    /**
     * Get Legal Natural Persons
     *
     * @remarks
     * Get Legal Natural Person
     */
    async getLegalNaturalPerson(legalNaturalPersonId, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementGetLegalNaturalPerson_js_1.personManagementGetLegalNaturalPerson)(this, legalNaturalPersonId, options));
    }
    /**
     * Update Legal Natural Person
     *
     * @remarks
     * Updates a Legal Natural Person.
     */
    async updateLegalNaturalPerson(legalNaturalPersonUpdate, legalNaturalPersonId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementUpdateLegalNaturalPerson_js_1.personManagementUpdateLegalNaturalPerson)(this, legalNaturalPersonUpdate, legalNaturalPersonId, updateMask, options));
    }
    /**
     * Assign Large Trader
     *
     * @remarks
     * Assigns a person's Large Trader ID.
     */
    async assignLargeTrader(assignLargeTraderRequestCreate, legalNaturalPersonId, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementAssignLargeTrader_js_1.personManagementAssignLargeTrader)(this, assignLargeTraderRequestCreate, legalNaturalPersonId, options));
    }
    /**
     * End Large Trader
     *
     * @remarks
     * Removes a person's Large Trader ID.
     */
    async endLargeTraderLegalNaturalPerson(endLargeTraderRequestCreate, legalNaturalPersonId, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementEndLargeTraderLegalNaturalPerson_js_1.personManagementEndLargeTraderLegalNaturalPerson)(this, endLargeTraderRequestCreate, legalNaturalPersonId, options));
    }
    /**
     * Create Legal Entity
     *
     * @remarks
     * Creates a Legal Entity.
     */
    async createLegalEntity(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementCreateLegalEntity_js_1.personManagementCreateLegalEntity)(this, request, options));
    }
    /**
     * List Legal Entity
     *
     * @remarks
     * Gets a list of Legal Entity records based on search criteria.
     */
    async listLegalEntities(pageSize, pageToken, orderBy, filter, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementListLegalEntities_js_1.personManagementListLegalEntities)(this, pageSize, pageToken, orderBy, filter, options));
    }
    /**
     * Get Legal Entity
     *
     * @remarks
     * Get Legal Entity
     */
    async getLegalEntity(legalEntityId, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementGetLegalEntity_js_1.personManagementGetLegalEntity)(this, legalEntityId, options));
    }
    /**
     * Update Legal Entity
     *
     * @remarks
     * Updates a Legal Entity.
     */
    async updateLegalEntity(legalEntityUpdate, legalEntityId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementUpdateLegalEntity_js_1.personManagementUpdateLegalEntity)(this, legalEntityUpdate, legalEntityId, updateMask, options));
    }
    /**
     * Assign Entity Large Trader
     *
     * @remarks
     * Assigns a person's Large Trader ID.
     */
    async assignLargeTraderLegalEntity(assignLargeTraderRequestCreate, legalEntityId, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementAssignLargeTraderLegalEntity_js_1.personManagementAssignLargeTraderLegalEntity)(this, assignLargeTraderRequestCreate, legalEntityId, options));
    }
    /**
     * End Entity Large Trader
     *
     * @remarks
     * Removes a person's Large Trader ID.
     */
    async endLargeTrader(endLargeTraderRequestCreate, legalEntityId, options) {
        return (0, fp_js_1.unwrapAsync)((0, personManagementEndLargeTrader_js_1.personManagementEndLargeTrader)(this, endLargeTraderRequestCreate, legalEntityId, options));
    }
}
exports.PersonManagement = PersonManagement;
//# sourceMappingURL=personmanagement.js.map