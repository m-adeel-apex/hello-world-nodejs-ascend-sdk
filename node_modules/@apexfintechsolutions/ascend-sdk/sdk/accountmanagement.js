"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountManagement = void 0;
const accountManagementAddParty_js_1 = require("../funcs/accountManagementAddParty.js");
const accountManagementCloseAccount_js_1 = require("../funcs/accountManagementCloseAccount.js");
const accountManagementCreateInterestedParty_js_1 = require("../funcs/accountManagementCreateInterestedParty.js");
const accountManagementCreateRestriction_js_1 = require("../funcs/accountManagementCreateRestriction.js");
const accountManagementCreateTrustedContact_js_1 = require("../funcs/accountManagementCreateTrustedContact.js");
const accountManagementDeleteInterestedParty_js_1 = require("../funcs/accountManagementDeleteInterestedParty.js");
const accountManagementDeleteTrustedContact_js_1 = require("../funcs/accountManagementDeleteTrustedContact.js");
const accountManagementEndRestriction_js_1 = require("../funcs/accountManagementEndRestriction.js");
const accountManagementListAccounts_js_1 = require("../funcs/accountManagementListAccounts.js");
const accountManagementListAvailableRestrictions_js_1 = require("../funcs/accountManagementListAvailableRestrictions.js");
const accountManagementRemoveParty_js_1 = require("../funcs/accountManagementRemoveParty.js");
const accountManagementReplaceParty_js_1 = require("../funcs/accountManagementReplaceParty.js");
const accountManagementUpdateAccount_js_1 = require("../funcs/accountManagementUpdateAccount.js");
const accountManagementUpdateInterestedParty_js_1 = require("../funcs/accountManagementUpdateInterestedParty.js");
const accountManagementUpdateParty_js_1 = require("../funcs/accountManagementUpdateParty.js");
const accountManagementUpdateTrustedContact_js_1 = require("../funcs/accountManagementUpdateTrustedContact.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class AccountManagement extends sdks_js_1.ClientSDK {
    /**
     * List Accounts
     *
     * @remarks
     * Gets a list of Accounts based on search criteria.
     */
    async listAccounts(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementListAccounts_js_1.accountManagementListAccounts)(this, request, options));
    }
    /**
     * Update Account
     *
     * @remarks
     * UPDATE Updates an Account.
     */
    async updateAccount(accountRequestUpdate, accountId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementUpdateAccount_js_1.accountManagementUpdateAccount)(this, accountRequestUpdate, accountId, updateMask, options));
    }
    /**
     * Add Party
     *
     * @remarks
     * Adds a party to an account
     */
    async addParty(addPartyRequestCreate, accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementAddParty_js_1.accountManagementAddParty)(this, addPartyRequestCreate, accountId, options));
    }
    /**
     * Update Party
     *
     * @remarks
     * Updates a Party.
     */
    async updateParty(partyRequestUpdate, accountId, partyId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementUpdateParty_js_1.accountManagementUpdateParty)(this, partyRequestUpdate, accountId, partyId, updateMask, options));
    }
    /**
     * Replace Party
     *
     * @remarks
     * Replaces a party on an account
     */
    async replaceParty(replacePartyRequestCreate, accountId, partyId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementReplaceParty_js_1.accountManagementReplaceParty)(this, replacePartyRequestCreate, accountId, partyId, options));
    }
    /**
     * Remove Party
     *
     * @remarks
     * Remove a party from an account
     */
    async removeParty(removePartyRequestCreate, accountId, partyId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementRemoveParty_js_1.accountManagementRemoveParty)(this, removePartyRequestCreate, accountId, partyId, options));
    }
    /**
     * Close Account
     *
     * @remarks
     * CUSTOM Places an ACCT_MAINT_CLOSURE_PREP_BY_CORRESPONDENT restriction on the Account ready for closure.
     */
    async closeAccount(closeAccountRequestCreate, accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementCloseAccount_js_1.accountManagementCloseAccount)(this, closeAccountRequestCreate, accountId, options));
    }
    /**
     * Create Trusted Contact
     *
     * @remarks
     * Creates a new Trusted Contact for an account.
     */
    async createTrustedContact(trustedContactCreate, accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementCreateTrustedContact_js_1.accountManagementCreateTrustedContact)(this, trustedContactCreate, accountId, options));
    }
    /**
     * Update Trusted Contact
     *
     * @remarks
     * Updates a Trusted Contact.
     */
    async updateTrustedContact(trustedContactUpdate, accountId, trustedContactId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementUpdateTrustedContact_js_1.accountManagementUpdateTrustedContact)(this, trustedContactUpdate, accountId, trustedContactId, updateMask, options));
    }
    /**
     * Delete Trusted Contact
     *
     * @remarks
     * DELETE Deletes a Trusted Contact for an Account.
     */
    async deleteTrustedContact(accountId, trustedContactId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementDeleteTrustedContact_js_1.accountManagementDeleteTrustedContact)(this, accountId, trustedContactId, options));
    }
    /**
     * Create Interested Party
     *
     * @remarks
     * Creates an Interested Party record for an Account.
     */
    async createInterestedParty(interestedPartyCreate, accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementCreateInterestedParty_js_1.accountManagementCreateInterestedParty)(this, interestedPartyCreate, accountId, options));
    }
    /**
     * Update Interested Party
     *
     * @remarks
     * Updates an Interested Party.
     */
    async updateInterestedParty(interestedPartyUpdate, accountId, interestedPartyId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementUpdateInterestedParty_js_1.accountManagementUpdateInterestedParty)(this, interestedPartyUpdate, accountId, interestedPartyId, updateMask, options));
    }
    /**
     * Delete Interested Party
     *
     * @remarks
     * Deletes an Interested Party associated from an Account.
     */
    async deleteInterestedParty(accountId, interestedPartyId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementDeleteInterestedParty_js_1.accountManagementDeleteInterestedParty)(this, accountId, interestedPartyId, options));
    }
    /**
     * List Available Restrictions
     *
     * @remarks
     * Gets a list of possible Restrictions that can be placed on an Account based on Enrollments.
     */
    async listAvailableRestrictions(accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementListAvailableRestrictions_js_1.accountManagementListAvailableRestrictions)(this, accountId, options));
    }
    /**
     * Create Restriction
     *
     * @remarks
     * Applies a Restriction to an account that suspends one or more Entitlements.
     */
    async createRestriction(restrictionCreate, accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementCreateRestriction_js_1.accountManagementCreateRestriction)(this, restrictionCreate, accountId, options));
    }
    /**
     * End Restriction
     *
     * @remarks
     * Ends a Restriction on an Account.
     */
    async endRestriction(endRestrictionRequestCreate, accountId, restrictionId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accountManagementEndRestriction_js_1.accountManagementEndRestriction)(this, endRestrictionRequestCreate, accountId, restrictionId, options));
    }
}
exports.AccountManagement = AccountManagement;
//# sourceMappingURL=accountmanagement.js.map