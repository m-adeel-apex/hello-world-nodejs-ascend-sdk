"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Investigations = void 0;
const investigationsGetCustomerIdentification_js_1 = require("../funcs/investigationsGetCustomerIdentification.js");
const investigationsGetInvestigation_js_1 = require("../funcs/investigationsGetInvestigation.js");
const investigationsGetWatchlistItem_js_1 = require("../funcs/investigationsGetWatchlistItem.js");
const investigationsLinkDocuments_js_1 = require("../funcs/investigationsLinkDocuments.js");
const investigationsListInvestigations_js_1 = require("../funcs/investigationsListInvestigations.js");
const investigationsUpdateInvestigation_js_1 = require("../funcs/investigationsUpdateInvestigation.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Investigations extends sdks_js_1.ClientSDK {
    /**
     * Get Investigations
     *
     * @remarks
     * Use this endpoint to get the current state of an investigation by request reference UUID.
     */
    async getInvestigation(investigationId, options) {
        return (0, fp_js_1.unwrapAsync)((0, investigationsGetInvestigation_js_1.investigationsGetInvestigation)(this, investigationId, options));
    }
    /**
     * Update Investigation
     *
     * @remarks
     * Use this endpoint to update the details of an investigation by request reference UUID.
     */
    async updateInvestigation(investigationUpdate, investigationId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, investigationsUpdateInvestigation_js_1.investigationsUpdateInvestigation)(this, investigationUpdate, investigationId, updateMask, options));
    }
    /**
     * List Investigations
     *
     * @remarks
     * Use this endpoint to retrieve a list of investigation summaries based on optional search parameters
     */
    async listInvestigations(pageSize, pageToken, filter, options) {
        return (0, fp_js_1.unwrapAsync)((0, investigationsListInvestigations_js_1.investigationsListInvestigations)(this, pageSize, pageToken, filter, options));
    }
    /**
     * Link Documents
     *
     * @remarks
     * Use this endpoint to update identity verification document IDs.
     */
    async linkDocuments(linkDocumentsRequestCreate, investigationId, options) {
        return (0, fp_js_1.unwrapAsync)((0, investigationsLinkDocuments_js_1.investigationsLinkDocuments)(this, linkDocumentsRequestCreate, investigationId, options));
    }
    /**
     * Get Watchlist Item
     *
     * @remarks
     * Gets the details of an investigation by watchlist type and valid watchlist id
     */
    async getWatchlistItem(watchlistId, itemId, options) {
        return (0, fp_js_1.unwrapAsync)((0, investigationsGetWatchlistItem_js_1.investigationsGetWatchlistItem)(this, watchlistId, itemId, options));
    }
    /**
     * Get Identity Verification
     *
     * @remarks
     * Gets a CustomerIdentification by CustomerIdentification ID.
     */
    async getCustomerIdentification(correspondentId, customerIdentificationId, view, options) {
        return (0, fp_js_1.unwrapAsync)((0, investigationsGetCustomerIdentification_js_1.investigationsGetCustomerIdentification)(this, correspondentId, customerIdentificationId, view, options));
    }
}
exports.Investigations = Investigations;
//# sourceMappingURL=investigations.js.map