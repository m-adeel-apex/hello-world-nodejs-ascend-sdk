"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscriber = void 0;
const subscriberCreatePushSubscription_js_1 = require("../funcs/subscriberCreatePushSubscription.js");
const subscriberDeletePushSubscription_js_1 = require("../funcs/subscriberDeletePushSubscription.js");
const subscriberGetPushSubscription_js_1 = require("../funcs/subscriberGetPushSubscription.js");
const subscriberGetPushSubscriptionDelivery_js_1 = require("../funcs/subscriberGetPushSubscriptionDelivery.js");
const subscriberListPushSubscriptionDeliveries_js_1 = require("../funcs/subscriberListPushSubscriptionDeliveries.js");
const subscriberListPushSubscriptions_js_1 = require("../funcs/subscriberListPushSubscriptions.js");
const subscriberUpdatePushSubscription_js_1 = require("../funcs/subscriberUpdatePushSubscription.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Subscriber extends sdks_js_1.ClientSDK {
    /**
     * Create Push Subscription
     *
     * @remarks
     * Creates a new push subscription for event notifications.
     */
    async createPushSubscription(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriberCreatePushSubscription_js_1.subscriberCreatePushSubscription)(this, request, options));
    }
    /**
     * List Push Subscriptions
     *
     * @remarks
     * Gets a list of push subscriptions.
     */
    async listPushSubscriptions(filter, pageSize, pageToken, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriberListPushSubscriptions_js_1.subscriberListPushSubscriptions)(this, filter, pageSize, pageToken, options));
    }
    /**
     * Get Push Subscription
     *
     * @remarks
     * Gets the details of a specific push subscription.
     */
    async getPushSubscription(subscriptionId, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriberGetPushSubscription_js_1.subscriberGetPushSubscription)(this, subscriptionId, options));
    }
    /**
     * Update Subscription
     *
     * @remarks
     * Updates the details of a push subscription.
     */
    async updatePushSubscription(pushSubscriptionUpdate, subscriptionId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriberUpdatePushSubscription_js_1.subscriberUpdatePushSubscription)(this, pushSubscriptionUpdate, subscriptionId, updateMask, options));
    }
    /**
     * Delete Subscription
     *
     * @remarks
     * Stops receiving events from a push subscription, and then deletes it.
     */
    async deletePushSubscription(subscriptionId, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriberDeletePushSubscription_js_1.subscriberDeletePushSubscription)(this, subscriptionId, options));
    }
    /**
     * Get Subscription Event Delivery
     *
     * @remarks
     * Gets the details of a specific push subscription delivery.
     */
    async getPushSubscriptionDelivery(subscriptionId, deliveryId, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriberGetPushSubscriptionDelivery_js_1.subscriberGetPushSubscriptionDelivery)(this, subscriptionId, deliveryId, options));
    }
    /**
     * List Push Subscription Event Deliveries
     *
     * @remarks
     * Gets a list of a push subscription's event deliveries.
     */
    async listPushSubscriptionDeliveries(subscriptionId, filter, pageSize, pageToken, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriberListPushSubscriptionDeliveries_js_1.subscriberListPushSubscriptionDeliveries)(this, subscriptionId, filter, pageSize, pageToken, options));
    }
}
exports.Subscriber = Subscriber;
//# sourceMappingURL=subscriber.js.map