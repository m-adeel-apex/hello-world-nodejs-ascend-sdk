"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BankRelationships = void 0;
const bankRelationshipsCancelBankRelationship_js_1 = require("../funcs/bankRelationshipsCancelBankRelationship.js");
const bankRelationshipsCreateBankRelationship_js_1 = require("../funcs/bankRelationshipsCreateBankRelationship.js");
const bankRelationshipsGetBankRelationship_js_1 = require("../funcs/bankRelationshipsGetBankRelationship.js");
const bankRelationshipsListBankRelationships_js_1 = require("../funcs/bankRelationshipsListBankRelationships.js");
const bankRelationshipsReissueMicroDeposits_js_1 = require("../funcs/bankRelationshipsReissueMicroDeposits.js");
const bankRelationshipsUpdateBankRelationship_js_1 = require("../funcs/bankRelationshipsUpdateBankRelationship.js");
const bankRelationshipsVerifyMicroDeposits_js_1 = require("../funcs/bankRelationshipsVerifyMicroDeposits.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class BankRelationships extends sdks_js_1.ClientSDK {
    /**
     * Create Bank Relationship
     *
     * @remarks
     * Creates a bank relationship.
     */
    async createBankRelationship(bankRelationshipCreate, accountId, options) {
        return (0, fp_js_1.unwrapAsync)((0, bankRelationshipsCreateBankRelationship_js_1.bankRelationshipsCreateBankRelationship)(this, bankRelationshipCreate, accountId, options));
    }
    /**
     * List Bank Relationships
     *
     * @remarks
     * Lists bank relationships for an account.
     */
    async listBankRelationships(accountId, pageSize, pageToken, state, options) {
        return (0, fp_js_1.unwrapAsync)((0, bankRelationshipsListBankRelationships_js_1.bankRelationshipsListBankRelationships)(this, accountId, pageSize, pageToken, state, options));
    }
    /**
     * Get Bank Relationship
     *
     * @remarks
     * Gets an existing bank relationship.
     */
    async getBankRelationship(accountId, bankRelationshipId, options) {
        return (0, fp_js_1.unwrapAsync)((0, bankRelationshipsGetBankRelationship_js_1.bankRelationshipsGetBankRelationship)(this, accountId, bankRelationshipId, options));
    }
    /**
     * Update Bank Relationship
     *
     * @remarks
     * Updates an existing bank relationship.
     */
    async updateBankRelationship(bankRelationshipUpdate, accountId, bankRelationshipId, updateMask, options) {
        return (0, fp_js_1.unwrapAsync)((0, bankRelationshipsUpdateBankRelationship_js_1.bankRelationshipsUpdateBankRelationship)(this, bankRelationshipUpdate, accountId, bankRelationshipId, updateMask, options));
    }
    /**
     * Cancel Bank Relationship
     *
     * @remarks
     * Cancels an existing bank relationship.
     */
    async cancelBankRelationship(cancelBankRelationshipRequestCreate, accountId, bankRelationshipId, options) {
        return (0, fp_js_1.unwrapAsync)((0, bankRelationshipsCancelBankRelationship_js_1.bankRelationshipsCancelBankRelationship)(this, cancelBankRelationshipRequestCreate, accountId, bankRelationshipId, options));
    }
    /**
     * Verify Micro Deposits
     *
     * @remarks
     * Verifies a pending bank relationship with the `MICRO_DEPOSIT` verification method. Successful verification of the micro deposit amounts will result in the relationship moving to the `APPROVED` state. The micro deposits will be taken back from the bank account.
     */
    async verifyMicroDeposits(verifyMicroDepositsRequestCreate, accountId, bankRelationshipId, options) {
        return (0, fp_js_1.unwrapAsync)((0, bankRelationshipsVerifyMicroDeposits_js_1.bankRelationshipsVerifyMicroDeposits)(this, verifyMicroDepositsRequestCreate, accountId, bankRelationshipId, options));
    }
    /**
     * Reissue Micro Deposits
     *
     * @remarks
     * Reissues micro deposits after micro deposit verification has failed. The user should have received a message that new micro deposits should be reissued.
     */
    async reissueMicroDeposits(reissueMicroDepositsRequestCreate, accountId, bankRelationshipId, options) {
        return (0, fp_js_1.unwrapAsync)((0, bankRelationshipsReissueMicroDeposits_js_1.bankRelationshipsReissueMicroDeposits)(this, reissueMicroDepositsRequestCreate, accountId, bankRelationshipId, options));
    }
}
exports.BankRelationships = BankRelationships;
//# sourceMappingURL=bankrelationships.js.map