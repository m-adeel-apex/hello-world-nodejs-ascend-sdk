"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestSimulation = void 0;
const testSimulationForceApproveAchDeposit_js_1 = require("../funcs/testSimulationForceApproveAchDeposit.js");
const testSimulationForceApproveAchWithdrawal_js_1 = require("../funcs/testSimulationForceApproveAchWithdrawal.js");
const testSimulationForceApproveCashJournal_js_1 = require("../funcs/testSimulationForceApproveCashJournal.js");
const testSimulationForceApproveIctDeposit_js_1 = require("../funcs/testSimulationForceApproveIctDeposit.js");
const testSimulationForceApproveIctWithdrawal_js_1 = require("../funcs/testSimulationForceApproveIctWithdrawal.js");
const testSimulationForceApproveWireWithdrawal_js_1 = require("../funcs/testSimulationForceApproveWireWithdrawal.js");
const testSimulationForceNocAchDeposit_js_1 = require("../funcs/testSimulationForceNocAchDeposit.js");
const testSimulationForceNocAchWithdrawal_js_1 = require("../funcs/testSimulationForceNocAchWithdrawal.js");
const testSimulationForceRejectAchDeposit_js_1 = require("../funcs/testSimulationForceRejectAchDeposit.js");
const testSimulationForceRejectAchWithdrawal_js_1 = require("../funcs/testSimulationForceRejectAchWithdrawal.js");
const testSimulationForceRejectCashJournal_js_1 = require("../funcs/testSimulationForceRejectCashJournal.js");
const testSimulationForceRejectIctDeposit_js_1 = require("../funcs/testSimulationForceRejectIctDeposit.js");
const testSimulationForceRejectIctWithdrawal_js_1 = require("../funcs/testSimulationForceRejectIctWithdrawal.js");
const testSimulationForceRejectWireWithdrawal_js_1 = require("../funcs/testSimulationForceRejectWireWithdrawal.js");
const testSimulationForceReturnAchDeposit_js_1 = require("../funcs/testSimulationForceReturnAchDeposit.js");
const testSimulationForceReturnAchWithdrawal_js_1 = require("../funcs/testSimulationForceReturnAchWithdrawal.js");
const testSimulationGetMicroDepositAmounts_js_1 = require("../funcs/testSimulationGetMicroDepositAmounts.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class TestSimulation extends sdks_js_1.ClientSDK {
    /**
     * ACH Deposit Approval
     *
     * @remarks
     * Forces approval of an existing ACH deposit that is pending review. FOR TESTING ONLY!
     */
    async forceApproveAchDeposit(forceApproveAchDepositRequestCreate, accountId, achDepositId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceApproveAchDeposit_js_1.testSimulationForceApproveAchDeposit)(this, forceApproveAchDepositRequestCreate, accountId, achDepositId, options));
    }
    /**
     * NOC for a Deposit
     *
     * @remarks
     * Forces a Nacha notice of change (NOC) on a completed ACH deposit. FOR TESTING ONLY!
     */
    async forceNocAchDeposit(forceNocAchDepositRequestCreate, accountId, achDepositId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceNocAchDeposit_js_1.testSimulationForceNocAchDeposit)(this, forceNocAchDepositRequestCreate, accountId, achDepositId, options));
    }
    /**
     * ACH Deposit Rejection
     *
     * @remarks
     * Forces rejection of an existing ACH deposit that is pending review. FOR TESTING ONLY!
     */
    async forceRejectAchDeposit(forceRejectAchDepositRequestCreate, accountId, achDepositId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceRejectAchDeposit_js_1.testSimulationForceRejectAchDeposit)(this, forceRejectAchDepositRequestCreate, accountId, achDepositId, options));
    }
    /**
     * ACH Deposit Return
     *
     * @remarks
     * Forces a Nacha return on a completed ACH deposit. FOR TESTING ONLY!
     */
    async forceReturnAchDeposit(forceReturnAchDepositRequestCreate, accountId, achDepositId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceReturnAchDeposit_js_1.testSimulationForceReturnAchDeposit)(this, forceReturnAchDepositRequestCreate, accountId, achDepositId, options));
    }
    /**
     * ACH Withdrawal Approval
     *
     * @remarks
     * Forces approval of an existing ACH withdrawal that is pending review. FOR TESTING ONLY!
     */
    async forceApproveAchWithdrawal(forceApproveAchWithdrawalRequestCreate, accountId, achWithdrawalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceApproveAchWithdrawal_js_1.testSimulationForceApproveAchWithdrawal)(this, forceApproveAchWithdrawalRequestCreate, accountId, achWithdrawalId, options));
    }
    /**
     * ACH Withdrawal NOC
     *
     * @remarks
     * Forces a Nacha notice of change (NOC) on a completed ACH withdrawal. FOR TESTING ONLY!
     */
    async forceNocAchWithdrawal(forceNocAchWithdrawalRequestCreate, accountId, achWithdrawalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceNocAchWithdrawal_js_1.testSimulationForceNocAchWithdrawal)(this, forceNocAchWithdrawalRequestCreate, accountId, achWithdrawalId, options));
    }
    /**
     * ACH Withdrawal Rejection
     *
     * @remarks
     * Forces rejection of an existing ACH withdrawal that is pending review. FOR TESTING ONLY!
     */
    async forceRejectAchWithdrawal(forceRejectAchWithdrawalRequestCreate, accountId, achWithdrawalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceRejectAchWithdrawal_js_1.testSimulationForceRejectAchWithdrawal)(this, forceRejectAchWithdrawalRequestCreate, accountId, achWithdrawalId, options));
    }
    /**
     * ACH Withdrawal Return
     *
     * @remarks
     * Forces a Nacha return on a completed ACH withdrawal. FOR TESTING ONLY!
     */
    async forceReturnAchWithdrawal(forceReturnAchWithdrawalRequestCreate, accountId, achWithdrawalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceReturnAchWithdrawal_js_1.testSimulationForceReturnAchWithdrawal)(this, forceReturnAchWithdrawalRequestCreate, accountId, achWithdrawalId, options));
    }
    /**
     * Get Relationship Micro Deposit Verification
     *
     * @remarks
     * Gets micro deposit amounts for bank relationships with the `MICRO_DEPOSIT` verification method. FOR TESTING ONLY!
     */
    async getMicroDepositAmounts(accountId, bankRelationshipId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationGetMicroDepositAmounts_js_1.testSimulationGetMicroDepositAmounts)(this, accountId, bankRelationshipId, options));
    }
    /**
     * Force Approve ICT Deposit
     *
     * @remarks
     * Forces an approval on an existing ICT deposit pending review - FOR TESTING
     */
    async forceApproveIctDeposit(forceApproveIctDepositRequestCreate, accountId, ictDepositId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceApproveIctDeposit_js_1.testSimulationForceApproveIctDeposit)(this, forceApproveIctDepositRequestCreate, accountId, ictDepositId, options));
    }
    /**
     * Force Reject ICT Deposit
     *
     * @remarks
     * Forces a rejection on an existing ICT deposit pending review - FOR TESTING
     */
    async forceRejectIctDeposit(forceRejectIctDepositRequestCreate, accountId, ictDepositId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceRejectIctDeposit_js_1.testSimulationForceRejectIctDeposit)(this, forceRejectIctDepositRequestCreate, accountId, ictDepositId, options));
    }
    /**
     * Force Approve ICT Withdrawal
     *
     * @remarks
     * Forces an approval on an existing ICT withdrawal pending review - FOR TESTING
     */
    async forceApproveIctWithdrawal(forceApproveIctWithdrawalRequestCreate, accountId, ictWithdrawalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceApproveIctWithdrawal_js_1.testSimulationForceApproveIctWithdrawal)(this, forceApproveIctWithdrawalRequestCreate, accountId, ictWithdrawalId, options));
    }
    /**
     * Force Reject ICT Withdrawal
     *
     * @remarks
     * Forces a rejection on an existing ICT withdrawal pending review - FOR TESTING
     */
    async forceRejectIctWithdrawal(forceRejectIctWithdrawalRequestCreate, accountId, ictWithdrawalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceRejectIctWithdrawal_js_1.testSimulationForceRejectIctWithdrawal)(this, forceRejectIctWithdrawalRequestCreate, accountId, ictWithdrawalId, options));
    }
    /**
     * Force Approve Wire Withdrawal
     *
     * @remarks
     * Forces an approval on an existing wire withdrawal pending review - FOR TESTING
     */
    async forceApproveWireWithdrawal(forceApproveWireWithdrawalRequestCreate, accountId, wireWithdrawalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceApproveWireWithdrawal_js_1.testSimulationForceApproveWireWithdrawal)(this, forceApproveWireWithdrawalRequestCreate, accountId, wireWithdrawalId, options));
    }
    /**
     * Force Reject Wire Withdrawal
     *
     * @remarks
     * Forces a rejection on an existing wire withdrawal pending review - FOR TESTING
     */
    async forceRejectWireWithdrawal(forceRejectWireWithdrawalRequestCreate, accountId, wireWithdrawalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceRejectWireWithdrawal_js_1.testSimulationForceRejectWireWithdrawal)(this, forceRejectWireWithdrawalRequestCreate, accountId, wireWithdrawalId, options));
    }
    /**
     * Force Approve Cash Journal
     *
     * @remarks
     * Forces approval of an existing cash journal that is pending review FOR TESTING ONLY!
     */
    async forceApproveCashJournal(forceApproveCashJournalRequestCreate, cashJournalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceApproveCashJournal_js_1.testSimulationForceApproveCashJournal)(this, forceApproveCashJournalRequestCreate, cashJournalId, options));
    }
    /**
     * Force Reject Cash Journal
     *
     * @remarks
     * Forces rejection of an existing cash journal that is pending review FOR TESTING ONLY!
     */
    async forceRejectCashJournal(forceRejectCashJournalRequestCreate, cashJournalId, options) {
        return (0, fp_js_1.unwrapAsync)((0, testSimulationForceRejectCashJournal_js_1.testSimulationForceRejectCashJournal)(this, forceRejectCashJournalRequestCreate, cashJournalId, options));
    }
}
exports.TestSimulation = TestSimulation;
//# sourceMappingURL=testsimulation.js.map