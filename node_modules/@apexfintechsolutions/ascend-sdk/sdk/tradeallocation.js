"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeAllocation = void 0;
const tradeAllocationCancelTradeAllocation_js_1 = require("../funcs/tradeAllocationCancelTradeAllocation.js");
const tradeAllocationCreateTradeAllocation_js_1 = require("../funcs/tradeAllocationCreateTradeAllocation.js");
const tradeAllocationGetTradeAllocation_js_1 = require("../funcs/tradeAllocationGetTradeAllocation.js");
const tradeAllocationRebookTradeAllocation_js_1 = require("../funcs/tradeAllocationRebookTradeAllocation.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class TradeAllocation extends sdks_js_1.ClientSDK {
    /**
     * Create Trade Allocation
     *
     * @remarks
     * Creates a new trade allocation. These are used to allocate or distribute positions between Apex accounts.
     *
     *  Upon success, returns the created trade allocation and its enriched details.
     */
    async createTradeAllocation(tradeAllocationCreate, accountId, requestId, options) {
        return (0, fp_js_1.unwrapAsync)((0, tradeAllocationCreateTradeAllocation_js_1.tradeAllocationCreateTradeAllocation)(this, tradeAllocationCreate, accountId, requestId, options));
    }
    /**
     * Get Trade Allocation
     *
     * @remarks
     * Retrieves a trade allocation and its details.
     *
     *  Upon successful submission, returns the trade allocation details.
     */
    async getTradeAllocation(accountId, tradeAllocationId, options) {
        return (0, fp_js_1.unwrapAsync)((0, tradeAllocationGetTradeAllocation_js_1.tradeAllocationGetTradeAllocation)(this, accountId, tradeAllocationId, options));
    }
    /**
     * Cancel Trade Allocation
     *
     * @remarks
     * Cancel a trade allocation using the original trade_allocation_id.
     *
     *  Upon successful submission, returns an empty response. CancelTradeAllocation will either cancel everything, or nothing at all if a failure occurs.
     */
    async cancelTradeAllocation(cancelTradeAllocationRequestCreate, accountId, tradeAllocationId, options) {
        return (0, fp_js_1.unwrapAsync)((0, tradeAllocationCancelTradeAllocation_js_1.tradeAllocationCancelTradeAllocation)(this, cancelTradeAllocationRequestCreate, accountId, tradeAllocationId, options));
    }
    /**
     * Rebook Trade Allocation
     *
     * @remarks
     * Rebook a trade allocation by the original trade_allocation_id. The allocation is rebooked by canceling the original allocation and creating a new one with the provided details.
     *
     *  Upon successful submission, returns both the original and new allocation, as separate resources.
     */
    async rebookTradeAllocation(rebookTradeAllocationRequestCreate, accountId, tradeAllocationId, options) {
        return (0, fp_js_1.unwrapAsync)((0, tradeAllocationRebookTradeAllocation_js_1.tradeAllocationRebookTradeAllocation)(this, rebookTradeAllocationRequestCreate, accountId, tradeAllocationId, options));
    }
}
exports.TradeAllocation = TradeAllocation;
//# sourceMappingURL=tradeallocation.js.map