"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasketOrders = void 0;
const basketOrdersAddOrders_js_1 = require("../funcs/basketOrdersAddOrders.js");
const basketOrdersCreateBasket_js_1 = require("../funcs/basketOrdersCreateBasket.js");
const basketOrdersGetBasket_js_1 = require("../funcs/basketOrdersGetBasket.js");
const basketOrdersListBasketOrders_js_1 = require("../funcs/basketOrdersListBasketOrders.js");
const basketOrdersListCompressedOrders_js_1 = require("../funcs/basketOrdersListCompressedOrders.js");
const basketOrdersSubmitBasket_js_1 = require("../funcs/basketOrdersSubmitBasket.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class BasketOrders extends sdks_js_1.ClientSDK {
    /**
     * Create Basket
     *
     * @remarks
     * Creates an empty basket
     *
     *  Upon successful submission, if the request is a duplicate, returns the existing basket in its current state in the system. If the request is not a duplicate, returns the summary of the newly created basket.
     */
    async createBasket(basketCreate, correspondentId, options) {
        return (0, fp_js_1.unwrapAsync)((0, basketOrdersCreateBasket_js_1.basketOrdersCreateBasket)(this, basketCreate, correspondentId, options));
    }
    /**
     * Add Orders
     *
     * @remarks
     * Adds a list of basket orders to a basket
     *
     *  Upon successful submission, returns the basket with a new total count of orders within the basket
     */
    async addOrders(addOrdersRequestCreate, correspondentId, basketId, options) {
        return (0, fp_js_1.unwrapAsync)((0, basketOrdersAddOrders_js_1.basketOrdersAddOrders)(this, addOrdersRequestCreate, correspondentId, basketId, options));
    }
    /**
     * Get Basket
     *
     * @remarks
     * Gets a basket by basket ID.
     *
     *  Upon successful submission, returns the details of the queried basket
     */
    async getBasket(correspondentId, basketId, options) {
        return (0, fp_js_1.unwrapAsync)((0, basketOrdersGetBasket_js_1.basketOrdersGetBasket)(this, correspondentId, basketId, options));
    }
    /**
     * Submit Basket
     *
     * @remarks
     * Submits a basket for execution in the market
     *
     *  Upon successful submission, if the request is a duplicate, returns the existing basket in its current state in the system. If the request is not a duplicate, returns the summary of the newly submitted basket in a SUBMITTED state
     */
    async submitBasket(submitBasketRequestCreate, correspondentId, basketId, options) {
        return (0, fp_js_1.unwrapAsync)((0, basketOrdersSubmitBasket_js_1.basketOrdersSubmitBasket)(this, submitBasketRequestCreate, correspondentId, basketId, options));
    }
    /**
     * List Basket Orders
     *
     * @remarks
     * Gets a list of basket orders within a basket.
     *
     *  Upon successful submission, returns a list of basket orders for the basket. If the list of basket orders becomes too large, a token is returned to retrieve the next page of basket orders.
     */
    async listBasketOrders(correspondentId, basketId, pageSize, pageToken, options) {
        return (0, fp_js_1.unwrapAsync)((0, basketOrdersListBasketOrders_js_1.basketOrdersListBasketOrders)(this, correspondentId, basketId, pageSize, pageToken, options));
    }
    /**
     * List Compressed Orders
     *
     * @remarks
     * Gets a list of compressed orders within a basket.
     *
     *  Upon successful submission, returns a list of compressed orders for the basket. If the basket has not been submitted yet, this list will be empty. If the list of compressed orders becomes too large, a token is returned to retrieve the next page of compressed orders.
     */
    async listCompressedOrders(correspondentId, basketId, pageSize, pageToken, options) {
        return (0, fp_js_1.unwrapAsync)((0, basketOrdersListCompressedOrders_js_1.basketOrdersListCompressedOrders)(this, correspondentId, basketId, pageSize, pageToken, options));
    }
}
exports.BasketOrders = BasketOrders;
//# sourceMappingURL=basketorders.js.map