import * as z from "zod";
import { OpenEnum } from "../../types/enums.js";
import { AccruedInterest, AccruedInterest$Outbound } from "./accruedinterest.js";
import { Commission, Commission$Outbound } from "./commission.js";
import { Fee, Fee$Outbound } from "./fee.js";
import { Lot, Lot$Outbound } from "./lot.js";
import { Withholding, Withholding$Outbound } from "./withholding.js";
import { WithholdingData, WithholdingData$Outbound } from "./withholdingdata.js";
import { YieldRecord, YieldRecord$Outbound } from "./yieldrecord.js";
/**
 * Used to record the movement of funds or shares to/ from the pending_acats memo location
 */
export type ActivityAcatsPendingOut = {
    /**
     * Unique Identifier generated by the NSCC ACATS when a transfer is initiated or submitted
     */
    acatsControlNumber?: string | undefined;
    /**
     * Free form text field containing additional information about a transaction
     */
    additionalInstructions?: string | undefined;
};
/**
 * Indicates the memo location impacted by an entry
 */
export declare enum ActivityAccountMemo {
    MemoTypeUnspecified = "MEMO_TYPE_UNSPECIFIED",
    FullyPaidStockLoan = "FULLY_PAID_STOCK_LOAN",
    Free = "FREE",
    PendingOutgoingAcat = "PENDING_OUTGOING_ACAT",
    PendingDrip = "PENDING_DRIP",
    PendingWithdrawal = "PENDING_WITHDRAWAL"
}
/**
 * Indicates the memo location impacted by an entry
 */
export type ActivityAccountMemoOpen = OpenEnum<typeof ActivityAccountMemo>;
/**
 * Denotes whether the shares are incoming or outgoing
 */
export declare enum ActivityAction {
    ActionUnspecified = "ACTION_UNSPECIFIED",
    Incoming = "INCOMING",
    Outgoing = "OUTGOING",
    CashInLieu = "CASH_IN_LIEU"
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityActionOpen = OpenEnum<typeof ActivityAction>;
/**
 * The method used for the account transfer
 */
export declare enum ActivityMethod {
    AccountTransferMethodUnspecified = "ACCOUNT_TRANSFER_METHOD_UNSPECIFIED",
    Acats = "ACATS",
    Internal = "INTERNAL",
    Manual = "MANUAL"
}
/**
 * The method used for the account transfer
 */
export type ActivityMethodOpen = OpenEnum<typeof ActivityMethod>;
/**
 * Used to record the movement of funds or shares during the bookkeeping phase of an account transfer and details related to the account transfer
 */
export type ActivityAccountTransfer = {
    /**
     * Sequence number assigned by the DTCC ACATS transfer system for each asset transferred
     */
    acatsAssetSequenceNumber?: string | undefined;
    /**
     * Unique Identifier generated by the NSCC ACATS when a transfer is initiated or submitted
     */
    acatsControlNumber?: string | undefined;
    /**
     * Denotes whether the shares are incoming or outgoing
     */
    action?: ActivityActionOpen | undefined;
    /**
     * Free form text field containing additional information about a transaction
     */
    additionalInstructions?: string | undefined;
    /**
     * Account number at the contra firm
     */
    contraPartyAccountNumber?: string | undefined;
    /**
     * Contra party identifier
     */
    contraPartyId?: string | undefined;
    /**
     * Contra party institution for the account transfer
     */
    institution?: string | undefined;
    /**
     * The method used for the account transfer
     */
    method?: ActivityMethodOpen | undefined;
};
/**
 * Used to record the amount of interest that has been earned but not yet paid between the last interest payment and the date of the trade
 */
export type AccruedInterestDesc = {};
/**
 * The activity date refers to the specific calendar day on which a financial transaction, such as a trade at an exchange or a deposit at a bank, was executed. This date is specific to the institution where the transaction took place, capturing the exact day on which the institution formally records and effects the transaction
 */
export type ActivityActivityDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivityCapitalGainsQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Used to record a distribution of cash that an issuer has determined will be declared as income financed from capital gains and not ordinary income and details related to the capital gain
 */
export type ActivityCapitalGains = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityCorporateActionGeneralInformation | null | undefined;
    /**
     * Can indicate the capital gain is eligible for preferential tax treatment
     */
    longTermGain?: boolean | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityPaymentDate | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivityCapitalGainsQuantity | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivityRecordDate | null | undefined;
    /**
     * Indicates whether the cash dividend was reinvested
     */
    reinvested?: boolean | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityCashDividendCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Number of shares loaned out via the FPSL program on record_date
 */
export type ActivityCashDividendFpsl = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Number of shares not loaned out via the FPSL program on record_date
 */
export type ActivityFree = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityCashDividendPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * When ex-date occurs before the record date, quantity will equal the settled date position balance on the position date of the event When ex-date occurs after the record date, quantity will equal the trade date position balance on the position date of the event
 */
export type ActivityCashDividendQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityCashDividendRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivitySettled = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The subtype for the corporate action event
 */
export declare enum ActivitySubtype {
    CorporateactionsubtypeUnspecified = "CORPORATEACTIONSUBTYPE_UNSPECIFIED",
    AdditionalDividend = "ADDITIONAL_DIVIDEND",
    ApproximateRate = "APPROXIMATE_RATE",
    DividendArrears = "DIVIDEND_ARREARS",
    DividendCancelled = "DIVIDEND_CANCELLED",
    DividendPaymentTaxClassifications = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS",
    DividendRescinded = "DIVIDEND_RESCINDED",
    EstimatedReturnOfCapital = "ESTIMATED_RETURN_OF_CAPITAL",
    EstimatedReturnOfCapitalPlusIncome = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME",
    ExtraDividend = "EXTRA_DIVIDEND",
    ExtraDividendPlusIncome = "EXTRA_DIVIDEND_PLUS_INCOME",
    FinalPaymentTransferBooksAreClosed = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED",
    GrossRate = "GROSS_RATE",
    InitialDividend = "INITIAL_DIVIDEND",
    InitialDividendLongPeriod = "INITIAL_DIVIDEND_LONG_PERIOD",
    InitialDividendShortPeriod = "INITIAL_DIVIDEND_SHORT_PERIOD",
    LimitedPartnershipDistribution = "LIMITED_PARTNERSHIP_DISTRIBUTION",
    Liquidation = "LIQUIDATION",
    NetRate = "NET_RATE",
    Other = "OTHER",
    ProceedsFromSaleOfRights = "PROCEEDS_FROM_SALE_OF_RIGHTS",
    RegularDividend = "REGULAR_DIVIDEND",
    ReturnOfCapital = "RETURN_OF_CAPITAL",
    ReturnOfCapitalPlusIncome = "RETURN_OF_CAPITAL_PLUS_INCOME",
    SpecialDividend = "SPECIAL_DIVIDEND",
    SpecialDividendPlusIncome = "SPECIAL_DIVIDEND_PLUS_INCOME",
    YearEndDividend = "YEAR_END_DIVIDEND",
    YearEndDividendPlusIncome = "YEAR_END_DIVIDEND_PLUS_INCOME",
    Partial = "PARTIAL",
    Full = "FULL",
    Maturity = "MATURITY",
    Termination = "TERMINATION",
    RedemptionOfWarrants = "REDEMPTION_OF_WARRANTS"
}
/**
 * The subtype for the corporate action event
 */
export type ActivitySubtypeOpen = OpenEnum<typeof ActivitySubtype>;
/**
 * Used to record the distribution of cash to shareholders, paid by the issuer, usually based upon current earnings and/or accumulated profits as declared by the board of directors and details related to the cash dividend
 */
export type ActivityCashDividend = {
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityCashDividendCorporateActionGeneralInformation | null | undefined;
    /**
     * Number of shares loaned out via the FPSL program on record_date
     */
    fpsl?: ActivityCashDividendFpsl | null | undefined;
    /**
     * Number of shares not loaned out via the FPSL program on record_date
     */
    free?: ActivityFree | null | undefined;
    /**
     * Can indicate the capital gain is eligible for preferential tax treatment
     */
    longTermGain?: boolean | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityCashDividendPaymentDate | null | undefined;
    /**
     * If populated, can indicates whether the transaction may be taxed at a preferential rate
     */
    qualified?: boolean | undefined;
    /**
     * When ex-date occurs before the record date, quantity will equal the settled date position balance on the position date of the event When ex-date occurs after the record date, quantity will equal the trade date position balance on the position date of the event
     */
    quantity?: ActivityCashDividendQuantity | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivityCashDividendRecordDate | null | undefined;
    /**
     * Indicates whether the cash dividend was reinvested
     */
    reinvested?: boolean | undefined;
    /**
     * The accounts settled position for which the corporate action was paid
     */
    settled?: ActivitySettled | null | undefined;
    /**
     * Indicates that this portion of the dividend was paid on a position that is currently loaned out
     */
    substitutePayment?: boolean | undefined;
    /**
     * The subtype for the corporate action event
     */
    subtype?: ActivitySubtypeOpen | undefined;
};
/**
 * Used to record commission charged by brokers or financial intermediaries for executing financial transactions on behalf of clients
 */
export type ActivityCommission = {};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityConversionCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityConversionCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityStockRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The subtype for the corporate action event
 */
export declare enum ActivityConversionType {
    EventTypeUnspecified = "EVENT_TYPE_UNSPECIFIED",
    Cash = "CASH",
    Stock = "STOCK",
    CashAndStock = "CASH_AND_STOCK"
}
/**
 * The subtype for the corporate action event
 */
export type ActivityConversionTypeOpen = OpenEnum<typeof ActivityConversionType>;
/**
 * Used to record the conversion of securities (generally convertible bonds or preferred shares) into another form of securities (usually common shares) at a pre-stated price or rate and details related to the conversion
 */
export type ActivityConversion = {
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityConversionCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityConversionCorporateActionGeneralInformation | null | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
     */
    stockRate?: ActivityStockRate | null | undefined;
    /**
     * The subtype for the corporate action event
     */
    type?: ActivityConversionTypeOpen | undefined;
};
/**
 * Used to record memo location adjustments initiated by the corporate action system due to reorg events
 */
export type ActivityCorporateActionMemoAdjustment = {
    /**
     * This field serves as a unique identifier for the specific corporate action linked to the memo adjustment
     */
    corporateActionId?: string | undefined;
    /**
     * Used to capture the specific type of corporate action related to the memo adjustment
     */
    corporateActionType?: string | undefined;
};
/**
 * Further detail describing the type of credit
 */
export declare enum ActivityCreditType {
    CreditTypeUnspecified = "CREDIT_TYPE_UNSPECIFIED",
    FullyPaidStockLoan = "FULLY_PAID_STOCK_LOAN",
    WriteOff = "WRITE_OFF",
    Reimbursement = "REIMBURSEMENT",
    Promotional = "PROMOTIONAL",
    FdicInsuredDepositProgram = "FDIC_INSURED_DEPOSIT_PROGRAM",
    AccountTransferAdjustment = "ACCOUNT_TRANSFER_ADJUSTMENT"
}
/**
 * Further detail describing the type of credit
 */
export type ActivityCreditTypeOpen = OpenEnum<typeof ActivityCreditType>;
/**
 * Used to disburse funds into a customer's account, typically for purposes such as refunds, interest payments, or rewards from enrolled programs and details related to the credit
 */
export type ActivityCredit = {
    /**
     * Free form text field providing additional information about a transaction
     */
    additionalInstructions?: string | undefined;
    /**
     * Further detail describing the type of credit
     */
    creditType?: ActivityCreditTypeOpen | undefined;
    /**
     * No longer applicable
     */
    taxable?: boolean | undefined;
};
/**
 * Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
 */
export declare enum ActivityContributionType {
    ContributionTypeUnspecified = "CONTRIBUTION_TYPE_UNSPECIFIED",
    Regular = "REGULAR",
    Employee = "EMPLOYEE",
    Employer = "EMPLOYER",
    Recharacterization = "RECHARACTERIZATION",
    Rollover60Day = "ROLLOVER_60_DAY",
    RolloverDirect = "ROLLOVER_DIRECT",
    Transfer = "TRANSFER",
    TrusteeFee = "TRUSTEE_FEE",
    Conversion = "CONVERSION",
    Repayment = "REPAYMENT",
    ContributionNonReportable = "CONTRIBUTION_NON_REPORTABLE"
}
/**
 * Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
 */
export type ActivityContributionTypeOpen = OpenEnum<typeof ActivityContributionType>;
/**
 * The mechanism by which funds were deposited
 */
export declare enum ActivityDepositType {
    ExternalMovementTypeUnspecified = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED",
    Ach = "ACH",
    Check = "CHECK",
    Wire = "WIRE",
    Paypal = "PAYPAL",
    Rtp = "RTP",
    Ict = "ICT",
    Journal = "JOURNAL"
}
/**
 * The mechanism by which funds were deposited
 */
export type ActivityDepositTypeOpen = OpenEnum<typeof ActivityDepositType>;
/**
 * Used to record deposits of funds into an account and capture details related to the deposit
 */
export type ActivityDeposit = {
    /**
     * Free form text field providing additional information about a transaction
     */
    additionalInstructions?: string | undefined;
    /**
     * Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
     */
    contributionType?: ActivityContributionTypeOpen | undefined;
    /**
     * Integer representing the tax year the contribution should be applied to
     */
    contributionYear?: number | undefined;
    /**
     * Unique tracking number provided to allow tracking a wire transfer from the initiating bank to the receiving bank
     */
    fedReferenceNumber?: string | undefined;
    /**
     * Human readable account identifier for the account the assets were journaled from. To be populated when the Deposit type is Journal
     */
    originatingAccountNumber?: string | undefined;
    /**
     * The mechanism by which funds were deposited
     */
    type?: ActivityDepositTypeOpen | undefined;
};
/**
 * Denotes whether the reinvestment is pending or complete
 */
export declare enum ActivityDripAction {
    DripActionUnspecified = "DRIP_ACTION_UNSPECIFIED",
    DripPending = "DRIP_PENDING",
    DripComplete = "DRIP_COMPLETE"
}
/**
 * Denotes whether the reinvestment is pending or complete
 */
export type ActivityDripActionOpen = OpenEnum<typeof ActivityDripAction>;
/**
 * Used to record the movement of funds to/ from the pending_drip memo location
 */
export type ActivityDrip = {
    /**
     * Denotes whether the reinvestment is pending or complete
     */
    action?: ActivityDripActionOpen | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityExchangeCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityExchangeCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityExchangeStockRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Indicates whether the merger was for cash, stock, or both
 */
export declare enum ActivityExchangeType {
    EventTypeUnspecified = "EVENT_TYPE_UNSPECIFIED",
    Cash = "CASH",
    Stock = "STOCK",
    CashAndStock = "CASH_AND_STOCK"
}
/**
 * Indicates whether the merger was for cash, stock, or both
 */
export type ActivityExchangeTypeOpen = OpenEnum<typeof ActivityExchangeType>;
/**
 * Used to record the exchange of certificates for a new security or cash and details related to the exchange
 */
export type ActivityExchange = {
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityExchangeCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityExchangeCorporateActionGeneralInformation | null | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
     */
    stockRate?: ActivityExchangeStockRate | null | undefined;
    /**
     * Indicates whether the merger was for cash, stock, or both
     */
    type?: ActivityExchangeTypeOpen | undefined;
};
/**
 * Used to record Fees that have been assessed to account and capture details related to the fee
 */
export type ActivityFee = {
    /**
     * Free form text field providing additional information about a transaction
     */
    additionalInstructions?: string | undefined;
};
/**
 * Denotes whether the shares are incoming or outgoing
 */
export declare enum ActivityFpslAction {
    FpslActionUnspecified = "FPSL_ACTION_UNSPECIFIED",
    Allocate = "ALLOCATE",
    Deallocate = "DEALLOCATE"
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityFpslActionOpen = OpenEnum<typeof ActivityFpslAction>;
/**
 * Used to record the movements of shares to/ from the fpsl memo location and details related to the fpsl memo
 */
export type ActivityFpsl = {
    /**
     * Denotes whether the shares are incoming or outgoing
     */
    action?: ActivityFpslActionOpen | undefined;
};
/**
 * The monetary value of an activity, exclusive of any fees, withholdings, accrued_interest, or commissions (First money)
 */
export type ActivityGrossAmount = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Date on which interest accrues before the calculation is made for payment or charge
 */
export type ActivityInterestAccrualEndDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Date on which interest begins to accrue on a cash balance or borrowed funds
 */
export type ActivityInterestAccrualStartDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
export declare enum ActivityInterestType {
    InterestTypeUnspecified = "INTEREST_TYPE_UNSPECIFIED",
    Credit = "CREDIT",
    Debit = "DEBIT"
}
export type ActivityInterestTypeOpen = OpenEnum<typeof ActivityInterestType>;
/**
 * Used to record the payment of interest to accounts that have maintained a cash balance or the charging of interest to accounts that have used margin and details related to the interest
 */
export type ActivityInterest = {
    /**
     * Date on which interest accrues before the calculation is made for payment or charge
     */
    interestAccrualEndDate?: ActivityInterestAccrualEndDate | null | undefined;
    /**
     * Date on which interest begins to accrue on a cash balance or borrowed funds
     */
    interestAccrualStartDate?: ActivityInterestAccrualStartDate | null | undefined;
    interestType?: ActivityInterestTypeOpen | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityInterestPaymentCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityInterestPaymentCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityInterestPaymentPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityInterestPaymentRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivityInterestPaymentSettled = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used to record the The payment of an obligation an issuer has agreed to make to holders of an interest-bearing security and details related to the interest payment. Usually, the payment is made in cash and on a scheduled basis
 */
export type ActivityInterestPayment = {
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityInterestPaymentCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityInterestPaymentCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityInterestPaymentPaymentDate | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivityInterestPaymentRecordDate | null | undefined;
    /**
     * The accounts settled position for which the corporate action was paid
     */
    settled?: ActivityInterestPaymentSettled | null | undefined;
};
/**
 * Denotes whether the shares are incoming or outgoing
 */
export declare enum ActivityLiquidationAction {
    ActionUnspecified = "ACTION_UNSPECIFIED",
    Incoming = "INCOMING",
    Outgoing = "OUTGOING",
    CashInLieu = "CASH_IN_LIEU"
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityLiquidationActionOpen = OpenEnum<typeof ActivityLiquidationAction>;
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityLiquidationCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityLiquidationCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
 */
export type ActivityEffectiveDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityLiquidationPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivityLiquidationQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityLiquidationRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivityLiquidationSettled = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The subtype for the corporate action event
 */
export declare enum ActivityLiquidationSubtype {
    CorporateactionsubtypeUnspecified = "CORPORATEACTIONSUBTYPE_UNSPECIFIED",
    AdditionalDividend = "ADDITIONAL_DIVIDEND",
    ApproximateRate = "APPROXIMATE_RATE",
    DividendArrears = "DIVIDEND_ARREARS",
    DividendCancelled = "DIVIDEND_CANCELLED",
    DividendPaymentTaxClassifications = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS",
    DividendRescinded = "DIVIDEND_RESCINDED",
    EstimatedReturnOfCapital = "ESTIMATED_RETURN_OF_CAPITAL",
    EstimatedReturnOfCapitalPlusIncome = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME",
    ExtraDividend = "EXTRA_DIVIDEND",
    ExtraDividendPlusIncome = "EXTRA_DIVIDEND_PLUS_INCOME",
    FinalPaymentTransferBooksAreClosed = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED",
    GrossRate = "GROSS_RATE",
    InitialDividend = "INITIAL_DIVIDEND",
    InitialDividendLongPeriod = "INITIAL_DIVIDEND_LONG_PERIOD",
    InitialDividendShortPeriod = "INITIAL_DIVIDEND_SHORT_PERIOD",
    LimitedPartnershipDistribution = "LIMITED_PARTNERSHIP_DISTRIBUTION",
    Liquidation = "LIQUIDATION",
    NetRate = "NET_RATE",
    Other = "OTHER",
    ProceedsFromSaleOfRights = "PROCEEDS_FROM_SALE_OF_RIGHTS",
    RegularDividend = "REGULAR_DIVIDEND",
    ReturnOfCapital = "RETURN_OF_CAPITAL",
    ReturnOfCapitalPlusIncome = "RETURN_OF_CAPITAL_PLUS_INCOME",
    SpecialDividend = "SPECIAL_DIVIDEND",
    SpecialDividendPlusIncome = "SPECIAL_DIVIDEND_PLUS_INCOME",
    YearEndDividend = "YEAR_END_DIVIDEND",
    YearEndDividendPlusIncome = "YEAR_END_DIVIDEND_PLUS_INCOME",
    Partial = "PARTIAL",
    Full = "FULL",
    Maturity = "MATURITY",
    Termination = "TERMINATION",
    RedemptionOfWarrants = "REDEMPTION_OF_WARRANTS"
}
/**
 * The subtype for the corporate action event
 */
export type ActivityLiquidationSubtypeOpen = OpenEnum<typeof ActivityLiquidationSubtype>;
/**
 * Used to record the dismantling of a business by an issuer, paying off debts in order of priority and distributing the remaining assets in cash and/or securities to the owners of the securities and details related to the liquidation
 */
export type ActivityLiquidation = {
    /**
     * Denotes whether the shares are incoming or outgoing
     */
    action?: ActivityLiquidationActionOpen | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityLiquidationCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityLiquidationCorporateActionGeneralInformation | null | undefined;
    /**
     * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
     */
    effectiveDate?: ActivityEffectiveDate | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityLiquidationPaymentDate | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivityLiquidationQuantity | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivityLiquidationRecordDate | null | undefined;
    /**
     * The accounts settled position for which the corporate action was paid
     */
    settled?: ActivityLiquidationSettled | null | undefined;
    /**
     * The subtype for the corporate action event
     */
    subtype?: ActivityLiquidationSubtypeOpen | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityMaturityCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityMaturityCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository.
 */
export type ActivityMaturityPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The trade position quantity used to calculate the disbursed amount
 */
export type ActivityMaturityQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used to record he final repayment, usually in cash, by an issuer for the entire issue, or remaining outstanding securities of a specific security on a specified date and details related to the maturity
 */
export type ActivityMaturity = {
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityMaturityCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityMaturityCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository.
     */
    paymentDate?: ActivityMaturityPaymentDate | null | undefined;
    /**
     * The trade position quantity used to calculate the disbursed amount
     */
    quantity?: ActivityMaturityQuantity | null | undefined;
};
/**
 * Denotes whether the shares are incoming or outgoing
 */
export declare enum ActivityMergerAction {
    ActionUnspecified = "ACTION_UNSPECIFIED",
    Incoming = "INCOMING",
    Outgoing = "OUTGOING",
    CashInLieu = "CASH_IN_LIEU"
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityMergerActionOpen = OpenEnum<typeof ActivityMergerAction>;
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityMergerCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityMergerCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
 */
export type ActivityMergerEffectiveDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivityMergerQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityMergerStockRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The subtype for the corporate action event
 */
export declare enum ActivityMergerType {
    EventTypeUnspecified = "EVENT_TYPE_UNSPECIFIED",
    Cash = "CASH",
    Stock = "STOCK",
    CashAndStock = "CASH_AND_STOCK"
}
/**
 * The subtype for the corporate action event
 */
export type ActivityMergerTypeOpen = OpenEnum<typeof ActivityMergerType>;
/**
 * Used to record the exchange of one company's security for another company's security, cash, or a combination of cash and securities and details related to the merger
 */
export type ActivityMerger = {
    /**
     * Denotes whether the shares are incoming or outgoing
     */
    action?: ActivityMergerActionOpen | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityMergerCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityMergerCorporateActionGeneralInformation | null | undefined;
    /**
     * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
     */
    effectiveDate?: ActivityMergerEffectiveDate | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivityMergerQuantity | null | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
     */
    stockRate?: ActivityMergerStockRate | null | undefined;
    /**
     * The subtype for the corporate action event
     */
    type?: ActivityMergerTypeOpen | undefined;
};
/**
 * Denotes whether the shares are incoming or outgoing
 */
export declare enum ActivityNameChangeAction {
    ActionUnspecified = "ACTION_UNSPECIFIED",
    Incoming = "INCOMING",
    Outgoing = "OUTGOING",
    CashInLieu = "CASH_IN_LIEU"
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityNameChangeActionOpen = OpenEnum<typeof ActivityNameChangeAction>;
/**
 * Common fields for corporate actions
 */
export type ActivityNameChangeCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
 */
export type ActivityNameChangeEffectiveDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivityNameChangeQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used to record changes in the name of a security/securities by the issuer which result in surrendering physical securities or the assigning of a new security identifier which result in new securities being issued and details related to the name changes
 */
export type ActivityNameChange = {
    /**
     * Denotes whether the shares are incoming or outgoing
     */
    action?: ActivityNameChangeActionOpen | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityNameChangeCorporateActionGeneralInformation | null | undefined;
    /**
     * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
     */
    effectiveDate?: ActivityNameChangeEffectiveDate | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivityNameChangeQuantity | null | undefined;
};
/**
 * The monetary value of an activity, inclusive of fees, withholding, commisions, etc (Second Money)
 */
export type ActivityNetAmount = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * the process date of the next activity(nil if the next_activity_id is an empty string)
 */
export type NextActivityProcessDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * None
 */
export type None = {};
/**
 * Common fields for corporate actions
 */
export type ActivityPaymentInKindCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityPaymentInKindPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityPaymentInKindRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Corresponds to the position's settled quantity
 */
export type ActivityPaymentInKindSettled = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityPaymentInKindStockRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used to record payments on interest-bearing securities where the payment is made in additional securities rather than cash and details related to the payment
 */
export type ActivityPaymentInKind = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityPaymentInKindCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityPaymentInKindPaymentDate | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivityPaymentInKindRecordDate | null | undefined;
    /**
     * Corresponds to the position's settled quantity
     */
    settled?: ActivityPaymentInKindSettled | null | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
     */
    stockRate?: ActivityPaymentInKindStockRate | null | undefined;
};
/**
 * When populated, the processing_date of the previous_activity_id
 */
export type PreviousProcessDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The monetary value paid for a given security in a trade Not populated on a currency only movement
 */
export type ActivityPrice = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The date that the activity was booked to the ledger
 */
export type ActivityProcessDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The quantity of shares bought, sold, or moved for a given entry/activity Required if activity.state != PENDING
 */
export type ActivityQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Denotes whether the shares are incoming or outgoing
 */
export declare enum ActivityRedemptionFullAction {
    ActionUnspecified = "ACTION_UNSPECIFIED",
    Incoming = "INCOMING",
    Outgoing = "OUTGOING",
    CashInLieu = "CASH_IN_LIEU"
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityRedemptionFullActionOpen = OpenEnum<typeof ActivityRedemptionFullAction>;
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityRedemptionFullCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityRedemptionFullCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityRedemptionFullPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivityRedemptionFullQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The subtype for the corporate action event
 */
export declare enum ActivityRedemptionFullSubtype {
    CorporateactionsubtypeUnspecified = "CORPORATEACTIONSUBTYPE_UNSPECIFIED",
    AdditionalDividend = "ADDITIONAL_DIVIDEND",
    ApproximateRate = "APPROXIMATE_RATE",
    DividendArrears = "DIVIDEND_ARREARS",
    DividendCancelled = "DIVIDEND_CANCELLED",
    DividendPaymentTaxClassifications = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS",
    DividendRescinded = "DIVIDEND_RESCINDED",
    EstimatedReturnOfCapital = "ESTIMATED_RETURN_OF_CAPITAL",
    EstimatedReturnOfCapitalPlusIncome = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME",
    ExtraDividend = "EXTRA_DIVIDEND",
    ExtraDividendPlusIncome = "EXTRA_DIVIDEND_PLUS_INCOME",
    FinalPaymentTransferBooksAreClosed = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED",
    GrossRate = "GROSS_RATE",
    InitialDividend = "INITIAL_DIVIDEND",
    InitialDividendLongPeriod = "INITIAL_DIVIDEND_LONG_PERIOD",
    InitialDividendShortPeriod = "INITIAL_DIVIDEND_SHORT_PERIOD",
    LimitedPartnershipDistribution = "LIMITED_PARTNERSHIP_DISTRIBUTION",
    Liquidation = "LIQUIDATION",
    NetRate = "NET_RATE",
    Other = "OTHER",
    ProceedsFromSaleOfRights = "PROCEEDS_FROM_SALE_OF_RIGHTS",
    RegularDividend = "REGULAR_DIVIDEND",
    ReturnOfCapital = "RETURN_OF_CAPITAL",
    ReturnOfCapitalPlusIncome = "RETURN_OF_CAPITAL_PLUS_INCOME",
    SpecialDividend = "SPECIAL_DIVIDEND",
    SpecialDividendPlusIncome = "SPECIAL_DIVIDEND_PLUS_INCOME",
    YearEndDividend = "YEAR_END_DIVIDEND",
    YearEndDividendPlusIncome = "YEAR_END_DIVIDEND_PLUS_INCOME",
    Partial = "PARTIAL",
    Full = "FULL",
    Maturity = "MATURITY",
    Termination = "TERMINATION",
    RedemptionOfWarrants = "REDEMPTION_OF_WARRANTS"
}
/**
 * The subtype for the corporate action event
 */
export type ActivityRedemptionFullSubtypeOpen = OpenEnum<typeof ActivityRedemptionFullSubtype>;
/**
 * Used to record the redemption of a security for cash in its entirety for which the holders receive the principal amount of the security and details related to the redemption
 */
export type ActivityRedemptionFull = {
    /**
     * Denotes whether the shares are incoming or outgoing
     */
    action?: ActivityRedemptionFullActionOpen | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityRedemptionFullCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityRedemptionFullCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityRedemptionFullPaymentDate | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivityRedemptionFullQuantity | null | undefined;
    /**
     * The subtype for the corporate action event
     */
    subtype?: ActivityRedemptionFullSubtypeOpen | undefined;
};
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
export declare enum ActivityRedemptionPartialAction {
    ActionUnspecified = "ACTION_UNSPECIFIED",
    Incoming = "INCOMING",
    Outgoing = "OUTGOING",
    CashInLieu = "CASH_IN_LIEU"
}
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
export type ActivityRedemptionPartialActionOpen = OpenEnum<typeof ActivityRedemptionPartialAction>;
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityRedemptionPartialCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityRedemptionPartialCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityRedemptionPartialPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Corresponds to the position's trade quantity
 */
export type ActivityRedemptionPartialQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used when securities are redeemed by the issuer for cash, in part, before their scheduled maturity date and details related to the redemption. The outstanding amount of securities will be proportionally reduced based on a specific percentage of holding
 */
export type ActivityRedemptionPartial = {
    /**
     * Corresponds to whether the entry is incoming or outgoing
     */
    action?: ActivityRedemptionPartialActionOpen | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityRedemptionPartialCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityRedemptionPartialCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityRedemptionPartialPaymentDate | null | undefined;
    /**
     * Corresponds to the position's trade quantity
     */
    quantity?: ActivityRedemptionPartialQuantity | null | undefined;
};
/**
 * Denotes whether the shares are incoming or outgoing
 */
export declare enum ActivityReverseStockSplitAction {
    ActionUnspecified = "ACTION_UNSPECIFIED",
    Incoming = "INCOMING",
    Outgoing = "OUTGOING",
    CashInLieu = "CASH_IN_LIEU"
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityReverseStockSplitActionOpen = OpenEnum<typeof ActivityReverseStockSplitAction>;
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityReverseStockSplitCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityReverseStockSplitCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
 */
export type ActivityReverseStockSplitEffectiveDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The old rate of the security
 */
export type ActivityFactorDenominator = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The new rate of the security
 */
export type ActivityFactorNumerator = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivityReverseStockSplitQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used to record the exchange of a company's security for the same company's new security at a preset rate and details related to the reverse stock split
 */
export type ActivityReverseStockSplit = {
    /**
     * Denotes whether the shares are incoming or outgoing
     */
    action?: ActivityReverseStockSplitActionOpen | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityReverseStockSplitCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityReverseStockSplitCorporateActionGeneralInformation | null | undefined;
    /**
     * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
     */
    effectiveDate?: ActivityReverseStockSplitEffectiveDate | null | undefined;
    /**
     * The old rate of the security
     */
    factorDenominator?: ActivityFactorDenominator | null | undefined;
    /**
     * The new rate of the security
     */
    factorNumerator?: ActivityFactorNumerator | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivityReverseStockSplitQuantity | null | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityRightsDistributionCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityRightsDistributionPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityRightsDistributionRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivityRightsDistributionSettled = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used to record distributions to common stock holders of a company that grant the option to purchase new or additional securities of the same company during a predetermined time period at a predetermined price and details related to the rights distribution
 */
export type ActivityRightsDistribution = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityRightsDistributionCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityRightsDistributionPaymentDate | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivityRightsDistributionRecordDate | null | undefined;
    /**
     * The accounts settled position for which the corporate action was paid
     */
    settled?: ActivityRightsDistributionSettled | null | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityRightsSubscriptionCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Used to record the purchase of new or additional securities and details related to the subscription. Rights are often tradable in a secondary market
 */
export type ActivityRightsSubscription = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityRightsSubscriptionCorporateActionGeneralInformation | null | undefined;
};
/**
 * Used to record rounding adjustments when the sum(price x quantity) of all entries for a given activity do not equal the price x quantity of the fully formed activity record
 */
export type ActivityRoundingAdjustment = {
    /**
     * Free form text field providing reason for rounding
     */
    roundingReason?: string | undefined;
};
/**
 * the difference between the aggregation of gross_amount from the trade entries and the rounded gross_amount of the fully formed activity This amount can also be found as a rounding_adjustment entry
 */
export type RoundingAmount = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivitySaleOfRightsCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivitySaleOfRightsCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivitySaleOfRightsPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivitySaleOfRightsRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivitySaleOfRightsSettled = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used to record payments made by the issuer to security holders when the security is subject to redemptions other than full and partial calls (e.g., early CD redemptions) and details related to the sale of rights
 */
export type ActivitySaleOfRights = {
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivitySaleOfRightsCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivitySaleOfRightsCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivitySaleOfRightsPaymentDate | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivitySaleOfRightsRecordDate | null | undefined;
    /**
     * The accounts settled position for which the corporate action was paid
     */
    settled?: ActivitySaleOfRightsSettled | null | undefined;
};
/**
 * The date a given activity will officially settle
 */
export type ActivitySettleDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Denotes whether the trade is a buy or sell
 */
export declare enum ActivitySide {
    SideUnspecified = "SIDE_UNSPECIFIED",
    Buy = "BUY",
    Sell = "SELL"
}
/**
 * Denotes whether the trade is a buy or sell
 */
export type ActivitySideOpen = OpenEnum<typeof ActivitySide>;
/**
 * Common fields for corporate actions
 */
export type ActivitySpinoffCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityPayDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivitySpinoffQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivitySpinoffRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Used to record a distribution of subsidiary securities to the shareholders of the parent company without a surrender of securities or payment and details related to the spinoff. A spin-off represents a form of divestiture resulting in an independent company
 */
export type ActivitySpinoff = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivitySpinoffCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    payDate?: ActivityPayDate | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivitySpinoffQuantity | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivitySpinoffRecordDate | null | undefined;
};
/**
 * The state of the activity
 */
export declare enum ActivityState {
    ActivityStateUnspecified = "ACTIVITY_STATE_UNSPECIFIED",
    Pending = "PENDING",
    Current = "CURRENT",
    Canceled = "CANCELED",
    Rebooked = "REBOOKED",
    Rebook = "REBOOK",
    Cancel = "CANCEL"
}
/**
 * The state of the activity
 */
export type ActivityStateOpen = OpenEnum<typeof ActivityState>;
/**
 * Common fields for corporate actions
 */
export type ActivityStockDividendCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityStockDividendPayDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivityStockDividendQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityStockDividendRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Used to record a dividend paid to shareholders in the form of shares of stock in either the issuing company or in another company and details related to the stock dividend
 */
export type ActivityStockDividend = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityStockDividendCorporateActionGeneralInformation | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    payDate?: ActivityStockDividendPayDate | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivityStockDividendQuantity | null | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
     */
    rate?: ActivityRate | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivityStockDividendRecordDate | null | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityStockSplitCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The old rate of the security
 */
export type ActivityStockSplitFactorDenominator = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The new rate of the security
 */
export type ActivityStockSplitFactorNumerator = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityStockSplitPayDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The position on which the corporate action was paid
 */
export type ActivityStockSplitQuantity = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityStockSplitRecordDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Used to record the increase in a company's number of outstanding shares of stock without any change in the shareholder's equity or the aggregate market value at the time of the split and details related to the stock split
 */
export type ActivityStockSplit = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityStockSplitCorporateActionGeneralInformation | null | undefined;
    /**
     * The old rate of the security
     */
    factorDenominator?: ActivityStockSplitFactorDenominator | null | undefined;
    /**
     * The new rate of the security
     */
    factorNumerator?: ActivityStockSplitFactorNumerator | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    payDate?: ActivityStockSplitPayDate | null | undefined;
    /**
     * The position on which the corporate action was paid
     */
    quantity?: ActivityStockSplitQuantity | null | undefined;
    /**
     * The date on which positions are recorded in order to calculate entitlement
     */
    recordDate?: ActivityStockSplitRecordDate | null | undefined;
};
/**
 * Indicates purchase or redemption of the sweep asset
 */
export declare enum ActivitySweepAction {
    SweepActionUnspecified = "SWEEP_ACTION_UNSPECIFIED",
    Purchase = "PURCHASE",
    Redemption = "REDEMPTION"
}
/**
 * Indicates purchase or redemption of the sweep asset
 */
export type ActivitySweepActionOpen = OpenEnum<typeof ActivitySweepAction>;
/**
 * Sweep program that cash is being swept to/ from
 */
export declare enum ActivitySweepType {
    SweepTypeUnspecified = "SWEEP_TYPE_UNSPECIFIED",
    Fdic = "FDIC",
    MoneyMarket = "MONEY_MARKET"
}
/**
 * Sweep program that cash is being swept to/ from
 */
export type ActivitySweepTypeOpen = OpenEnum<typeof ActivitySweepType>;
/**
 * Used to record sweeps from a cash balance to an alternative asset or vice versa and details related to the sweep
 */
export type ActivitySweep = {
    /**
     * Indicates purchase or redemption of the sweep asset
     */
    action?: ActivitySweepActionOpen | undefined;
    /**
     * Indicates the sweep was performed books were closed to prevent an investor account from carrying a negative cash balance overnight
     */
    eodRedemption?: boolean | undefined;
    /**
     * Sweep program that cash is being swept to/ from
     */
    type?: ActivitySweepTypeOpen | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityTenderOfferCashRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityTenderOfferCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Used to record the sale of securities for a specified price due to an offer from the issuer or a third party and details related to the tender offer
 */
export type ActivityTenderOffer = {
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
     */
    cashRate?: ActivityTenderOfferCashRate | null | undefined;
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityTenderOfferCorporateActionGeneralInformation | null | undefined;
};
/**
 * Used to calculate broadridge blotter code
 */
export declare enum ActivityBrokerCapacity {
    CapacityUnspecified = "CAPACITY_UNSPECIFIED",
    Agency = "AGENCY",
    Principal = "PRINCIPAL",
    Mixed = "MIXED"
}
/**
 * Used to calculate broadridge blotter code
 */
export type ActivityBrokerCapacityOpen = OpenEnum<typeof ActivityBrokerCapacity>;
/**
 * The price for the instrument that is prevailing in the market.
 */
export type ActivityPrevailingMarketPrice = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Total monetary value of the price_adjustment
 */
export type ActivityPriceAdjustmentAmount = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type ActivityPriceAdjustmentPercent = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export declare enum ActivityPriceAdjustmentType {
    PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
    Markup = "MARKUP",
    Markdown = "MARKDOWN",
    SalesLoad = "SALES_LOAD"
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type ActivityPriceAdjustmentTypeOpen = OpenEnum<typeof ActivityPriceAdjustmentType>;
/**
 * Information about any price adjustments applied to the security
 */
export type ActivityPriceAdjustmentRecord = {
    /**
     * Total monetary value of the price_adjustment
     */
    priceAdjustmentAmount?: ActivityPriceAdjustmentAmount | null | undefined;
    /**
     * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
     */
    priceAdjustmentPercent?: ActivityPriceAdjustmentPercent | null | undefined;
    /**
     * The type of price adjustment being applied by the broker to the net price of the security
     */
    priceAdjustmentType?: ActivityPriceAdjustmentTypeOpen | undefined;
};
/**
 * Used to record the the execution of a buy or sell transaction resulting in the transfer of securities and corresponding payment and details related to the trade
 */
export type ActivityTrade = {
    /**
     * Free form text field containing additional information for a trade
     */
    additionalInstructions?: Array<string> | undefined;
    /**
     * Max Length 100 characters. Alternate order id from the street used for FRAC trades
     */
    alternateOrderId?: string | undefined;
    /**
     * uuid assigned by the Booking API if a trade belongs to an allocation
     */
    bookingApiTradeAllocationId?: string | undefined;
    /**
     * uuid assigned by the Booking API to all trades
     */
    bookingApiTradeId?: string | undefined;
    /**
     * Executing broker of the trade
     */
    broker?: string | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    brokerCapacity?: ActivityBrokerCapacityOpen | undefined;
    /**
     * Free form text submitted by the client for internal purposes
     */
    clientMemos?: Array<string> | undefined;
    /**
     * 32 characters. The client order ID from the order submitted
     */
    clientOrderId?: string | undefined;
    /**
     * MIC code for the exchange
     */
    exchange?: string | undefined;
    /**
     * Execution id from the street
     */
    executionId?: string | undefined;
    /**
     * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
     */
    executionOnly?: boolean | undefined;
    /**
     * Max Length 100 characters. External system id provided by a client
     */
    externalId?: string | undefined;
    /**
     * The confirmation number associated with a mutual fund trade
     */
    fundConfirmationNumber?: string | undefined;
    /**
     * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
     */
    gatewayClientOrderId?: string | undefined;
    /**
     * If set to true, indicates the trade should be omitted from client billing
     */
    internalError?: boolean | undefined;
    /**
     * Set on penny-for-the-lot trades
     */
    isWriteoff?: boolean | undefined;
    /**
     * Repeated record containing information about the tax lots, if specified
     */
    lots?: Array<Lot> | undefined;
    /**
     * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
     */
    orderId?: string | undefined;
    /**
     * The price for the instrument that is prevailing in the market.
     */
    prevailingMarketPrice?: ActivityPrevailingMarketPrice | null | undefined;
    /**
     * Information about any price adjustments applied to the security
     */
    priceAdjustmentRecord?: ActivityPriceAdjustmentRecord | null | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    route?: string | undefined;
    /**
     * The special instructions for a trade
     */
    specialInstructions?: Array<string> | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the particular issue
     */
    symbolDescription?: string | undefined;
    /**
     * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
     */
    whenIssued?: boolean | undefined;
    /**
     * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
     */
    yieldRecords?: Array<YieldRecord> | undefined;
};
/**
 * Provides more granular detail on the purpose of transfer
 */
export declare enum ActivityTransferType {
    TransferTypeUnspecified = "TRANSFER_TYPE_UNSPECIFIED",
    TransferConversion = "TRANSFER_CONVERSION",
    Deconversion = "DECONVERSION",
    Migration = "MIGRATION",
    ManualAdjustment = "MANUAL_ADJUSTMENT",
    InternalConversion = "INTERNAL_CONVERSION"
}
/**
 * Provides more granular detail on the purpose of transfer
 */
export type ActivityTransferTypeOpen = OpenEnum<typeof ActivityTransferType>;
/**
 * Used to record more generic transfers of funds or securities and details related to the transfer. The transfer type and activity_description can be used to provide more specific context
 */
export type ActivityTransfer = {
    /**
     * Free form text for additional sweep messages or instructions
     */
    additionalInstructions?: string | undefined;
    /**
     * String field that can be populated with the broker dealer undergoing a clearing platform conversion. Used for activity description purposes
     */
    clientBrokerage?: string | undefined;
    /**
     * Provides more granular detail on the purpose of transfer
     */
    transferType?: ActivityTransferTypeOpen | undefined;
};
/**
 * The type of activity this is
 */
export declare enum ActivityType {
    TypeUnspecified = "TYPE_UNSPECIFIED",
    Trade = "TRADE",
    Movement = "MOVEMENT",
    Memo = "MEMO",
    CorporateAction = "CORPORATE_ACTION"
}
/**
 * The type of activity this is
 */
export type ActivityTypeOpen = OpenEnum<typeof ActivityType>;
/**
 * Common fields for corporate actions
 */
export type ActivityUnitSplitCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityUnitSplitStockRate = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Used to record increases in the number of units outstanding through the issuing of more units to current shareholders and details related to the unit split
 */
export type ActivityUnitSplit = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityUnitSplitCorporateActionGeneralInformation | null | undefined;
    /**
     * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
     */
    stockRate?: ActivityUnitSplitStockRate | null | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityWarrantExerciseCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Used to record the exchange of warrants for shares and details related to the warrant exercise. The exercise will commonly require a payment based upon a pre-determined value and time and details related to the warrant exercise
 */
export type ActivityWarrantExercise = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityWarrantExerciseCorporateActionGeneralInformation | null | undefined;
};
/**
 * Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
 */
export declare enum ActivityDistributionType {
    DistributionTypeUnspecified = "DISTRIBUTION_TYPE_UNSPECIFIED",
    Premature = "PREMATURE",
    Disability = "DISABILITY",
    Death = "DEATH",
    Normal = "NORMAL",
    Sosepp = "SOSEPP",
    RolloverToQualifiedPlan = "ROLLOVER_TO_QUALIFIED_PLAN",
    RolloverToIra = "ROLLOVER_TO_IRA",
    DistTransfer = "DIST_TRANSFER",
    ExcessContributionRemovalBeforeTaxDeadline = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE",
    ExcessContributionRemovalAfterTaxDeadline = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE",
    RecharacterizationPriorYear = "RECHARACTERIZATION_PRIOR_YEAR",
    RecharacterizationCurrentYear = "RECHARACTERIZATION_CURRENT_YEAR",
    DistConversion = "DIST_CONVERSION",
    ManagementFee = "MANAGEMENT_FEE",
    PrematureSimpleIraLessThan2Years = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS",
    NormalRothIraGreaterThan5Years = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS",
    PlanLoan401K = "PLAN_LOAN_401K",
    NetIncomeAttributable = "NET_INCOME_ATTRIBUTABLE",
    Revocation = "REVOCATION",
    NonReportable = "NON_REPORTABLE"
}
/**
 * Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
 */
export type ActivityDistributionTypeOpen = OpenEnum<typeof ActivityDistributionType>;
/**
 * The type of retirement account the withdrawal is being made from
 */
export declare enum ActivityRetirementType {
    RetirementTypeUnspecified = "RETIREMENT_TYPE_UNSPECIFIED",
    Ira = "IRA",
    Sep = "SEP",
    Simple = "SIMPLE",
    Keogh = "KEOGH",
    Roth = "ROTH",
    Qp = "QP",
    RolloverIra = "ROLLOVER_IRA"
}
/**
 * The type of retirement account the withdrawal is being made from
 */
export type ActivityRetirementTypeOpen = OpenEnum<typeof ActivityRetirementType>;
/**
 * The mechanism by which the funds will be withdrawn
 */
export declare enum ActivityWithdrawalType {
    ExternalMovementTypeUnspecified = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED",
    Ach = "ACH",
    Check = "CHECK",
    Wire = "WIRE",
    Paypal = "PAYPAL",
    Rtp = "RTP",
    Ict = "ICT",
    Journal = "JOURNAL"
}
/**
 * The mechanism by which the funds will be withdrawn
 */
export type ActivityWithdrawalTypeOpen = OpenEnum<typeof ActivityWithdrawalType>;
/**
 * Used to record withdrawals of funds from an account and capture details related to the withdrawal
 */
export type ActivityWithdrawal = {
    /**
     * Free form text for additional sweep messages or instructions
     */
    additionalInstructions?: string | undefined;
    /**
     * indicates whether the withdrawal is a cash advance
     */
    advance?: boolean | undefined;
    /**
     * Indicates whether this withdrawal is intended to fully deplete and close an account
     */
    closingAccount?: boolean | undefined;
    /**
     * Indicates whether this transaction is converting a retirement account to a ROTH IRA
     */
    conversion?: boolean | undefined;
    /**
     * Human readable account identifier for the account the assets were journaled. To be populated when the Withdrawal type is Journal
     */
    destinationAccountNumber?: string | undefined;
    /**
     * Name of the firm which was the destination of funds out of the account
     */
    destinationInstitution?: string | undefined;
    /**
     * Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
     */
    distributionType?: ActivityDistributionTypeOpen | undefined;
    /**
     * The tax year the withdrawal should be applied to (YYYY)
     */
    distributionYear?: number | undefined;
    /**
     * Unique tracking number provided to allow tracking a wire transfer from the initiating bank to the receiving bank
     */
    fedReferenceNumber?: string | undefined;
    /**
     * Indicates whether the transaction is for a futures related transaction
     */
    futuresSettlement?: boolean | undefined;
    /**
     * Indicates whether this transaction is a micro withdrawal to validate ACH Relationships
     */
    micro?: boolean | undefined;
    /**
     * Name of the firm which was the source of funds into the account
     */
    originatingInstitution?: string | undefined;
    /**
     * Indicates whether the transaction is a scheduled periodic withdrawal
     */
    periodic?: boolean | undefined;
    /**
     * The type of retirement account the withdrawal is being made from
     */
    retirementType?: ActivityRetirementTypeOpen | undefined;
    /**
     * Indicates whether the transaction is taxable
     */
    taxable?: boolean | undefined;
    /**
     * The mechanism by which the funds will be withdrawn
     */
    type?: ActivityWithdrawalTypeOpen | undefined;
};
/**
 * Denotes whether the withdrawal is pending or complete
 */
export declare enum ActivityReview {
    ReviewStateUnspecified = "REVIEW_STATE_UNSPECIFIED",
    ReviewStatePending = "REVIEW_STATE_PENDING",
    ReviewStateComplete = "REVIEW_STATE_COMPLETE"
}
/**
 * Denotes whether the withdrawal is pending or complete
 */
export type ActivityReviewOpen = OpenEnum<typeof ActivityReview>;
/**
 * Used to record the movement of funds to/ from the pending_withdrawal memo location
 */
export type ActivityWithdrawalPendingReview = {
    /**
     * Denotes whether the withdrawal is pending or complete
     */
    review?: ActivityReviewOpen | undefined;
};
/**
 * Used to record tax withholdings and details related to the withholding
 */
export type ActivityWithholding = {
    /**
     * Contains information about the tax withholdings associated with a 'parent' activity
     */
    data?: Array<WithholdingData> | undefined;
};
/**
 * Common fields for corporate actions
 */
export type ActivityWorthlessCorporateActionGeneralInformation = {
    /**
     * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
     */
    corporateActionId?: string | undefined;
    /**
     * Asset Id of the new security after the corporate action event is processed
     */
    disbursedAssetId?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedCusip?: string | undefined;
    /**
     * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
     */
    disbursedSymbolDescription?: string | undefined;
    /**
     * Asset Id of the existing security before the corporate action event is processed
     */
    targetAssetId?: string | undefined;
    /**
     * External Identifier of the existing security before the corporate action event is processed
     */
    targetCusip?: string | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
     */
    targetSymbolDescription?: string | undefined;
};
/**
 * Corresponds to corporateactions.announcement.effective_date
 */
export type ActivityWorthlessEffectiveDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * The anticipated payment date at the depository
 */
export type ActivityWorthlessPaymentDate = {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | undefined;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | undefined;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | undefined;
};
/**
 * Used to record the removal of positions in a given security when the DTC has received formal notice that the security is worthless and details related to the worthless event
 */
export type ActivityWorthless = {
    /**
     * Common fields for corporate actions
     */
    corporateActionGeneralInformation?: ActivityWorthlessCorporateActionGeneralInformation | null | undefined;
    /**
     * Corresponds to corporateactions.announcement.effective_date
     */
    effectiveDate?: ActivityWorthlessEffectiveDate | null | undefined;
    /**
     * The anticipated payment date at the depository
     */
    paymentDate?: ActivityWorthlessPaymentDate | null | undefined;
};
/**
 * Activity is a representation of several ledger entries rolled up for easy correlation and usage
 */
export type Activity = {
    /**
     * Used to record the movement of funds or shares to/ from the pending_acats memo location
     */
    acatsPendingOut?: ActivityAcatsPendingOut | null | undefined;
    /**
     * A globally unique identifier referencing a single account; this is the main identifier for an account used for machine-to-machine interactions
     */
    accountId?: string | undefined;
    /**
     * Indicates the memo location impacted by an entry
     */
    accountMemo?: ActivityAccountMemoOpen | undefined;
    /**
     * Used to record the movement of funds or shares during the bookkeeping phase of an account transfer and details related to the account transfer
     */
    accountTransfer?: ActivityAccountTransfer | null | undefined;
    /**
     * Any accrued interest that has been earned but not yet paid between the last interest payment and the date of the activity
     */
    accruedInterest?: Array<AccruedInterest> | undefined;
    /**
     * Used to record the amount of interest that has been earned but not yet paid between the last interest payment and the date of the trade
     */
    accruedInterestDesc?: AccruedInterestDesc | null | undefined;
    /**
     * The activity date refers to the specific calendar day on which a financial transaction, such as a trade at an exchange or a deposit at a bank, was executed. This date is specific to the institution where the transaction took place, capturing the exact day on which the institution formally records and effects the transaction
     */
    activityDate?: ActivityActivityDate | null | undefined;
    /**
     * The description for an activity. This may include special instructions, symbol description, etc when relavant
     */
    activityDescription?: string | undefined;
    /**
     * Apex-generated unique activity identifier
     */
    activityId?: string | undefined;
    /**
     * Activity time refers to the precise moment, recorded in Coordinated Universal Time (UTC), when a financial transaction is executed as reported to Apex
     */
    activityTime?: Date | null | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the particular issue
     */
    assetDescription?: string | undefined;
    /**
     * An Apex-provided, global identifier created on a per asset bases which provides connectivity across all areas Not populated on a currency only movement
     */
    assetId?: string | undefined;
    /**
     * Used to record a distribution of cash that an issuer has determined will be declared as income financed from capital gains and not ordinary income and details related to the capital gain
     */
    capitalGains?: ActivityCapitalGains | null | undefined;
    /**
     * Used to record the distribution of cash to shareholders, paid by the issuer, usually based upon current earnings and/or accumulated profits as declared by the board of directors and details related to the cash dividend
     */
    cashDividend?: ActivityCashDividend | null | undefined;
    /**
     * Used to record commission charged by brokers or financial intermediaries for executing financial transactions on behalf of clients
     */
    commission?: ActivityCommission | null | undefined;
    /**
     * Any commissions associated with the activity
     */
    commissions?: Array<Commission> | undefined;
    /**
     * Used to record the conversion of securities (generally convertible bonds or preferred shares) into another form of securities (usually common shares) at a pre-stated price or rate and details related to the conversion
     */
    conversion?: ActivityConversion | null | undefined;
    /**
     * Used to record memo location adjustments initiated by the corporate action system due to reorg events
     */
    corporateActionMemoAdjustment?: ActivityCorporateActionMemoAdjustment | null | undefined;
    /**
     * A unique identifier referencing a Correspondent
     */
    correspondentId?: string | undefined;
    /**
     * The date/time an activity was created in the ledger
     */
    creationTime?: Date | null | undefined;
    /**
     * Used to disburse funds into a customer's account, typically for purposes such as refunds, interest payments, or rewards from enrolled programs and details related to the credit
     */
    credit?: ActivityCredit | null | undefined;
    /**
     * Required if any currency field like `price, gross_amount, trade.markup, fee.amount` is provided. The currency's ascend asset_id
     */
    currencyAssetId?: string | undefined;
    /**
     * The currency associated with the security Populated on a currency movement
     */
    currencyCode?: string | undefined;
    /**
     * Used to record deposits of funds into an account and capture details related to the deposit
     */
    deposit?: ActivityDeposit | null | undefined;
    /**
     * Used to record the movement of funds to/ from the pending_drip memo location
     */
    drip?: ActivityDrip | null | undefined;
    /**
     * Used to record the exchange of certificates for a new security or cash and details related to the exchange
     */
    exchange?: ActivityExchange | null | undefined;
    /**
     * Used to record Fees that have been assessed to account and capture details related to the fee
     */
    fee?: ActivityFee | null | undefined;
    /**
     * Any fees associated with the activity
     */
    fees?: Array<Fee> | undefined;
    /**
     * Used to record the movements of shares to/ from the fpsl memo location and details related to the fpsl memo
     */
    fpsl?: ActivityFpsl | null | undefined;
    /**
     * For a given set of activity that are part of the same lineage the highest generation will be the most recent activity
     */
    generation?: string | undefined;
    /**
     * The monetary value of an activity, exclusive of any fees, withholdings, accrued_interest, or commissions (First money)
     */
    grossAmount?: ActivityGrossAmount | null | undefined;
    /**
     * Used to record the payment of interest to accounts that have maintained a cash balance or the charging of interest to accounts that have used margin and details related to the interest
     */
    interest?: ActivityInterest | null | undefined;
    /**
     * Used to record the The payment of an obligation an issuer has agreed to make to holders of an interest-bearing security and details related to the interest payment. Usually, the payment is made in cash and on a scheduled basis
     */
    interestPayment?: ActivityInterestPayment | null | undefined;
    /**
     * Used to record the dismantling of a business by an issuer, paying off debts in order of priority and distributing the remaining assets in cash and/or securities to the owners of the securities and details related to the liquidation
     */
    liquidation?: ActivityLiquidation | null | undefined;
    /**
     * Used to record he final repayment, usually in cash, by an issuer for the entire issue, or remaining outstanding securities of a specific security on a specified date and details related to the maturity
     */
    maturity?: ActivityMaturity | null | undefined;
    /**
     * Used to record the exchange of one company's security for another company's security, cash, or a combination of cash and securities and details related to the merger
     */
    merger?: ActivityMerger | null | undefined;
    /**
     * accounts/{account_id}/activities/{activity_id}
     */
    name?: string | undefined;
    /**
     * Used to record changes in the name of a security/securities by the issuer which result in surrendering physical securities or the assigning of a new security identifier which result in new securities being issued and details related to the name changes
     */
    nameChange?: ActivityNameChange | null | undefined;
    /**
     * The monetary value of an activity, inclusive of fees, withholding, commisions, etc (Second Money)
     */
    netAmount?: ActivityNetAmount | null | undefined;
    /**
     * can be an empty string if there is no next activity is populated when there is a modification resulting in a new activity
     */
    nextActivityId?: string | undefined;
    /**
     * the process date of the next activity(nil if the next_activity_id is an empty string)
     */
    nextActivityProcessDate?: NextActivityProcessDate | null | undefined;
    /**
     * None
     */
    none?: None | null | undefined;
    /**
     * Used to record payments on interest-bearing securities where the payment is made in additional securities rather than cash and details related to the payment
     */
    paymentInKind?: ActivityPaymentInKind | null | undefined;
    /**
     * When populated, the activity_id of that precedes this one
     */
    previousActivityId?: string | undefined;
    /**
     * When populated, the processing_date of the previous_activity_id
     */
    previousProcessDate?: PreviousProcessDate | null | undefined;
    /**
     * The monetary value paid for a given security in a trade Not populated on a currency only movement
     */
    price?: ActivityPrice | null | undefined;
    /**
     * The date that the activity was booked to the ledger
     */
    processDate?: ActivityProcessDate | null | undefined;
    /**
     * The quantity of shares bought, sold, or moved for a given entry/activity Required if activity.state != PENDING
     */
    quantity?: ActivityQuantity | null | undefined;
    /**
     * Used to record the redemption of a security for cash in its entirety for which the holders receive the principal amount of the security and details related to the redemption
     */
    redemptionFull?: ActivityRedemptionFull | null | undefined;
    /**
     * Used when securities are redeemed by the issuer for cash, in part, before their scheduled maturity date and details related to the redemption. The outstanding amount of securities will be proportionally reduced based on a specific percentage of holding
     */
    redemptionPartial?: ActivityRedemptionPartial | null | undefined;
    /**
     * Two character region code, complies with https://cldr.unicode.org/index
     */
    regionCode?: string | undefined;
    /**
     * Used to record the exchange of a company's security for the same company's new security at a preset rate and details related to the reverse stock split
     */
    reverseStockSplit?: ActivityReverseStockSplit | null | undefined;
    /**
     * Used to record distributions to common stock holders of a company that grant the option to purchase new or additional securities of the same company during a predetermined time period at a predetermined price and details related to the rights distribution
     */
    rightsDistribution?: ActivityRightsDistribution | null | undefined;
    /**
     * Used to record the purchase of new or additional securities and details related to the subscription. Rights are often tradable in a secondary market
     */
    rightsSubscription?: ActivityRightsSubscription | null | undefined;
    /**
     * Used to record rounding adjustments when the sum(price x quantity) of all entries for a given activity do not equal the price x quantity of the fully formed activity record
     */
    roundingAdjustment?: ActivityRoundingAdjustment | null | undefined;
    /**
     * the difference between the aggregation of gross_amount from the trade entries and the rounded gross_amount of the fully formed activity This amount can also be found as a rounding_adjustment entry
     */
    roundingAmount?: RoundingAmount | null | undefined;
    /**
     * Free form text field providing reason for rounding
     */
    roundingReason?: string | undefined;
    /**
     * Used to record payments made by the issuer to security holders when the security is subject to redemptions other than full and partial calls (e.g., early CD redemptions) and details related to the sale of rights
     */
    saleOfRights?: ActivitySaleOfRights | null | undefined;
    /**
     * The date a given activity will officially settle
     */
    settleDate?: ActivitySettleDate | null | undefined;
    /**
     * Denotes whether the trade is a buy or sell
     */
    side?: ActivitySideOpen | undefined;
    /**
     * Used to record a distribution of subsidiary securities to the shareholders of the parent company without a surrender of securities or payment and details related to the spinoff. A spin-off represents a form of divestiture resulting in an independent company
     */
    spinoff?: ActivitySpinoff | null | undefined;
    /**
     * The state of the activity
     */
    state?: ActivityStateOpen | undefined;
    /**
     * Used to record a dividend paid to shareholders in the form of shares of stock in either the issuing company or in another company and details related to the stock dividend
     */
    stockDividend?: ActivityStockDividend | null | undefined;
    /**
     * Used to record the increase in a company's number of outstanding shares of stock without any change in the shareholder's equity or the aggregate market value at the time of the split and details related to the stock split
     */
    stockSplit?: ActivityStockSplit | null | undefined;
    /**
     * String representation of the metadata object containing more information about an entry/ activity
     */
    subtypeCategory?: string | undefined;
    /**
     * Used to record sweeps from a cash balance to an alternative asset or vice versa and details related to the sweep
     */
    sweep?: ActivitySweep | null | undefined;
    /**
     * Used to record the sale of securities for a specified price due to an offer from the issuer or a third party and details related to the tender offer
     */
    tenderOffer?: ActivityTenderOffer | null | undefined;
    /**
     * Used to record the the execution of a buy or sell transaction resulting in the transfer of securities and corresponding payment and details related to the trade
     */
    trade?: ActivityTrade | null | undefined;
    /**
     * Used to record more generic transfers of funds or securities and details related to the transfer. The transfer type and activity_description can be used to provide more specific context
     */
    transfer?: ActivityTransfer | null | undefined;
    /**
     * The type of activity this is
     */
    type?: ActivityTypeOpen | undefined;
    /**
     * Used to record increases in the number of units outstanding through the issuing of more units to current shareholders and details related to the unit split
     */
    unitSplit?: ActivityUnitSplit | null | undefined;
    /**
     * Used to record the exchange of warrants for shares and details related to the warrant exercise. The exercise will commonly require a payment based upon a pre-determined value and time and details related to the warrant exercise
     */
    warrantExercise?: ActivityWarrantExercise | null | undefined;
    /**
     * Used to record withdrawals of funds from an account and capture details related to the withdrawal
     */
    withdrawal?: ActivityWithdrawal | null | undefined;
    /**
     * Used to record the movement of funds to/ from the pending_withdrawal memo location
     */
    withdrawalPendingReview?: ActivityWithdrawalPendingReview | null | undefined;
    /**
     * Used to record tax withholdings and details related to the withholding
     */
    withholding?: ActivityWithholding | null | undefined;
    /**
     * Any withholdings associated with the activity
     */
    withholdings?: Array<Withholding> | undefined;
    /**
     * Used to record the removal of positions in a given security when the DTC has received formal notice that the security is worthless and details related to the worthless event
     */
    worthless?: ActivityWorthless | null | undefined;
};
/** @internal */
export declare const ActivityAcatsPendingOut$inboundSchema: z.ZodType<ActivityAcatsPendingOut, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityAcatsPendingOut$Outbound = {
    acats_control_number?: string | undefined;
    additional_instructions?: string | undefined;
};
/** @internal */
export declare const ActivityAcatsPendingOut$outboundSchema: z.ZodType<ActivityAcatsPendingOut$Outbound, z.ZodTypeDef, ActivityAcatsPendingOut>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityAcatsPendingOut$ {
    /** @deprecated use `ActivityAcatsPendingOut$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityAcatsPendingOut, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityAcatsPendingOut$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityAcatsPendingOut$Outbound, z.ZodTypeDef, ActivityAcatsPendingOut>;
    /** @deprecated use `ActivityAcatsPendingOut$Outbound` instead. */
    type Outbound = ActivityAcatsPendingOut$Outbound;
}
/** @internal */
export declare const ActivityAccountMemo$inboundSchema: z.ZodType<ActivityAccountMemoOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityAccountMemo$outboundSchema: z.ZodType<ActivityAccountMemoOpen, z.ZodTypeDef, ActivityAccountMemoOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityAccountMemo$ {
    /** @deprecated use `ActivityAccountMemo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityAccountMemoOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityAccountMemo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityAccountMemoOpen, z.ZodTypeDef, ActivityAccountMemoOpen>;
}
/** @internal */
export declare const ActivityAction$inboundSchema: z.ZodType<ActivityActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityAction$outboundSchema: z.ZodType<ActivityActionOpen, z.ZodTypeDef, ActivityActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityAction$ {
    /** @deprecated use `ActivityAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityActionOpen, z.ZodTypeDef, ActivityActionOpen>;
}
/** @internal */
export declare const ActivityMethod$inboundSchema: z.ZodType<ActivityMethodOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityMethod$outboundSchema: z.ZodType<ActivityMethodOpen, z.ZodTypeDef, ActivityMethodOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMethod$ {
    /** @deprecated use `ActivityMethod$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMethodOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMethod$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMethodOpen, z.ZodTypeDef, ActivityMethodOpen>;
}
/** @internal */
export declare const ActivityAccountTransfer$inboundSchema: z.ZodType<ActivityAccountTransfer, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityAccountTransfer$Outbound = {
    acats_asset_sequence_number?: string | undefined;
    acats_control_number?: string | undefined;
    action?: string | undefined;
    additional_instructions?: string | undefined;
    contra_party_account_number?: string | undefined;
    contra_party_id?: string | undefined;
    institution?: string | undefined;
    method?: string | undefined;
};
/** @internal */
export declare const ActivityAccountTransfer$outboundSchema: z.ZodType<ActivityAccountTransfer$Outbound, z.ZodTypeDef, ActivityAccountTransfer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityAccountTransfer$ {
    /** @deprecated use `ActivityAccountTransfer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityAccountTransfer, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityAccountTransfer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityAccountTransfer$Outbound, z.ZodTypeDef, ActivityAccountTransfer>;
    /** @deprecated use `ActivityAccountTransfer$Outbound` instead. */
    type Outbound = ActivityAccountTransfer$Outbound;
}
/** @internal */
export declare const AccruedInterestDesc$inboundSchema: z.ZodType<AccruedInterestDesc, z.ZodTypeDef, unknown>;
/** @internal */
export type AccruedInterestDesc$Outbound = {};
/** @internal */
export declare const AccruedInterestDesc$outboundSchema: z.ZodType<AccruedInterestDesc$Outbound, z.ZodTypeDef, AccruedInterestDesc>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AccruedInterestDesc$ {
    /** @deprecated use `AccruedInterestDesc$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AccruedInterestDesc, z.ZodTypeDef, unknown>;
    /** @deprecated use `AccruedInterestDesc$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AccruedInterestDesc$Outbound, z.ZodTypeDef, AccruedInterestDesc>;
    /** @deprecated use `AccruedInterestDesc$Outbound` instead. */
    type Outbound = AccruedInterestDesc$Outbound;
}
/** @internal */
export declare const ActivityActivityDate$inboundSchema: z.ZodType<ActivityActivityDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityActivityDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityActivityDate$outboundSchema: z.ZodType<ActivityActivityDate$Outbound, z.ZodTypeDef, ActivityActivityDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityActivityDate$ {
    /** @deprecated use `ActivityActivityDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityActivityDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityActivityDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityActivityDate$Outbound, z.ZodTypeDef, ActivityActivityDate>;
    /** @deprecated use `ActivityActivityDate$Outbound` instead. */
    type Outbound = ActivityActivityDate$Outbound;
}
/** @internal */
export declare const ActivityCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityPaymentDate$inboundSchema: z.ZodType<ActivityPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityPaymentDate$outboundSchema: z.ZodType<ActivityPaymentDate$Outbound, z.ZodTypeDef, ActivityPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPaymentDate$ {
    /** @deprecated use `ActivityPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPaymentDate$Outbound, z.ZodTypeDef, ActivityPaymentDate>;
    /** @deprecated use `ActivityPaymentDate$Outbound` instead. */
    type Outbound = ActivityPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityCapitalGainsQuantity$inboundSchema: z.ZodType<ActivityCapitalGainsQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCapitalGainsQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityCapitalGainsQuantity$outboundSchema: z.ZodType<ActivityCapitalGainsQuantity$Outbound, z.ZodTypeDef, ActivityCapitalGainsQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCapitalGainsQuantity$ {
    /** @deprecated use `ActivityCapitalGainsQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCapitalGainsQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCapitalGainsQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCapitalGainsQuantity$Outbound, z.ZodTypeDef, ActivityCapitalGainsQuantity>;
    /** @deprecated use `ActivityCapitalGainsQuantity$Outbound` instead. */
    type Outbound = ActivityCapitalGainsQuantity$Outbound;
}
/** @internal */
export declare const ActivityRecordDate$inboundSchema: z.ZodType<ActivityRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityRecordDate$outboundSchema: z.ZodType<ActivityRecordDate$Outbound, z.ZodTypeDef, ActivityRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRecordDate$ {
    /** @deprecated use `ActivityRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRecordDate$Outbound, z.ZodTypeDef, ActivityRecordDate>;
    /** @deprecated use `ActivityRecordDate$Outbound` instead. */
    type Outbound = ActivityRecordDate$Outbound;
}
/** @internal */
export declare const ActivityCapitalGains$inboundSchema: z.ZodType<ActivityCapitalGains, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCapitalGains$Outbound = {
    corporate_action_general_information?: ActivityCorporateActionGeneralInformation$Outbound | null | undefined;
    long_term_gain?: boolean | undefined;
    payment_date?: ActivityPaymentDate$Outbound | null | undefined;
    quantity?: ActivityCapitalGainsQuantity$Outbound | null | undefined;
    record_date?: ActivityRecordDate$Outbound | null | undefined;
    reinvested?: boolean | undefined;
};
/** @internal */
export declare const ActivityCapitalGains$outboundSchema: z.ZodType<ActivityCapitalGains$Outbound, z.ZodTypeDef, ActivityCapitalGains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCapitalGains$ {
    /** @deprecated use `ActivityCapitalGains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCapitalGains, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCapitalGains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCapitalGains$Outbound, z.ZodTypeDef, ActivityCapitalGains>;
    /** @deprecated use `ActivityCapitalGains$Outbound` instead. */
    type Outbound = ActivityCapitalGains$Outbound;
}
/** @internal */
export declare const ActivityCashRate$inboundSchema: z.ZodType<ActivityCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityCashRate$outboundSchema: z.ZodType<ActivityCashRate$Outbound, z.ZodTypeDef, ActivityCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCashRate$ {
    /** @deprecated use `ActivityCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCashRate$Outbound, z.ZodTypeDef, ActivityCashRate>;
    /** @deprecated use `ActivityCashRate$Outbound` instead. */
    type Outbound = ActivityCashRate$Outbound;
}
/** @internal */
export declare const ActivityCashDividendCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityCashDividendCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCashDividendCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityCashDividendCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityCashDividendCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityCashDividendCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCashDividendCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCashDividendCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCashDividendCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityCashDividendCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityCashDividendCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityCashDividendFpsl$inboundSchema: z.ZodType<ActivityCashDividendFpsl, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCashDividendFpsl$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityCashDividendFpsl$outboundSchema: z.ZodType<ActivityCashDividendFpsl$Outbound, z.ZodTypeDef, ActivityCashDividendFpsl>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCashDividendFpsl$ {
    /** @deprecated use `ActivityCashDividendFpsl$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCashDividendFpsl, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCashDividendFpsl$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCashDividendFpsl$Outbound, z.ZodTypeDef, ActivityCashDividendFpsl>;
    /** @deprecated use `ActivityCashDividendFpsl$Outbound` instead. */
    type Outbound = ActivityCashDividendFpsl$Outbound;
}
/** @internal */
export declare const ActivityFree$inboundSchema: z.ZodType<ActivityFree, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityFree$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityFree$outboundSchema: z.ZodType<ActivityFree$Outbound, z.ZodTypeDef, ActivityFree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityFree$ {
    /** @deprecated use `ActivityFree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityFree, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityFree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityFree$Outbound, z.ZodTypeDef, ActivityFree>;
    /** @deprecated use `ActivityFree$Outbound` instead. */
    type Outbound = ActivityFree$Outbound;
}
/** @internal */
export declare const ActivityCashDividendPaymentDate$inboundSchema: z.ZodType<ActivityCashDividendPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCashDividendPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityCashDividendPaymentDate$outboundSchema: z.ZodType<ActivityCashDividendPaymentDate$Outbound, z.ZodTypeDef, ActivityCashDividendPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCashDividendPaymentDate$ {
    /** @deprecated use `ActivityCashDividendPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCashDividendPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCashDividendPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCashDividendPaymentDate$Outbound, z.ZodTypeDef, ActivityCashDividendPaymentDate>;
    /** @deprecated use `ActivityCashDividendPaymentDate$Outbound` instead. */
    type Outbound = ActivityCashDividendPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityCashDividendQuantity$inboundSchema: z.ZodType<ActivityCashDividendQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCashDividendQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityCashDividendQuantity$outboundSchema: z.ZodType<ActivityCashDividendQuantity$Outbound, z.ZodTypeDef, ActivityCashDividendQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCashDividendQuantity$ {
    /** @deprecated use `ActivityCashDividendQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCashDividendQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCashDividendQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCashDividendQuantity$Outbound, z.ZodTypeDef, ActivityCashDividendQuantity>;
    /** @deprecated use `ActivityCashDividendQuantity$Outbound` instead. */
    type Outbound = ActivityCashDividendQuantity$Outbound;
}
/** @internal */
export declare const ActivityCashDividendRecordDate$inboundSchema: z.ZodType<ActivityCashDividendRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCashDividendRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityCashDividendRecordDate$outboundSchema: z.ZodType<ActivityCashDividendRecordDate$Outbound, z.ZodTypeDef, ActivityCashDividendRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCashDividendRecordDate$ {
    /** @deprecated use `ActivityCashDividendRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCashDividendRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCashDividendRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCashDividendRecordDate$Outbound, z.ZodTypeDef, ActivityCashDividendRecordDate>;
    /** @deprecated use `ActivityCashDividendRecordDate$Outbound` instead. */
    type Outbound = ActivityCashDividendRecordDate$Outbound;
}
/** @internal */
export declare const ActivitySettled$inboundSchema: z.ZodType<ActivitySettled, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySettled$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivitySettled$outboundSchema: z.ZodType<ActivitySettled$Outbound, z.ZodTypeDef, ActivitySettled>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySettled$ {
    /** @deprecated use `ActivitySettled$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySettled, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySettled$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySettled$Outbound, z.ZodTypeDef, ActivitySettled>;
    /** @deprecated use `ActivitySettled$Outbound` instead. */
    type Outbound = ActivitySettled$Outbound;
}
/** @internal */
export declare const ActivitySubtype$inboundSchema: z.ZodType<ActivitySubtypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivitySubtype$outboundSchema: z.ZodType<ActivitySubtypeOpen, z.ZodTypeDef, ActivitySubtypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySubtype$ {
    /** @deprecated use `ActivitySubtype$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySubtypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySubtype$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySubtypeOpen, z.ZodTypeDef, ActivitySubtypeOpen>;
}
/** @internal */
export declare const ActivityCashDividend$inboundSchema: z.ZodType<ActivityCashDividend, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCashDividend$Outbound = {
    cash_rate?: ActivityCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityCashDividendCorporateActionGeneralInformation$Outbound | null | undefined;
    fpsl?: ActivityCashDividendFpsl$Outbound | null | undefined;
    free?: ActivityFree$Outbound | null | undefined;
    long_term_gain?: boolean | undefined;
    payment_date?: ActivityCashDividendPaymentDate$Outbound | null | undefined;
    qualified?: boolean | undefined;
    quantity?: ActivityCashDividendQuantity$Outbound | null | undefined;
    record_date?: ActivityCashDividendRecordDate$Outbound | null | undefined;
    reinvested?: boolean | undefined;
    settled?: ActivitySettled$Outbound | null | undefined;
    substitute_payment?: boolean | undefined;
    subtype?: string | undefined;
};
/** @internal */
export declare const ActivityCashDividend$outboundSchema: z.ZodType<ActivityCashDividend$Outbound, z.ZodTypeDef, ActivityCashDividend>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCashDividend$ {
    /** @deprecated use `ActivityCashDividend$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCashDividend, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCashDividend$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCashDividend$Outbound, z.ZodTypeDef, ActivityCashDividend>;
    /** @deprecated use `ActivityCashDividend$Outbound` instead. */
    type Outbound = ActivityCashDividend$Outbound;
}
/** @internal */
export declare const ActivityCommission$inboundSchema: z.ZodType<ActivityCommission, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCommission$Outbound = {};
/** @internal */
export declare const ActivityCommission$outboundSchema: z.ZodType<ActivityCommission$Outbound, z.ZodTypeDef, ActivityCommission>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCommission$ {
    /** @deprecated use `ActivityCommission$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCommission, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCommission$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCommission$Outbound, z.ZodTypeDef, ActivityCommission>;
    /** @deprecated use `ActivityCommission$Outbound` instead. */
    type Outbound = ActivityCommission$Outbound;
}
/** @internal */
export declare const ActivityConversionCashRate$inboundSchema: z.ZodType<ActivityConversionCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityConversionCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityConversionCashRate$outboundSchema: z.ZodType<ActivityConversionCashRate$Outbound, z.ZodTypeDef, ActivityConversionCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityConversionCashRate$ {
    /** @deprecated use `ActivityConversionCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityConversionCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityConversionCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityConversionCashRate$Outbound, z.ZodTypeDef, ActivityConversionCashRate>;
    /** @deprecated use `ActivityConversionCashRate$Outbound` instead. */
    type Outbound = ActivityConversionCashRate$Outbound;
}
/** @internal */
export declare const ActivityConversionCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityConversionCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityConversionCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityConversionCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityConversionCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityConversionCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityConversionCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityConversionCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityConversionCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityConversionCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityConversionCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityStockRate$inboundSchema: z.ZodType<ActivityStockRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityStockRate$outboundSchema: z.ZodType<ActivityStockRate$Outbound, z.ZodTypeDef, ActivityStockRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockRate$ {
    /** @deprecated use `ActivityStockRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockRate$Outbound, z.ZodTypeDef, ActivityStockRate>;
    /** @deprecated use `ActivityStockRate$Outbound` instead. */
    type Outbound = ActivityStockRate$Outbound;
}
/** @internal */
export declare const ActivityConversionType$inboundSchema: z.ZodType<ActivityConversionTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityConversionType$outboundSchema: z.ZodType<ActivityConversionTypeOpen, z.ZodTypeDef, ActivityConversionTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityConversionType$ {
    /** @deprecated use `ActivityConversionType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityConversionTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityConversionType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityConversionTypeOpen, z.ZodTypeDef, ActivityConversionTypeOpen>;
}
/** @internal */
export declare const ActivityConversion$inboundSchema: z.ZodType<ActivityConversion, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityConversion$Outbound = {
    cash_rate?: ActivityConversionCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityConversionCorporateActionGeneralInformation$Outbound | null | undefined;
    stock_rate?: ActivityStockRate$Outbound | null | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const ActivityConversion$outboundSchema: z.ZodType<ActivityConversion$Outbound, z.ZodTypeDef, ActivityConversion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityConversion$ {
    /** @deprecated use `ActivityConversion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityConversion, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityConversion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityConversion$Outbound, z.ZodTypeDef, ActivityConversion>;
    /** @deprecated use `ActivityConversion$Outbound` instead. */
    type Outbound = ActivityConversion$Outbound;
}
/** @internal */
export declare const ActivityCorporateActionMemoAdjustment$inboundSchema: z.ZodType<ActivityCorporateActionMemoAdjustment, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCorporateActionMemoAdjustment$Outbound = {
    corporate_action_id?: string | undefined;
    corporate_action_type?: string | undefined;
};
/** @internal */
export declare const ActivityCorporateActionMemoAdjustment$outboundSchema: z.ZodType<ActivityCorporateActionMemoAdjustment$Outbound, z.ZodTypeDef, ActivityCorporateActionMemoAdjustment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCorporateActionMemoAdjustment$ {
    /** @deprecated use `ActivityCorporateActionMemoAdjustment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCorporateActionMemoAdjustment, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCorporateActionMemoAdjustment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCorporateActionMemoAdjustment$Outbound, z.ZodTypeDef, ActivityCorporateActionMemoAdjustment>;
    /** @deprecated use `ActivityCorporateActionMemoAdjustment$Outbound` instead. */
    type Outbound = ActivityCorporateActionMemoAdjustment$Outbound;
}
/** @internal */
export declare const ActivityCreditType$inboundSchema: z.ZodType<ActivityCreditTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityCreditType$outboundSchema: z.ZodType<ActivityCreditTypeOpen, z.ZodTypeDef, ActivityCreditTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCreditType$ {
    /** @deprecated use `ActivityCreditType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCreditTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCreditType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCreditTypeOpen, z.ZodTypeDef, ActivityCreditTypeOpen>;
}
/** @internal */
export declare const ActivityCredit$inboundSchema: z.ZodType<ActivityCredit, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityCredit$Outbound = {
    additional_instructions?: string | undefined;
    credit_type?: string | undefined;
    taxable?: boolean | undefined;
};
/** @internal */
export declare const ActivityCredit$outboundSchema: z.ZodType<ActivityCredit$Outbound, z.ZodTypeDef, ActivityCredit>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityCredit$ {
    /** @deprecated use `ActivityCredit$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityCredit, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityCredit$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityCredit$Outbound, z.ZodTypeDef, ActivityCredit>;
    /** @deprecated use `ActivityCredit$Outbound` instead. */
    type Outbound = ActivityCredit$Outbound;
}
/** @internal */
export declare const ActivityContributionType$inboundSchema: z.ZodType<ActivityContributionTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityContributionType$outboundSchema: z.ZodType<ActivityContributionTypeOpen, z.ZodTypeDef, ActivityContributionTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityContributionType$ {
    /** @deprecated use `ActivityContributionType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityContributionTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityContributionType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityContributionTypeOpen, z.ZodTypeDef, ActivityContributionTypeOpen>;
}
/** @internal */
export declare const ActivityDepositType$inboundSchema: z.ZodType<ActivityDepositTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityDepositType$outboundSchema: z.ZodType<ActivityDepositTypeOpen, z.ZodTypeDef, ActivityDepositTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityDepositType$ {
    /** @deprecated use `ActivityDepositType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityDepositTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityDepositType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityDepositTypeOpen, z.ZodTypeDef, ActivityDepositTypeOpen>;
}
/** @internal */
export declare const ActivityDeposit$inboundSchema: z.ZodType<ActivityDeposit, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityDeposit$Outbound = {
    additional_instructions?: string | undefined;
    contribution_type?: string | undefined;
    contribution_year?: number | undefined;
    fed_reference_number?: string | undefined;
    originating_account_number?: string | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const ActivityDeposit$outboundSchema: z.ZodType<ActivityDeposit$Outbound, z.ZodTypeDef, ActivityDeposit>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityDeposit$ {
    /** @deprecated use `ActivityDeposit$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityDeposit, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityDeposit$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityDeposit$Outbound, z.ZodTypeDef, ActivityDeposit>;
    /** @deprecated use `ActivityDeposit$Outbound` instead. */
    type Outbound = ActivityDeposit$Outbound;
}
/** @internal */
export declare const ActivityDripAction$inboundSchema: z.ZodType<ActivityDripActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityDripAction$outboundSchema: z.ZodType<ActivityDripActionOpen, z.ZodTypeDef, ActivityDripActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityDripAction$ {
    /** @deprecated use `ActivityDripAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityDripActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityDripAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityDripActionOpen, z.ZodTypeDef, ActivityDripActionOpen>;
}
/** @internal */
export declare const ActivityDrip$inboundSchema: z.ZodType<ActivityDrip, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityDrip$Outbound = {
    action?: string | undefined;
};
/** @internal */
export declare const ActivityDrip$outboundSchema: z.ZodType<ActivityDrip$Outbound, z.ZodTypeDef, ActivityDrip>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityDrip$ {
    /** @deprecated use `ActivityDrip$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityDrip, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityDrip$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityDrip$Outbound, z.ZodTypeDef, ActivityDrip>;
    /** @deprecated use `ActivityDrip$Outbound` instead. */
    type Outbound = ActivityDrip$Outbound;
}
/** @internal */
export declare const ActivityExchangeCashRate$inboundSchema: z.ZodType<ActivityExchangeCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityExchangeCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityExchangeCashRate$outboundSchema: z.ZodType<ActivityExchangeCashRate$Outbound, z.ZodTypeDef, ActivityExchangeCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityExchangeCashRate$ {
    /** @deprecated use `ActivityExchangeCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityExchangeCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityExchangeCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityExchangeCashRate$Outbound, z.ZodTypeDef, ActivityExchangeCashRate>;
    /** @deprecated use `ActivityExchangeCashRate$Outbound` instead. */
    type Outbound = ActivityExchangeCashRate$Outbound;
}
/** @internal */
export declare const ActivityExchangeCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityExchangeCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityExchangeCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityExchangeCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityExchangeCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityExchangeCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityExchangeCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityExchangeCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityExchangeCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityExchangeCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityExchangeCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityExchangeStockRate$inboundSchema: z.ZodType<ActivityExchangeStockRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityExchangeStockRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityExchangeStockRate$outboundSchema: z.ZodType<ActivityExchangeStockRate$Outbound, z.ZodTypeDef, ActivityExchangeStockRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityExchangeStockRate$ {
    /** @deprecated use `ActivityExchangeStockRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityExchangeStockRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityExchangeStockRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityExchangeStockRate$Outbound, z.ZodTypeDef, ActivityExchangeStockRate>;
    /** @deprecated use `ActivityExchangeStockRate$Outbound` instead. */
    type Outbound = ActivityExchangeStockRate$Outbound;
}
/** @internal */
export declare const ActivityExchangeType$inboundSchema: z.ZodType<ActivityExchangeTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityExchangeType$outboundSchema: z.ZodType<ActivityExchangeTypeOpen, z.ZodTypeDef, ActivityExchangeTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityExchangeType$ {
    /** @deprecated use `ActivityExchangeType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityExchangeTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityExchangeType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityExchangeTypeOpen, z.ZodTypeDef, ActivityExchangeTypeOpen>;
}
/** @internal */
export declare const ActivityExchange$inboundSchema: z.ZodType<ActivityExchange, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityExchange$Outbound = {
    cash_rate?: ActivityExchangeCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityExchangeCorporateActionGeneralInformation$Outbound | null | undefined;
    stock_rate?: ActivityExchangeStockRate$Outbound | null | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const ActivityExchange$outboundSchema: z.ZodType<ActivityExchange$Outbound, z.ZodTypeDef, ActivityExchange>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityExchange$ {
    /** @deprecated use `ActivityExchange$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityExchange, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityExchange$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityExchange$Outbound, z.ZodTypeDef, ActivityExchange>;
    /** @deprecated use `ActivityExchange$Outbound` instead. */
    type Outbound = ActivityExchange$Outbound;
}
/** @internal */
export declare const ActivityFee$inboundSchema: z.ZodType<ActivityFee, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityFee$Outbound = {
    additional_instructions?: string | undefined;
};
/** @internal */
export declare const ActivityFee$outboundSchema: z.ZodType<ActivityFee$Outbound, z.ZodTypeDef, ActivityFee>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityFee$ {
    /** @deprecated use `ActivityFee$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityFee, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityFee$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityFee$Outbound, z.ZodTypeDef, ActivityFee>;
    /** @deprecated use `ActivityFee$Outbound` instead. */
    type Outbound = ActivityFee$Outbound;
}
/** @internal */
export declare const ActivityFpslAction$inboundSchema: z.ZodType<ActivityFpslActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityFpslAction$outboundSchema: z.ZodType<ActivityFpslActionOpen, z.ZodTypeDef, ActivityFpslActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityFpslAction$ {
    /** @deprecated use `ActivityFpslAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityFpslActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityFpslAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityFpslActionOpen, z.ZodTypeDef, ActivityFpslActionOpen>;
}
/** @internal */
export declare const ActivityFpsl$inboundSchema: z.ZodType<ActivityFpsl, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityFpsl$Outbound = {
    action?: string | undefined;
};
/** @internal */
export declare const ActivityFpsl$outboundSchema: z.ZodType<ActivityFpsl$Outbound, z.ZodTypeDef, ActivityFpsl>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityFpsl$ {
    /** @deprecated use `ActivityFpsl$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityFpsl, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityFpsl$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityFpsl$Outbound, z.ZodTypeDef, ActivityFpsl>;
    /** @deprecated use `ActivityFpsl$Outbound` instead. */
    type Outbound = ActivityFpsl$Outbound;
}
/** @internal */
export declare const ActivityGrossAmount$inboundSchema: z.ZodType<ActivityGrossAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityGrossAmount$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityGrossAmount$outboundSchema: z.ZodType<ActivityGrossAmount$Outbound, z.ZodTypeDef, ActivityGrossAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityGrossAmount$ {
    /** @deprecated use `ActivityGrossAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityGrossAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityGrossAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityGrossAmount$Outbound, z.ZodTypeDef, ActivityGrossAmount>;
    /** @deprecated use `ActivityGrossAmount$Outbound` instead. */
    type Outbound = ActivityGrossAmount$Outbound;
}
/** @internal */
export declare const ActivityInterestAccrualEndDate$inboundSchema: z.ZodType<ActivityInterestAccrualEndDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterestAccrualEndDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityInterestAccrualEndDate$outboundSchema: z.ZodType<ActivityInterestAccrualEndDate$Outbound, z.ZodTypeDef, ActivityInterestAccrualEndDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestAccrualEndDate$ {
    /** @deprecated use `ActivityInterestAccrualEndDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestAccrualEndDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestAccrualEndDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestAccrualEndDate$Outbound, z.ZodTypeDef, ActivityInterestAccrualEndDate>;
    /** @deprecated use `ActivityInterestAccrualEndDate$Outbound` instead. */
    type Outbound = ActivityInterestAccrualEndDate$Outbound;
}
/** @internal */
export declare const ActivityInterestAccrualStartDate$inboundSchema: z.ZodType<ActivityInterestAccrualStartDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterestAccrualStartDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityInterestAccrualStartDate$outboundSchema: z.ZodType<ActivityInterestAccrualStartDate$Outbound, z.ZodTypeDef, ActivityInterestAccrualStartDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestAccrualStartDate$ {
    /** @deprecated use `ActivityInterestAccrualStartDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestAccrualStartDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestAccrualStartDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestAccrualStartDate$Outbound, z.ZodTypeDef, ActivityInterestAccrualStartDate>;
    /** @deprecated use `ActivityInterestAccrualStartDate$Outbound` instead. */
    type Outbound = ActivityInterestAccrualStartDate$Outbound;
}
/** @internal */
export declare const ActivityInterestType$inboundSchema: z.ZodType<ActivityInterestTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityInterestType$outboundSchema: z.ZodType<ActivityInterestTypeOpen, z.ZodTypeDef, ActivityInterestTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestType$ {
    /** @deprecated use `ActivityInterestType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestTypeOpen, z.ZodTypeDef, ActivityInterestTypeOpen>;
}
/** @internal */
export declare const ActivityInterest$inboundSchema: z.ZodType<ActivityInterest, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterest$Outbound = {
    interest_accrual_end_date?: ActivityInterestAccrualEndDate$Outbound | null | undefined;
    interest_accrual_start_date?: ActivityInterestAccrualStartDate$Outbound | null | undefined;
    interest_type?: string | undefined;
};
/** @internal */
export declare const ActivityInterest$outboundSchema: z.ZodType<ActivityInterest$Outbound, z.ZodTypeDef, ActivityInterest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterest$ {
    /** @deprecated use `ActivityInterest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterest$Outbound, z.ZodTypeDef, ActivityInterest>;
    /** @deprecated use `ActivityInterest$Outbound` instead. */
    type Outbound = ActivityInterest$Outbound;
}
/** @internal */
export declare const ActivityInterestPaymentCashRate$inboundSchema: z.ZodType<ActivityInterestPaymentCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterestPaymentCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityInterestPaymentCashRate$outboundSchema: z.ZodType<ActivityInterestPaymentCashRate$Outbound, z.ZodTypeDef, ActivityInterestPaymentCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestPaymentCashRate$ {
    /** @deprecated use `ActivityInterestPaymentCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestPaymentCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestPaymentCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestPaymentCashRate$Outbound, z.ZodTypeDef, ActivityInterestPaymentCashRate>;
    /** @deprecated use `ActivityInterestPaymentCashRate$Outbound` instead. */
    type Outbound = ActivityInterestPaymentCashRate$Outbound;
}
/** @internal */
export declare const ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityInterestPaymentCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterestPaymentCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityInterestPaymentCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityInterestPaymentCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestPaymentCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestPaymentCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestPaymentCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityInterestPaymentCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityInterestPaymentCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityInterestPaymentPaymentDate$inboundSchema: z.ZodType<ActivityInterestPaymentPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterestPaymentPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityInterestPaymentPaymentDate$outboundSchema: z.ZodType<ActivityInterestPaymentPaymentDate$Outbound, z.ZodTypeDef, ActivityInterestPaymentPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestPaymentPaymentDate$ {
    /** @deprecated use `ActivityInterestPaymentPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestPaymentPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestPaymentPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestPaymentPaymentDate$Outbound, z.ZodTypeDef, ActivityInterestPaymentPaymentDate>;
    /** @deprecated use `ActivityInterestPaymentPaymentDate$Outbound` instead. */
    type Outbound = ActivityInterestPaymentPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityInterestPaymentRecordDate$inboundSchema: z.ZodType<ActivityInterestPaymentRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterestPaymentRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityInterestPaymentRecordDate$outboundSchema: z.ZodType<ActivityInterestPaymentRecordDate$Outbound, z.ZodTypeDef, ActivityInterestPaymentRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestPaymentRecordDate$ {
    /** @deprecated use `ActivityInterestPaymentRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestPaymentRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestPaymentRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestPaymentRecordDate$Outbound, z.ZodTypeDef, ActivityInterestPaymentRecordDate>;
    /** @deprecated use `ActivityInterestPaymentRecordDate$Outbound` instead. */
    type Outbound = ActivityInterestPaymentRecordDate$Outbound;
}
/** @internal */
export declare const ActivityInterestPaymentSettled$inboundSchema: z.ZodType<ActivityInterestPaymentSettled, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterestPaymentSettled$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityInterestPaymentSettled$outboundSchema: z.ZodType<ActivityInterestPaymentSettled$Outbound, z.ZodTypeDef, ActivityInterestPaymentSettled>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestPaymentSettled$ {
    /** @deprecated use `ActivityInterestPaymentSettled$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestPaymentSettled, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestPaymentSettled$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestPaymentSettled$Outbound, z.ZodTypeDef, ActivityInterestPaymentSettled>;
    /** @deprecated use `ActivityInterestPaymentSettled$Outbound` instead. */
    type Outbound = ActivityInterestPaymentSettled$Outbound;
}
/** @internal */
export declare const ActivityInterestPayment$inboundSchema: z.ZodType<ActivityInterestPayment, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityInterestPayment$Outbound = {
    cash_rate?: ActivityInterestPaymentCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityInterestPaymentCorporateActionGeneralInformation$Outbound | null | undefined;
    payment_date?: ActivityInterestPaymentPaymentDate$Outbound | null | undefined;
    record_date?: ActivityInterestPaymentRecordDate$Outbound | null | undefined;
    settled?: ActivityInterestPaymentSettled$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityInterestPayment$outboundSchema: z.ZodType<ActivityInterestPayment$Outbound, z.ZodTypeDef, ActivityInterestPayment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityInterestPayment$ {
    /** @deprecated use `ActivityInterestPayment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityInterestPayment, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityInterestPayment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityInterestPayment$Outbound, z.ZodTypeDef, ActivityInterestPayment>;
    /** @deprecated use `ActivityInterestPayment$Outbound` instead. */
    type Outbound = ActivityInterestPayment$Outbound;
}
/** @internal */
export declare const ActivityLiquidationAction$inboundSchema: z.ZodType<ActivityLiquidationActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityLiquidationAction$outboundSchema: z.ZodType<ActivityLiquidationActionOpen, z.ZodTypeDef, ActivityLiquidationActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidationAction$ {
    /** @deprecated use `ActivityLiquidationAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidationActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidationAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidationActionOpen, z.ZodTypeDef, ActivityLiquidationActionOpen>;
}
/** @internal */
export declare const ActivityLiquidationCashRate$inboundSchema: z.ZodType<ActivityLiquidationCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityLiquidationCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityLiquidationCashRate$outboundSchema: z.ZodType<ActivityLiquidationCashRate$Outbound, z.ZodTypeDef, ActivityLiquidationCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidationCashRate$ {
    /** @deprecated use `ActivityLiquidationCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidationCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidationCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidationCashRate$Outbound, z.ZodTypeDef, ActivityLiquidationCashRate>;
    /** @deprecated use `ActivityLiquidationCashRate$Outbound` instead. */
    type Outbound = ActivityLiquidationCashRate$Outbound;
}
/** @internal */
export declare const ActivityLiquidationCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityLiquidationCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityLiquidationCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityLiquidationCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityLiquidationCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityLiquidationCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidationCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidationCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidationCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityLiquidationCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityLiquidationCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityEffectiveDate$inboundSchema: z.ZodType<ActivityEffectiveDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityEffectiveDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityEffectiveDate$outboundSchema: z.ZodType<ActivityEffectiveDate$Outbound, z.ZodTypeDef, ActivityEffectiveDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityEffectiveDate$ {
    /** @deprecated use `ActivityEffectiveDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityEffectiveDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityEffectiveDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityEffectiveDate$Outbound, z.ZodTypeDef, ActivityEffectiveDate>;
    /** @deprecated use `ActivityEffectiveDate$Outbound` instead. */
    type Outbound = ActivityEffectiveDate$Outbound;
}
/** @internal */
export declare const ActivityLiquidationPaymentDate$inboundSchema: z.ZodType<ActivityLiquidationPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityLiquidationPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityLiquidationPaymentDate$outboundSchema: z.ZodType<ActivityLiquidationPaymentDate$Outbound, z.ZodTypeDef, ActivityLiquidationPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidationPaymentDate$ {
    /** @deprecated use `ActivityLiquidationPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidationPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidationPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidationPaymentDate$Outbound, z.ZodTypeDef, ActivityLiquidationPaymentDate>;
    /** @deprecated use `ActivityLiquidationPaymentDate$Outbound` instead. */
    type Outbound = ActivityLiquidationPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityLiquidationQuantity$inboundSchema: z.ZodType<ActivityLiquidationQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityLiquidationQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityLiquidationQuantity$outboundSchema: z.ZodType<ActivityLiquidationQuantity$Outbound, z.ZodTypeDef, ActivityLiquidationQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidationQuantity$ {
    /** @deprecated use `ActivityLiquidationQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidationQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidationQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidationQuantity$Outbound, z.ZodTypeDef, ActivityLiquidationQuantity>;
    /** @deprecated use `ActivityLiquidationQuantity$Outbound` instead. */
    type Outbound = ActivityLiquidationQuantity$Outbound;
}
/** @internal */
export declare const ActivityLiquidationRecordDate$inboundSchema: z.ZodType<ActivityLiquidationRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityLiquidationRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityLiquidationRecordDate$outboundSchema: z.ZodType<ActivityLiquidationRecordDate$Outbound, z.ZodTypeDef, ActivityLiquidationRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidationRecordDate$ {
    /** @deprecated use `ActivityLiquidationRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidationRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidationRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidationRecordDate$Outbound, z.ZodTypeDef, ActivityLiquidationRecordDate>;
    /** @deprecated use `ActivityLiquidationRecordDate$Outbound` instead. */
    type Outbound = ActivityLiquidationRecordDate$Outbound;
}
/** @internal */
export declare const ActivityLiquidationSettled$inboundSchema: z.ZodType<ActivityLiquidationSettled, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityLiquidationSettled$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityLiquidationSettled$outboundSchema: z.ZodType<ActivityLiquidationSettled$Outbound, z.ZodTypeDef, ActivityLiquidationSettled>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidationSettled$ {
    /** @deprecated use `ActivityLiquidationSettled$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidationSettled, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidationSettled$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidationSettled$Outbound, z.ZodTypeDef, ActivityLiquidationSettled>;
    /** @deprecated use `ActivityLiquidationSettled$Outbound` instead. */
    type Outbound = ActivityLiquidationSettled$Outbound;
}
/** @internal */
export declare const ActivityLiquidationSubtype$inboundSchema: z.ZodType<ActivityLiquidationSubtypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityLiquidationSubtype$outboundSchema: z.ZodType<ActivityLiquidationSubtypeOpen, z.ZodTypeDef, ActivityLiquidationSubtypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidationSubtype$ {
    /** @deprecated use `ActivityLiquidationSubtype$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidationSubtypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidationSubtype$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidationSubtypeOpen, z.ZodTypeDef, ActivityLiquidationSubtypeOpen>;
}
/** @internal */
export declare const ActivityLiquidation$inboundSchema: z.ZodType<ActivityLiquidation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityLiquidation$Outbound = {
    action?: string | undefined;
    cash_rate?: ActivityLiquidationCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityLiquidationCorporateActionGeneralInformation$Outbound | null | undefined;
    effective_date?: ActivityEffectiveDate$Outbound | null | undefined;
    payment_date?: ActivityLiquidationPaymentDate$Outbound | null | undefined;
    quantity?: ActivityLiquidationQuantity$Outbound | null | undefined;
    record_date?: ActivityLiquidationRecordDate$Outbound | null | undefined;
    settled?: ActivityLiquidationSettled$Outbound | null | undefined;
    subtype?: string | undefined;
};
/** @internal */
export declare const ActivityLiquidation$outboundSchema: z.ZodType<ActivityLiquidation$Outbound, z.ZodTypeDef, ActivityLiquidation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityLiquidation$ {
    /** @deprecated use `ActivityLiquidation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityLiquidation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityLiquidation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityLiquidation$Outbound, z.ZodTypeDef, ActivityLiquidation>;
    /** @deprecated use `ActivityLiquidation$Outbound` instead. */
    type Outbound = ActivityLiquidation$Outbound;
}
/** @internal */
export declare const ActivityMaturityCashRate$inboundSchema: z.ZodType<ActivityMaturityCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMaturityCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityMaturityCashRate$outboundSchema: z.ZodType<ActivityMaturityCashRate$Outbound, z.ZodTypeDef, ActivityMaturityCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMaturityCashRate$ {
    /** @deprecated use `ActivityMaturityCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMaturityCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMaturityCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMaturityCashRate$Outbound, z.ZodTypeDef, ActivityMaturityCashRate>;
    /** @deprecated use `ActivityMaturityCashRate$Outbound` instead. */
    type Outbound = ActivityMaturityCashRate$Outbound;
}
/** @internal */
export declare const ActivityMaturityCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityMaturityCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMaturityCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityMaturityCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityMaturityCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityMaturityCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMaturityCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMaturityCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMaturityCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityMaturityCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityMaturityCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityMaturityPaymentDate$inboundSchema: z.ZodType<ActivityMaturityPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMaturityPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityMaturityPaymentDate$outboundSchema: z.ZodType<ActivityMaturityPaymentDate$Outbound, z.ZodTypeDef, ActivityMaturityPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMaturityPaymentDate$ {
    /** @deprecated use `ActivityMaturityPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMaturityPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMaturityPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMaturityPaymentDate$Outbound, z.ZodTypeDef, ActivityMaturityPaymentDate>;
    /** @deprecated use `ActivityMaturityPaymentDate$Outbound` instead. */
    type Outbound = ActivityMaturityPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityMaturityQuantity$inboundSchema: z.ZodType<ActivityMaturityQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMaturityQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityMaturityQuantity$outboundSchema: z.ZodType<ActivityMaturityQuantity$Outbound, z.ZodTypeDef, ActivityMaturityQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMaturityQuantity$ {
    /** @deprecated use `ActivityMaturityQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMaturityQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMaturityQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMaturityQuantity$Outbound, z.ZodTypeDef, ActivityMaturityQuantity>;
    /** @deprecated use `ActivityMaturityQuantity$Outbound` instead. */
    type Outbound = ActivityMaturityQuantity$Outbound;
}
/** @internal */
export declare const ActivityMaturity$inboundSchema: z.ZodType<ActivityMaturity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMaturity$Outbound = {
    cash_rate?: ActivityMaturityCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityMaturityCorporateActionGeneralInformation$Outbound | null | undefined;
    payment_date?: ActivityMaturityPaymentDate$Outbound | null | undefined;
    quantity?: ActivityMaturityQuantity$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityMaturity$outboundSchema: z.ZodType<ActivityMaturity$Outbound, z.ZodTypeDef, ActivityMaturity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMaturity$ {
    /** @deprecated use `ActivityMaturity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMaturity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMaturity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMaturity$Outbound, z.ZodTypeDef, ActivityMaturity>;
    /** @deprecated use `ActivityMaturity$Outbound` instead. */
    type Outbound = ActivityMaturity$Outbound;
}
/** @internal */
export declare const ActivityMergerAction$inboundSchema: z.ZodType<ActivityMergerActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityMergerAction$outboundSchema: z.ZodType<ActivityMergerActionOpen, z.ZodTypeDef, ActivityMergerActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMergerAction$ {
    /** @deprecated use `ActivityMergerAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMergerActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMergerAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMergerActionOpen, z.ZodTypeDef, ActivityMergerActionOpen>;
}
/** @internal */
export declare const ActivityMergerCashRate$inboundSchema: z.ZodType<ActivityMergerCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMergerCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityMergerCashRate$outboundSchema: z.ZodType<ActivityMergerCashRate$Outbound, z.ZodTypeDef, ActivityMergerCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMergerCashRate$ {
    /** @deprecated use `ActivityMergerCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMergerCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMergerCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMergerCashRate$Outbound, z.ZodTypeDef, ActivityMergerCashRate>;
    /** @deprecated use `ActivityMergerCashRate$Outbound` instead. */
    type Outbound = ActivityMergerCashRate$Outbound;
}
/** @internal */
export declare const ActivityMergerCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityMergerCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMergerCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityMergerCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityMergerCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityMergerCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMergerCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMergerCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMergerCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityMergerCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityMergerCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityMergerEffectiveDate$inboundSchema: z.ZodType<ActivityMergerEffectiveDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMergerEffectiveDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityMergerEffectiveDate$outboundSchema: z.ZodType<ActivityMergerEffectiveDate$Outbound, z.ZodTypeDef, ActivityMergerEffectiveDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMergerEffectiveDate$ {
    /** @deprecated use `ActivityMergerEffectiveDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMergerEffectiveDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMergerEffectiveDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMergerEffectiveDate$Outbound, z.ZodTypeDef, ActivityMergerEffectiveDate>;
    /** @deprecated use `ActivityMergerEffectiveDate$Outbound` instead. */
    type Outbound = ActivityMergerEffectiveDate$Outbound;
}
/** @internal */
export declare const ActivityMergerQuantity$inboundSchema: z.ZodType<ActivityMergerQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMergerQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityMergerQuantity$outboundSchema: z.ZodType<ActivityMergerQuantity$Outbound, z.ZodTypeDef, ActivityMergerQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMergerQuantity$ {
    /** @deprecated use `ActivityMergerQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMergerQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMergerQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMergerQuantity$Outbound, z.ZodTypeDef, ActivityMergerQuantity>;
    /** @deprecated use `ActivityMergerQuantity$Outbound` instead. */
    type Outbound = ActivityMergerQuantity$Outbound;
}
/** @internal */
export declare const ActivityMergerStockRate$inboundSchema: z.ZodType<ActivityMergerStockRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMergerStockRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityMergerStockRate$outboundSchema: z.ZodType<ActivityMergerStockRate$Outbound, z.ZodTypeDef, ActivityMergerStockRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMergerStockRate$ {
    /** @deprecated use `ActivityMergerStockRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMergerStockRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMergerStockRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMergerStockRate$Outbound, z.ZodTypeDef, ActivityMergerStockRate>;
    /** @deprecated use `ActivityMergerStockRate$Outbound` instead. */
    type Outbound = ActivityMergerStockRate$Outbound;
}
/** @internal */
export declare const ActivityMergerType$inboundSchema: z.ZodType<ActivityMergerTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityMergerType$outboundSchema: z.ZodType<ActivityMergerTypeOpen, z.ZodTypeDef, ActivityMergerTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMergerType$ {
    /** @deprecated use `ActivityMergerType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMergerTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMergerType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMergerTypeOpen, z.ZodTypeDef, ActivityMergerTypeOpen>;
}
/** @internal */
export declare const ActivityMerger$inboundSchema: z.ZodType<ActivityMerger, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityMerger$Outbound = {
    action?: string | undefined;
    cash_rate?: ActivityMergerCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityMergerCorporateActionGeneralInformation$Outbound | null | undefined;
    effective_date?: ActivityMergerEffectiveDate$Outbound | null | undefined;
    quantity?: ActivityMergerQuantity$Outbound | null | undefined;
    stock_rate?: ActivityMergerStockRate$Outbound | null | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const ActivityMerger$outboundSchema: z.ZodType<ActivityMerger$Outbound, z.ZodTypeDef, ActivityMerger>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityMerger$ {
    /** @deprecated use `ActivityMerger$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityMerger, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityMerger$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityMerger$Outbound, z.ZodTypeDef, ActivityMerger>;
    /** @deprecated use `ActivityMerger$Outbound` instead. */
    type Outbound = ActivityMerger$Outbound;
}
/** @internal */
export declare const ActivityNameChangeAction$inboundSchema: z.ZodType<ActivityNameChangeActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityNameChangeAction$outboundSchema: z.ZodType<ActivityNameChangeActionOpen, z.ZodTypeDef, ActivityNameChangeActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityNameChangeAction$ {
    /** @deprecated use `ActivityNameChangeAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityNameChangeActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityNameChangeAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityNameChangeActionOpen, z.ZodTypeDef, ActivityNameChangeActionOpen>;
}
/** @internal */
export declare const ActivityNameChangeCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityNameChangeCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityNameChangeCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityNameChangeCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityNameChangeCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityNameChangeCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityNameChangeCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityNameChangeCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityNameChangeCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityNameChangeCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityNameChangeCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityNameChangeEffectiveDate$inboundSchema: z.ZodType<ActivityNameChangeEffectiveDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityNameChangeEffectiveDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityNameChangeEffectiveDate$outboundSchema: z.ZodType<ActivityNameChangeEffectiveDate$Outbound, z.ZodTypeDef, ActivityNameChangeEffectiveDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityNameChangeEffectiveDate$ {
    /** @deprecated use `ActivityNameChangeEffectiveDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityNameChangeEffectiveDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityNameChangeEffectiveDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityNameChangeEffectiveDate$Outbound, z.ZodTypeDef, ActivityNameChangeEffectiveDate>;
    /** @deprecated use `ActivityNameChangeEffectiveDate$Outbound` instead. */
    type Outbound = ActivityNameChangeEffectiveDate$Outbound;
}
/** @internal */
export declare const ActivityNameChangeQuantity$inboundSchema: z.ZodType<ActivityNameChangeQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityNameChangeQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityNameChangeQuantity$outboundSchema: z.ZodType<ActivityNameChangeQuantity$Outbound, z.ZodTypeDef, ActivityNameChangeQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityNameChangeQuantity$ {
    /** @deprecated use `ActivityNameChangeQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityNameChangeQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityNameChangeQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityNameChangeQuantity$Outbound, z.ZodTypeDef, ActivityNameChangeQuantity>;
    /** @deprecated use `ActivityNameChangeQuantity$Outbound` instead. */
    type Outbound = ActivityNameChangeQuantity$Outbound;
}
/** @internal */
export declare const ActivityNameChange$inboundSchema: z.ZodType<ActivityNameChange, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityNameChange$Outbound = {
    action?: string | undefined;
    corporate_action_general_information?: ActivityNameChangeCorporateActionGeneralInformation$Outbound | null | undefined;
    effective_date?: ActivityNameChangeEffectiveDate$Outbound | null | undefined;
    quantity?: ActivityNameChangeQuantity$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityNameChange$outboundSchema: z.ZodType<ActivityNameChange$Outbound, z.ZodTypeDef, ActivityNameChange>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityNameChange$ {
    /** @deprecated use `ActivityNameChange$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityNameChange, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityNameChange$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityNameChange$Outbound, z.ZodTypeDef, ActivityNameChange>;
    /** @deprecated use `ActivityNameChange$Outbound` instead. */
    type Outbound = ActivityNameChange$Outbound;
}
/** @internal */
export declare const ActivityNetAmount$inboundSchema: z.ZodType<ActivityNetAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityNetAmount$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityNetAmount$outboundSchema: z.ZodType<ActivityNetAmount$Outbound, z.ZodTypeDef, ActivityNetAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityNetAmount$ {
    /** @deprecated use `ActivityNetAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityNetAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityNetAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityNetAmount$Outbound, z.ZodTypeDef, ActivityNetAmount>;
    /** @deprecated use `ActivityNetAmount$Outbound` instead. */
    type Outbound = ActivityNetAmount$Outbound;
}
/** @internal */
export declare const NextActivityProcessDate$inboundSchema: z.ZodType<NextActivityProcessDate, z.ZodTypeDef, unknown>;
/** @internal */
export type NextActivityProcessDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const NextActivityProcessDate$outboundSchema: z.ZodType<NextActivityProcessDate$Outbound, z.ZodTypeDef, NextActivityProcessDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NextActivityProcessDate$ {
    /** @deprecated use `NextActivityProcessDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NextActivityProcessDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `NextActivityProcessDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NextActivityProcessDate$Outbound, z.ZodTypeDef, NextActivityProcessDate>;
    /** @deprecated use `NextActivityProcessDate$Outbound` instead. */
    type Outbound = NextActivityProcessDate$Outbound;
}
/** @internal */
export declare const None$inboundSchema: z.ZodType<None, z.ZodTypeDef, unknown>;
/** @internal */
export type None$Outbound = {};
/** @internal */
export declare const None$outboundSchema: z.ZodType<None$Outbound, z.ZodTypeDef, None>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace None$ {
    /** @deprecated use `None$inboundSchema` instead. */
    const inboundSchema: z.ZodType<None, z.ZodTypeDef, unknown>;
    /** @deprecated use `None$outboundSchema` instead. */
    const outboundSchema: z.ZodType<None$Outbound, z.ZodTypeDef, None>;
    /** @deprecated use `None$Outbound` instead. */
    type Outbound = None$Outbound;
}
/** @internal */
export declare const ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityPaymentInKindCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPaymentInKindCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityPaymentInKindCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityPaymentInKindCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPaymentInKindCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPaymentInKindCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPaymentInKindCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityPaymentInKindCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityPaymentInKindCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityPaymentInKindPaymentDate$inboundSchema: z.ZodType<ActivityPaymentInKindPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPaymentInKindPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityPaymentInKindPaymentDate$outboundSchema: z.ZodType<ActivityPaymentInKindPaymentDate$Outbound, z.ZodTypeDef, ActivityPaymentInKindPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPaymentInKindPaymentDate$ {
    /** @deprecated use `ActivityPaymentInKindPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPaymentInKindPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPaymentInKindPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPaymentInKindPaymentDate$Outbound, z.ZodTypeDef, ActivityPaymentInKindPaymentDate>;
    /** @deprecated use `ActivityPaymentInKindPaymentDate$Outbound` instead. */
    type Outbound = ActivityPaymentInKindPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityPaymentInKindRecordDate$inboundSchema: z.ZodType<ActivityPaymentInKindRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPaymentInKindRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityPaymentInKindRecordDate$outboundSchema: z.ZodType<ActivityPaymentInKindRecordDate$Outbound, z.ZodTypeDef, ActivityPaymentInKindRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPaymentInKindRecordDate$ {
    /** @deprecated use `ActivityPaymentInKindRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPaymentInKindRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPaymentInKindRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPaymentInKindRecordDate$Outbound, z.ZodTypeDef, ActivityPaymentInKindRecordDate>;
    /** @deprecated use `ActivityPaymentInKindRecordDate$Outbound` instead. */
    type Outbound = ActivityPaymentInKindRecordDate$Outbound;
}
/** @internal */
export declare const ActivityPaymentInKindSettled$inboundSchema: z.ZodType<ActivityPaymentInKindSettled, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPaymentInKindSettled$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityPaymentInKindSettled$outboundSchema: z.ZodType<ActivityPaymentInKindSettled$Outbound, z.ZodTypeDef, ActivityPaymentInKindSettled>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPaymentInKindSettled$ {
    /** @deprecated use `ActivityPaymentInKindSettled$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPaymentInKindSettled, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPaymentInKindSettled$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPaymentInKindSettled$Outbound, z.ZodTypeDef, ActivityPaymentInKindSettled>;
    /** @deprecated use `ActivityPaymentInKindSettled$Outbound` instead. */
    type Outbound = ActivityPaymentInKindSettled$Outbound;
}
/** @internal */
export declare const ActivityPaymentInKindStockRate$inboundSchema: z.ZodType<ActivityPaymentInKindStockRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPaymentInKindStockRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityPaymentInKindStockRate$outboundSchema: z.ZodType<ActivityPaymentInKindStockRate$Outbound, z.ZodTypeDef, ActivityPaymentInKindStockRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPaymentInKindStockRate$ {
    /** @deprecated use `ActivityPaymentInKindStockRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPaymentInKindStockRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPaymentInKindStockRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPaymentInKindStockRate$Outbound, z.ZodTypeDef, ActivityPaymentInKindStockRate>;
    /** @deprecated use `ActivityPaymentInKindStockRate$Outbound` instead. */
    type Outbound = ActivityPaymentInKindStockRate$Outbound;
}
/** @internal */
export declare const ActivityPaymentInKind$inboundSchema: z.ZodType<ActivityPaymentInKind, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPaymentInKind$Outbound = {
    corporate_action_general_information?: ActivityPaymentInKindCorporateActionGeneralInformation$Outbound | null | undefined;
    payment_date?: ActivityPaymentInKindPaymentDate$Outbound | null | undefined;
    record_date?: ActivityPaymentInKindRecordDate$Outbound | null | undefined;
    settled?: ActivityPaymentInKindSettled$Outbound | null | undefined;
    stock_rate?: ActivityPaymentInKindStockRate$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityPaymentInKind$outboundSchema: z.ZodType<ActivityPaymentInKind$Outbound, z.ZodTypeDef, ActivityPaymentInKind>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPaymentInKind$ {
    /** @deprecated use `ActivityPaymentInKind$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPaymentInKind, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPaymentInKind$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPaymentInKind$Outbound, z.ZodTypeDef, ActivityPaymentInKind>;
    /** @deprecated use `ActivityPaymentInKind$Outbound` instead. */
    type Outbound = ActivityPaymentInKind$Outbound;
}
/** @internal */
export declare const PreviousProcessDate$inboundSchema: z.ZodType<PreviousProcessDate, z.ZodTypeDef, unknown>;
/** @internal */
export type PreviousProcessDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const PreviousProcessDate$outboundSchema: z.ZodType<PreviousProcessDate$Outbound, z.ZodTypeDef, PreviousProcessDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PreviousProcessDate$ {
    /** @deprecated use `PreviousProcessDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PreviousProcessDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `PreviousProcessDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PreviousProcessDate$Outbound, z.ZodTypeDef, PreviousProcessDate>;
    /** @deprecated use `PreviousProcessDate$Outbound` instead. */
    type Outbound = PreviousProcessDate$Outbound;
}
/** @internal */
export declare const ActivityPrice$inboundSchema: z.ZodType<ActivityPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPrice$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityPrice$outboundSchema: z.ZodType<ActivityPrice$Outbound, z.ZodTypeDef, ActivityPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPrice$ {
    /** @deprecated use `ActivityPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPrice$Outbound, z.ZodTypeDef, ActivityPrice>;
    /** @deprecated use `ActivityPrice$Outbound` instead. */
    type Outbound = ActivityPrice$Outbound;
}
/** @internal */
export declare const ActivityProcessDate$inboundSchema: z.ZodType<ActivityProcessDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityProcessDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityProcessDate$outboundSchema: z.ZodType<ActivityProcessDate$Outbound, z.ZodTypeDef, ActivityProcessDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityProcessDate$ {
    /** @deprecated use `ActivityProcessDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityProcessDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityProcessDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityProcessDate$Outbound, z.ZodTypeDef, ActivityProcessDate>;
    /** @deprecated use `ActivityProcessDate$Outbound` instead. */
    type Outbound = ActivityProcessDate$Outbound;
}
/** @internal */
export declare const ActivityQuantity$inboundSchema: z.ZodType<ActivityQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityQuantity$outboundSchema: z.ZodType<ActivityQuantity$Outbound, z.ZodTypeDef, ActivityQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityQuantity$ {
    /** @deprecated use `ActivityQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityQuantity$Outbound, z.ZodTypeDef, ActivityQuantity>;
    /** @deprecated use `ActivityQuantity$Outbound` instead. */
    type Outbound = ActivityQuantity$Outbound;
}
/** @internal */
export declare const ActivityRedemptionFullAction$inboundSchema: z.ZodType<ActivityRedemptionFullActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityRedemptionFullAction$outboundSchema: z.ZodType<ActivityRedemptionFullActionOpen, z.ZodTypeDef, ActivityRedemptionFullActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionFullAction$ {
    /** @deprecated use `ActivityRedemptionFullAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionFullActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionFullAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionFullActionOpen, z.ZodTypeDef, ActivityRedemptionFullActionOpen>;
}
/** @internal */
export declare const ActivityRedemptionFullCashRate$inboundSchema: z.ZodType<ActivityRedemptionFullCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionFullCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityRedemptionFullCashRate$outboundSchema: z.ZodType<ActivityRedemptionFullCashRate$Outbound, z.ZodTypeDef, ActivityRedemptionFullCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionFullCashRate$ {
    /** @deprecated use `ActivityRedemptionFullCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionFullCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionFullCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionFullCashRate$Outbound, z.ZodTypeDef, ActivityRedemptionFullCashRate>;
    /** @deprecated use `ActivityRedemptionFullCashRate$Outbound` instead. */
    type Outbound = ActivityRedemptionFullCashRate$Outbound;
}
/** @internal */
export declare const ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityRedemptionFullCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionFullCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityRedemptionFullCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityRedemptionFullCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionFullCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionFullCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionFullCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityRedemptionFullCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityRedemptionFullCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityRedemptionFullPaymentDate$inboundSchema: z.ZodType<ActivityRedemptionFullPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionFullPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityRedemptionFullPaymentDate$outboundSchema: z.ZodType<ActivityRedemptionFullPaymentDate$Outbound, z.ZodTypeDef, ActivityRedemptionFullPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionFullPaymentDate$ {
    /** @deprecated use `ActivityRedemptionFullPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionFullPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionFullPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionFullPaymentDate$Outbound, z.ZodTypeDef, ActivityRedemptionFullPaymentDate>;
    /** @deprecated use `ActivityRedemptionFullPaymentDate$Outbound` instead. */
    type Outbound = ActivityRedemptionFullPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityRedemptionFullQuantity$inboundSchema: z.ZodType<ActivityRedemptionFullQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionFullQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityRedemptionFullQuantity$outboundSchema: z.ZodType<ActivityRedemptionFullQuantity$Outbound, z.ZodTypeDef, ActivityRedemptionFullQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionFullQuantity$ {
    /** @deprecated use `ActivityRedemptionFullQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionFullQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionFullQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionFullQuantity$Outbound, z.ZodTypeDef, ActivityRedemptionFullQuantity>;
    /** @deprecated use `ActivityRedemptionFullQuantity$Outbound` instead. */
    type Outbound = ActivityRedemptionFullQuantity$Outbound;
}
/** @internal */
export declare const ActivityRedemptionFullSubtype$inboundSchema: z.ZodType<ActivityRedemptionFullSubtypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityRedemptionFullSubtype$outboundSchema: z.ZodType<ActivityRedemptionFullSubtypeOpen, z.ZodTypeDef, ActivityRedemptionFullSubtypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionFullSubtype$ {
    /** @deprecated use `ActivityRedemptionFullSubtype$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionFullSubtypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionFullSubtype$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionFullSubtypeOpen, z.ZodTypeDef, ActivityRedemptionFullSubtypeOpen>;
}
/** @internal */
export declare const ActivityRedemptionFull$inboundSchema: z.ZodType<ActivityRedemptionFull, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionFull$Outbound = {
    action?: string | undefined;
    cash_rate?: ActivityRedemptionFullCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityRedemptionFullCorporateActionGeneralInformation$Outbound | null | undefined;
    payment_date?: ActivityRedemptionFullPaymentDate$Outbound | null | undefined;
    quantity?: ActivityRedemptionFullQuantity$Outbound | null | undefined;
    subtype?: string | undefined;
};
/** @internal */
export declare const ActivityRedemptionFull$outboundSchema: z.ZodType<ActivityRedemptionFull$Outbound, z.ZodTypeDef, ActivityRedemptionFull>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionFull$ {
    /** @deprecated use `ActivityRedemptionFull$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionFull, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionFull$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionFull$Outbound, z.ZodTypeDef, ActivityRedemptionFull>;
    /** @deprecated use `ActivityRedemptionFull$Outbound` instead. */
    type Outbound = ActivityRedemptionFull$Outbound;
}
/** @internal */
export declare const ActivityRedemptionPartialAction$inboundSchema: z.ZodType<ActivityRedemptionPartialActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityRedemptionPartialAction$outboundSchema: z.ZodType<ActivityRedemptionPartialActionOpen, z.ZodTypeDef, ActivityRedemptionPartialActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionPartialAction$ {
    /** @deprecated use `ActivityRedemptionPartialAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionPartialActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionPartialAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionPartialActionOpen, z.ZodTypeDef, ActivityRedemptionPartialActionOpen>;
}
/** @internal */
export declare const ActivityRedemptionPartialCashRate$inboundSchema: z.ZodType<ActivityRedemptionPartialCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionPartialCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityRedemptionPartialCashRate$outboundSchema: z.ZodType<ActivityRedemptionPartialCashRate$Outbound, z.ZodTypeDef, ActivityRedemptionPartialCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionPartialCashRate$ {
    /** @deprecated use `ActivityRedemptionPartialCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionPartialCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionPartialCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionPartialCashRate$Outbound, z.ZodTypeDef, ActivityRedemptionPartialCashRate>;
    /** @deprecated use `ActivityRedemptionPartialCashRate$Outbound` instead. */
    type Outbound = ActivityRedemptionPartialCashRate$Outbound;
}
/** @internal */
export declare const ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityRedemptionPartialCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityRedemptionPartialCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionPartialCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionPartialCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityRedemptionPartialCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityRedemptionPartialPaymentDate$inboundSchema: z.ZodType<ActivityRedemptionPartialPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionPartialPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityRedemptionPartialPaymentDate$outboundSchema: z.ZodType<ActivityRedemptionPartialPaymentDate$Outbound, z.ZodTypeDef, ActivityRedemptionPartialPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionPartialPaymentDate$ {
    /** @deprecated use `ActivityRedemptionPartialPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionPartialPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionPartialPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionPartialPaymentDate$Outbound, z.ZodTypeDef, ActivityRedemptionPartialPaymentDate>;
    /** @deprecated use `ActivityRedemptionPartialPaymentDate$Outbound` instead. */
    type Outbound = ActivityRedemptionPartialPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityRedemptionPartialQuantity$inboundSchema: z.ZodType<ActivityRedemptionPartialQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionPartialQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityRedemptionPartialQuantity$outboundSchema: z.ZodType<ActivityRedemptionPartialQuantity$Outbound, z.ZodTypeDef, ActivityRedemptionPartialQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionPartialQuantity$ {
    /** @deprecated use `ActivityRedemptionPartialQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionPartialQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionPartialQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionPartialQuantity$Outbound, z.ZodTypeDef, ActivityRedemptionPartialQuantity>;
    /** @deprecated use `ActivityRedemptionPartialQuantity$Outbound` instead. */
    type Outbound = ActivityRedemptionPartialQuantity$Outbound;
}
/** @internal */
export declare const ActivityRedemptionPartial$inboundSchema: z.ZodType<ActivityRedemptionPartial, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRedemptionPartial$Outbound = {
    action?: string | undefined;
    cash_rate?: ActivityRedemptionPartialCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound | null | undefined;
    payment_date?: ActivityRedemptionPartialPaymentDate$Outbound | null | undefined;
    quantity?: ActivityRedemptionPartialQuantity$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityRedemptionPartial$outboundSchema: z.ZodType<ActivityRedemptionPartial$Outbound, z.ZodTypeDef, ActivityRedemptionPartial>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRedemptionPartial$ {
    /** @deprecated use `ActivityRedemptionPartial$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRedemptionPartial, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRedemptionPartial$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRedemptionPartial$Outbound, z.ZodTypeDef, ActivityRedemptionPartial>;
    /** @deprecated use `ActivityRedemptionPartial$Outbound` instead. */
    type Outbound = ActivityRedemptionPartial$Outbound;
}
/** @internal */
export declare const ActivityReverseStockSplitAction$inboundSchema: z.ZodType<ActivityReverseStockSplitActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityReverseStockSplitAction$outboundSchema: z.ZodType<ActivityReverseStockSplitActionOpen, z.ZodTypeDef, ActivityReverseStockSplitActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityReverseStockSplitAction$ {
    /** @deprecated use `ActivityReverseStockSplitAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityReverseStockSplitActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityReverseStockSplitAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityReverseStockSplitActionOpen, z.ZodTypeDef, ActivityReverseStockSplitActionOpen>;
}
/** @internal */
export declare const ActivityReverseStockSplitCashRate$inboundSchema: z.ZodType<ActivityReverseStockSplitCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityReverseStockSplitCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityReverseStockSplitCashRate$outboundSchema: z.ZodType<ActivityReverseStockSplitCashRate$Outbound, z.ZodTypeDef, ActivityReverseStockSplitCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityReverseStockSplitCashRate$ {
    /** @deprecated use `ActivityReverseStockSplitCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityReverseStockSplitCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityReverseStockSplitCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityReverseStockSplitCashRate$Outbound, z.ZodTypeDef, ActivityReverseStockSplitCashRate>;
    /** @deprecated use `ActivityReverseStockSplitCashRate$Outbound` instead. */
    type Outbound = ActivityReverseStockSplitCashRate$Outbound;
}
/** @internal */
export declare const ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityReverseStockSplitCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityReverseStockSplitCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityReverseStockSplitCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityReverseStockSplitCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityReverseStockSplitCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityReverseStockSplitEffectiveDate$inboundSchema: z.ZodType<ActivityReverseStockSplitEffectiveDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityReverseStockSplitEffectiveDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityReverseStockSplitEffectiveDate$outboundSchema: z.ZodType<ActivityReverseStockSplitEffectiveDate$Outbound, z.ZodTypeDef, ActivityReverseStockSplitEffectiveDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityReverseStockSplitEffectiveDate$ {
    /** @deprecated use `ActivityReverseStockSplitEffectiveDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityReverseStockSplitEffectiveDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityReverseStockSplitEffectiveDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityReverseStockSplitEffectiveDate$Outbound, z.ZodTypeDef, ActivityReverseStockSplitEffectiveDate>;
    /** @deprecated use `ActivityReverseStockSplitEffectiveDate$Outbound` instead. */
    type Outbound = ActivityReverseStockSplitEffectiveDate$Outbound;
}
/** @internal */
export declare const ActivityFactorDenominator$inboundSchema: z.ZodType<ActivityFactorDenominator, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityFactorDenominator$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityFactorDenominator$outboundSchema: z.ZodType<ActivityFactorDenominator$Outbound, z.ZodTypeDef, ActivityFactorDenominator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityFactorDenominator$ {
    /** @deprecated use `ActivityFactorDenominator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityFactorDenominator, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityFactorDenominator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityFactorDenominator$Outbound, z.ZodTypeDef, ActivityFactorDenominator>;
    /** @deprecated use `ActivityFactorDenominator$Outbound` instead. */
    type Outbound = ActivityFactorDenominator$Outbound;
}
/** @internal */
export declare const ActivityFactorNumerator$inboundSchema: z.ZodType<ActivityFactorNumerator, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityFactorNumerator$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityFactorNumerator$outboundSchema: z.ZodType<ActivityFactorNumerator$Outbound, z.ZodTypeDef, ActivityFactorNumerator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityFactorNumerator$ {
    /** @deprecated use `ActivityFactorNumerator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityFactorNumerator, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityFactorNumerator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityFactorNumerator$Outbound, z.ZodTypeDef, ActivityFactorNumerator>;
    /** @deprecated use `ActivityFactorNumerator$Outbound` instead. */
    type Outbound = ActivityFactorNumerator$Outbound;
}
/** @internal */
export declare const ActivityReverseStockSplitQuantity$inboundSchema: z.ZodType<ActivityReverseStockSplitQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityReverseStockSplitQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityReverseStockSplitQuantity$outboundSchema: z.ZodType<ActivityReverseStockSplitQuantity$Outbound, z.ZodTypeDef, ActivityReverseStockSplitQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityReverseStockSplitQuantity$ {
    /** @deprecated use `ActivityReverseStockSplitQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityReverseStockSplitQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityReverseStockSplitQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityReverseStockSplitQuantity$Outbound, z.ZodTypeDef, ActivityReverseStockSplitQuantity>;
    /** @deprecated use `ActivityReverseStockSplitQuantity$Outbound` instead. */
    type Outbound = ActivityReverseStockSplitQuantity$Outbound;
}
/** @internal */
export declare const ActivityReverseStockSplit$inboundSchema: z.ZodType<ActivityReverseStockSplit, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityReverseStockSplit$Outbound = {
    action?: string | undefined;
    cash_rate?: ActivityReverseStockSplitCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound | null | undefined;
    effective_date?: ActivityReverseStockSplitEffectiveDate$Outbound | null | undefined;
    factor_denominator?: ActivityFactorDenominator$Outbound | null | undefined;
    factor_numerator?: ActivityFactorNumerator$Outbound | null | undefined;
    quantity?: ActivityReverseStockSplitQuantity$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityReverseStockSplit$outboundSchema: z.ZodType<ActivityReverseStockSplit$Outbound, z.ZodTypeDef, ActivityReverseStockSplit>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityReverseStockSplit$ {
    /** @deprecated use `ActivityReverseStockSplit$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityReverseStockSplit, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityReverseStockSplit$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityReverseStockSplit$Outbound, z.ZodTypeDef, ActivityReverseStockSplit>;
    /** @deprecated use `ActivityReverseStockSplit$Outbound` instead. */
    type Outbound = ActivityReverseStockSplit$Outbound;
}
/** @internal */
export declare const ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityRightsDistributionCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRightsDistributionCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityRightsDistributionCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityRightsDistributionCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRightsDistributionCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRightsDistributionCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRightsDistributionCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityRightsDistributionCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityRightsDistributionCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityRightsDistributionPaymentDate$inboundSchema: z.ZodType<ActivityRightsDistributionPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRightsDistributionPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityRightsDistributionPaymentDate$outboundSchema: z.ZodType<ActivityRightsDistributionPaymentDate$Outbound, z.ZodTypeDef, ActivityRightsDistributionPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRightsDistributionPaymentDate$ {
    /** @deprecated use `ActivityRightsDistributionPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRightsDistributionPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRightsDistributionPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRightsDistributionPaymentDate$Outbound, z.ZodTypeDef, ActivityRightsDistributionPaymentDate>;
    /** @deprecated use `ActivityRightsDistributionPaymentDate$Outbound` instead. */
    type Outbound = ActivityRightsDistributionPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityRightsDistributionRecordDate$inboundSchema: z.ZodType<ActivityRightsDistributionRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRightsDistributionRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityRightsDistributionRecordDate$outboundSchema: z.ZodType<ActivityRightsDistributionRecordDate$Outbound, z.ZodTypeDef, ActivityRightsDistributionRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRightsDistributionRecordDate$ {
    /** @deprecated use `ActivityRightsDistributionRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRightsDistributionRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRightsDistributionRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRightsDistributionRecordDate$Outbound, z.ZodTypeDef, ActivityRightsDistributionRecordDate>;
    /** @deprecated use `ActivityRightsDistributionRecordDate$Outbound` instead. */
    type Outbound = ActivityRightsDistributionRecordDate$Outbound;
}
/** @internal */
export declare const ActivityRightsDistributionSettled$inboundSchema: z.ZodType<ActivityRightsDistributionSettled, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRightsDistributionSettled$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityRightsDistributionSettled$outboundSchema: z.ZodType<ActivityRightsDistributionSettled$Outbound, z.ZodTypeDef, ActivityRightsDistributionSettled>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRightsDistributionSettled$ {
    /** @deprecated use `ActivityRightsDistributionSettled$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRightsDistributionSettled, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRightsDistributionSettled$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRightsDistributionSettled$Outbound, z.ZodTypeDef, ActivityRightsDistributionSettled>;
    /** @deprecated use `ActivityRightsDistributionSettled$Outbound` instead. */
    type Outbound = ActivityRightsDistributionSettled$Outbound;
}
/** @internal */
export declare const ActivityRightsDistribution$inboundSchema: z.ZodType<ActivityRightsDistribution, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRightsDistribution$Outbound = {
    corporate_action_general_information?: ActivityRightsDistributionCorporateActionGeneralInformation$Outbound | null | undefined;
    payment_date?: ActivityRightsDistributionPaymentDate$Outbound | null | undefined;
    record_date?: ActivityRightsDistributionRecordDate$Outbound | null | undefined;
    settled?: ActivityRightsDistributionSettled$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityRightsDistribution$outboundSchema: z.ZodType<ActivityRightsDistribution$Outbound, z.ZodTypeDef, ActivityRightsDistribution>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRightsDistribution$ {
    /** @deprecated use `ActivityRightsDistribution$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRightsDistribution, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRightsDistribution$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRightsDistribution$Outbound, z.ZodTypeDef, ActivityRightsDistribution>;
    /** @deprecated use `ActivityRightsDistribution$Outbound` instead. */
    type Outbound = ActivityRightsDistribution$Outbound;
}
/** @internal */
export declare const ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityRightsSubscriptionCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityRightsSubscriptionCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRightsSubscriptionCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRightsSubscriptionCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityRightsSubscriptionCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityRightsSubscription$inboundSchema: z.ZodType<ActivityRightsSubscription, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRightsSubscription$Outbound = {
    corporate_action_general_information?: ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityRightsSubscription$outboundSchema: z.ZodType<ActivityRightsSubscription$Outbound, z.ZodTypeDef, ActivityRightsSubscription>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRightsSubscription$ {
    /** @deprecated use `ActivityRightsSubscription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRightsSubscription, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRightsSubscription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRightsSubscription$Outbound, z.ZodTypeDef, ActivityRightsSubscription>;
    /** @deprecated use `ActivityRightsSubscription$Outbound` instead. */
    type Outbound = ActivityRightsSubscription$Outbound;
}
/** @internal */
export declare const ActivityRoundingAdjustment$inboundSchema: z.ZodType<ActivityRoundingAdjustment, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRoundingAdjustment$Outbound = {
    rounding_reason?: string | undefined;
};
/** @internal */
export declare const ActivityRoundingAdjustment$outboundSchema: z.ZodType<ActivityRoundingAdjustment$Outbound, z.ZodTypeDef, ActivityRoundingAdjustment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRoundingAdjustment$ {
    /** @deprecated use `ActivityRoundingAdjustment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRoundingAdjustment, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRoundingAdjustment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRoundingAdjustment$Outbound, z.ZodTypeDef, ActivityRoundingAdjustment>;
    /** @deprecated use `ActivityRoundingAdjustment$Outbound` instead. */
    type Outbound = ActivityRoundingAdjustment$Outbound;
}
/** @internal */
export declare const RoundingAmount$inboundSchema: z.ZodType<RoundingAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type RoundingAmount$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const RoundingAmount$outboundSchema: z.ZodType<RoundingAmount$Outbound, z.ZodTypeDef, RoundingAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoundingAmount$ {
    /** @deprecated use `RoundingAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoundingAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoundingAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoundingAmount$Outbound, z.ZodTypeDef, RoundingAmount>;
    /** @deprecated use `RoundingAmount$Outbound` instead. */
    type Outbound = RoundingAmount$Outbound;
}
/** @internal */
export declare const ActivitySaleOfRightsCashRate$inboundSchema: z.ZodType<ActivitySaleOfRightsCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySaleOfRightsCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivitySaleOfRightsCashRate$outboundSchema: z.ZodType<ActivitySaleOfRightsCashRate$Outbound, z.ZodTypeDef, ActivitySaleOfRightsCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySaleOfRightsCashRate$ {
    /** @deprecated use `ActivitySaleOfRightsCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySaleOfRightsCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySaleOfRightsCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySaleOfRightsCashRate$Outbound, z.ZodTypeDef, ActivitySaleOfRightsCashRate>;
    /** @deprecated use `ActivitySaleOfRightsCashRate$Outbound` instead. */
    type Outbound = ActivitySaleOfRightsCashRate$Outbound;
}
/** @internal */
export declare const ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivitySaleOfRightsCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivitySaleOfRightsCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySaleOfRightsCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySaleOfRightsCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivitySaleOfRightsCorporateActionGeneralInformation>;
    /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivitySaleOfRightsPaymentDate$inboundSchema: z.ZodType<ActivitySaleOfRightsPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySaleOfRightsPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivitySaleOfRightsPaymentDate$outboundSchema: z.ZodType<ActivitySaleOfRightsPaymentDate$Outbound, z.ZodTypeDef, ActivitySaleOfRightsPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySaleOfRightsPaymentDate$ {
    /** @deprecated use `ActivitySaleOfRightsPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySaleOfRightsPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySaleOfRightsPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySaleOfRightsPaymentDate$Outbound, z.ZodTypeDef, ActivitySaleOfRightsPaymentDate>;
    /** @deprecated use `ActivitySaleOfRightsPaymentDate$Outbound` instead. */
    type Outbound = ActivitySaleOfRightsPaymentDate$Outbound;
}
/** @internal */
export declare const ActivitySaleOfRightsRecordDate$inboundSchema: z.ZodType<ActivitySaleOfRightsRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySaleOfRightsRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivitySaleOfRightsRecordDate$outboundSchema: z.ZodType<ActivitySaleOfRightsRecordDate$Outbound, z.ZodTypeDef, ActivitySaleOfRightsRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySaleOfRightsRecordDate$ {
    /** @deprecated use `ActivitySaleOfRightsRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySaleOfRightsRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySaleOfRightsRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySaleOfRightsRecordDate$Outbound, z.ZodTypeDef, ActivitySaleOfRightsRecordDate>;
    /** @deprecated use `ActivitySaleOfRightsRecordDate$Outbound` instead. */
    type Outbound = ActivitySaleOfRightsRecordDate$Outbound;
}
/** @internal */
export declare const ActivitySaleOfRightsSettled$inboundSchema: z.ZodType<ActivitySaleOfRightsSettled, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySaleOfRightsSettled$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivitySaleOfRightsSettled$outboundSchema: z.ZodType<ActivitySaleOfRightsSettled$Outbound, z.ZodTypeDef, ActivitySaleOfRightsSettled>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySaleOfRightsSettled$ {
    /** @deprecated use `ActivitySaleOfRightsSettled$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySaleOfRightsSettled, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySaleOfRightsSettled$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySaleOfRightsSettled$Outbound, z.ZodTypeDef, ActivitySaleOfRightsSettled>;
    /** @deprecated use `ActivitySaleOfRightsSettled$Outbound` instead. */
    type Outbound = ActivitySaleOfRightsSettled$Outbound;
}
/** @internal */
export declare const ActivitySaleOfRights$inboundSchema: z.ZodType<ActivitySaleOfRights, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySaleOfRights$Outbound = {
    cash_rate?: ActivitySaleOfRightsCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound | null | undefined;
    payment_date?: ActivitySaleOfRightsPaymentDate$Outbound | null | undefined;
    record_date?: ActivitySaleOfRightsRecordDate$Outbound | null | undefined;
    settled?: ActivitySaleOfRightsSettled$Outbound | null | undefined;
};
/** @internal */
export declare const ActivitySaleOfRights$outboundSchema: z.ZodType<ActivitySaleOfRights$Outbound, z.ZodTypeDef, ActivitySaleOfRights>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySaleOfRights$ {
    /** @deprecated use `ActivitySaleOfRights$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySaleOfRights, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySaleOfRights$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySaleOfRights$Outbound, z.ZodTypeDef, ActivitySaleOfRights>;
    /** @deprecated use `ActivitySaleOfRights$Outbound` instead. */
    type Outbound = ActivitySaleOfRights$Outbound;
}
/** @internal */
export declare const ActivitySettleDate$inboundSchema: z.ZodType<ActivitySettleDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySettleDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivitySettleDate$outboundSchema: z.ZodType<ActivitySettleDate$Outbound, z.ZodTypeDef, ActivitySettleDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySettleDate$ {
    /** @deprecated use `ActivitySettleDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySettleDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySettleDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySettleDate$Outbound, z.ZodTypeDef, ActivitySettleDate>;
    /** @deprecated use `ActivitySettleDate$Outbound` instead. */
    type Outbound = ActivitySettleDate$Outbound;
}
/** @internal */
export declare const ActivitySide$inboundSchema: z.ZodType<ActivitySideOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivitySide$outboundSchema: z.ZodType<ActivitySideOpen, z.ZodTypeDef, ActivitySideOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySide$ {
    /** @deprecated use `ActivitySide$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySideOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySide$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySideOpen, z.ZodTypeDef, ActivitySideOpen>;
}
/** @internal */
export declare const ActivitySpinoffCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivitySpinoffCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySpinoffCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivitySpinoffCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivitySpinoffCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivitySpinoffCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySpinoffCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySpinoffCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySpinoffCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivitySpinoffCorporateActionGeneralInformation>;
    /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivitySpinoffCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityPayDate$inboundSchema: z.ZodType<ActivityPayDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPayDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityPayDate$outboundSchema: z.ZodType<ActivityPayDate$Outbound, z.ZodTypeDef, ActivityPayDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPayDate$ {
    /** @deprecated use `ActivityPayDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPayDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPayDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPayDate$Outbound, z.ZodTypeDef, ActivityPayDate>;
    /** @deprecated use `ActivityPayDate$Outbound` instead. */
    type Outbound = ActivityPayDate$Outbound;
}
/** @internal */
export declare const ActivitySpinoffQuantity$inboundSchema: z.ZodType<ActivitySpinoffQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySpinoffQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivitySpinoffQuantity$outboundSchema: z.ZodType<ActivitySpinoffQuantity$Outbound, z.ZodTypeDef, ActivitySpinoffQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySpinoffQuantity$ {
    /** @deprecated use `ActivitySpinoffQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySpinoffQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySpinoffQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySpinoffQuantity$Outbound, z.ZodTypeDef, ActivitySpinoffQuantity>;
    /** @deprecated use `ActivitySpinoffQuantity$Outbound` instead. */
    type Outbound = ActivitySpinoffQuantity$Outbound;
}
/** @internal */
export declare const ActivitySpinoffRecordDate$inboundSchema: z.ZodType<ActivitySpinoffRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySpinoffRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivitySpinoffRecordDate$outboundSchema: z.ZodType<ActivitySpinoffRecordDate$Outbound, z.ZodTypeDef, ActivitySpinoffRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySpinoffRecordDate$ {
    /** @deprecated use `ActivitySpinoffRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySpinoffRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySpinoffRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySpinoffRecordDate$Outbound, z.ZodTypeDef, ActivitySpinoffRecordDate>;
    /** @deprecated use `ActivitySpinoffRecordDate$Outbound` instead. */
    type Outbound = ActivitySpinoffRecordDate$Outbound;
}
/** @internal */
export declare const ActivitySpinoff$inboundSchema: z.ZodType<ActivitySpinoff, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySpinoff$Outbound = {
    corporate_action_general_information?: ActivitySpinoffCorporateActionGeneralInformation$Outbound | null | undefined;
    pay_date?: ActivityPayDate$Outbound | null | undefined;
    quantity?: ActivitySpinoffQuantity$Outbound | null | undefined;
    record_date?: ActivitySpinoffRecordDate$Outbound | null | undefined;
};
/** @internal */
export declare const ActivitySpinoff$outboundSchema: z.ZodType<ActivitySpinoff$Outbound, z.ZodTypeDef, ActivitySpinoff>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySpinoff$ {
    /** @deprecated use `ActivitySpinoff$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySpinoff, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySpinoff$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySpinoff$Outbound, z.ZodTypeDef, ActivitySpinoff>;
    /** @deprecated use `ActivitySpinoff$Outbound` instead. */
    type Outbound = ActivitySpinoff$Outbound;
}
/** @internal */
export declare const ActivityState$inboundSchema: z.ZodType<ActivityStateOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityState$outboundSchema: z.ZodType<ActivityStateOpen, z.ZodTypeDef, ActivityStateOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityState$ {
    /** @deprecated use `ActivityState$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStateOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityState$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStateOpen, z.ZodTypeDef, ActivityStateOpen>;
}
/** @internal */
export declare const ActivityStockDividendCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityStockDividendCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockDividendCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityStockDividendCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityStockDividendCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityStockDividendCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockDividendCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockDividendCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockDividendCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityStockDividendCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityStockDividendCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityStockDividendPayDate$inboundSchema: z.ZodType<ActivityStockDividendPayDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockDividendPayDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityStockDividendPayDate$outboundSchema: z.ZodType<ActivityStockDividendPayDate$Outbound, z.ZodTypeDef, ActivityStockDividendPayDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockDividendPayDate$ {
    /** @deprecated use `ActivityStockDividendPayDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockDividendPayDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockDividendPayDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockDividendPayDate$Outbound, z.ZodTypeDef, ActivityStockDividendPayDate>;
    /** @deprecated use `ActivityStockDividendPayDate$Outbound` instead. */
    type Outbound = ActivityStockDividendPayDate$Outbound;
}
/** @internal */
export declare const ActivityStockDividendQuantity$inboundSchema: z.ZodType<ActivityStockDividendQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockDividendQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityStockDividendQuantity$outboundSchema: z.ZodType<ActivityStockDividendQuantity$Outbound, z.ZodTypeDef, ActivityStockDividendQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockDividendQuantity$ {
    /** @deprecated use `ActivityStockDividendQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockDividendQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockDividendQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockDividendQuantity$Outbound, z.ZodTypeDef, ActivityStockDividendQuantity>;
    /** @deprecated use `ActivityStockDividendQuantity$Outbound` instead. */
    type Outbound = ActivityStockDividendQuantity$Outbound;
}
/** @internal */
export declare const ActivityRate$inboundSchema: z.ZodType<ActivityRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityRate$outboundSchema: z.ZodType<ActivityRate$Outbound, z.ZodTypeDef, ActivityRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRate$ {
    /** @deprecated use `ActivityRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRate$Outbound, z.ZodTypeDef, ActivityRate>;
    /** @deprecated use `ActivityRate$Outbound` instead. */
    type Outbound = ActivityRate$Outbound;
}
/** @internal */
export declare const ActivityStockDividendRecordDate$inboundSchema: z.ZodType<ActivityStockDividendRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockDividendRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityStockDividendRecordDate$outboundSchema: z.ZodType<ActivityStockDividendRecordDate$Outbound, z.ZodTypeDef, ActivityStockDividendRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockDividendRecordDate$ {
    /** @deprecated use `ActivityStockDividendRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockDividendRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockDividendRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockDividendRecordDate$Outbound, z.ZodTypeDef, ActivityStockDividendRecordDate>;
    /** @deprecated use `ActivityStockDividendRecordDate$Outbound` instead. */
    type Outbound = ActivityStockDividendRecordDate$Outbound;
}
/** @internal */
export declare const ActivityStockDividend$inboundSchema: z.ZodType<ActivityStockDividend, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockDividend$Outbound = {
    corporate_action_general_information?: ActivityStockDividendCorporateActionGeneralInformation$Outbound | null | undefined;
    pay_date?: ActivityStockDividendPayDate$Outbound | null | undefined;
    quantity?: ActivityStockDividendQuantity$Outbound | null | undefined;
    rate?: ActivityRate$Outbound | null | undefined;
    record_date?: ActivityStockDividendRecordDate$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityStockDividend$outboundSchema: z.ZodType<ActivityStockDividend$Outbound, z.ZodTypeDef, ActivityStockDividend>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockDividend$ {
    /** @deprecated use `ActivityStockDividend$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockDividend, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockDividend$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockDividend$Outbound, z.ZodTypeDef, ActivityStockDividend>;
    /** @deprecated use `ActivityStockDividend$Outbound` instead. */
    type Outbound = ActivityStockDividend$Outbound;
}
/** @internal */
export declare const ActivityStockSplitCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityStockSplitCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockSplitCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityStockSplitCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityStockSplitCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityStockSplitCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockSplitCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockSplitCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockSplitCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityStockSplitCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityStockSplitCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityStockSplitFactorDenominator$inboundSchema: z.ZodType<ActivityStockSplitFactorDenominator, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockSplitFactorDenominator$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityStockSplitFactorDenominator$outboundSchema: z.ZodType<ActivityStockSplitFactorDenominator$Outbound, z.ZodTypeDef, ActivityStockSplitFactorDenominator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockSplitFactorDenominator$ {
    /** @deprecated use `ActivityStockSplitFactorDenominator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockSplitFactorDenominator, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockSplitFactorDenominator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockSplitFactorDenominator$Outbound, z.ZodTypeDef, ActivityStockSplitFactorDenominator>;
    /** @deprecated use `ActivityStockSplitFactorDenominator$Outbound` instead. */
    type Outbound = ActivityStockSplitFactorDenominator$Outbound;
}
/** @internal */
export declare const ActivityStockSplitFactorNumerator$inboundSchema: z.ZodType<ActivityStockSplitFactorNumerator, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockSplitFactorNumerator$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityStockSplitFactorNumerator$outboundSchema: z.ZodType<ActivityStockSplitFactorNumerator$Outbound, z.ZodTypeDef, ActivityStockSplitFactorNumerator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockSplitFactorNumerator$ {
    /** @deprecated use `ActivityStockSplitFactorNumerator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockSplitFactorNumerator, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockSplitFactorNumerator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockSplitFactorNumerator$Outbound, z.ZodTypeDef, ActivityStockSplitFactorNumerator>;
    /** @deprecated use `ActivityStockSplitFactorNumerator$Outbound` instead. */
    type Outbound = ActivityStockSplitFactorNumerator$Outbound;
}
/** @internal */
export declare const ActivityStockSplitPayDate$inboundSchema: z.ZodType<ActivityStockSplitPayDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockSplitPayDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityStockSplitPayDate$outboundSchema: z.ZodType<ActivityStockSplitPayDate$Outbound, z.ZodTypeDef, ActivityStockSplitPayDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockSplitPayDate$ {
    /** @deprecated use `ActivityStockSplitPayDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockSplitPayDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockSplitPayDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockSplitPayDate$Outbound, z.ZodTypeDef, ActivityStockSplitPayDate>;
    /** @deprecated use `ActivityStockSplitPayDate$Outbound` instead. */
    type Outbound = ActivityStockSplitPayDate$Outbound;
}
/** @internal */
export declare const ActivityStockSplitQuantity$inboundSchema: z.ZodType<ActivityStockSplitQuantity, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockSplitQuantity$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityStockSplitQuantity$outboundSchema: z.ZodType<ActivityStockSplitQuantity$Outbound, z.ZodTypeDef, ActivityStockSplitQuantity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockSplitQuantity$ {
    /** @deprecated use `ActivityStockSplitQuantity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockSplitQuantity, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockSplitQuantity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockSplitQuantity$Outbound, z.ZodTypeDef, ActivityStockSplitQuantity>;
    /** @deprecated use `ActivityStockSplitQuantity$Outbound` instead. */
    type Outbound = ActivityStockSplitQuantity$Outbound;
}
/** @internal */
export declare const ActivityStockSplitRecordDate$inboundSchema: z.ZodType<ActivityStockSplitRecordDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockSplitRecordDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityStockSplitRecordDate$outboundSchema: z.ZodType<ActivityStockSplitRecordDate$Outbound, z.ZodTypeDef, ActivityStockSplitRecordDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockSplitRecordDate$ {
    /** @deprecated use `ActivityStockSplitRecordDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockSplitRecordDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockSplitRecordDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockSplitRecordDate$Outbound, z.ZodTypeDef, ActivityStockSplitRecordDate>;
    /** @deprecated use `ActivityStockSplitRecordDate$Outbound` instead. */
    type Outbound = ActivityStockSplitRecordDate$Outbound;
}
/** @internal */
export declare const ActivityStockSplit$inboundSchema: z.ZodType<ActivityStockSplit, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityStockSplit$Outbound = {
    corporate_action_general_information?: ActivityStockSplitCorporateActionGeneralInformation$Outbound | null | undefined;
    factor_denominator?: ActivityStockSplitFactorDenominator$Outbound | null | undefined;
    factor_numerator?: ActivityStockSplitFactorNumerator$Outbound | null | undefined;
    pay_date?: ActivityStockSplitPayDate$Outbound | null | undefined;
    quantity?: ActivityStockSplitQuantity$Outbound | null | undefined;
    record_date?: ActivityStockSplitRecordDate$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityStockSplit$outboundSchema: z.ZodType<ActivityStockSplit$Outbound, z.ZodTypeDef, ActivityStockSplit>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityStockSplit$ {
    /** @deprecated use `ActivityStockSplit$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityStockSplit, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityStockSplit$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityStockSplit$Outbound, z.ZodTypeDef, ActivityStockSplit>;
    /** @deprecated use `ActivityStockSplit$Outbound` instead. */
    type Outbound = ActivityStockSplit$Outbound;
}
/** @internal */
export declare const ActivitySweepAction$inboundSchema: z.ZodType<ActivitySweepActionOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivitySweepAction$outboundSchema: z.ZodType<ActivitySweepActionOpen, z.ZodTypeDef, ActivitySweepActionOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySweepAction$ {
    /** @deprecated use `ActivitySweepAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySweepActionOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySweepAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySweepActionOpen, z.ZodTypeDef, ActivitySweepActionOpen>;
}
/** @internal */
export declare const ActivitySweepType$inboundSchema: z.ZodType<ActivitySweepTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivitySweepType$outboundSchema: z.ZodType<ActivitySweepTypeOpen, z.ZodTypeDef, ActivitySweepTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySweepType$ {
    /** @deprecated use `ActivitySweepType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySweepTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySweepType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySweepTypeOpen, z.ZodTypeDef, ActivitySweepTypeOpen>;
}
/** @internal */
export declare const ActivitySweep$inboundSchema: z.ZodType<ActivitySweep, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivitySweep$Outbound = {
    action?: string | undefined;
    eod_redemption?: boolean | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const ActivitySweep$outboundSchema: z.ZodType<ActivitySweep$Outbound, z.ZodTypeDef, ActivitySweep>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivitySweep$ {
    /** @deprecated use `ActivitySweep$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivitySweep, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivitySweep$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivitySweep$Outbound, z.ZodTypeDef, ActivitySweep>;
    /** @deprecated use `ActivitySweep$Outbound` instead. */
    type Outbound = ActivitySweep$Outbound;
}
/** @internal */
export declare const ActivityTenderOfferCashRate$inboundSchema: z.ZodType<ActivityTenderOfferCashRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityTenderOfferCashRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityTenderOfferCashRate$outboundSchema: z.ZodType<ActivityTenderOfferCashRate$Outbound, z.ZodTypeDef, ActivityTenderOfferCashRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityTenderOfferCashRate$ {
    /** @deprecated use `ActivityTenderOfferCashRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityTenderOfferCashRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityTenderOfferCashRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityTenderOfferCashRate$Outbound, z.ZodTypeDef, ActivityTenderOfferCashRate>;
    /** @deprecated use `ActivityTenderOfferCashRate$Outbound` instead. */
    type Outbound = ActivityTenderOfferCashRate$Outbound;
}
/** @internal */
export declare const ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityTenderOfferCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityTenderOfferCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityTenderOfferCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityTenderOfferCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityTenderOfferCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityTenderOfferCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityTenderOfferCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityTenderOfferCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityTenderOfferCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityTenderOffer$inboundSchema: z.ZodType<ActivityTenderOffer, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityTenderOffer$Outbound = {
    cash_rate?: ActivityTenderOfferCashRate$Outbound | null | undefined;
    corporate_action_general_information?: ActivityTenderOfferCorporateActionGeneralInformation$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityTenderOffer$outboundSchema: z.ZodType<ActivityTenderOffer$Outbound, z.ZodTypeDef, ActivityTenderOffer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityTenderOffer$ {
    /** @deprecated use `ActivityTenderOffer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityTenderOffer, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityTenderOffer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityTenderOffer$Outbound, z.ZodTypeDef, ActivityTenderOffer>;
    /** @deprecated use `ActivityTenderOffer$Outbound` instead. */
    type Outbound = ActivityTenderOffer$Outbound;
}
/** @internal */
export declare const ActivityBrokerCapacity$inboundSchema: z.ZodType<ActivityBrokerCapacityOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityBrokerCapacity$outboundSchema: z.ZodType<ActivityBrokerCapacityOpen, z.ZodTypeDef, ActivityBrokerCapacityOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityBrokerCapacity$ {
    /** @deprecated use `ActivityBrokerCapacity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityBrokerCapacityOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityBrokerCapacity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityBrokerCapacityOpen, z.ZodTypeDef, ActivityBrokerCapacityOpen>;
}
/** @internal */
export declare const ActivityPrevailingMarketPrice$inboundSchema: z.ZodType<ActivityPrevailingMarketPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPrevailingMarketPrice$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityPrevailingMarketPrice$outboundSchema: z.ZodType<ActivityPrevailingMarketPrice$Outbound, z.ZodTypeDef, ActivityPrevailingMarketPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPrevailingMarketPrice$ {
    /** @deprecated use `ActivityPrevailingMarketPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPrevailingMarketPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPrevailingMarketPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPrevailingMarketPrice$Outbound, z.ZodTypeDef, ActivityPrevailingMarketPrice>;
    /** @deprecated use `ActivityPrevailingMarketPrice$Outbound` instead. */
    type Outbound = ActivityPrevailingMarketPrice$Outbound;
}
/** @internal */
export declare const ActivityPriceAdjustmentAmount$inboundSchema: z.ZodType<ActivityPriceAdjustmentAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPriceAdjustmentAmount$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityPriceAdjustmentAmount$outboundSchema: z.ZodType<ActivityPriceAdjustmentAmount$Outbound, z.ZodTypeDef, ActivityPriceAdjustmentAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPriceAdjustmentAmount$ {
    /** @deprecated use `ActivityPriceAdjustmentAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPriceAdjustmentAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPriceAdjustmentAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPriceAdjustmentAmount$Outbound, z.ZodTypeDef, ActivityPriceAdjustmentAmount>;
    /** @deprecated use `ActivityPriceAdjustmentAmount$Outbound` instead. */
    type Outbound = ActivityPriceAdjustmentAmount$Outbound;
}
/** @internal */
export declare const ActivityPriceAdjustmentPercent$inboundSchema: z.ZodType<ActivityPriceAdjustmentPercent, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPriceAdjustmentPercent$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityPriceAdjustmentPercent$outboundSchema: z.ZodType<ActivityPriceAdjustmentPercent$Outbound, z.ZodTypeDef, ActivityPriceAdjustmentPercent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPriceAdjustmentPercent$ {
    /** @deprecated use `ActivityPriceAdjustmentPercent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPriceAdjustmentPercent, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPriceAdjustmentPercent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPriceAdjustmentPercent$Outbound, z.ZodTypeDef, ActivityPriceAdjustmentPercent>;
    /** @deprecated use `ActivityPriceAdjustmentPercent$Outbound` instead. */
    type Outbound = ActivityPriceAdjustmentPercent$Outbound;
}
/** @internal */
export declare const ActivityPriceAdjustmentType$inboundSchema: z.ZodType<ActivityPriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityPriceAdjustmentType$outboundSchema: z.ZodType<ActivityPriceAdjustmentTypeOpen, z.ZodTypeDef, ActivityPriceAdjustmentTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPriceAdjustmentType$ {
    /** @deprecated use `ActivityPriceAdjustmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPriceAdjustmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPriceAdjustmentTypeOpen, z.ZodTypeDef, ActivityPriceAdjustmentTypeOpen>;
}
/** @internal */
export declare const ActivityPriceAdjustmentRecord$inboundSchema: z.ZodType<ActivityPriceAdjustmentRecord, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityPriceAdjustmentRecord$Outbound = {
    price_adjustment_amount?: ActivityPriceAdjustmentAmount$Outbound | null | undefined;
    price_adjustment_percent?: ActivityPriceAdjustmentPercent$Outbound | null | undefined;
    price_adjustment_type?: string | undefined;
};
/** @internal */
export declare const ActivityPriceAdjustmentRecord$outboundSchema: z.ZodType<ActivityPriceAdjustmentRecord$Outbound, z.ZodTypeDef, ActivityPriceAdjustmentRecord>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityPriceAdjustmentRecord$ {
    /** @deprecated use `ActivityPriceAdjustmentRecord$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityPriceAdjustmentRecord, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityPriceAdjustmentRecord$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityPriceAdjustmentRecord$Outbound, z.ZodTypeDef, ActivityPriceAdjustmentRecord>;
    /** @deprecated use `ActivityPriceAdjustmentRecord$Outbound` instead. */
    type Outbound = ActivityPriceAdjustmentRecord$Outbound;
}
/** @internal */
export declare const ActivityTrade$inboundSchema: z.ZodType<ActivityTrade, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityTrade$Outbound = {
    additional_instructions?: Array<string> | undefined;
    alternate_order_id?: string | undefined;
    booking_api_trade_allocation_id?: string | undefined;
    booking_api_trade_id?: string | undefined;
    broker?: string | undefined;
    broker_capacity?: string | undefined;
    client_memos?: Array<string> | undefined;
    client_order_id?: string | undefined;
    exchange?: string | undefined;
    execution_id?: string | undefined;
    execution_only?: boolean | undefined;
    external_id?: string | undefined;
    fund_confirmation_number?: string | undefined;
    gateway_client_order_id?: string | undefined;
    internal_error?: boolean | undefined;
    is_writeoff?: boolean | undefined;
    lots?: Array<Lot$Outbound> | undefined;
    order_id?: string | undefined;
    prevailing_market_price?: ActivityPrevailingMarketPrice$Outbound | null | undefined;
    price_adjustment_record?: ActivityPriceAdjustmentRecord$Outbound | null | undefined;
    route?: string | undefined;
    special_instructions?: Array<string> | undefined;
    symbol_description?: string | undefined;
    when_issued?: boolean | undefined;
    yield_records?: Array<YieldRecord$Outbound> | undefined;
};
/** @internal */
export declare const ActivityTrade$outboundSchema: z.ZodType<ActivityTrade$Outbound, z.ZodTypeDef, ActivityTrade>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityTrade$ {
    /** @deprecated use `ActivityTrade$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityTrade, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityTrade$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityTrade$Outbound, z.ZodTypeDef, ActivityTrade>;
    /** @deprecated use `ActivityTrade$Outbound` instead. */
    type Outbound = ActivityTrade$Outbound;
}
/** @internal */
export declare const ActivityTransferType$inboundSchema: z.ZodType<ActivityTransferTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityTransferType$outboundSchema: z.ZodType<ActivityTransferTypeOpen, z.ZodTypeDef, ActivityTransferTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityTransferType$ {
    /** @deprecated use `ActivityTransferType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityTransferTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityTransferType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityTransferTypeOpen, z.ZodTypeDef, ActivityTransferTypeOpen>;
}
/** @internal */
export declare const ActivityTransfer$inboundSchema: z.ZodType<ActivityTransfer, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityTransfer$Outbound = {
    additional_instructions?: string | undefined;
    client_brokerage?: string | undefined;
    transfer_type?: string | undefined;
};
/** @internal */
export declare const ActivityTransfer$outboundSchema: z.ZodType<ActivityTransfer$Outbound, z.ZodTypeDef, ActivityTransfer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityTransfer$ {
    /** @deprecated use `ActivityTransfer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityTransfer, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityTransfer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityTransfer$Outbound, z.ZodTypeDef, ActivityTransfer>;
    /** @deprecated use `ActivityTransfer$Outbound` instead. */
    type Outbound = ActivityTransfer$Outbound;
}
/** @internal */
export declare const ActivityType$inboundSchema: z.ZodType<ActivityTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityType$outboundSchema: z.ZodType<ActivityTypeOpen, z.ZodTypeDef, ActivityTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityType$ {
    /** @deprecated use `ActivityType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityTypeOpen, z.ZodTypeDef, ActivityTypeOpen>;
}
/** @internal */
export declare const ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityUnitSplitCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityUnitSplitCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityUnitSplitCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityUnitSplitCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityUnitSplitCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityUnitSplitCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityUnitSplitCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityUnitSplitCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityUnitSplitCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityUnitSplitStockRate$inboundSchema: z.ZodType<ActivityUnitSplitStockRate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityUnitSplitStockRate$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const ActivityUnitSplitStockRate$outboundSchema: z.ZodType<ActivityUnitSplitStockRate$Outbound, z.ZodTypeDef, ActivityUnitSplitStockRate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityUnitSplitStockRate$ {
    /** @deprecated use `ActivityUnitSplitStockRate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityUnitSplitStockRate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityUnitSplitStockRate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityUnitSplitStockRate$Outbound, z.ZodTypeDef, ActivityUnitSplitStockRate>;
    /** @deprecated use `ActivityUnitSplitStockRate$Outbound` instead. */
    type Outbound = ActivityUnitSplitStockRate$Outbound;
}
/** @internal */
export declare const ActivityUnitSplit$inboundSchema: z.ZodType<ActivityUnitSplit, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityUnitSplit$Outbound = {
    corporate_action_general_information?: ActivityUnitSplitCorporateActionGeneralInformation$Outbound | null | undefined;
    stock_rate?: ActivityUnitSplitStockRate$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityUnitSplit$outboundSchema: z.ZodType<ActivityUnitSplit$Outbound, z.ZodTypeDef, ActivityUnitSplit>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityUnitSplit$ {
    /** @deprecated use `ActivityUnitSplit$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityUnitSplit, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityUnitSplit$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityUnitSplit$Outbound, z.ZodTypeDef, ActivityUnitSplit>;
    /** @deprecated use `ActivityUnitSplit$Outbound` instead. */
    type Outbound = ActivityUnitSplit$Outbound;
}
/** @internal */
export declare const ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityWarrantExerciseCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityWarrantExerciseCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWarrantExerciseCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWarrantExerciseCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityWarrantExerciseCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityWarrantExercise$inboundSchema: z.ZodType<ActivityWarrantExercise, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWarrantExercise$Outbound = {
    corporate_action_general_information?: ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityWarrantExercise$outboundSchema: z.ZodType<ActivityWarrantExercise$Outbound, z.ZodTypeDef, ActivityWarrantExercise>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWarrantExercise$ {
    /** @deprecated use `ActivityWarrantExercise$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWarrantExercise, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWarrantExercise$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWarrantExercise$Outbound, z.ZodTypeDef, ActivityWarrantExercise>;
    /** @deprecated use `ActivityWarrantExercise$Outbound` instead. */
    type Outbound = ActivityWarrantExercise$Outbound;
}
/** @internal */
export declare const ActivityDistributionType$inboundSchema: z.ZodType<ActivityDistributionTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityDistributionType$outboundSchema: z.ZodType<ActivityDistributionTypeOpen, z.ZodTypeDef, ActivityDistributionTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityDistributionType$ {
    /** @deprecated use `ActivityDistributionType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityDistributionTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityDistributionType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityDistributionTypeOpen, z.ZodTypeDef, ActivityDistributionTypeOpen>;
}
/** @internal */
export declare const ActivityRetirementType$inboundSchema: z.ZodType<ActivityRetirementTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityRetirementType$outboundSchema: z.ZodType<ActivityRetirementTypeOpen, z.ZodTypeDef, ActivityRetirementTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityRetirementType$ {
    /** @deprecated use `ActivityRetirementType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityRetirementTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityRetirementType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityRetirementTypeOpen, z.ZodTypeDef, ActivityRetirementTypeOpen>;
}
/** @internal */
export declare const ActivityWithdrawalType$inboundSchema: z.ZodType<ActivityWithdrawalTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityWithdrawalType$outboundSchema: z.ZodType<ActivityWithdrawalTypeOpen, z.ZodTypeDef, ActivityWithdrawalTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWithdrawalType$ {
    /** @deprecated use `ActivityWithdrawalType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWithdrawalTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWithdrawalType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWithdrawalTypeOpen, z.ZodTypeDef, ActivityWithdrawalTypeOpen>;
}
/** @internal */
export declare const ActivityWithdrawal$inboundSchema: z.ZodType<ActivityWithdrawal, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWithdrawal$Outbound = {
    additional_instructions?: string | undefined;
    advance?: boolean | undefined;
    closing_account?: boolean | undefined;
    conversion?: boolean | undefined;
    destination_account_number?: string | undefined;
    destination_institution?: string | undefined;
    distribution_type?: string | undefined;
    distribution_year?: number | undefined;
    fed_reference_number?: string | undefined;
    futures_settlement?: boolean | undefined;
    micro?: boolean | undefined;
    originating_institution?: string | undefined;
    periodic?: boolean | undefined;
    retirement_type?: string | undefined;
    taxable?: boolean | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const ActivityWithdrawal$outboundSchema: z.ZodType<ActivityWithdrawal$Outbound, z.ZodTypeDef, ActivityWithdrawal>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWithdrawal$ {
    /** @deprecated use `ActivityWithdrawal$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWithdrawal, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWithdrawal$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWithdrawal$Outbound, z.ZodTypeDef, ActivityWithdrawal>;
    /** @deprecated use `ActivityWithdrawal$Outbound` instead. */
    type Outbound = ActivityWithdrawal$Outbound;
}
/** @internal */
export declare const ActivityReview$inboundSchema: z.ZodType<ActivityReviewOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const ActivityReview$outboundSchema: z.ZodType<ActivityReviewOpen, z.ZodTypeDef, ActivityReviewOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityReview$ {
    /** @deprecated use `ActivityReview$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityReviewOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityReview$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityReviewOpen, z.ZodTypeDef, ActivityReviewOpen>;
}
/** @internal */
export declare const ActivityWithdrawalPendingReview$inboundSchema: z.ZodType<ActivityWithdrawalPendingReview, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWithdrawalPendingReview$Outbound = {
    review?: string | undefined;
};
/** @internal */
export declare const ActivityWithdrawalPendingReview$outboundSchema: z.ZodType<ActivityWithdrawalPendingReview$Outbound, z.ZodTypeDef, ActivityWithdrawalPendingReview>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWithdrawalPendingReview$ {
    /** @deprecated use `ActivityWithdrawalPendingReview$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWithdrawalPendingReview, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWithdrawalPendingReview$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWithdrawalPendingReview$Outbound, z.ZodTypeDef, ActivityWithdrawalPendingReview>;
    /** @deprecated use `ActivityWithdrawalPendingReview$Outbound` instead. */
    type Outbound = ActivityWithdrawalPendingReview$Outbound;
}
/** @internal */
export declare const ActivityWithholding$inboundSchema: z.ZodType<ActivityWithholding, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWithholding$Outbound = {
    data?: Array<WithholdingData$Outbound> | undefined;
};
/** @internal */
export declare const ActivityWithholding$outboundSchema: z.ZodType<ActivityWithholding$Outbound, z.ZodTypeDef, ActivityWithholding>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWithholding$ {
    /** @deprecated use `ActivityWithholding$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWithholding, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWithholding$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWithholding$Outbound, z.ZodTypeDef, ActivityWithholding>;
    /** @deprecated use `ActivityWithholding$Outbound` instead. */
    type Outbound = ActivityWithholding$Outbound;
}
/** @internal */
export declare const ActivityWorthlessCorporateActionGeneralInformation$inboundSchema: z.ZodType<ActivityWorthlessCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWorthlessCorporateActionGeneralInformation$Outbound = {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
};
/** @internal */
export declare const ActivityWorthlessCorporateActionGeneralInformation$outboundSchema: z.ZodType<ActivityWorthlessCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityWorthlessCorporateActionGeneralInformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWorthlessCorporateActionGeneralInformation$ {
    /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWorthlessCorporateActionGeneralInformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWorthlessCorporateActionGeneralInformation$Outbound, z.ZodTypeDef, ActivityWorthlessCorporateActionGeneralInformation>;
    /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$Outbound` instead. */
    type Outbound = ActivityWorthlessCorporateActionGeneralInformation$Outbound;
}
/** @internal */
export declare const ActivityWorthlessEffectiveDate$inboundSchema: z.ZodType<ActivityWorthlessEffectiveDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWorthlessEffectiveDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityWorthlessEffectiveDate$outboundSchema: z.ZodType<ActivityWorthlessEffectiveDate$Outbound, z.ZodTypeDef, ActivityWorthlessEffectiveDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWorthlessEffectiveDate$ {
    /** @deprecated use `ActivityWorthlessEffectiveDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWorthlessEffectiveDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWorthlessEffectiveDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWorthlessEffectiveDate$Outbound, z.ZodTypeDef, ActivityWorthlessEffectiveDate>;
    /** @deprecated use `ActivityWorthlessEffectiveDate$Outbound` instead. */
    type Outbound = ActivityWorthlessEffectiveDate$Outbound;
}
/** @internal */
export declare const ActivityWorthlessPaymentDate$inboundSchema: z.ZodType<ActivityWorthlessPaymentDate, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWorthlessPaymentDate$Outbound = {
    day?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
};
/** @internal */
export declare const ActivityWorthlessPaymentDate$outboundSchema: z.ZodType<ActivityWorthlessPaymentDate$Outbound, z.ZodTypeDef, ActivityWorthlessPaymentDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWorthlessPaymentDate$ {
    /** @deprecated use `ActivityWorthlessPaymentDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWorthlessPaymentDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWorthlessPaymentDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWorthlessPaymentDate$Outbound, z.ZodTypeDef, ActivityWorthlessPaymentDate>;
    /** @deprecated use `ActivityWorthlessPaymentDate$Outbound` instead. */
    type Outbound = ActivityWorthlessPaymentDate$Outbound;
}
/** @internal */
export declare const ActivityWorthless$inboundSchema: z.ZodType<ActivityWorthless, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivityWorthless$Outbound = {
    corporate_action_general_information?: ActivityWorthlessCorporateActionGeneralInformation$Outbound | null | undefined;
    effective_date?: ActivityWorthlessEffectiveDate$Outbound | null | undefined;
    payment_date?: ActivityWorthlessPaymentDate$Outbound | null | undefined;
};
/** @internal */
export declare const ActivityWorthless$outboundSchema: z.ZodType<ActivityWorthless$Outbound, z.ZodTypeDef, ActivityWorthless>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivityWorthless$ {
    /** @deprecated use `ActivityWorthless$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityWorthless, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityWorthless$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityWorthless$Outbound, z.ZodTypeDef, ActivityWorthless>;
    /** @deprecated use `ActivityWorthless$Outbound` instead. */
    type Outbound = ActivityWorthless$Outbound;
}
/** @internal */
export declare const Activity$inboundSchema: z.ZodType<Activity, z.ZodTypeDef, unknown>;
/** @internal */
export type Activity$Outbound = {
    acats_pending_out?: ActivityAcatsPendingOut$Outbound | null | undefined;
    account_id?: string | undefined;
    account_memo?: string | undefined;
    account_transfer?: ActivityAccountTransfer$Outbound | null | undefined;
    accrued_interest?: Array<AccruedInterest$Outbound> | undefined;
    accrued_interest_desc?: AccruedInterestDesc$Outbound | null | undefined;
    activity_date?: ActivityActivityDate$Outbound | null | undefined;
    activity_description?: string | undefined;
    activity_id?: string | undefined;
    activity_time?: string | null | undefined;
    asset_description?: string | undefined;
    asset_id?: string | undefined;
    capital_gains?: ActivityCapitalGains$Outbound | null | undefined;
    cash_dividend?: ActivityCashDividend$Outbound | null | undefined;
    commission?: ActivityCommission$Outbound | null | undefined;
    commissions?: Array<Commission$Outbound> | undefined;
    conversion?: ActivityConversion$Outbound | null | undefined;
    corporate_action_memo_adjustment?: ActivityCorporateActionMemoAdjustment$Outbound | null | undefined;
    correspondent_id?: string | undefined;
    creation_time?: string | null | undefined;
    credit?: ActivityCredit$Outbound | null | undefined;
    currency_asset_id?: string | undefined;
    currency_code?: string | undefined;
    deposit?: ActivityDeposit$Outbound | null | undefined;
    drip?: ActivityDrip$Outbound | null | undefined;
    exchange?: ActivityExchange$Outbound | null | undefined;
    fee?: ActivityFee$Outbound | null | undefined;
    fees?: Array<Fee$Outbound> | undefined;
    fpsl?: ActivityFpsl$Outbound | null | undefined;
    generation?: string | undefined;
    gross_amount?: ActivityGrossAmount$Outbound | null | undefined;
    interest?: ActivityInterest$Outbound | null | undefined;
    interest_payment?: ActivityInterestPayment$Outbound | null | undefined;
    liquidation?: ActivityLiquidation$Outbound | null | undefined;
    maturity?: ActivityMaturity$Outbound | null | undefined;
    merger?: ActivityMerger$Outbound | null | undefined;
    name?: string | undefined;
    name_change?: ActivityNameChange$Outbound | null | undefined;
    net_amount?: ActivityNetAmount$Outbound | null | undefined;
    next_activity_id?: string | undefined;
    next_activity_process_date?: NextActivityProcessDate$Outbound | null | undefined;
    none?: None$Outbound | null | undefined;
    payment_in_kind?: ActivityPaymentInKind$Outbound | null | undefined;
    previous_activity_id?: string | undefined;
    previous_process_date?: PreviousProcessDate$Outbound | null | undefined;
    price?: ActivityPrice$Outbound | null | undefined;
    process_date?: ActivityProcessDate$Outbound | null | undefined;
    quantity?: ActivityQuantity$Outbound | null | undefined;
    redemption_full?: ActivityRedemptionFull$Outbound | null | undefined;
    redemption_partial?: ActivityRedemptionPartial$Outbound | null | undefined;
    region_code?: string | undefined;
    reverse_stock_split?: ActivityReverseStockSplit$Outbound | null | undefined;
    rights_distribution?: ActivityRightsDistribution$Outbound | null | undefined;
    rights_subscription?: ActivityRightsSubscription$Outbound | null | undefined;
    rounding_adjustment?: ActivityRoundingAdjustment$Outbound | null | undefined;
    rounding_amount?: RoundingAmount$Outbound | null | undefined;
    rounding_reason?: string | undefined;
    sale_of_rights?: ActivitySaleOfRights$Outbound | null | undefined;
    settle_date?: ActivitySettleDate$Outbound | null | undefined;
    side?: string | undefined;
    spinoff?: ActivitySpinoff$Outbound | null | undefined;
    state?: string | undefined;
    stock_dividend?: ActivityStockDividend$Outbound | null | undefined;
    stock_split?: ActivityStockSplit$Outbound | null | undefined;
    subtype_category?: string | undefined;
    sweep?: ActivitySweep$Outbound | null | undefined;
    tender_offer?: ActivityTenderOffer$Outbound | null | undefined;
    trade?: ActivityTrade$Outbound | null | undefined;
    transfer?: ActivityTransfer$Outbound | null | undefined;
    type?: string | undefined;
    unit_split?: ActivityUnitSplit$Outbound | null | undefined;
    warrant_exercise?: ActivityWarrantExercise$Outbound | null | undefined;
    withdrawal?: ActivityWithdrawal$Outbound | null | undefined;
    withdrawal_pending_review?: ActivityWithdrawalPendingReview$Outbound | null | undefined;
    withholding?: ActivityWithholding$Outbound | null | undefined;
    withholdings?: Array<Withholding$Outbound> | undefined;
    worthless?: ActivityWorthless$Outbound | null | undefined;
};
/** @internal */
export declare const Activity$outboundSchema: z.ZodType<Activity$Outbound, z.ZodTypeDef, Activity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Activity$ {
    /** @deprecated use `Activity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Activity, z.ZodTypeDef, unknown>;
    /** @deprecated use `Activity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Activity$Outbound, z.ZodTypeDef, Activity>;
    /** @deprecated use `Activity$Outbound` instead. */
    type Outbound = Activity$Outbound;
}
//# sourceMappingURL=activity.d.ts.map