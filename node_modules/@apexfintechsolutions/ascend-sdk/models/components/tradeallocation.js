"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeAllocationSideModifier$outboundSchema = exports.TradeAllocationSideModifier$inboundSchema = exports.SettlementDate$ = exports.SettlementDate$outboundSchema = exports.SettlementDate$inboundSchema = exports.TradeAllocationQuantity$ = exports.TradeAllocationQuantity$outboundSchema = exports.TradeAllocationQuantity$inboundSchema = exports.TradeAllocationPriceAdjustment$ = exports.TradeAllocationPriceAdjustment$outboundSchema = exports.TradeAllocationPriceAdjustment$inboundSchema = exports.TradeAllocationPriceAdjustmentType$ = exports.TradeAllocationPriceAdjustmentType$outboundSchema = exports.TradeAllocationPriceAdjustmentType$inboundSchema = exports.TradeAllocationPriceAdjustmentAmount$ = exports.TradeAllocationPriceAdjustmentAmount$outboundSchema = exports.TradeAllocationPriceAdjustmentAmount$inboundSchema = exports.TradeAllocationPrice$ = exports.TradeAllocationPrice$outboundSchema = exports.TradeAllocationPrice$inboundSchema = exports.TradeAllocationPrevailingMarketPrice$ = exports.TradeAllocationPrevailingMarketPrice$outboundSchema = exports.TradeAllocationPrevailingMarketPrice$inboundSchema = exports.TradeAllocationIdentifierType$ = exports.TradeAllocationIdentifierType$outboundSchema = exports.TradeAllocationIdentifierType$inboundSchema = exports.TradeAllocationGrossAmount$ = exports.TradeAllocationGrossAmount$outboundSchema = exports.TradeAllocationGrossAmount$inboundSchema = exports.TradeAllocationCommissionAmount$ = exports.TradeAllocationCommissionAmount$outboundSchema = exports.TradeAllocationCommissionAmount$inboundSchema = exports.TradeAllocationBrokerCapacity$ = exports.TradeAllocationBrokerCapacity$outboundSchema = exports.TradeAllocationBrokerCapacity$inboundSchema = exports.TradeAllocationAssetType$ = exports.TradeAllocationAssetType$outboundSchema = exports.TradeAllocationAssetType$inboundSchema = exports.TradeAllocationAccruedInterestAmount$ = exports.TradeAllocationAccruedInterestAmount$outboundSchema = exports.TradeAllocationAccruedInterestAmount$inboundSchema = exports.TradeAllocationWhenIssued = exports.TradeAllocationToSide = exports.TradeAllocationState = exports.TradeAllocationSpecialInstructions = exports.TradeAllocationSideModifier = exports.TradeAllocationPriceAdjustmentType = exports.TradeAllocationIdentifierType = exports.TradeAllocationBrokerCapacity = exports.TradeAllocationAssetType = void 0;
exports.TradeAllocation$ = exports.TradeAllocation$outboundSchema = exports.TradeAllocation$inboundSchema = exports.TradeAllocationWhenIssued$ = exports.TradeAllocationWhenIssued$outboundSchema = exports.TradeAllocationWhenIssued$inboundSchema = exports.TradeAllocationToSide$ = exports.TradeAllocationToSide$outboundSchema = exports.TradeAllocationToSide$inboundSchema = exports.TradeAllocationState$ = exports.TradeAllocationState$outboundSchema = exports.TradeAllocationState$inboundSchema = exports.TradeAllocationSpecialInstructions$ = exports.TradeAllocationSpecialInstructions$outboundSchema = exports.TradeAllocationSpecialInstructions$inboundSchema = exports.TradeAllocationSideModifier$ = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const bondyield_js_1 = require("./bondyield.js");
const fee_js_1 = require("./fee.js");
const lot_js_1 = require("./lot.js");
/**
 * Type of the asset being traded. Required for SYMBOL and CUSIP.
 */
var TradeAllocationAssetType;
(function (TradeAllocationAssetType) {
    TradeAllocationAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    TradeAllocationAssetType["Equity"] = "EQUITY";
    TradeAllocationAssetType["FixedIncome"] = "FIXED_INCOME";
})(TradeAllocationAssetType || (exports.TradeAllocationAssetType = TradeAllocationAssetType = {}));
/**
 * Broker capacity for the trade.
 */
var TradeAllocationBrokerCapacity;
(function (TradeAllocationBrokerCapacity) {
    TradeAllocationBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    TradeAllocationBrokerCapacity["Agency"] = "AGENCY";
    TradeAllocationBrokerCapacity["Principal"] = "PRINCIPAL";
    TradeAllocationBrokerCapacity["Mixed"] = "MIXED";
})(TradeAllocationBrokerCapacity || (exports.TradeAllocationBrokerCapacity = TradeAllocationBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
var TradeAllocationIdentifierType;
(function (TradeAllocationIdentifierType) {
    TradeAllocationIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    TradeAllocationIdentifierType["AssetId"] = "ASSET_ID";
    TradeAllocationIdentifierType["Symbol"] = "SYMBOL";
    TradeAllocationIdentifierType["Cusip"] = "CUSIP";
    TradeAllocationIdentifierType["Isin"] = "ISIN";
})(TradeAllocationIdentifierType || (exports.TradeAllocationIdentifierType = TradeAllocationIdentifierType = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security.
 */
var TradeAllocationPriceAdjustmentType;
(function (TradeAllocationPriceAdjustmentType) {
    TradeAllocationPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    TradeAllocationPriceAdjustmentType["Markup"] = "MARKUP";
    TradeAllocationPriceAdjustmentType["Markdown"] = "MARKDOWN";
    TradeAllocationPriceAdjustmentType["GrossCredit"] = "GROSS_CREDIT";
})(TradeAllocationPriceAdjustmentType || (exports.TradeAllocationPriceAdjustmentType = TradeAllocationPriceAdjustmentType = {}));
/**
 * Side modifier for the trade allocation.
 */
var TradeAllocationSideModifier;
(function (TradeAllocationSideModifier) {
    TradeAllocationSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    TradeAllocationSideModifier["Short"] = "SHORT";
    TradeAllocationSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    TradeAllocationSideModifier["ShortCover"] = "SHORT_COVER";
    TradeAllocationSideModifier["Open"] = "OPEN";
    TradeAllocationSideModifier["Close"] = "CLOSE";
})(TradeAllocationSideModifier || (exports.TradeAllocationSideModifier = TradeAllocationSideModifier = {}));
var TradeAllocationSpecialInstructions;
(function (TradeAllocationSpecialInstructions) {
    TradeAllocationSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    TradeAllocationSpecialInstructions["Rule144"] = "RULE_144";
    TradeAllocationSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    TradeAllocationSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    TradeAllocationSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    TradeAllocationSpecialInstructions["CoverShort"] = "COVER_SHORT";
    TradeAllocationSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    TradeAllocationSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    TradeAllocationSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    TradeAllocationSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    TradeAllocationSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    TradeAllocationSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    TradeAllocationSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    TradeAllocationSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    TradeAllocationSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    TradeAllocationSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    TradeAllocationSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    TradeAllocationSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    TradeAllocationSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    TradeAllocationSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    TradeAllocationSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    TradeAllocationSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    TradeAllocationSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    TradeAllocationSpecialInstructions["Solicited"] = "SOLICITED";
    TradeAllocationSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    TradeAllocationSpecialInstructions["XDividend"] = "X_DIVIDEND";
    TradeAllocationSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    TradeAllocationSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    TradeAllocationSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    TradeAllocationSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    TradeAllocationSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    TradeAllocationSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    TradeAllocationSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    TradeAllocationSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    TradeAllocationSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    TradeAllocationSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    TradeAllocationSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    TradeAllocationSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    TradeAllocationSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    TradeAllocationSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    TradeAllocationSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    TradeAllocationSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    TradeAllocationSpecialInstructions["StockReward"] = "STOCK_REWARD";
    TradeAllocationSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    TradeAllocationSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    TradeAllocationSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    TradeAllocationSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(TradeAllocationSpecialInstructions || (exports.TradeAllocationSpecialInstructions = TradeAllocationSpecialInstructions = {}));
/**
 * The state that the trade allocation is in.
 */
var TradeAllocationState;
(function (TradeAllocationState) {
    TradeAllocationState["StateUnspecified"] = "STATE_UNSPECIFIED";
    TradeAllocationState["Creating"] = "CREATING";
    TradeAllocationState["Rebooking"] = "REBOOKING";
    TradeAllocationState["Canceling"] = "CANCELING";
    TradeAllocationState["Booked"] = "BOOKED";
    TradeAllocationState["Rebooked"] = "REBOOKED";
    TradeAllocationState["Canceled"] = "CANCELED";
    TradeAllocationState["Failed"] = "FAILED";
})(TradeAllocationState || (exports.TradeAllocationState = TradeAllocationState = {}));
/**
 * Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
 */
var TradeAllocationToSide;
(function (TradeAllocationToSide) {
    TradeAllocationToSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    TradeAllocationToSide["Buy"] = "BUY";
    TradeAllocationToSide["Sell"] = "SELL";
})(TradeAllocationToSide || (exports.TradeAllocationToSide = TradeAllocationToSide = {}));
/**
 * Denotes that this trade allocation was either when_issued or when_distributed.
 */
var TradeAllocationWhenIssued;
(function (TradeAllocationWhenIssued) {
    TradeAllocationWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    TradeAllocationWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    TradeAllocationWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(TradeAllocationWhenIssued || (exports.TradeAllocationWhenIssued = TradeAllocationWhenIssued = {}));
/** @internal */
exports.TradeAllocationAccruedInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TradeAllocationAccruedInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationAccruedInterestAmount$;
(function (TradeAllocationAccruedInterestAmount$) {
    /** @deprecated use `TradeAllocationAccruedInterestAmount$inboundSchema` instead. */
    TradeAllocationAccruedInterestAmount$.inboundSchema = exports.TradeAllocationAccruedInterestAmount$inboundSchema;
    /** @deprecated use `TradeAllocationAccruedInterestAmount$outboundSchema` instead. */
    TradeAllocationAccruedInterestAmount$.outboundSchema = exports.TradeAllocationAccruedInterestAmount$outboundSchema;
})(TradeAllocationAccruedInterestAmount$ || (exports.TradeAllocationAccruedInterestAmount$ = TradeAllocationAccruedInterestAmount$ = {}));
/** @internal */
exports.TradeAllocationAssetType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationAssetType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationAssetType$;
(function (TradeAllocationAssetType$) {
    /** @deprecated use `TradeAllocationAssetType$inboundSchema` instead. */
    TradeAllocationAssetType$.inboundSchema = exports.TradeAllocationAssetType$inboundSchema;
    /** @deprecated use `TradeAllocationAssetType$outboundSchema` instead. */
    TradeAllocationAssetType$.outboundSchema = exports.TradeAllocationAssetType$outboundSchema;
})(TradeAllocationAssetType$ || (exports.TradeAllocationAssetType$ = TradeAllocationAssetType$ = {}));
/** @internal */
exports.TradeAllocationBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationBrokerCapacity$;
(function (TradeAllocationBrokerCapacity$) {
    /** @deprecated use `TradeAllocationBrokerCapacity$inboundSchema` instead. */
    TradeAllocationBrokerCapacity$.inboundSchema = exports.TradeAllocationBrokerCapacity$inboundSchema;
    /** @deprecated use `TradeAllocationBrokerCapacity$outboundSchema` instead. */
    TradeAllocationBrokerCapacity$.outboundSchema = exports.TradeAllocationBrokerCapacity$outboundSchema;
})(TradeAllocationBrokerCapacity$ || (exports.TradeAllocationBrokerCapacity$ = TradeAllocationBrokerCapacity$ = {}));
/** @internal */
exports.TradeAllocationCommissionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TradeAllocationCommissionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationCommissionAmount$;
(function (TradeAllocationCommissionAmount$) {
    /** @deprecated use `TradeAllocationCommissionAmount$inboundSchema` instead. */
    TradeAllocationCommissionAmount$.inboundSchema = exports.TradeAllocationCommissionAmount$inboundSchema;
    /** @deprecated use `TradeAllocationCommissionAmount$outboundSchema` instead. */
    TradeAllocationCommissionAmount$.outboundSchema = exports.TradeAllocationCommissionAmount$outboundSchema;
})(TradeAllocationCommissionAmount$ || (exports.TradeAllocationCommissionAmount$ = TradeAllocationCommissionAmount$ = {}));
/** @internal */
exports.TradeAllocationGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TradeAllocationGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationGrossAmount$;
(function (TradeAllocationGrossAmount$) {
    /** @deprecated use `TradeAllocationGrossAmount$inboundSchema` instead. */
    TradeAllocationGrossAmount$.inboundSchema = exports.TradeAllocationGrossAmount$inboundSchema;
    /** @deprecated use `TradeAllocationGrossAmount$outboundSchema` instead. */
    TradeAllocationGrossAmount$.outboundSchema = exports.TradeAllocationGrossAmount$outboundSchema;
})(TradeAllocationGrossAmount$ || (exports.TradeAllocationGrossAmount$ = TradeAllocationGrossAmount$ = {}));
/** @internal */
exports.TradeAllocationIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationIdentifierType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationIdentifierType$;
(function (TradeAllocationIdentifierType$) {
    /** @deprecated use `TradeAllocationIdentifierType$inboundSchema` instead. */
    TradeAllocationIdentifierType$.inboundSchema = exports.TradeAllocationIdentifierType$inboundSchema;
    /** @deprecated use `TradeAllocationIdentifierType$outboundSchema` instead. */
    TradeAllocationIdentifierType$.outboundSchema = exports.TradeAllocationIdentifierType$outboundSchema;
})(TradeAllocationIdentifierType$ || (exports.TradeAllocationIdentifierType$ = TradeAllocationIdentifierType$ = {}));
/** @internal */
exports.TradeAllocationPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TradeAllocationPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationPrevailingMarketPrice$;
(function (TradeAllocationPrevailingMarketPrice$) {
    /** @deprecated use `TradeAllocationPrevailingMarketPrice$inboundSchema` instead. */
    TradeAllocationPrevailingMarketPrice$.inboundSchema = exports.TradeAllocationPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `TradeAllocationPrevailingMarketPrice$outboundSchema` instead. */
    TradeAllocationPrevailingMarketPrice$.outboundSchema = exports.TradeAllocationPrevailingMarketPrice$outboundSchema;
})(TradeAllocationPrevailingMarketPrice$ || (exports.TradeAllocationPrevailingMarketPrice$ = TradeAllocationPrevailingMarketPrice$ = {}));
/** @internal */
exports.TradeAllocationPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TradeAllocationPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationPrice$;
(function (TradeAllocationPrice$) {
    /** @deprecated use `TradeAllocationPrice$inboundSchema` instead. */
    TradeAllocationPrice$.inboundSchema = exports.TradeAllocationPrice$inboundSchema;
    /** @deprecated use `TradeAllocationPrice$outboundSchema` instead. */
    TradeAllocationPrice$.outboundSchema = exports.TradeAllocationPrice$outboundSchema;
})(TradeAllocationPrice$ || (exports.TradeAllocationPrice$ = TradeAllocationPrice$ = {}));
/** @internal */
exports.TradeAllocationPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TradeAllocationPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationPriceAdjustmentAmount$;
(function (TradeAllocationPriceAdjustmentAmount$) {
    /** @deprecated use `TradeAllocationPriceAdjustmentAmount$inboundSchema` instead. */
    TradeAllocationPriceAdjustmentAmount$.inboundSchema = exports.TradeAllocationPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `TradeAllocationPriceAdjustmentAmount$outboundSchema` instead. */
    TradeAllocationPriceAdjustmentAmount$.outboundSchema = exports.TradeAllocationPriceAdjustmentAmount$outboundSchema;
})(TradeAllocationPriceAdjustmentAmount$ || (exports.TradeAllocationPriceAdjustmentAmount$ = TradeAllocationPriceAdjustmentAmount$ = {}));
/** @internal */
exports.TradeAllocationPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationPriceAdjustmentType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationPriceAdjustmentType$;
(function (TradeAllocationPriceAdjustmentType$) {
    /** @deprecated use `TradeAllocationPriceAdjustmentType$inboundSchema` instead. */
    TradeAllocationPriceAdjustmentType$.inboundSchema = exports.TradeAllocationPriceAdjustmentType$inboundSchema;
    /** @deprecated use `TradeAllocationPriceAdjustmentType$outboundSchema` instead. */
    TradeAllocationPriceAdjustmentType$.outboundSchema = exports.TradeAllocationPriceAdjustmentType$outboundSchema;
})(TradeAllocationPriceAdjustmentType$ || (exports.TradeAllocationPriceAdjustmentType$ = TradeAllocationPriceAdjustmentType$ = {}));
/** @internal */
exports.TradeAllocationPriceAdjustment$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => exports.TradeAllocationPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_type: exports.TradeAllocationPriceAdjustmentType$inboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
exports.TradeAllocationPriceAdjustment$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => exports.TradeAllocationPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentType: exports.TradeAllocationPriceAdjustmentType$outboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationPriceAdjustment$;
(function (TradeAllocationPriceAdjustment$) {
    /** @deprecated use `TradeAllocationPriceAdjustment$inboundSchema` instead. */
    TradeAllocationPriceAdjustment$.inboundSchema = exports.TradeAllocationPriceAdjustment$inboundSchema;
    /** @deprecated use `TradeAllocationPriceAdjustment$outboundSchema` instead. */
    TradeAllocationPriceAdjustment$.outboundSchema = exports.TradeAllocationPriceAdjustment$outboundSchema;
})(TradeAllocationPriceAdjustment$ || (exports.TradeAllocationPriceAdjustment$ = TradeAllocationPriceAdjustment$ = {}));
/** @internal */
exports.TradeAllocationQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TradeAllocationQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationQuantity$;
(function (TradeAllocationQuantity$) {
    /** @deprecated use `TradeAllocationQuantity$inboundSchema` instead. */
    TradeAllocationQuantity$.inboundSchema = exports.TradeAllocationQuantity$inboundSchema;
    /** @deprecated use `TradeAllocationQuantity$outboundSchema` instead. */
    TradeAllocationQuantity$.outboundSchema = exports.TradeAllocationQuantity$outboundSchema;
})(TradeAllocationQuantity$ || (exports.TradeAllocationQuantity$ = TradeAllocationQuantity$ = {}));
/** @internal */
exports.SettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.SettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SettlementDate$;
(function (SettlementDate$) {
    /** @deprecated use `SettlementDate$inboundSchema` instead. */
    SettlementDate$.inboundSchema = exports.SettlementDate$inboundSchema;
    /** @deprecated use `SettlementDate$outboundSchema` instead. */
    SettlementDate$.outboundSchema = exports.SettlementDate$outboundSchema;
})(SettlementDate$ || (exports.SettlementDate$ = SettlementDate$ = {}));
/** @internal */
exports.TradeAllocationSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationSideModifier),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationSideModifier$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationSideModifier$;
(function (TradeAllocationSideModifier$) {
    /** @deprecated use `TradeAllocationSideModifier$inboundSchema` instead. */
    TradeAllocationSideModifier$.inboundSchema = exports.TradeAllocationSideModifier$inboundSchema;
    /** @deprecated use `TradeAllocationSideModifier$outboundSchema` instead. */
    TradeAllocationSideModifier$.outboundSchema = exports.TradeAllocationSideModifier$outboundSchema;
})(TradeAllocationSideModifier$ || (exports.TradeAllocationSideModifier$ = TradeAllocationSideModifier$ = {}));
/** @internal */
exports.TradeAllocationSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationSpecialInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationSpecialInstructions$;
(function (TradeAllocationSpecialInstructions$) {
    /** @deprecated use `TradeAllocationSpecialInstructions$inboundSchema` instead. */
    TradeAllocationSpecialInstructions$.inboundSchema = exports.TradeAllocationSpecialInstructions$inboundSchema;
    /** @deprecated use `TradeAllocationSpecialInstructions$outboundSchema` instead. */
    TradeAllocationSpecialInstructions$.outboundSchema = exports.TradeAllocationSpecialInstructions$outboundSchema;
})(TradeAllocationSpecialInstructions$ || (exports.TradeAllocationSpecialInstructions$ = TradeAllocationSpecialInstructions$ = {}));
/** @internal */
exports.TradeAllocationState$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationState$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationState$;
(function (TradeAllocationState$) {
    /** @deprecated use `TradeAllocationState$inboundSchema` instead. */
    TradeAllocationState$.inboundSchema = exports.TradeAllocationState$inboundSchema;
    /** @deprecated use `TradeAllocationState$outboundSchema` instead. */
    TradeAllocationState$.outboundSchema = exports.TradeAllocationState$outboundSchema;
})(TradeAllocationState$ || (exports.TradeAllocationState$ = TradeAllocationState$ = {}));
/** @internal */
exports.TradeAllocationToSide$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationToSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationToSide$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationToSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationToSide$;
(function (TradeAllocationToSide$) {
    /** @deprecated use `TradeAllocationToSide$inboundSchema` instead. */
    TradeAllocationToSide$.inboundSchema = exports.TradeAllocationToSide$inboundSchema;
    /** @deprecated use `TradeAllocationToSide$outboundSchema` instead. */
    TradeAllocationToSide$.outboundSchema = exports.TradeAllocationToSide$outboundSchema;
})(TradeAllocationToSide$ || (exports.TradeAllocationToSide$ = TradeAllocationToSide$ = {}));
/** @internal */
exports.TradeAllocationWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationWhenIssued),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationWhenIssued$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationWhenIssued$;
(function (TradeAllocationWhenIssued$) {
    /** @deprecated use `TradeAllocationWhenIssued$inboundSchema` instead. */
    TradeAllocationWhenIssued$.inboundSchema = exports.TradeAllocationWhenIssued$inboundSchema;
    /** @deprecated use `TradeAllocationWhenIssued$outboundSchema` instead. */
    TradeAllocationWhenIssued$.outboundSchema = exports.TradeAllocationWhenIssued$outboundSchema;
})(TradeAllocationWhenIssued$ || (exports.TradeAllocationWhenIssued$ = TradeAllocationWhenIssued$ = {}));
/** @internal */
exports.TradeAllocation$inboundSchema = z.object({
    accrued_interest_amount: z.nullable(z.lazy(() => exports.TradeAllocationAccruedInterestAmount$inboundSchema)).optional(),
    additional_instructions: z.string().optional(),
    asset_type: exports.TradeAllocationAssetType$inboundSchema.optional(),
    bond_yield: z.array(bondyield_js_1.BondYield$inboundSchema).optional(),
    broker_capacity: exports.TradeAllocationBrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string().optional(),
    commission_amount: z.nullable(z.lazy(() => exports.TradeAllocationCommissionAmount$inboundSchema)).optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    fees: z.array(fee_js_1.Fee$inboundSchema).optional(),
    from_account_id: z.string().optional(),
    from_activity_id: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => exports.TradeAllocationGrossAmount$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: exports.TradeAllocationIdentifierType$inboundSchema.optional(),
    issuing_region_code: z.string().optional(),
    lot_matching_instructions: z.array(lot_js_1.Lot$inboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => exports.TradeAllocationPrevailingMarketPrice$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => exports.TradeAllocationPrice$inboundSchema))
        .optional(),
    price_adjustment: z.nullable(z.lazy(() => exports.TradeAllocationPriceAdjustment$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.TradeAllocationQuantity$inboundSchema))
        .optional(),
    settlement_date: z.nullable(z.lazy(() => exports.SettlementDate$inboundSchema))
        .optional(),
    side_modifier: exports.TradeAllocationSideModifier$inboundSchema.optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(exports.TradeAllocationSpecialInstructions$inboundSchema).optional(),
    state: exports.TradeAllocationState$inboundSchema.optional(),
    to_account_id: z.string().optional(),
    to_activity_id: z.string().optional(),
    to_side: exports.TradeAllocationToSide$inboundSchema.optional(),
    trade_allocation_id: z.string().optional(),
    when_issued: exports.TradeAllocationWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "additional_instructions": "additionalInstructions",
        "asset_type": "assetType",
        "bond_yield": "bondYield",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "commission_amount": "commissionAmount",
        "execution_time": "executionTime",
        "from_account_id": "fromAccountId",
        "from_activity_id": "fromActivityId",
        "gross_amount": "grossAmount",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "lot_matching_instructions": "lotMatchingInstructions",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "to_account_id": "toAccountId",
        "to_activity_id": "toActivityId",
        "to_side": "toSide",
        "trade_allocation_id": "tradeAllocationId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
exports.TradeAllocation$outboundSchema = z.object({
    accruedInterestAmount: z.nullable(z.lazy(() => exports.TradeAllocationAccruedInterestAmount$outboundSchema)).optional(),
    additionalInstructions: z.string().optional(),
    assetType: exports.TradeAllocationAssetType$outboundSchema.optional(),
    bondYield: z.array(bondyield_js_1.BondYield$outboundSchema).optional(),
    brokerCapacity: exports.TradeAllocationBrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    commissionAmount: z.nullable(z.lazy(() => exports.TradeAllocationCommissionAmount$outboundSchema)).optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    fees: z.array(fee_js_1.Fee$outboundSchema).optional(),
    fromAccountId: z.string().optional(),
    fromActivityId: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => exports.TradeAllocationGrossAmount$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: exports.TradeAllocationIdentifierType$outboundSchema.optional(),
    issuingRegionCode: z.string().optional(),
    lotMatchingInstructions: z.array(lot_js_1.Lot$outboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => exports.TradeAllocationPrevailingMarketPrice$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => exports.TradeAllocationPrice$outboundSchema))
        .optional(),
    priceAdjustment: z.nullable(z.lazy(() => exports.TradeAllocationPriceAdjustment$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.TradeAllocationQuantity$outboundSchema))
        .optional(),
    settlementDate: z.nullable(z.lazy(() => exports.SettlementDate$outboundSchema))
        .optional(),
    sideModifier: exports.TradeAllocationSideModifier$outboundSchema.optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(exports.TradeAllocationSpecialInstructions$outboundSchema).optional(),
    state: exports.TradeAllocationState$outboundSchema.optional(),
    toAccountId: z.string().optional(),
    toActivityId: z.string().optional(),
    toSide: exports.TradeAllocationToSide$outboundSchema.optional(),
    tradeAllocationId: z.string().optional(),
    whenIssued: exports.TradeAllocationWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accruedInterestAmount: "accrued_interest_amount",
        additionalInstructions: "additional_instructions",
        assetType: "asset_type",
        bondYield: "bond_yield",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        commissionAmount: "commission_amount",
        executionTime: "execution_time",
        fromAccountId: "from_account_id",
        fromActivityId: "from_activity_id",
        grossAmount: "gross_amount",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        lotMatchingInstructions: "lot_matching_instructions",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        toAccountId: "to_account_id",
        toActivityId: "to_activity_id",
        toSide: "to_side",
        tradeAllocationId: "trade_allocation_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocation$;
(function (TradeAllocation$) {
    /** @deprecated use `TradeAllocation$inboundSchema` instead. */
    TradeAllocation$.inboundSchema = exports.TradeAllocation$inboundSchema;
    /** @deprecated use `TradeAllocation$outboundSchema` instead. */
    TradeAllocation$.outboundSchema = exports.TradeAllocation$outboundSchema;
})(TradeAllocation$ || (exports.TradeAllocation$ = TradeAllocation$ = {}));
//# sourceMappingURL=tradeallocation.js.map