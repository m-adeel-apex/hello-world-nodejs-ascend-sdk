"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FixedIncomeStatus$inboundSchema = exports.FirstCouponDate$ = exports.FirstCouponDate$outboundSchema = exports.FirstCouponDate$inboundSchema = exports.Duration$ = exports.Duration$outboundSchema = exports.Duration$inboundSchema = exports.CouponType$ = exports.CouponType$outboundSchema = exports.CouponType$inboundSchema = exports.CouponRate$ = exports.CouponRate$outboundSchema = exports.CouponRate$inboundSchema = exports.CouponFrequency$ = exports.CouponFrequency$outboundSchema = exports.CouponFrequency$inboundSchema = exports.CallType$ = exports.CallType$outboundSchema = exports.CallType$inboundSchema = exports.Equity$ = exports.Equity$outboundSchema = exports.Equity$inboundSchema = exports.AssetEquityType$ = exports.AssetEquityType$outboundSchema = exports.AssetEquityType$inboundSchema = exports.Currency$ = exports.Currency$outboundSchema = exports.Currency$inboundSchema = exports.CurrencyType$ = exports.CurrencyType$outboundSchema = exports.CurrencyType$inboundSchema = exports.AssetType1 = exports.SettlementType = exports.SettlementMethod = exports.OptionType = exports.SettlementStyle = exports.PennyPilotIndicator = exports.Classification = exports.ExerciseStyle = exports.CallPut = exports.MutualFundType = exports.SpRating = exports.FixedIncomeType = exports.FixedIncomeSubtype = exports.FixedIncomeStatus = exports.CouponType = exports.CouponFrequency = exports.CallType = exports.AssetEquityType = exports.CurrencyType = void 0;
exports.MutualFund$ = exports.MutualFund$outboundSchema = exports.MutualFund$inboundSchema = exports.MutualFundType$ = exports.MutualFundType$outboundSchema = exports.MutualFundType$inboundSchema = exports.LargeOrderNotificationAmount$ = exports.LargeOrderNotificationAmount$outboundSchema = exports.LargeOrderNotificationAmount$inboundSchema = exports.FixedIncome$ = exports.FixedIncome$outboundSchema = exports.FixedIncome$inboundSchema = exports.SpRatingDate$ = exports.SpRatingDate$outboundSchema = exports.SpRatingDate$inboundSchema = exports.SpRating$ = exports.SpRating$outboundSchema = exports.SpRating$inboundSchema = exports.PriceAtIssuance$ = exports.PriceAtIssuance$outboundSchema = exports.PriceAtIssuance$inboundSchema = exports.ParValue$ = exports.ParValue$outboundSchema = exports.ParValue$inboundSchema = exports.NextCouponDate$ = exports.NextCouponDate$outboundSchema = exports.NextCouponDate$inboundSchema = exports.NextCallDate$ = exports.NextCallDate$outboundSchema = exports.NextCallDate$inboundSchema = exports.MaturityDate$ = exports.MaturityDate$outboundSchema = exports.MaturityDate$inboundSchema = exports.LastCouponDate$ = exports.LastCouponDate$outboundSchema = exports.LastCouponDate$inboundSchema = exports.IssueSize$ = exports.IssueSize$outboundSchema = exports.IssueSize$inboundSchema = exports.AssetIssueDate$ = exports.AssetIssueDate$outboundSchema = exports.AssetIssueDate$inboundSchema = exports.FixedIncomeType$ = exports.FixedIncomeType$outboundSchema = exports.FixedIncomeType$inboundSchema = exports.FixedIncomeSubtype$ = exports.FixedIncomeSubtype$outboundSchema = exports.FixedIncomeSubtype$inboundSchema = exports.FixedIncomeStatus$ = exports.FixedIncomeStatus$outboundSchema = void 0;
exports.Option$outboundSchema = exports.Option$inboundSchema = exports.StrikePrice$ = exports.StrikePrice$outboundSchema = exports.StrikePrice$inboundSchema = exports.SettlementType$ = exports.SettlementType$outboundSchema = exports.SettlementType$inboundSchema = exports.SettlementMethod$ = exports.SettlementMethod$outboundSchema = exports.SettlementMethod$inboundSchema = exports.SeriesDate$ = exports.SeriesDate$outboundSchema = exports.SeriesDate$inboundSchema = exports.OptionType$ = exports.OptionType$outboundSchema = exports.OptionType$inboundSchema = exports.OptionRoot$ = exports.OptionRoot$outboundSchema = exports.OptionRoot$inboundSchema = exports.TradeValueMultiplier$ = exports.TradeValueMultiplier$outboundSchema = exports.TradeValueMultiplier$inboundSchema = exports.StrikePriceMultiplier$ = exports.StrikePriceMultiplier$outboundSchema = exports.StrikePriceMultiplier$inboundSchema = exports.StrikeMultiplier$ = exports.StrikeMultiplier$outboundSchema = exports.StrikeMultiplier$inboundSchema = exports.SettlementStyle$ = exports.SettlementStyle$outboundSchema = exports.SettlementStyle$inboundSchema = exports.PositionLimit$ = exports.PositionLimit$outboundSchema = exports.PositionLimit$inboundSchema = exports.PennyPilotIndicator$ = exports.PennyPilotIndicator$outboundSchema = exports.PennyPilotIndicator$inboundSchema = exports.Classification$ = exports.Classification$outboundSchema = exports.Classification$inboundSchema = exports.AssetExpirationDate$ = exports.AssetExpirationDate$outboundSchema = exports.AssetExpirationDate$inboundSchema = exports.ExerciseStyle$ = exports.ExerciseStyle$outboundSchema = exports.ExerciseStyle$inboundSchema = exports.CallPut$ = exports.CallPut$outboundSchema = exports.CallPut$inboundSchema = void 0;
exports.Asset$ = exports.Asset$outboundSchema = exports.Asset$inboundSchema = exports.AssetType1$ = exports.AssetType1$outboundSchema = exports.AssetType1$inboundSchema = exports.Option$ = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const optiondeliverable_js_1 = require("./optiondeliverable.js");
/**
 * Indicates the type of currency
 */
var CurrencyType;
(function (CurrencyType) {
    CurrencyType["CurrencyTypeUnspecified"] = "CURRENCY_TYPE_UNSPECIFIED";
    CurrencyType["Currency"] = "CURRENCY";
    CurrencyType["CurrencyEquivalent"] = "CURRENCY_EQUIVALENT";
})(CurrencyType || (exports.CurrencyType = CurrencyType = {}));
/**
 * the code indicating the type of associated security.
 */
var AssetEquityType;
(function (AssetEquityType) {
    AssetEquityType["EquityTypeUnspecified"] = "EQUITY_TYPE_UNSPECIFIED";
    AssetEquityType["CommonStock"] = "COMMON_STOCK";
    AssetEquityType["PreferredStock"] = "PREFERRED_STOCK";
    AssetEquityType["PreferredAdr"] = "PREFERRED_ADR";
    AssetEquityType["SpecialStock"] = "SPECIAL_STOCK";
    AssetEquityType["Index"] = "INDEX";
    AssetEquityType["Warrant"] = "WARRANT";
    AssetEquityType["Adr"] = "ADR";
    AssetEquityType["Rights"] = "RIGHTS";
    AssetEquityType["SharesOfBeneficialInterest"] = "SHARES_OF_BENEFICIAL_INTEREST";
    AssetEquityType["Certificates"] = "CERTIFICATES";
    AssetEquityType["Units"] = "UNITS";
    AssetEquityType["DebtIssue"] = "DEBT_ISSUE";
    AssetEquityType["EquityTypeOption"] = "EQUITY_TYPE_OPTION";
    AssetEquityType["Etf"] = "ETF";
})(AssetEquityType || (exports.AssetEquityType = AssetEquityType = {}));
/**
 * The type of call
 */
var CallType;
(function (CallType) {
    CallType["CallTypeUnspecified"] = "CALL_TYPE_UNSPECIFIED";
    CallType["Ordinary"] = "ORDINARY";
    CallType["Special"] = "SPECIAL";
    CallType["MakeWhole"] = "MAKE_WHOLE";
    CallType["Regulatory"] = "REGULATORY";
})(CallType || (exports.CallType = CallType = {}));
/**
 * Frequency of payments
 */
var CouponFrequency;
(function (CouponFrequency) {
    CouponFrequency["CouponFrequencyUnspecified"] = "COUPON_FREQUENCY_UNSPECIFIED";
    CouponFrequency["SemiAnnual"] = "SEMI_ANNUAL";
    CouponFrequency["Monthly"] = "MONTHLY";
    CouponFrequency["AtMaturity"] = "AT_MATURITY";
    CouponFrequency["Zero"] = "ZERO";
    CouponFrequency["Quarterly"] = "QUARTERLY";
    CouponFrequency["Annual"] = "ANNUAL";
})(CouponFrequency || (exports.CouponFrequency = CouponFrequency = {}));
/**
 * Type of coupon rate
 */
var CouponType;
(function (CouponType) {
    CouponType["CouponTypeUnspecified"] = "COUPON_TYPE_UNSPECIFIED";
    CouponType["CouponTypeFixed"] = "COUPON_TYPE_FIXED";
    CouponType["CouponTypeZero"] = "COUPON_TYPE_ZERO";
})(CouponType || (exports.CouponType = CouponType = {}));
/**
 * The status of the fixed income
 */
var FixedIncomeStatus;
(function (FixedIncomeStatus) {
    FixedIncomeStatus["FixedIncomeStatusUnspecified"] = "FIXED_INCOME_STATUS_UNSPECIFIED";
    FixedIncomeStatus["Outstanding"] = "OUTSTANDING";
    FixedIncomeStatus["Matured"] = "MATURED";
    FixedIncomeStatus["Called"] = "CALLED";
    FixedIncomeStatus["Unknown"] = "UNKNOWN";
    FixedIncomeStatus["Defaulted"] = "DEFAULTED";
    FixedIncomeStatus["Converted"] = "CONVERTED";
    FixedIncomeStatus["Tendered"] = "TENDERED";
    FixedIncomeStatus["PreIssuance"] = "PRE_ISSUANCE";
    FixedIncomeStatus["Liquidated"] = "LIQUIDATED";
    FixedIncomeStatus["Repurchased"] = "REPURCHASED";
    FixedIncomeStatus["Repaid"] = "REPAID";
    FixedIncomeStatus["Restructured"] = "RESTRUCTURED";
    FixedIncomeStatus["Put"] = "PUT";
    FixedIncomeStatus["Funged"] = "FUNGED";
})(FixedIncomeStatus || (exports.FixedIncomeStatus = FixedIncomeStatus = {}));
/**
 * The type of treasury
 */
var FixedIncomeSubtype;
(function (FixedIncomeSubtype) {
    FixedIncomeSubtype["FixedIncomeSubtypeUnspecified"] = "FIXED_INCOME_SUBTYPE_UNSPECIFIED";
    FixedIncomeSubtype["Bond"] = "BOND";
    FixedIncomeSubtype["Strips"] = "STRIPS";
    FixedIncomeSubtype["Bill"] = "BILL";
    FixedIncomeSubtype["Note"] = "NOTE";
    FixedIncomeSubtype["Tips"] = "TIPS";
})(FixedIncomeSubtype || (exports.FixedIncomeSubtype = FixedIncomeSubtype = {}));
/**
 * Type of fixed income security
 */
var FixedIncomeType;
(function (FixedIncomeType) {
    FixedIncomeType["FixedIncomeTypeUnspecified"] = "FIXED_INCOME_TYPE_UNSPECIFIED";
    FixedIncomeType["Municipal"] = "MUNICIPAL";
    FixedIncomeType["Corporate"] = "CORPORATE";
    FixedIncomeType["Cd"] = "CD";
    FixedIncomeType["Agency"] = "AGENCY";
    FixedIncomeType["Treasury"] = "TREASURY";
    FixedIncomeType["Government"] = "GOVERNMENT";
    FixedIncomeType["ForeignGovernment"] = "FOREIGN_GOVERNMENT";
})(FixedIncomeType || (exports.FixedIncomeType = FixedIncomeType = {}));
/**
 * Standard & Poor's (S&P) rating of the creditworthiness of borrowers. Correspondents must be configured to view this field.
 */
var SpRating;
(function (SpRating) {
    SpRating["SpRatingUnspecified"] = "SP_RATING_UNSPECIFIED";
    SpRating["Aaa"] = "AAA";
    SpRating["AaPlus"] = "AA_PLUS";
    SpRating["Aa"] = "AA";
    SpRating["AaMinus"] = "AA_MINUS";
    SpRating["APlus"] = "A_PLUS";
    SpRating["A"] = "A";
    SpRating["AMinus"] = "A_MINUS";
    SpRating["BbbPlus"] = "BBB_PLUS";
    SpRating["Bbb"] = "BBB";
    SpRating["BbbMinus"] = "BBB_MINUS";
    SpRating["BbPlus"] = "BB_PLUS";
    SpRating["Bb"] = "BB";
    SpRating["BbMinus"] = "BB_MINUS";
    SpRating["BPlus"] = "B_PLUS";
    SpRating["B"] = "B";
    SpRating["BMinus"] = "B_MINUS";
    SpRating["CccPlus"] = "CCC_PLUS";
    SpRating["Ccc"] = "CCC";
    SpRating["CccMinus"] = "CCC_MINUS";
    SpRating["Cc"] = "CC";
    SpRating["C"] = "C";
    SpRating["D"] = "D";
    SpRating["Nr"] = "NR";
    SpRating["Sp1Plus"] = "SP_1_PLUS";
    SpRating["Sp1"] = "SP_1";
    SpRating["Sp1Minus"] = "SP_1_MINUS";
    SpRating["A1Plus"] = "A_1_PLUS";
    SpRating["A1"] = "A_1";
    SpRating["A1Minus"] = "A_1_MINUS";
})(SpRating || (exports.SpRating = SpRating = {}));
/**
 * Identifies type of mutual fund
 */
var MutualFundType;
(function (MutualFundType) {
    MutualFundType["MutualFundTypeUnspecified"] = "MUTUAL_FUND_TYPE_UNSPECIFIED";
    MutualFundType["Bond"] = "BOND";
    MutualFundType["MoneyMarketFund"] = "MONEY_MARKET_FUND";
    MutualFundType["Equity"] = "EQUITY";
})(MutualFundType || (exports.MutualFundType = MutualFundType = {}));
/**
 * Indicates whether the option is a Call or a Put. A Put entitles the holder to sell shares at the specified strike_price, while a Call entitles the holder to buy shares at the specified strike_price.
 */
var CallPut;
(function (CallPut) {
    CallPut["CallPutUnspecified"] = "CALL_PUT_UNSPECIFIED";
    CallPut["Call"] = "CALL";
    CallPut["Put"] = "PUT";
})(CallPut || (exports.CallPut = CallPut = {}));
/**
 * Indicates how and when an option can be exercised, either American (exercise any time before expiration) or European (exercise only at expiration).
 */
var ExerciseStyle;
(function (ExerciseStyle) {
    ExerciseStyle["ExerciseStyleUnspecified"] = "EXERCISE_STYLE_UNSPECIFIED";
    ExerciseStyle["American"] = "AMERICAN";
    ExerciseStyle["European"] = "EUROPEAN";
})(ExerciseStyle || (exports.ExerciseStyle = ExerciseStyle = {}));
/**
 * Classification is the category of option that the option falls into These are based on how the contract was written. Only STANDARD is supported at this time.
 */
var Classification;
(function (Classification) {
    Classification["ClassificationUnspecified"] = "CLASSIFICATION_UNSPECIFIED";
    Classification["Standard"] = "STANDARD";
    Classification["Flex"] = "FLEX";
})(Classification || (exports.Classification = Classification = {}));
/**
 * The penny pilot indicator of the option
 */
var PennyPilotIndicator;
(function (PennyPilotIndicator) {
    PennyPilotIndicator["PennyPilotIndicatorUnspecified"] = "PENNY_PILOT_INDICATOR_UNSPECIFIED";
    PennyPilotIndicator["PennyPilot"] = "PENNY_PILOT";
    PennyPilotIndicator["NonPennyPilot"] = "NON_PENNY_PILOT";
})(PennyPilotIndicator || (exports.PennyPilotIndicator = PennyPilotIndicator = {}));
/**
 * Indicates whether the option is designated to settle at the market's opening price on the expiration date.
 */
var SettlementStyle;
(function (SettlementStyle) {
    SettlementStyle["SettlementStyleUnspecified"] = "SETTLEMENT_STYLE_UNSPECIFIED";
    SettlementStyle["SettleOnOpen"] = "SETTLE_ON_OPEN";
    SettlementStyle["SettleOnClose"] = "SETTLE_ON_CLOSE";
})(SettlementStyle || (exports.SettlementStyle = SettlementStyle = {}));
/**
 * Type of deliverable asset the option is set to deliver upon expiry.
 */
var OptionType;
(function (OptionType) {
    OptionType["OptionTypeUnspecified"] = "OPTION_TYPE_UNSPECIFIED";
    OptionType["Equity"] = "EQUITY";
    OptionType["Index"] = "INDEX";
})(OptionType || (exports.OptionType = OptionType = {}));
/**
 * Specifies how an option is settled at expiration, either Physical (delivery of the underlying asset) or Cash (payment of the cash difference).
 */
var SettlementMethod;
(function (SettlementMethod) {
    SettlementMethod["SettlementMethodUnspecified"] = "SETTLEMENT_METHOD_UNSPECIFIED";
    SettlementMethod["Cash"] = "CASH";
    SettlementMethod["Physical"] = "PHYSICAL";
})(SettlementMethod || (exports.SettlementMethod = SettlementMethod = {}));
/**
 * Indicates whether an option follows Standard settlement terms or has Non-Standard terms, often due to adjustments like corporate actions.
 */
var SettlementType;
(function (SettlementType) {
    SettlementType["SettlementTypeUnspecified"] = "SETTLEMENT_TYPE_UNSPECIFIED";
    SettlementType["Standard"] = "STANDARD";
    SettlementType["NonStandard"] = "NON_STANDARD";
})(SettlementType || (exports.SettlementType = SettlementType = {}));
/**
 * The type or category of the asset
 */
var AssetType1;
(function (AssetType1) {
    AssetType1["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    AssetType1["Equity"] = "EQUITY";
    AssetType1["Option"] = "OPTION";
    AssetType1["Currency"] = "CURRENCY";
    AssetType1["Digital"] = "DIGITAL";
    AssetType1["FdicSynthetic"] = "FDIC_SYNTHETIC";
    AssetType1["FixedIncome"] = "FIXED_INCOME";
    AssetType1["MutualFund"] = "MUTUAL_FUND";
})(AssetType1 || (exports.AssetType1 = AssetType1 = {}));
/** @internal */
exports.CurrencyType$inboundSchema = z
    .union([
    z.nativeEnum(CurrencyType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CurrencyType$outboundSchema = z.union([
    z.nativeEnum(CurrencyType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CurrencyType$;
(function (CurrencyType$) {
    /** @deprecated use `CurrencyType$inboundSchema` instead. */
    CurrencyType$.inboundSchema = exports.CurrencyType$inboundSchema;
    /** @deprecated use `CurrencyType$outboundSchema` instead. */
    CurrencyType$.outboundSchema = exports.CurrencyType$outboundSchema;
})(CurrencyType$ || (exports.CurrencyType$ = CurrencyType$ = {}));
/** @internal */
exports.Currency$inboundSchema = z.object({
    currency_type: exports.CurrencyType$inboundSchema.optional(),
    payment_currency: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "currency_type": "currencyType",
        "payment_currency": "paymentCurrency",
    });
});
/** @internal */
exports.Currency$outboundSchema = z.object({
    currencyType: exports.CurrencyType$outboundSchema.optional(),
    paymentCurrency: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        currencyType: "currency_type",
        paymentCurrency: "payment_currency",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Currency$;
(function (Currency$) {
    /** @deprecated use `Currency$inboundSchema` instead. */
    Currency$.inboundSchema = exports.Currency$inboundSchema;
    /** @deprecated use `Currency$outboundSchema` instead. */
    Currency$.outboundSchema = exports.Currency$outboundSchema;
})(Currency$ || (exports.Currency$ = Currency$ = {}));
/** @internal */
exports.AssetEquityType$inboundSchema = z
    .union([
    z.nativeEnum(AssetEquityType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AssetEquityType$outboundSchema = z.union([
    z.nativeEnum(AssetEquityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetEquityType$;
(function (AssetEquityType$) {
    /** @deprecated use `AssetEquityType$inboundSchema` instead. */
    AssetEquityType$.inboundSchema = exports.AssetEquityType$inboundSchema;
    /** @deprecated use `AssetEquityType$outboundSchema` instead. */
    AssetEquityType$.outboundSchema = exports.AssetEquityType$outboundSchema;
})(AssetEquityType$ || (exports.AssetEquityType$ = AssetEquityType$ = {}));
/** @internal */
exports.Equity$inboundSchema = z
    .object({
    fractionable: z.boolean().optional(),
    liquidate: z.boolean().optional(),
    type: exports.AssetEquityType$inboundSchema.optional(),
});
/** @internal */
exports.Equity$outboundSchema = z.object({
    fractionable: z.boolean().optional(),
    liquidate: z.boolean().optional(),
    type: exports.AssetEquityType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Equity$;
(function (Equity$) {
    /** @deprecated use `Equity$inboundSchema` instead. */
    Equity$.inboundSchema = exports.Equity$inboundSchema;
    /** @deprecated use `Equity$outboundSchema` instead. */
    Equity$.outboundSchema = exports.Equity$outboundSchema;
})(Equity$ || (exports.Equity$ = Equity$ = {}));
/** @internal */
exports.CallType$inboundSchema = z
    .union([
    z.nativeEnum(CallType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CallType$outboundSchema = z.union([
    z.nativeEnum(CallType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CallType$;
(function (CallType$) {
    /** @deprecated use `CallType$inboundSchema` instead. */
    CallType$.inboundSchema = exports.CallType$inboundSchema;
    /** @deprecated use `CallType$outboundSchema` instead. */
    CallType$.outboundSchema = exports.CallType$outboundSchema;
})(CallType$ || (exports.CallType$ = CallType$ = {}));
/** @internal */
exports.CouponFrequency$inboundSchema = z
    .union([
    z.nativeEnum(CouponFrequency),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CouponFrequency$outboundSchema = z.union([
    z.nativeEnum(CouponFrequency),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CouponFrequency$;
(function (CouponFrequency$) {
    /** @deprecated use `CouponFrequency$inboundSchema` instead. */
    CouponFrequency$.inboundSchema = exports.CouponFrequency$inboundSchema;
    /** @deprecated use `CouponFrequency$outboundSchema` instead. */
    CouponFrequency$.outboundSchema = exports.CouponFrequency$outboundSchema;
})(CouponFrequency$ || (exports.CouponFrequency$ = CouponFrequency$ = {}));
/** @internal */
exports.CouponRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CouponRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CouponRate$;
(function (CouponRate$) {
    /** @deprecated use `CouponRate$inboundSchema` instead. */
    CouponRate$.inboundSchema = exports.CouponRate$inboundSchema;
    /** @deprecated use `CouponRate$outboundSchema` instead. */
    CouponRate$.outboundSchema = exports.CouponRate$outboundSchema;
})(CouponRate$ || (exports.CouponRate$ = CouponRate$ = {}));
/** @internal */
exports.CouponType$inboundSchema = z
    .union([
    z.nativeEnum(CouponType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CouponType$outboundSchema = z.union([
    z.nativeEnum(CouponType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CouponType$;
(function (CouponType$) {
    /** @deprecated use `CouponType$inboundSchema` instead. */
    CouponType$.inboundSchema = exports.CouponType$inboundSchema;
    /** @deprecated use `CouponType$outboundSchema` instead. */
    CouponType$.outboundSchema = exports.CouponType$outboundSchema;
})(CouponType$ || (exports.CouponType$ = CouponType$ = {}));
/** @internal */
exports.Duration$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.Duration$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Duration$;
(function (Duration$) {
    /** @deprecated use `Duration$inboundSchema` instead. */
    Duration$.inboundSchema = exports.Duration$inboundSchema;
    /** @deprecated use `Duration$outboundSchema` instead. */
    Duration$.outboundSchema = exports.Duration$outboundSchema;
})(Duration$ || (exports.Duration$ = Duration$ = {}));
/** @internal */
exports.FirstCouponDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.FirstCouponDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FirstCouponDate$;
(function (FirstCouponDate$) {
    /** @deprecated use `FirstCouponDate$inboundSchema` instead. */
    FirstCouponDate$.inboundSchema = exports.FirstCouponDate$inboundSchema;
    /** @deprecated use `FirstCouponDate$outboundSchema` instead. */
    FirstCouponDate$.outboundSchema = exports.FirstCouponDate$outboundSchema;
})(FirstCouponDate$ || (exports.FirstCouponDate$ = FirstCouponDate$ = {}));
/** @internal */
exports.FixedIncomeStatus$inboundSchema = z
    .union([
    z.nativeEnum(FixedIncomeStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.FixedIncomeStatus$outboundSchema = z.union([
    z.nativeEnum(FixedIncomeStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FixedIncomeStatus$;
(function (FixedIncomeStatus$) {
    /** @deprecated use `FixedIncomeStatus$inboundSchema` instead. */
    FixedIncomeStatus$.inboundSchema = exports.FixedIncomeStatus$inboundSchema;
    /** @deprecated use `FixedIncomeStatus$outboundSchema` instead. */
    FixedIncomeStatus$.outboundSchema = exports.FixedIncomeStatus$outboundSchema;
})(FixedIncomeStatus$ || (exports.FixedIncomeStatus$ = FixedIncomeStatus$ = {}));
/** @internal */
exports.FixedIncomeSubtype$inboundSchema = z
    .union([
    z.nativeEnum(FixedIncomeSubtype),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.FixedIncomeSubtype$outboundSchema = z.union([
    z.nativeEnum(FixedIncomeSubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FixedIncomeSubtype$;
(function (FixedIncomeSubtype$) {
    /** @deprecated use `FixedIncomeSubtype$inboundSchema` instead. */
    FixedIncomeSubtype$.inboundSchema = exports.FixedIncomeSubtype$inboundSchema;
    /** @deprecated use `FixedIncomeSubtype$outboundSchema` instead. */
    FixedIncomeSubtype$.outboundSchema = exports.FixedIncomeSubtype$outboundSchema;
})(FixedIncomeSubtype$ || (exports.FixedIncomeSubtype$ = FixedIncomeSubtype$ = {}));
/** @internal */
exports.FixedIncomeType$inboundSchema = z
    .union([
    z.nativeEnum(FixedIncomeType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.FixedIncomeType$outboundSchema = z.union([
    z.nativeEnum(FixedIncomeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FixedIncomeType$;
(function (FixedIncomeType$) {
    /** @deprecated use `FixedIncomeType$inboundSchema` instead. */
    FixedIncomeType$.inboundSchema = exports.FixedIncomeType$inboundSchema;
    /** @deprecated use `FixedIncomeType$outboundSchema` instead. */
    FixedIncomeType$.outboundSchema = exports.FixedIncomeType$outboundSchema;
})(FixedIncomeType$ || (exports.FixedIncomeType$ = FixedIncomeType$ = {}));
/** @internal */
exports.AssetIssueDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.AssetIssueDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetIssueDate$;
(function (AssetIssueDate$) {
    /** @deprecated use `AssetIssueDate$inboundSchema` instead. */
    AssetIssueDate$.inboundSchema = exports.AssetIssueDate$inboundSchema;
    /** @deprecated use `AssetIssueDate$outboundSchema` instead. */
    AssetIssueDate$.outboundSchema = exports.AssetIssueDate$outboundSchema;
})(AssetIssueDate$ || (exports.AssetIssueDate$ = AssetIssueDate$ = {}));
/** @internal */
exports.IssueSize$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.IssueSize$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IssueSize$;
(function (IssueSize$) {
    /** @deprecated use `IssueSize$inboundSchema` instead. */
    IssueSize$.inboundSchema = exports.IssueSize$inboundSchema;
    /** @deprecated use `IssueSize$outboundSchema` instead. */
    IssueSize$.outboundSchema = exports.IssueSize$outboundSchema;
})(IssueSize$ || (exports.IssueSize$ = IssueSize$ = {}));
/** @internal */
exports.LastCouponDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.LastCouponDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LastCouponDate$;
(function (LastCouponDate$) {
    /** @deprecated use `LastCouponDate$inboundSchema` instead. */
    LastCouponDate$.inboundSchema = exports.LastCouponDate$inboundSchema;
    /** @deprecated use `LastCouponDate$outboundSchema` instead. */
    LastCouponDate$.outboundSchema = exports.LastCouponDate$outboundSchema;
})(LastCouponDate$ || (exports.LastCouponDate$ = LastCouponDate$ = {}));
/** @internal */
exports.MaturityDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.MaturityDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MaturityDate$;
(function (MaturityDate$) {
    /** @deprecated use `MaturityDate$inboundSchema` instead. */
    MaturityDate$.inboundSchema = exports.MaturityDate$inboundSchema;
    /** @deprecated use `MaturityDate$outboundSchema` instead. */
    MaturityDate$.outboundSchema = exports.MaturityDate$outboundSchema;
})(MaturityDate$ || (exports.MaturityDate$ = MaturityDate$ = {}));
/** @internal */
exports.NextCallDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.NextCallDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NextCallDate$;
(function (NextCallDate$) {
    /** @deprecated use `NextCallDate$inboundSchema` instead. */
    NextCallDate$.inboundSchema = exports.NextCallDate$inboundSchema;
    /** @deprecated use `NextCallDate$outboundSchema` instead. */
    NextCallDate$.outboundSchema = exports.NextCallDate$outboundSchema;
})(NextCallDate$ || (exports.NextCallDate$ = NextCallDate$ = {}));
/** @internal */
exports.NextCouponDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.NextCouponDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NextCouponDate$;
(function (NextCouponDate$) {
    /** @deprecated use `NextCouponDate$inboundSchema` instead. */
    NextCouponDate$.inboundSchema = exports.NextCouponDate$inboundSchema;
    /** @deprecated use `NextCouponDate$outboundSchema` instead. */
    NextCouponDate$.outboundSchema = exports.NextCouponDate$outboundSchema;
})(NextCouponDate$ || (exports.NextCouponDate$ = NextCouponDate$ = {}));
/** @internal */
exports.ParValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ParValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ParValue$;
(function (ParValue$) {
    /** @deprecated use `ParValue$inboundSchema` instead. */
    ParValue$.inboundSchema = exports.ParValue$inboundSchema;
    /** @deprecated use `ParValue$outboundSchema` instead. */
    ParValue$.outboundSchema = exports.ParValue$outboundSchema;
})(ParValue$ || (exports.ParValue$ = ParValue$ = {}));
/** @internal */
exports.PriceAtIssuance$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.PriceAtIssuance$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PriceAtIssuance$;
(function (PriceAtIssuance$) {
    /** @deprecated use `PriceAtIssuance$inboundSchema` instead. */
    PriceAtIssuance$.inboundSchema = exports.PriceAtIssuance$inboundSchema;
    /** @deprecated use `PriceAtIssuance$outboundSchema` instead. */
    PriceAtIssuance$.outboundSchema = exports.PriceAtIssuance$outboundSchema;
})(PriceAtIssuance$ || (exports.PriceAtIssuance$ = PriceAtIssuance$ = {}));
/** @internal */
exports.SpRating$inboundSchema = z
    .union([
    z.nativeEnum(SpRating),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SpRating$outboundSchema = z.union([
    z.nativeEnum(SpRating),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SpRating$;
(function (SpRating$) {
    /** @deprecated use `SpRating$inboundSchema` instead. */
    SpRating$.inboundSchema = exports.SpRating$inboundSchema;
    /** @deprecated use `SpRating$outboundSchema` instead. */
    SpRating$.outboundSchema = exports.SpRating$outboundSchema;
})(SpRating$ || (exports.SpRating$ = SpRating$ = {}));
/** @internal */
exports.SpRatingDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.SpRatingDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SpRatingDate$;
(function (SpRatingDate$) {
    /** @deprecated use `SpRatingDate$inboundSchema` instead. */
    SpRatingDate$.inboundSchema = exports.SpRatingDate$inboundSchema;
    /** @deprecated use `SpRatingDate$outboundSchema` instead. */
    SpRatingDate$.outboundSchema = exports.SpRatingDate$outboundSchema;
})(SpRatingDate$ || (exports.SpRatingDate$ = SpRatingDate$ = {}));
/** @internal */
exports.FixedIncome$inboundSchema = z.object({
    call_type: exports.CallType$inboundSchema.optional(),
    callable: z.boolean().optional(),
    convertible: z.boolean().optional(),
    coupon_frequency: exports.CouponFrequency$inboundSchema.optional(),
    coupon_rate: z.nullable(z.lazy(() => exports.CouponRate$inboundSchema)).optional(),
    coupon_type: exports.CouponType$inboundSchema.optional(),
    duration: z.nullable(z.lazy(() => exports.Duration$inboundSchema)).optional(),
    first_coupon_date: z.nullable(z.lazy(() => exports.FirstCouponDate$inboundSchema))
        .optional(),
    fixed_income_status: exports.FixedIncomeStatus$inboundSchema.optional(),
    fixed_income_subtype: exports.FixedIncomeSubtype$inboundSchema.optional(),
    fixed_income_type: exports.FixedIncomeType$inboundSchema.optional(),
    insured: z.boolean().optional(),
    issue_date: z.nullable(z.lazy(() => exports.AssetIssueDate$inboundSchema)).optional(),
    issue_size: z.nullable(z.lazy(() => exports.IssueSize$inboundSchema)).optional(),
    issuer: z.string().optional(),
    last_coupon_date: z.nullable(z.lazy(() => exports.LastCouponDate$inboundSchema))
        .optional(),
    maturity_date: z.nullable(z.lazy(() => exports.MaturityDate$inboundSchema))
        .optional(),
    next_call_date: z.nullable(z.lazy(() => exports.NextCallDate$inboundSchema))
        .optional(),
    next_coupon_date: z.nullable(z.lazy(() => exports.NextCouponDate$inboundSchema))
        .optional(),
    par_value: z.nullable(z.lazy(() => exports.ParValue$inboundSchema)).optional(),
    perpetual: z.boolean().optional(),
    price_at_issuance: z.nullable(z.lazy(() => exports.PriceAtIssuance$inboundSchema))
        .optional(),
    sp_rating: exports.SpRating$inboundSchema.optional(),
    sp_rating_date: z.nullable(z.lazy(() => exports.SpRatingDate$inboundSchema))
        .optional(),
    underlying_symbol: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "call_type": "callType",
        "coupon_frequency": "couponFrequency",
        "coupon_rate": "couponRate",
        "coupon_type": "couponType",
        "first_coupon_date": "firstCouponDate",
        "fixed_income_status": "fixedIncomeStatus",
        "fixed_income_subtype": "fixedIncomeSubtype",
        "fixed_income_type": "fixedIncomeType",
        "issue_date": "issueDate",
        "issue_size": "issueSize",
        "last_coupon_date": "lastCouponDate",
        "maturity_date": "maturityDate",
        "next_call_date": "nextCallDate",
        "next_coupon_date": "nextCouponDate",
        "par_value": "parValue",
        "price_at_issuance": "priceAtIssuance",
        "sp_rating": "spRating",
        "sp_rating_date": "spRatingDate",
        "underlying_symbol": "underlyingSymbol",
    });
});
/** @internal */
exports.FixedIncome$outboundSchema = z.object({
    callType: exports.CallType$outboundSchema.optional(),
    callable: z.boolean().optional(),
    convertible: z.boolean().optional(),
    couponFrequency: exports.CouponFrequency$outboundSchema.optional(),
    couponRate: z.nullable(z.lazy(() => exports.CouponRate$outboundSchema)).optional(),
    couponType: exports.CouponType$outboundSchema.optional(),
    duration: z.nullable(z.lazy(() => exports.Duration$outboundSchema)).optional(),
    firstCouponDate: z.nullable(z.lazy(() => exports.FirstCouponDate$outboundSchema))
        .optional(),
    fixedIncomeStatus: exports.FixedIncomeStatus$outboundSchema.optional(),
    fixedIncomeSubtype: exports.FixedIncomeSubtype$outboundSchema.optional(),
    fixedIncomeType: exports.FixedIncomeType$outboundSchema.optional(),
    insured: z.boolean().optional(),
    issueDate: z.nullable(z.lazy(() => exports.AssetIssueDate$outboundSchema)).optional(),
    issueSize: z.nullable(z.lazy(() => exports.IssueSize$outboundSchema)).optional(),
    issuer: z.string().optional(),
    lastCouponDate: z.nullable(z.lazy(() => exports.LastCouponDate$outboundSchema))
        .optional(),
    maturityDate: z.nullable(z.lazy(() => exports.MaturityDate$outboundSchema))
        .optional(),
    nextCallDate: z.nullable(z.lazy(() => exports.NextCallDate$outboundSchema))
        .optional(),
    nextCouponDate: z.nullable(z.lazy(() => exports.NextCouponDate$outboundSchema))
        .optional(),
    parValue: z.nullable(z.lazy(() => exports.ParValue$outboundSchema)).optional(),
    perpetual: z.boolean().optional(),
    priceAtIssuance: z.nullable(z.lazy(() => exports.PriceAtIssuance$outboundSchema))
        .optional(),
    spRating: exports.SpRating$outboundSchema.optional(),
    spRatingDate: z.nullable(z.lazy(() => exports.SpRatingDate$outboundSchema))
        .optional(),
    underlyingSymbol: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        callType: "call_type",
        couponFrequency: "coupon_frequency",
        couponRate: "coupon_rate",
        couponType: "coupon_type",
        firstCouponDate: "first_coupon_date",
        fixedIncomeStatus: "fixed_income_status",
        fixedIncomeSubtype: "fixed_income_subtype",
        fixedIncomeType: "fixed_income_type",
        issueDate: "issue_date",
        issueSize: "issue_size",
        lastCouponDate: "last_coupon_date",
        maturityDate: "maturity_date",
        nextCallDate: "next_call_date",
        nextCouponDate: "next_coupon_date",
        parValue: "par_value",
        priceAtIssuance: "price_at_issuance",
        spRating: "sp_rating",
        spRatingDate: "sp_rating_date",
        underlyingSymbol: "underlying_symbol",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FixedIncome$;
(function (FixedIncome$) {
    /** @deprecated use `FixedIncome$inboundSchema` instead. */
    FixedIncome$.inboundSchema = exports.FixedIncome$inboundSchema;
    /** @deprecated use `FixedIncome$outboundSchema` instead. */
    FixedIncome$.outboundSchema = exports.FixedIncome$outboundSchema;
})(FixedIncome$ || (exports.FixedIncome$ = FixedIncome$ = {}));
/** @internal */
exports.LargeOrderNotificationAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.LargeOrderNotificationAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LargeOrderNotificationAmount$;
(function (LargeOrderNotificationAmount$) {
    /** @deprecated use `LargeOrderNotificationAmount$inboundSchema` instead. */
    LargeOrderNotificationAmount$.inboundSchema = exports.LargeOrderNotificationAmount$inboundSchema;
    /** @deprecated use `LargeOrderNotificationAmount$outboundSchema` instead. */
    LargeOrderNotificationAmount$.outboundSchema = exports.LargeOrderNotificationAmount$outboundSchema;
})(LargeOrderNotificationAmount$ || (exports.LargeOrderNotificationAmount$ = LargeOrderNotificationAmount$ = {}));
/** @internal */
exports.MutualFundType$inboundSchema = z
    .union([
    z.nativeEnum(MutualFundType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.MutualFundType$outboundSchema = z.union([
    z.nativeEnum(MutualFundType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MutualFundType$;
(function (MutualFundType$) {
    /** @deprecated use `MutualFundType$inboundSchema` instead. */
    MutualFundType$.inboundSchema = exports.MutualFundType$inboundSchema;
    /** @deprecated use `MutualFundType$outboundSchema` instead. */
    MutualFundType$.outboundSchema = exports.MutualFundType$outboundSchema;
})(MutualFundType$ || (exports.MutualFundType$ = MutualFundType$ = {}));
/** @internal */
exports.MutualFund$inboundSchema = z.object({
    fund_family: z.string().optional(),
    large_order_notification_amount: z.nullable(z.lazy(() => exports.LargeOrderNotificationAmount$inboundSchema)).optional(),
    mutual_fund_type: exports.MutualFundType$inboundSchema.optional(),
    share_class: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "fund_family": "fundFamily",
        "large_order_notification_amount": "largeOrderNotificationAmount",
        "mutual_fund_type": "mutualFundType",
        "share_class": "shareClass",
    });
});
/** @internal */
exports.MutualFund$outboundSchema = z.object({
    fundFamily: z.string().optional(),
    largeOrderNotificationAmount: z.nullable(z.lazy(() => exports.LargeOrderNotificationAmount$outboundSchema)).optional(),
    mutualFundType: exports.MutualFundType$outboundSchema.optional(),
    shareClass: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        fundFamily: "fund_family",
        largeOrderNotificationAmount: "large_order_notification_amount",
        mutualFundType: "mutual_fund_type",
        shareClass: "share_class",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MutualFund$;
(function (MutualFund$) {
    /** @deprecated use `MutualFund$inboundSchema` instead. */
    MutualFund$.inboundSchema = exports.MutualFund$inboundSchema;
    /** @deprecated use `MutualFund$outboundSchema` instead. */
    MutualFund$.outboundSchema = exports.MutualFund$outboundSchema;
})(MutualFund$ || (exports.MutualFund$ = MutualFund$ = {}));
/** @internal */
exports.CallPut$inboundSchema = z
    .union([
    z.nativeEnum(CallPut),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CallPut$outboundSchema = z.union([
    z.nativeEnum(CallPut),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CallPut$;
(function (CallPut$) {
    /** @deprecated use `CallPut$inboundSchema` instead. */
    CallPut$.inboundSchema = exports.CallPut$inboundSchema;
    /** @deprecated use `CallPut$outboundSchema` instead. */
    CallPut$.outboundSchema = exports.CallPut$outboundSchema;
})(CallPut$ || (exports.CallPut$ = CallPut$ = {}));
/** @internal */
exports.ExerciseStyle$inboundSchema = z
    .union([
    z.nativeEnum(ExerciseStyle),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ExerciseStyle$outboundSchema = z.union([
    z.nativeEnum(ExerciseStyle),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ExerciseStyle$;
(function (ExerciseStyle$) {
    /** @deprecated use `ExerciseStyle$inboundSchema` instead. */
    ExerciseStyle$.inboundSchema = exports.ExerciseStyle$inboundSchema;
    /** @deprecated use `ExerciseStyle$outboundSchema` instead. */
    ExerciseStyle$.outboundSchema = exports.ExerciseStyle$outboundSchema;
})(ExerciseStyle$ || (exports.ExerciseStyle$ = ExerciseStyle$ = {}));
/** @internal */
exports.AssetExpirationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.AssetExpirationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetExpirationDate$;
(function (AssetExpirationDate$) {
    /** @deprecated use `AssetExpirationDate$inboundSchema` instead. */
    AssetExpirationDate$.inboundSchema = exports.AssetExpirationDate$inboundSchema;
    /** @deprecated use `AssetExpirationDate$outboundSchema` instead. */
    AssetExpirationDate$.outboundSchema = exports.AssetExpirationDate$outboundSchema;
})(AssetExpirationDate$ || (exports.AssetExpirationDate$ = AssetExpirationDate$ = {}));
/** @internal */
exports.Classification$inboundSchema = z
    .union([
    z.nativeEnum(Classification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.Classification$outboundSchema = z.union([
    z.nativeEnum(Classification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Classification$;
(function (Classification$) {
    /** @deprecated use `Classification$inboundSchema` instead. */
    Classification$.inboundSchema = exports.Classification$inboundSchema;
    /** @deprecated use `Classification$outboundSchema` instead. */
    Classification$.outboundSchema = exports.Classification$outboundSchema;
})(Classification$ || (exports.Classification$ = Classification$ = {}));
/** @internal */
exports.PennyPilotIndicator$inboundSchema = z
    .union([
    z.nativeEnum(PennyPilotIndicator),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PennyPilotIndicator$outboundSchema = z.union([
    z.nativeEnum(PennyPilotIndicator),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PennyPilotIndicator$;
(function (PennyPilotIndicator$) {
    /** @deprecated use `PennyPilotIndicator$inboundSchema` instead. */
    PennyPilotIndicator$.inboundSchema = exports.PennyPilotIndicator$inboundSchema;
    /** @deprecated use `PennyPilotIndicator$outboundSchema` instead. */
    PennyPilotIndicator$.outboundSchema = exports.PennyPilotIndicator$outboundSchema;
})(PennyPilotIndicator$ || (exports.PennyPilotIndicator$ = PennyPilotIndicator$ = {}));
/** @internal */
exports.PositionLimit$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.PositionLimit$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PositionLimit$;
(function (PositionLimit$) {
    /** @deprecated use `PositionLimit$inboundSchema` instead. */
    PositionLimit$.inboundSchema = exports.PositionLimit$inboundSchema;
    /** @deprecated use `PositionLimit$outboundSchema` instead. */
    PositionLimit$.outboundSchema = exports.PositionLimit$outboundSchema;
})(PositionLimit$ || (exports.PositionLimit$ = PositionLimit$ = {}));
/** @internal */
exports.SettlementStyle$inboundSchema = z
    .union([
    z.nativeEnum(SettlementStyle),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SettlementStyle$outboundSchema = z.union([
    z.nativeEnum(SettlementStyle),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SettlementStyle$;
(function (SettlementStyle$) {
    /** @deprecated use `SettlementStyle$inboundSchema` instead. */
    SettlementStyle$.inboundSchema = exports.SettlementStyle$inboundSchema;
    /** @deprecated use `SettlementStyle$outboundSchema` instead. */
    SettlementStyle$.outboundSchema = exports.SettlementStyle$outboundSchema;
})(SettlementStyle$ || (exports.SettlementStyle$ = SettlementStyle$ = {}));
/** @internal */
exports.StrikeMultiplier$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.StrikeMultiplier$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StrikeMultiplier$;
(function (StrikeMultiplier$) {
    /** @deprecated use `StrikeMultiplier$inboundSchema` instead. */
    StrikeMultiplier$.inboundSchema = exports.StrikeMultiplier$inboundSchema;
    /** @deprecated use `StrikeMultiplier$outboundSchema` instead. */
    StrikeMultiplier$.outboundSchema = exports.StrikeMultiplier$outboundSchema;
})(StrikeMultiplier$ || (exports.StrikeMultiplier$ = StrikeMultiplier$ = {}));
/** @internal */
exports.StrikePriceMultiplier$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.StrikePriceMultiplier$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StrikePriceMultiplier$;
(function (StrikePriceMultiplier$) {
    /** @deprecated use `StrikePriceMultiplier$inboundSchema` instead. */
    StrikePriceMultiplier$.inboundSchema = exports.StrikePriceMultiplier$inboundSchema;
    /** @deprecated use `StrikePriceMultiplier$outboundSchema` instead. */
    StrikePriceMultiplier$.outboundSchema = exports.StrikePriceMultiplier$outboundSchema;
})(StrikePriceMultiplier$ || (exports.StrikePriceMultiplier$ = StrikePriceMultiplier$ = {}));
/** @internal */
exports.TradeValueMultiplier$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TradeValueMultiplier$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeValueMultiplier$;
(function (TradeValueMultiplier$) {
    /** @deprecated use `TradeValueMultiplier$inboundSchema` instead. */
    TradeValueMultiplier$.inboundSchema = exports.TradeValueMultiplier$inboundSchema;
    /** @deprecated use `TradeValueMultiplier$outboundSchema` instead. */
    TradeValueMultiplier$.outboundSchema = exports.TradeValueMultiplier$outboundSchema;
})(TradeValueMultiplier$ || (exports.TradeValueMultiplier$ = TradeValueMultiplier$ = {}));
/** @internal */
exports.OptionRoot$inboundSchema = z.object({
    classification: exports.Classification$inboundSchema.optional(),
    deliverables: z.array(optiondeliverable_js_1.OptionDeliverable$inboundSchema).optional(),
    penny_pilot_indicator: exports.PennyPilotIndicator$inboundSchema.optional(),
    position_limit: z.nullable(z.lazy(() => exports.PositionLimit$inboundSchema))
        .optional(),
    root_symbol: z.string().optional(),
    settlement_style: exports.SettlementStyle$inboundSchema.optional(),
    strike_multiplier: z.nullable(z.lazy(() => exports.StrikeMultiplier$inboundSchema))
        .optional(),
    strike_price_multiplier: z.nullable(z.lazy(() => exports.StrikePriceMultiplier$inboundSchema)).optional(),
    trade_value_multiplier: z.nullable(z.lazy(() => exports.TradeValueMultiplier$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "penny_pilot_indicator": "pennyPilotIndicator",
        "position_limit": "positionLimit",
        "root_symbol": "rootSymbol",
        "settlement_style": "settlementStyle",
        "strike_multiplier": "strikeMultiplier",
        "strike_price_multiplier": "strikePriceMultiplier",
        "trade_value_multiplier": "tradeValueMultiplier",
    });
});
/** @internal */
exports.OptionRoot$outboundSchema = z.object({
    classification: exports.Classification$outboundSchema.optional(),
    deliverables: z.array(optiondeliverable_js_1.OptionDeliverable$outboundSchema).optional(),
    pennyPilotIndicator: exports.PennyPilotIndicator$outboundSchema.optional(),
    positionLimit: z.nullable(z.lazy(() => exports.PositionLimit$outboundSchema))
        .optional(),
    rootSymbol: z.string().optional(),
    settlementStyle: exports.SettlementStyle$outboundSchema.optional(),
    strikeMultiplier: z.nullable(z.lazy(() => exports.StrikeMultiplier$outboundSchema))
        .optional(),
    strikePriceMultiplier: z.nullable(z.lazy(() => exports.StrikePriceMultiplier$outboundSchema)).optional(),
    tradeValueMultiplier: z.nullable(z.lazy(() => exports.TradeValueMultiplier$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        pennyPilotIndicator: "penny_pilot_indicator",
        positionLimit: "position_limit",
        rootSymbol: "root_symbol",
        settlementStyle: "settlement_style",
        strikeMultiplier: "strike_multiplier",
        strikePriceMultiplier: "strike_price_multiplier",
        tradeValueMultiplier: "trade_value_multiplier",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OptionRoot$;
(function (OptionRoot$) {
    /** @deprecated use `OptionRoot$inboundSchema` instead. */
    OptionRoot$.inboundSchema = exports.OptionRoot$inboundSchema;
    /** @deprecated use `OptionRoot$outboundSchema` instead. */
    OptionRoot$.outboundSchema = exports.OptionRoot$outboundSchema;
})(OptionRoot$ || (exports.OptionRoot$ = OptionRoot$ = {}));
/** @internal */
exports.OptionType$inboundSchema = z
    .union([
    z.nativeEnum(OptionType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OptionType$outboundSchema = z.union([
    z.nativeEnum(OptionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OptionType$;
(function (OptionType$) {
    /** @deprecated use `OptionType$inboundSchema` instead. */
    OptionType$.inboundSchema = exports.OptionType$inboundSchema;
    /** @deprecated use `OptionType$outboundSchema` instead. */
    OptionType$.outboundSchema = exports.OptionType$outboundSchema;
})(OptionType$ || (exports.OptionType$ = OptionType$ = {}));
/** @internal */
exports.SeriesDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.SeriesDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SeriesDate$;
(function (SeriesDate$) {
    /** @deprecated use `SeriesDate$inboundSchema` instead. */
    SeriesDate$.inboundSchema = exports.SeriesDate$inboundSchema;
    /** @deprecated use `SeriesDate$outboundSchema` instead. */
    SeriesDate$.outboundSchema = exports.SeriesDate$outboundSchema;
})(SeriesDate$ || (exports.SeriesDate$ = SeriesDate$ = {}));
/** @internal */
exports.SettlementMethod$inboundSchema = z
    .union([
    z.nativeEnum(SettlementMethod),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SettlementMethod$outboundSchema = z.union([
    z.nativeEnum(SettlementMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SettlementMethod$;
(function (SettlementMethod$) {
    /** @deprecated use `SettlementMethod$inboundSchema` instead. */
    SettlementMethod$.inboundSchema = exports.SettlementMethod$inboundSchema;
    /** @deprecated use `SettlementMethod$outboundSchema` instead. */
    SettlementMethod$.outboundSchema = exports.SettlementMethod$outboundSchema;
})(SettlementMethod$ || (exports.SettlementMethod$ = SettlementMethod$ = {}));
/** @internal */
exports.SettlementType$inboundSchema = z
    .union([
    z.nativeEnum(SettlementType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SettlementType$outboundSchema = z.union([
    z.nativeEnum(SettlementType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SettlementType$;
(function (SettlementType$) {
    /** @deprecated use `SettlementType$inboundSchema` instead. */
    SettlementType$.inboundSchema = exports.SettlementType$inboundSchema;
    /** @deprecated use `SettlementType$outboundSchema` instead. */
    SettlementType$.outboundSchema = exports.SettlementType$outboundSchema;
})(SettlementType$ || (exports.SettlementType$ = SettlementType$ = {}));
/** @internal */
exports.StrikePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.StrikePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StrikePrice$;
(function (StrikePrice$) {
    /** @deprecated use `StrikePrice$inboundSchema` instead. */
    StrikePrice$.inboundSchema = exports.StrikePrice$inboundSchema;
    /** @deprecated use `StrikePrice$outboundSchema` instead. */
    StrikePrice$.outboundSchema = exports.StrikePrice$outboundSchema;
})(StrikePrice$ || (exports.StrikePrice$ = StrikePrice$ = {}));
/** @internal */
exports.Option$inboundSchema = z
    .object({
    call_put: exports.CallPut$inboundSchema.optional(),
    exercise_style: exports.ExerciseStyle$inboundSchema.optional(),
    expiration_date: z.nullable(z.lazy(() => exports.AssetExpirationDate$inboundSchema))
        .optional(),
    option_root: z.nullable(z.lazy(() => exports.OptionRoot$inboundSchema)).optional(),
    option_type: exports.OptionType$inboundSchema.optional(),
    root_symbol: z.string().optional(),
    series_date: z.nullable(z.lazy(() => exports.SeriesDate$inboundSchema)).optional(),
    settlement_method: exports.SettlementMethod$inboundSchema.optional(),
    settlement_type: exports.SettlementType$inboundSchema.optional(),
    strike_price: z.nullable(z.lazy(() => exports.StrikePrice$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "call_put": "callPut",
        "exercise_style": "exerciseStyle",
        "expiration_date": "expirationDate",
        "option_root": "optionRoot",
        "option_type": "optionType",
        "root_symbol": "rootSymbol",
        "series_date": "seriesDate",
        "settlement_method": "settlementMethod",
        "settlement_type": "settlementType",
        "strike_price": "strikePrice",
    });
});
/** @internal */
exports.Option$outboundSchema = z.object({
    callPut: exports.CallPut$outboundSchema.optional(),
    exerciseStyle: exports.ExerciseStyle$outboundSchema.optional(),
    expirationDate: z.nullable(z.lazy(() => exports.AssetExpirationDate$outboundSchema))
        .optional(),
    optionRoot: z.nullable(z.lazy(() => exports.OptionRoot$outboundSchema)).optional(),
    optionType: exports.OptionType$outboundSchema.optional(),
    rootSymbol: z.string().optional(),
    seriesDate: z.nullable(z.lazy(() => exports.SeriesDate$outboundSchema)).optional(),
    settlementMethod: exports.SettlementMethod$outboundSchema.optional(),
    settlementType: exports.SettlementType$outboundSchema.optional(),
    strikePrice: z.nullable(z.lazy(() => exports.StrikePrice$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        callPut: "call_put",
        exerciseStyle: "exercise_style",
        expirationDate: "expiration_date",
        optionRoot: "option_root",
        optionType: "option_type",
        rootSymbol: "root_symbol",
        seriesDate: "series_date",
        settlementMethod: "settlement_method",
        settlementType: "settlement_type",
        strikePrice: "strike_price",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Option$;
(function (Option$) {
    /** @deprecated use `Option$inboundSchema` instead. */
    Option$.inboundSchema = exports.Option$inboundSchema;
    /** @deprecated use `Option$outboundSchema` instead. */
    Option$.outboundSchema = exports.Option$outboundSchema;
})(Option$ || (exports.Option$ = Option$ = {}));
/** @internal */
exports.AssetType1$inboundSchema = z
    .union([
    z.nativeEnum(AssetType1),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AssetType1$outboundSchema = z.union([
    z.nativeEnum(AssetType1),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetType1$;
(function (AssetType1$) {
    /** @deprecated use `AssetType1$inboundSchema` instead. */
    AssetType1$.inboundSchema = exports.AssetType1$inboundSchema;
    /** @deprecated use `AssetType1$outboundSchema` instead. */
    AssetType1$.outboundSchema = exports.AssetType1$outboundSchema;
})(AssetType1$ || (exports.AssetType1$ = AssetType1$ = {}));
/** @internal */
exports.Asset$inboundSchema = z
    .object({
    asset_id: z.string().optional(),
    currency: z.nullable(z.lazy(() => exports.Currency$inboundSchema)).optional(),
    cusip: z.string().optional(),
    description: z.string().optional(),
    equity: z.nullable(z.lazy(() => exports.Equity$inboundSchema)).optional(),
    fixed_income: z.nullable(z.lazy(() => exports.FixedIncome$inboundSchema))
        .optional(),
    isin: z.string().optional(),
    issuing_region_code: z.string().optional(),
    mutual_fund: z.nullable(z.lazy(() => exports.MutualFund$inboundSchema)).optional(),
    name: z.string().optional(),
    option: z.nullable(z.lazy(() => exports.Option$inboundSchema)).optional(),
    originating_region_code: z.string().optional(),
    symbol: z.string().optional(),
    type: exports.AssetType1$inboundSchema.optional(),
    usable: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "asset_id": "assetId",
        "fixed_income": "fixedIncome",
        "issuing_region_code": "issuingRegionCode",
        "mutual_fund": "mutualFund",
        "originating_region_code": "originatingRegionCode",
    });
});
/** @internal */
exports.Asset$outboundSchema = z.object({
    assetId: z.string().optional(),
    currency: z.nullable(z.lazy(() => exports.Currency$outboundSchema)).optional(),
    cusip: z.string().optional(),
    description: z.string().optional(),
    equity: z.nullable(z.lazy(() => exports.Equity$outboundSchema)).optional(),
    fixedIncome: z.nullable(z.lazy(() => exports.FixedIncome$outboundSchema)).optional(),
    isin: z.string().optional(),
    issuingRegionCode: z.string().optional(),
    mutualFund: z.nullable(z.lazy(() => exports.MutualFund$outboundSchema)).optional(),
    name: z.string().optional(),
    option: z.nullable(z.lazy(() => exports.Option$outboundSchema)).optional(),
    originatingRegionCode: z.string().optional(),
    symbol: z.string().optional(),
    type: exports.AssetType1$outboundSchema.optional(),
    usable: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        assetId: "asset_id",
        fixedIncome: "fixed_income",
        issuingRegionCode: "issuing_region_code",
        mutualFund: "mutual_fund",
        originatingRegionCode: "originating_region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Asset$;
(function (Asset$) {
    /** @deprecated use `Asset$inboundSchema` instead. */
    Asset$.inboundSchema = exports.Asset$inboundSchema;
    /** @deprecated use `Asset$outboundSchema` instead. */
    Asset$.outboundSchema = exports.Asset$outboundSchema;
})(Asset$ || (exports.Asset$ = Asset$ = {}));
//# sourceMappingURL=asset.js.map