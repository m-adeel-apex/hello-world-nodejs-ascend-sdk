import * as z from "zod";
import { OpenEnum } from "../../types/enums.js";
import { Lot, Lot$Outbound } from "./lot.js";
import { YieldRecord, YieldRecord$Outbound } from "./yieldrecord.js";
/**
 * Used to calculate broadridge blotter code
 */
export declare enum RebookTradeResponseBrokerCapacity {
    CapacityUnspecified = "CAPACITY_UNSPECIFIED",
    Agency = "AGENCY",
    Principal = "PRINCIPAL",
    Mixed = "MIXED"
}
/**
 * Used to calculate broadridge blotter code
 */
export type RebookTradeResponseBrokerCapacityOpen = OpenEnum<typeof RebookTradeResponseBrokerCapacity>;
/**
 * The price for the instrument that is prevailing in the market.
 */
export type RebookTradeResponsePrevailingMarketPrice = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Total monetary value of the price_adjustment
 */
export type RebookTradeResponsePriceAdjustmentAmount = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type RebookTradeResponsePriceAdjustmentPercent = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export declare enum RebookTradeResponsePriceAdjustmentType {
    PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
    Markup = "MARKUP",
    Markdown = "MARKDOWN",
    SalesLoad = "SALES_LOAD"
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type RebookTradeResponsePriceAdjustmentTypeOpen = OpenEnum<typeof RebookTradeResponsePriceAdjustmentType>;
/**
 * Information about any price adjustments applied to the security
 */
export type RebookTradeResponsePriceAdjustmentRecord = {
    /**
     * Total monetary value of the price_adjustment
     */
    priceAdjustmentAmount?: RebookTradeResponsePriceAdjustmentAmount | null | undefined;
    /**
     * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
     */
    priceAdjustmentPercent?: RebookTradeResponsePriceAdjustmentPercent | null | undefined;
    /**
     * The type of price adjustment being applied by the broker to the net price of the security
     */
    priceAdjustmentType?: RebookTradeResponsePriceAdjustmentTypeOpen | undefined;
};
/**
 * The new trade that is booked.
 */
export type NewTrade = {
    /**
     * Free form text field containing additional information for a trade
     */
    additionalInstructions?: Array<string> | undefined;
    /**
     * Max Length 100 characters. Alternate order id from the street used for FRAC trades
     */
    alternateOrderId?: string | undefined;
    /**
     * uuid assigned by the Booking API if a trade belongs to an allocation
     */
    bookingApiTradeAllocationId?: string | undefined;
    /**
     * uuid assigned by the Booking API to all trades
     */
    bookingApiTradeId?: string | undefined;
    /**
     * Executing broker of the trade
     */
    broker?: string | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    brokerCapacity?: RebookTradeResponseBrokerCapacityOpen | undefined;
    /**
     * Free form text submitted by the client for internal purposes
     */
    clientMemos?: Array<string> | undefined;
    /**
     * 32 characters. The client order ID from the order submitted
     */
    clientOrderId?: string | undefined;
    /**
     * MIC code for the exchange
     */
    exchange?: string | undefined;
    /**
     * Execution id from the street
     */
    executionId?: string | undefined;
    /**
     * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
     */
    executionOnly?: boolean | undefined;
    /**
     * Max Length 100 characters. External system id provided by a client
     */
    externalId?: string | undefined;
    /**
     * The confirmation number associated with a mutual fund trade
     */
    fundConfirmationNumber?: string | undefined;
    /**
     * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
     */
    gatewayClientOrderId?: string | undefined;
    /**
     * If set to true, indicates the trade should be omitted from client billing
     */
    internalError?: boolean | undefined;
    /**
     * Set on penny-for-the-lot trades
     */
    isWriteoff?: boolean | undefined;
    /**
     * Repeated record containing information about the tax lots, if specified
     */
    lots?: Array<Lot> | undefined;
    /**
     * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
     */
    orderId?: string | undefined;
    /**
     * The price for the instrument that is prevailing in the market.
     */
    prevailingMarketPrice?: RebookTradeResponsePrevailingMarketPrice | null | undefined;
    /**
     * Information about any price adjustments applied to the security
     */
    priceAdjustmentRecord?: RebookTradeResponsePriceAdjustmentRecord | null | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    route?: string | undefined;
    /**
     * The special instructions for a trade
     */
    specialInstructions?: Array<string> | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the particular issue
     */
    symbolDescription?: string | undefined;
    /**
     * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
     */
    whenIssued?: boolean | undefined;
    /**
     * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
     */
    yieldRecords?: Array<YieldRecord> | undefined;
};
/**
 * Used to calculate broadridge blotter code
 */
export declare enum RebookTradeResponseOriginalTradeBrokerCapacity {
    CapacityUnspecified = "CAPACITY_UNSPECIFIED",
    Agency = "AGENCY",
    Principal = "PRINCIPAL",
    Mixed = "MIXED"
}
/**
 * Used to calculate broadridge blotter code
 */
export type RebookTradeResponseOriginalTradeBrokerCapacityOpen = OpenEnum<typeof RebookTradeResponseOriginalTradeBrokerCapacity>;
/**
 * The price for the instrument that is prevailing in the market.
 */
export type RebookTradeResponseOriginalTradePrevailingMarketPrice = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Total monetary value of the price_adjustment
 */
export type RebookTradeResponseOriginalTradePriceAdjustmentAmount = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type RebookTradeResponseOriginalTradePriceAdjustmentPercent = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export declare enum RebookTradeResponseOriginalTradePriceAdjustmentType {
    PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
    Markup = "MARKUP",
    Markdown = "MARKDOWN",
    SalesLoad = "SALES_LOAD"
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen = OpenEnum<typeof RebookTradeResponseOriginalTradePriceAdjustmentType>;
/**
 * Information about any price adjustments applied to the security
 */
export type RebookTradeResponseOriginalTradePriceAdjustmentRecord = {
    /**
     * Total monetary value of the price_adjustment
     */
    priceAdjustmentAmount?: RebookTradeResponseOriginalTradePriceAdjustmentAmount | null | undefined;
    /**
     * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
     */
    priceAdjustmentPercent?: RebookTradeResponseOriginalTradePriceAdjustmentPercent | null | undefined;
    /**
     * The type of price adjustment being applied by the broker to the net price of the security
     */
    priceAdjustmentType?: RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen | undefined;
};
/**
 * The original trade that was rebooked.
 */
export type OriginalTrade = {
    /**
     * Free form text field containing additional information for a trade
     */
    additionalInstructions?: Array<string> | undefined;
    /**
     * Max Length 100 characters. Alternate order id from the street used for FRAC trades
     */
    alternateOrderId?: string | undefined;
    /**
     * uuid assigned by the Booking API if a trade belongs to an allocation
     */
    bookingApiTradeAllocationId?: string | undefined;
    /**
     * uuid assigned by the Booking API to all trades
     */
    bookingApiTradeId?: string | undefined;
    /**
     * Executing broker of the trade
     */
    broker?: string | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    brokerCapacity?: RebookTradeResponseOriginalTradeBrokerCapacityOpen | undefined;
    /**
     * Free form text submitted by the client for internal purposes
     */
    clientMemos?: Array<string> | undefined;
    /**
     * 32 characters. The client order ID from the order submitted
     */
    clientOrderId?: string | undefined;
    /**
     * MIC code for the exchange
     */
    exchange?: string | undefined;
    /**
     * Execution id from the street
     */
    executionId?: string | undefined;
    /**
     * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
     */
    executionOnly?: boolean | undefined;
    /**
     * Max Length 100 characters. External system id provided by a client
     */
    externalId?: string | undefined;
    /**
     * The confirmation number associated with a mutual fund trade
     */
    fundConfirmationNumber?: string | undefined;
    /**
     * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
     */
    gatewayClientOrderId?: string | undefined;
    /**
     * If set to true, indicates the trade should be omitted from client billing
     */
    internalError?: boolean | undefined;
    /**
     * Set on penny-for-the-lot trades
     */
    isWriteoff?: boolean | undefined;
    /**
     * Repeated record containing information about the tax lots, if specified
     */
    lots?: Array<Lot> | undefined;
    /**
     * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
     */
    orderId?: string | undefined;
    /**
     * The price for the instrument that is prevailing in the market.
     */
    prevailingMarketPrice?: RebookTradeResponseOriginalTradePrevailingMarketPrice | null | undefined;
    /**
     * Information about any price adjustments applied to the security
     */
    priceAdjustmentRecord?: RebookTradeResponseOriginalTradePriceAdjustmentRecord | null | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    route?: string | undefined;
    /**
     * The special instructions for a trade
     */
    specialInstructions?: Array<string> | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the particular issue
     */
    symbolDescription?: string | undefined;
    /**
     * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
     */
    whenIssued?: boolean | undefined;
    /**
     * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
     */
    yieldRecords?: Array<YieldRecord> | undefined;
};
/**
 * A response for the rebook trade method.
 */
export type RebookTradeResponse = {
    /**
     * The new trade that is booked.
     */
    newTrade?: NewTrade | null | undefined;
    /**
     * The original trade that was rebooked.
     */
    originalTrade?: OriginalTrade | null | undefined;
};
/** @internal */
export declare const RebookTradeResponseBrokerCapacity$inboundSchema: z.ZodType<RebookTradeResponseBrokerCapacityOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const RebookTradeResponseBrokerCapacity$outboundSchema: z.ZodType<RebookTradeResponseBrokerCapacityOpen, z.ZodTypeDef, RebookTradeResponseBrokerCapacityOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponseBrokerCapacity$ {
    /** @deprecated use `RebookTradeResponseBrokerCapacity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponseBrokerCapacityOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponseBrokerCapacity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponseBrokerCapacityOpen, z.ZodTypeDef, RebookTradeResponseBrokerCapacityOpen>;
}
/** @internal */
export declare const RebookTradeResponsePrevailingMarketPrice$inboundSchema: z.ZodType<RebookTradeResponsePrevailingMarketPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponsePrevailingMarketPrice$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const RebookTradeResponsePrevailingMarketPrice$outboundSchema: z.ZodType<RebookTradeResponsePrevailingMarketPrice$Outbound, z.ZodTypeDef, RebookTradeResponsePrevailingMarketPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponsePrevailingMarketPrice$ {
    /** @deprecated use `RebookTradeResponsePrevailingMarketPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponsePrevailingMarketPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponsePrevailingMarketPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponsePrevailingMarketPrice$Outbound, z.ZodTypeDef, RebookTradeResponsePrevailingMarketPrice>;
    /** @deprecated use `RebookTradeResponsePrevailingMarketPrice$Outbound` instead. */
    type Outbound = RebookTradeResponsePrevailingMarketPrice$Outbound;
}
/** @internal */
export declare const RebookTradeResponsePriceAdjustmentAmount$inboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponsePriceAdjustmentAmount$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const RebookTradeResponsePriceAdjustmentAmount$outboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentAmount$Outbound, z.ZodTypeDef, RebookTradeResponsePriceAdjustmentAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponsePriceAdjustmentAmount$ {
    /** @deprecated use `RebookTradeResponsePriceAdjustmentAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponsePriceAdjustmentAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentAmount$Outbound, z.ZodTypeDef, RebookTradeResponsePriceAdjustmentAmount>;
    /** @deprecated use `RebookTradeResponsePriceAdjustmentAmount$Outbound` instead. */
    type Outbound = RebookTradeResponsePriceAdjustmentAmount$Outbound;
}
/** @internal */
export declare const RebookTradeResponsePriceAdjustmentPercent$inboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentPercent, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponsePriceAdjustmentPercent$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const RebookTradeResponsePriceAdjustmentPercent$outboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentPercent$Outbound, z.ZodTypeDef, RebookTradeResponsePriceAdjustmentPercent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponsePriceAdjustmentPercent$ {
    /** @deprecated use `RebookTradeResponsePriceAdjustmentPercent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentPercent, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponsePriceAdjustmentPercent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentPercent$Outbound, z.ZodTypeDef, RebookTradeResponsePriceAdjustmentPercent>;
    /** @deprecated use `RebookTradeResponsePriceAdjustmentPercent$Outbound` instead. */
    type Outbound = RebookTradeResponsePriceAdjustmentPercent$Outbound;
}
/** @internal */
export declare const RebookTradeResponsePriceAdjustmentType$inboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const RebookTradeResponsePriceAdjustmentType$outboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, RebookTradeResponsePriceAdjustmentTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponsePriceAdjustmentType$ {
    /** @deprecated use `RebookTradeResponsePriceAdjustmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponsePriceAdjustmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, RebookTradeResponsePriceAdjustmentTypeOpen>;
}
/** @internal */
export declare const RebookTradeResponsePriceAdjustmentRecord$inboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentRecord, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponsePriceAdjustmentRecord$Outbound = {
    price_adjustment_amount?: RebookTradeResponsePriceAdjustmentAmount$Outbound | null | undefined;
    price_adjustment_percent?: RebookTradeResponsePriceAdjustmentPercent$Outbound | null | undefined;
    price_adjustment_type?: string | undefined;
};
/** @internal */
export declare const RebookTradeResponsePriceAdjustmentRecord$outboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentRecord$Outbound, z.ZodTypeDef, RebookTradeResponsePriceAdjustmentRecord>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponsePriceAdjustmentRecord$ {
    /** @deprecated use `RebookTradeResponsePriceAdjustmentRecord$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentRecord, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponsePriceAdjustmentRecord$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponsePriceAdjustmentRecord$Outbound, z.ZodTypeDef, RebookTradeResponsePriceAdjustmentRecord>;
    /** @deprecated use `RebookTradeResponsePriceAdjustmentRecord$Outbound` instead. */
    type Outbound = RebookTradeResponsePriceAdjustmentRecord$Outbound;
}
/** @internal */
export declare const NewTrade$inboundSchema: z.ZodType<NewTrade, z.ZodTypeDef, unknown>;
/** @internal */
export type NewTrade$Outbound = {
    additional_instructions?: Array<string> | undefined;
    alternate_order_id?: string | undefined;
    booking_api_trade_allocation_id?: string | undefined;
    booking_api_trade_id?: string | undefined;
    broker?: string | undefined;
    broker_capacity?: string | undefined;
    client_memos?: Array<string> | undefined;
    client_order_id?: string | undefined;
    exchange?: string | undefined;
    execution_id?: string | undefined;
    execution_only?: boolean | undefined;
    external_id?: string | undefined;
    fund_confirmation_number?: string | undefined;
    gateway_client_order_id?: string | undefined;
    internal_error?: boolean | undefined;
    is_writeoff?: boolean | undefined;
    lots?: Array<Lot$Outbound> | undefined;
    order_id?: string | undefined;
    prevailing_market_price?: RebookTradeResponsePrevailingMarketPrice$Outbound | null | undefined;
    price_adjustment_record?: RebookTradeResponsePriceAdjustmentRecord$Outbound | null | undefined;
    route?: string | undefined;
    special_instructions?: Array<string> | undefined;
    symbol_description?: string | undefined;
    when_issued?: boolean | undefined;
    yield_records?: Array<YieldRecord$Outbound> | undefined;
};
/** @internal */
export declare const NewTrade$outboundSchema: z.ZodType<NewTrade$Outbound, z.ZodTypeDef, NewTrade>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewTrade$ {
    /** @deprecated use `NewTrade$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewTrade, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewTrade$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewTrade$Outbound, z.ZodTypeDef, NewTrade>;
    /** @deprecated use `NewTrade$Outbound` instead. */
    type Outbound = NewTrade$Outbound;
}
/** @internal */
export declare const RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema: z.ZodType<RebookTradeResponseOriginalTradeBrokerCapacityOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema: z.ZodType<RebookTradeResponseOriginalTradeBrokerCapacityOpen, z.ZodTypeDef, RebookTradeResponseOriginalTradeBrokerCapacityOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponseOriginalTradeBrokerCapacity$ {
    /** @deprecated use `RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponseOriginalTradeBrokerCapacityOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponseOriginalTradeBrokerCapacityOpen, z.ZodTypeDef, RebookTradeResponseOriginalTradeBrokerCapacityOpen>;
}
/** @internal */
export declare const RebookTradeResponseOriginalTradePrevailingMarketPrice$inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePrevailingMarketPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const RebookTradeResponseOriginalTradePrevailingMarketPrice$outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound, z.ZodTypeDef, RebookTradeResponseOriginalTradePrevailingMarketPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponseOriginalTradePrevailingMarketPrice$ {
    /** @deprecated use `RebookTradeResponseOriginalTradePrevailingMarketPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePrevailingMarketPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponseOriginalTradePrevailingMarketPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound, z.ZodTypeDef, RebookTradeResponseOriginalTradePrevailingMarketPrice>;
    /** @deprecated use `RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound` instead. */
    type Outbound = RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound;
}
/** @internal */
export declare const RebookTradeResponseOriginalTradePriceAdjustmentAmount$inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const RebookTradeResponseOriginalTradePriceAdjustmentAmount$outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound, z.ZodTypeDef, RebookTradeResponseOriginalTradePriceAdjustmentAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponseOriginalTradePriceAdjustmentAmount$ {
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound, z.ZodTypeDef, RebookTradeResponseOriginalTradePriceAdjustmentAmount>;
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound` instead. */
    type Outbound = RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound;
}
/** @internal */
export declare const RebookTradeResponseOriginalTradePriceAdjustmentPercent$inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentPercent, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const RebookTradeResponseOriginalTradePriceAdjustmentPercent$outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound, z.ZodTypeDef, RebookTradeResponseOriginalTradePriceAdjustmentPercent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponseOriginalTradePriceAdjustmentPercent$ {
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentPercent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentPercent, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentPercent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound, z.ZodTypeDef, RebookTradeResponseOriginalTradePriceAdjustmentPercent>;
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound` instead. */
    type Outbound = RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound;
}
/** @internal */
export declare const RebookTradeResponseOriginalTradePriceAdjustmentType$inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const RebookTradeResponseOriginalTradePriceAdjustmentType$outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen, z.ZodTypeDef, RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponseOriginalTradePriceAdjustmentType$ {
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen, z.ZodTypeDef, RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen>;
}
/** @internal */
export declare const RebookTradeResponseOriginalTradePriceAdjustmentRecord$inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentRecord, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound = {
    price_adjustment_amount?: RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound | null | undefined;
    price_adjustment_percent?: RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound | null | undefined;
    price_adjustment_type?: string | undefined;
};
/** @internal */
export declare const RebookTradeResponseOriginalTradePriceAdjustmentRecord$outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound, z.ZodTypeDef, RebookTradeResponseOriginalTradePriceAdjustmentRecord>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponseOriginalTradePriceAdjustmentRecord$ {
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentRecord$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentRecord, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentRecord$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound, z.ZodTypeDef, RebookTradeResponseOriginalTradePriceAdjustmentRecord>;
    /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound` instead. */
    type Outbound = RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound;
}
/** @internal */
export declare const OriginalTrade$inboundSchema: z.ZodType<OriginalTrade, z.ZodTypeDef, unknown>;
/** @internal */
export type OriginalTrade$Outbound = {
    additional_instructions?: Array<string> | undefined;
    alternate_order_id?: string | undefined;
    booking_api_trade_allocation_id?: string | undefined;
    booking_api_trade_id?: string | undefined;
    broker?: string | undefined;
    broker_capacity?: string | undefined;
    client_memos?: Array<string> | undefined;
    client_order_id?: string | undefined;
    exchange?: string | undefined;
    execution_id?: string | undefined;
    execution_only?: boolean | undefined;
    external_id?: string | undefined;
    fund_confirmation_number?: string | undefined;
    gateway_client_order_id?: string | undefined;
    internal_error?: boolean | undefined;
    is_writeoff?: boolean | undefined;
    lots?: Array<Lot$Outbound> | undefined;
    order_id?: string | undefined;
    prevailing_market_price?: RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound | null | undefined;
    price_adjustment_record?: RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound | null | undefined;
    route?: string | undefined;
    special_instructions?: Array<string> | undefined;
    symbol_description?: string | undefined;
    when_issued?: boolean | undefined;
    yield_records?: Array<YieldRecord$Outbound> | undefined;
};
/** @internal */
export declare const OriginalTrade$outboundSchema: z.ZodType<OriginalTrade$Outbound, z.ZodTypeDef, OriginalTrade>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OriginalTrade$ {
    /** @deprecated use `OriginalTrade$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OriginalTrade, z.ZodTypeDef, unknown>;
    /** @deprecated use `OriginalTrade$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OriginalTrade$Outbound, z.ZodTypeDef, OriginalTrade>;
    /** @deprecated use `OriginalTrade$Outbound` instead. */
    type Outbound = OriginalTrade$Outbound;
}
/** @internal */
export declare const RebookTradeResponse$inboundSchema: z.ZodType<RebookTradeResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type RebookTradeResponse$Outbound = {
    new_trade?: NewTrade$Outbound | null | undefined;
    original_trade?: OriginalTrade$Outbound | null | undefined;
};
/** @internal */
export declare const RebookTradeResponse$outboundSchema: z.ZodType<RebookTradeResponse$Outbound, z.ZodTypeDef, RebookTradeResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RebookTradeResponse$ {
    /** @deprecated use `RebookTradeResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RebookTradeResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `RebookTradeResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RebookTradeResponse$Outbound, z.ZodTypeDef, RebookTradeResponse>;
    /** @deprecated use `RebookTradeResponse$Outbound` instead. */
    type Outbound = RebookTradeResponse$Outbound;
}
//# sourceMappingURL=rebooktraderesponse.d.ts.map