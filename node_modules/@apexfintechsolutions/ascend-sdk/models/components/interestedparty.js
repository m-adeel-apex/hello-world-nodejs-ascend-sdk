"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterestedParty$ = exports.InterestedParty$outboundSchema = exports.InterestedParty$inboundSchema = exports.InterestedPartyTradeConfirmationDeliveryPreference$ = exports.InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema = exports.InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema = exports.InterestedPartyStatementDeliveryPreference$ = exports.InterestedPartyStatementDeliveryPreference$outboundSchema = exports.InterestedPartyStatementDeliveryPreference$inboundSchema = exports.InterestedPartyMailingAddress$ = exports.InterestedPartyMailingAddress$outboundSchema = exports.InterestedPartyMailingAddress$inboundSchema = exports.InterestedPartyTradeConfirmationDeliveryPreference = exports.InterestedPartyStatementDeliveryPreference = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * Delivery method instruction for account statements for a given Interested Party; Can be `PHYSICAL`, `SUPPRESS`; Defaults to `PHYSICAL` on party creation
 */
var InterestedPartyStatementDeliveryPreference;
(function (InterestedPartyStatementDeliveryPreference) {
    InterestedPartyStatementDeliveryPreference["Physical"] = "PHYSICAL";
    InterestedPartyStatementDeliveryPreference["Suppress"] = "SUPPRESS";
})(InterestedPartyStatementDeliveryPreference || (exports.InterestedPartyStatementDeliveryPreference = InterestedPartyStatementDeliveryPreference = {}));
/**
 * Delivery method instruction for trade confirmations for a given Interested Party record; Can be `PHYSICAL`, `SUPPRESS`; Defaults to `PHYSICAL` on party creation
 */
var InterestedPartyTradeConfirmationDeliveryPreference;
(function (InterestedPartyTradeConfirmationDeliveryPreference) {
    InterestedPartyTradeConfirmationDeliveryPreference["Physical"] = "PHYSICAL";
    InterestedPartyTradeConfirmationDeliveryPreference["Suppress"] = "SUPPRESS";
})(InterestedPartyTradeConfirmationDeliveryPreference || (exports.InterestedPartyTradeConfirmationDeliveryPreference = InterestedPartyTradeConfirmationDeliveryPreference = {}));
/** @internal */
exports.InterestedPartyMailingAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.InterestedPartyMailingAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InterestedPartyMailingAddress$;
(function (InterestedPartyMailingAddress$) {
    /** @deprecated use `InterestedPartyMailingAddress$inboundSchema` instead. */
    InterestedPartyMailingAddress$.inboundSchema = exports.InterestedPartyMailingAddress$inboundSchema;
    /** @deprecated use `InterestedPartyMailingAddress$outboundSchema` instead. */
    InterestedPartyMailingAddress$.outboundSchema = exports.InterestedPartyMailingAddress$outboundSchema;
})(InterestedPartyMailingAddress$ || (exports.InterestedPartyMailingAddress$ = InterestedPartyMailingAddress$ = {}));
/** @internal */
exports.InterestedPartyStatementDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(InterestedPartyStatementDeliveryPreference),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.InterestedPartyStatementDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(InterestedPartyStatementDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InterestedPartyStatementDeliveryPreference$;
(function (InterestedPartyStatementDeliveryPreference$) {
    /** @deprecated use `InterestedPartyStatementDeliveryPreference$inboundSchema` instead. */
    InterestedPartyStatementDeliveryPreference$.inboundSchema = exports.InterestedPartyStatementDeliveryPreference$inboundSchema;
    /** @deprecated use `InterestedPartyStatementDeliveryPreference$outboundSchema` instead. */
    InterestedPartyStatementDeliveryPreference$.outboundSchema = exports.InterestedPartyStatementDeliveryPreference$outboundSchema;
})(InterestedPartyStatementDeliveryPreference$ || (exports.InterestedPartyStatementDeliveryPreference$ = InterestedPartyStatementDeliveryPreference$ = {}));
/** @internal */
exports.InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(InterestedPartyTradeConfirmationDeliveryPreference),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(InterestedPartyTradeConfirmationDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InterestedPartyTradeConfirmationDeliveryPreference$;
(function (InterestedPartyTradeConfirmationDeliveryPreference$) {
    /** @deprecated use `InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema` instead. */
    InterestedPartyTradeConfirmationDeliveryPreference$.inboundSchema = exports.InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema;
    /** @deprecated use `InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema` instead. */
    InterestedPartyTradeConfirmationDeliveryPreference$.outboundSchema = exports.InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema;
})(InterestedPartyTradeConfirmationDeliveryPreference$ || (exports.InterestedPartyTradeConfirmationDeliveryPreference$ = InterestedPartyTradeConfirmationDeliveryPreference$ = {}));
/** @internal */
exports.InterestedParty$inboundSchema = z.object({
    interested_party_id: z.string().optional(),
    mailing_address: z.nullable(z.lazy(() => exports.InterestedPartyMailingAddress$inboundSchema)).optional(),
    name: z.string().optional(),
    recipient: z.string().optional(),
    statement_delivery_preference: exports.InterestedPartyStatementDeliveryPreference$inboundSchema.optional(),
    trade_confirmation_delivery_preference: exports.InterestedPartyTradeConfirmationDeliveryPreference$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "interested_party_id": "interestedPartyId",
        "mailing_address": "mailingAddress",
        "statement_delivery_preference": "statementDeliveryPreference",
        "trade_confirmation_delivery_preference": "tradeConfirmationDeliveryPreference",
    });
});
/** @internal */
exports.InterestedParty$outboundSchema = z.object({
    interestedPartyId: z.string().optional(),
    mailingAddress: z.nullable(z.lazy(() => exports.InterestedPartyMailingAddress$outboundSchema)).optional(),
    name: z.string().optional(),
    recipient: z.string().optional(),
    statementDeliveryPreference: exports.InterestedPartyStatementDeliveryPreference$outboundSchema.optional(),
    tradeConfirmationDeliveryPreference: exports.InterestedPartyTradeConfirmationDeliveryPreference$outboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        interestedPartyId: "interested_party_id",
        mailingAddress: "mailing_address",
        statementDeliveryPreference: "statement_delivery_preference",
        tradeConfirmationDeliveryPreference: "trade_confirmation_delivery_preference",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InterestedParty$;
(function (InterestedParty$) {
    /** @deprecated use `InterestedParty$inboundSchema` instead. */
    InterestedParty$.inboundSchema = exports.InterestedParty$inboundSchema;
    /** @deprecated use `InterestedParty$outboundSchema` instead. */
    InterestedParty$.outboundSchema = exports.InterestedParty$outboundSchema;
})(InterestedParty$ || (exports.InterestedParty$ = InterestedParty$ = {}));
//# sourceMappingURL=interestedparty.js.map