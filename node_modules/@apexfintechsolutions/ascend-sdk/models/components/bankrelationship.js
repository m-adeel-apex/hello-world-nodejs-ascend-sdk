"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BankRelationship$ = exports.BankRelationship$outboundSchema = exports.BankRelationship$inboundSchema = exports.BankRelationshipVerificationMethod$ = exports.BankRelationshipVerificationMethod$outboundSchema = exports.BankRelationshipVerificationMethod$inboundSchema = exports.BankRelationshipState$ = exports.BankRelationshipState$outboundSchema = exports.BankRelationshipState$inboundSchema = exports.BankRelationshipStateState$ = exports.BankRelationshipStateState$outboundSchema = exports.BankRelationshipStateState$inboundSchema = exports.BankAccount$ = exports.BankAccount$outboundSchema = exports.BankAccount$inboundSchema = exports.BankRelationshipType$ = exports.BankRelationshipType$outboundSchema = exports.BankRelationshipType$inboundSchema = exports.BankRelationshipVerificationMethod = exports.BankRelationshipStateState = exports.BankRelationshipType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The bank account type.
 */
var BankRelationshipType;
(function (BankRelationshipType) {
    BankRelationshipType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    BankRelationshipType["Checking"] = "CHECKING";
    BankRelationshipType["Savings"] = "SAVINGS";
})(BankRelationshipType || (exports.BankRelationshipType = BankRelationshipType = {}));
/**
 * The high level state of the bank relationship.
 */
var BankRelationshipStateState;
(function (BankRelationshipStateState) {
    BankRelationshipStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    BankRelationshipStateState["Pending"] = "PENDING";
    BankRelationshipStateState["Approved"] = "APPROVED";
    BankRelationshipStateState["Canceled"] = "CANCELED";
    BankRelationshipStateState["Rejected"] = "REJECTED";
})(BankRelationshipStateState || (exports.BankRelationshipStateState = BankRelationshipStateState = {}));
/**
 * The verification method of the bank relationship.
 */
var BankRelationshipVerificationMethod;
(function (BankRelationshipVerificationMethod) {
    BankRelationshipVerificationMethod["VerificationMethodUnspecified"] = "VERIFICATION_METHOD_UNSPECIFIED";
    BankRelationshipVerificationMethod["MicroDeposit"] = "MICRO_DEPOSIT";
    BankRelationshipVerificationMethod["Yodlee"] = "YODLEE";
    BankRelationshipVerificationMethod["Quovo"] = "QUOVO";
    BankRelationshipVerificationMethod["Giact"] = "GIACT";
    BankRelationshipVerificationMethod["Synapse"] = "SYNAPSE";
    BankRelationshipVerificationMethod["Sophtron"] = "SOPHTRON";
    BankRelationshipVerificationMethod["InternalBank"] = "INTERNAL_BANK";
    BankRelationshipVerificationMethod["Mx"] = "MX";
    BankRelationshipVerificationMethod["Fiserv"] = "FISERV";
    BankRelationshipVerificationMethod["PlaidToken"] = "PLAID_TOKEN";
})(BankRelationshipVerificationMethod || (exports.BankRelationshipVerificationMethod = BankRelationshipVerificationMethod = {}));
/** @internal */
exports.BankRelationshipType$inboundSchema = z
    .union([
    z.nativeEnum(BankRelationshipType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BankRelationshipType$outboundSchema = z.union([
    z.nativeEnum(BankRelationshipType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BankRelationshipType$;
(function (BankRelationshipType$) {
    /** @deprecated use `BankRelationshipType$inboundSchema` instead. */
    BankRelationshipType$.inboundSchema = exports.BankRelationshipType$inboundSchema;
    /** @deprecated use `BankRelationshipType$outboundSchema` instead. */
    BankRelationshipType$.outboundSchema = exports.BankRelationshipType$outboundSchema;
})(BankRelationshipType$ || (exports.BankRelationshipType$ = BankRelationshipType$ = {}));
/** @internal */
exports.BankAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    owner: z.string().optional(),
    routing_number: z.string().optional(),
    type: exports.BankRelationshipType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_number": "accountNumber",
        "routing_number": "routingNumber",
    });
});
/** @internal */
exports.BankAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    owner: z.string().optional(),
    routingNumber: z.string().optional(),
    type: exports.BankRelationshipType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountNumber: "account_number",
        routingNumber: "routing_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BankAccount$;
(function (BankAccount$) {
    /** @deprecated use `BankAccount$inboundSchema` instead. */
    BankAccount$.inboundSchema = exports.BankAccount$inboundSchema;
    /** @deprecated use `BankAccount$outboundSchema` instead. */
    BankAccount$.outboundSchema = exports.BankAccount$outboundSchema;
})(BankAccount$ || (exports.BankAccount$ = BankAccount$ = {}));
/** @internal */
exports.BankRelationshipStateState$inboundSchema = z
    .union([
    z.nativeEnum(BankRelationshipStateState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BankRelationshipStateState$outboundSchema = z.union([
    z.nativeEnum(BankRelationshipStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BankRelationshipStateState$;
(function (BankRelationshipStateState$) {
    /** @deprecated use `BankRelationshipStateState$inboundSchema` instead. */
    BankRelationshipStateState$.inboundSchema = exports.BankRelationshipStateState$inboundSchema;
    /** @deprecated use `BankRelationshipStateState$outboundSchema` instead. */
    BankRelationshipStateState$.outboundSchema = exports.BankRelationshipStateState$outboundSchema;
})(BankRelationshipStateState$ || (exports.BankRelationshipStateState$ = BankRelationshipStateState$ = {}));
/** @internal */
exports.BankRelationshipState$inboundSchema = z.object({
    actor: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.BankRelationshipStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
exports.BankRelationshipState$outboundSchema = z.object({
    actor: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.BankRelationshipStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BankRelationshipState$;
(function (BankRelationshipState$) {
    /** @deprecated use `BankRelationshipState$inboundSchema` instead. */
    BankRelationshipState$.inboundSchema = exports.BankRelationshipState$inboundSchema;
    /** @deprecated use `BankRelationshipState$outboundSchema` instead. */
    BankRelationshipState$.outboundSchema = exports.BankRelationshipState$outboundSchema;
})(BankRelationshipState$ || (exports.BankRelationshipState$ = BankRelationshipState$ = {}));
/** @internal */
exports.BankRelationshipVerificationMethod$inboundSchema = z
    .union([
    z.nativeEnum(BankRelationshipVerificationMethod),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BankRelationshipVerificationMethod$outboundSchema = z.union([
    z.nativeEnum(BankRelationshipVerificationMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BankRelationshipVerificationMethod$;
(function (BankRelationshipVerificationMethod$) {
    /** @deprecated use `BankRelationshipVerificationMethod$inboundSchema` instead. */
    BankRelationshipVerificationMethod$.inboundSchema = exports.BankRelationshipVerificationMethod$inboundSchema;
    /** @deprecated use `BankRelationshipVerificationMethod$outboundSchema` instead. */
    BankRelationshipVerificationMethod$.outboundSchema = exports.BankRelationshipVerificationMethod$outboundSchema;
})(BankRelationshipVerificationMethod$ || (exports.BankRelationshipVerificationMethod$ = BankRelationshipVerificationMethod$ = {}));
/** @internal */
exports.BankRelationship$inboundSchema = z.object({
    bank_account: z.nullable(z.lazy(() => exports.BankAccount$inboundSchema)).optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    name: z.string().optional(),
    nickname: z.string().optional(),
    plaid_processor_token: z.string().optional(),
    state: z.nullable(z.lazy(() => exports.BankRelationshipState$inboundSchema))
        .optional(),
    verification_method: exports.BankRelationshipVerificationMethod$inboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "bank_account": "bankAccount",
        "create_time": "createTime",
        "plaid_processor_token": "plaidProcessorToken",
        "verification_method": "verificationMethod",
    });
});
/** @internal */
exports.BankRelationship$outboundSchema = z.object({
    bankAccount: z.nullable(z.lazy(() => exports.BankAccount$outboundSchema)).optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    name: z.string().optional(),
    nickname: z.string().optional(),
    plaidProcessorToken: z.string().optional(),
    state: z.nullable(z.lazy(() => exports.BankRelationshipState$outboundSchema))
        .optional(),
    verificationMethod: exports.BankRelationshipVerificationMethod$outboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        bankAccount: "bank_account",
        createTime: "create_time",
        plaidProcessorToken: "plaid_processor_token",
        verificationMethod: "verification_method",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BankRelationship$;
(function (BankRelationship$) {
    /** @deprecated use `BankRelationship$inboundSchema` instead. */
    BankRelationship$.inboundSchema = exports.BankRelationship$inboundSchema;
    /** @deprecated use `BankRelationship$outboundSchema` instead. */
    BankRelationship$.outboundSchema = exports.BankRelationship$outboundSchema;
})(BankRelationship$ || (exports.BankRelationship$ = BankRelationship$ = {}));
//# sourceMappingURL=bankrelationship.js.map