"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegalNaturalPersonUpdate$ = exports.LegalNaturalPersonUpdate$outboundSchema = exports.LegalNaturalPersonUpdate$inboundSchema = exports.LegalNaturalPersonUpdateTaxIdType$ = exports.LegalNaturalPersonUpdateTaxIdType$outboundSchema = exports.LegalNaturalPersonUpdateTaxIdType$inboundSchema = exports.LegalNaturalPersonUpdateNameSuffix$ = exports.LegalNaturalPersonUpdateNameSuffix$outboundSchema = exports.LegalNaturalPersonUpdateNameSuffix$inboundSchema = exports.LegalNaturalPersonUpdateMaritalStatus$ = exports.LegalNaturalPersonUpdateMaritalStatus$outboundSchema = exports.LegalNaturalPersonUpdateMaritalStatus$inboundSchema = exports.LegalNaturalPersonUpdateTaxIdType = exports.LegalNaturalPersonUpdateNameSuffix = exports.LegalNaturalPersonUpdateMaritalStatus = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const dateupdate_js_1 = require("./dateupdate.js");
const employmentupdate_js_1 = require("./employmentupdate.js");
const foreignidentificationupdate_js_1 = require("./foreignidentificationupdate.js");
const identityverificationresultupdate_js_1 = require("./identityverificationresultupdate.js");
const largetraderupdate_js_1 = require("./largetraderupdate.js");
const naturalpersonfddupdate_js_1 = require("./naturalpersonfddupdate.js");
const noncitizenresidencyupdate_js_1 = require("./noncitizenresidencyupdate.js");
const postaladdressupdate_js_1 = require("./postaladdressupdate.js");
const taxprofileupdate_js_1 = require("./taxprofileupdate.js");
/**
 * The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
 */
var LegalNaturalPersonUpdateMaritalStatus;
(function (LegalNaturalPersonUpdateMaritalStatus) {
    LegalNaturalPersonUpdateMaritalStatus["MaritalStatusUnspecified"] = "MARITAL_STATUS_UNSPECIFIED";
    LegalNaturalPersonUpdateMaritalStatus["Single"] = "SINGLE";
    LegalNaturalPersonUpdateMaritalStatus["Married"] = "MARRIED";
    LegalNaturalPersonUpdateMaritalStatus["Divorced"] = "DIVORCED";
    LegalNaturalPersonUpdateMaritalStatus["Widowed"] = "WIDOWED";
})(LegalNaturalPersonUpdateMaritalStatus || (exports.LegalNaturalPersonUpdateMaritalStatus = LegalNaturalPersonUpdateMaritalStatus = {}));
/**
 * The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
 */
var LegalNaturalPersonUpdateNameSuffix;
(function (LegalNaturalPersonUpdateNameSuffix) {
    LegalNaturalPersonUpdateNameSuffix["NameSuffixUnspecified"] = "NAME_SUFFIX_UNSPECIFIED";
    LegalNaturalPersonUpdateNameSuffix["Sr"] = "SR";
    LegalNaturalPersonUpdateNameSuffix["Jr"] = "JR";
    LegalNaturalPersonUpdateNameSuffix["Iii"] = "III";
    LegalNaturalPersonUpdateNameSuffix["Iv"] = "IV";
    LegalNaturalPersonUpdateNameSuffix["V"] = "V";
})(LegalNaturalPersonUpdateNameSuffix || (exports.LegalNaturalPersonUpdateNameSuffix = LegalNaturalPersonUpdateNameSuffix = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
var LegalNaturalPersonUpdateTaxIdType;
(function (LegalNaturalPersonUpdateTaxIdType) {
    LegalNaturalPersonUpdateTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    LegalNaturalPersonUpdateTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    LegalNaturalPersonUpdateTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    LegalNaturalPersonUpdateTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(LegalNaturalPersonUpdateTaxIdType || (exports.LegalNaturalPersonUpdateTaxIdType = LegalNaturalPersonUpdateTaxIdType = {}));
/** @internal */
exports.LegalNaturalPersonUpdateMaritalStatus$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonUpdateMaritalStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalNaturalPersonUpdateMaritalStatus$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonUpdateMaritalStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalNaturalPersonUpdateMaritalStatus$;
(function (LegalNaturalPersonUpdateMaritalStatus$) {
    /** @deprecated use `LegalNaturalPersonUpdateMaritalStatus$inboundSchema` instead. */
    LegalNaturalPersonUpdateMaritalStatus$.inboundSchema = exports.LegalNaturalPersonUpdateMaritalStatus$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUpdateMaritalStatus$outboundSchema` instead. */
    LegalNaturalPersonUpdateMaritalStatus$.outboundSchema = exports.LegalNaturalPersonUpdateMaritalStatus$outboundSchema;
})(LegalNaturalPersonUpdateMaritalStatus$ || (exports.LegalNaturalPersonUpdateMaritalStatus$ = LegalNaturalPersonUpdateMaritalStatus$ = {}));
/** @internal */
exports.LegalNaturalPersonUpdateNameSuffix$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonUpdateNameSuffix),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalNaturalPersonUpdateNameSuffix$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonUpdateNameSuffix),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalNaturalPersonUpdateNameSuffix$;
(function (LegalNaturalPersonUpdateNameSuffix$) {
    /** @deprecated use `LegalNaturalPersonUpdateNameSuffix$inboundSchema` instead. */
    LegalNaturalPersonUpdateNameSuffix$.inboundSchema = exports.LegalNaturalPersonUpdateNameSuffix$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUpdateNameSuffix$outboundSchema` instead. */
    LegalNaturalPersonUpdateNameSuffix$.outboundSchema = exports.LegalNaturalPersonUpdateNameSuffix$outboundSchema;
})(LegalNaturalPersonUpdateNameSuffix$ || (exports.LegalNaturalPersonUpdateNameSuffix$ = LegalNaturalPersonUpdateNameSuffix$ = {}));
/** @internal */
exports.LegalNaturalPersonUpdateTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(LegalNaturalPersonUpdateTaxIdType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalNaturalPersonUpdateTaxIdType$outboundSchema = z.union([
    z.nativeEnum(LegalNaturalPersonUpdateTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalNaturalPersonUpdateTaxIdType$;
(function (LegalNaturalPersonUpdateTaxIdType$) {
    /** @deprecated use `LegalNaturalPersonUpdateTaxIdType$inboundSchema` instead. */
    LegalNaturalPersonUpdateTaxIdType$.inboundSchema = exports.LegalNaturalPersonUpdateTaxIdType$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUpdateTaxIdType$outboundSchema` instead. */
    LegalNaturalPersonUpdateTaxIdType$.outboundSchema = exports.LegalNaturalPersonUpdateTaxIdType$outboundSchema;
})(LegalNaturalPersonUpdateTaxIdType$ || (exports.LegalNaturalPersonUpdateTaxIdType$ = LegalNaturalPersonUpdateTaxIdType$ = {}));
/** @internal */
exports.LegalNaturalPersonUpdate$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birth_date: dateupdate_js_1.DateUpdate$inboundSchema.optional(),
    citizenship_countries: z.array(z.string()).optional(),
    control_person_company_symbols: z.string().optional(),
    correspondent_employee: z.boolean().optional(),
    correspondent_id: z.string().optional(),
    death_date: dateupdate_js_1.DateUpdate$inboundSchema.optional(),
    doing_business_as: z.array(z.string()).optional(),
    employment: employmentupdate_js_1.EmploymentUpdate$inboundSchema.optional(),
    family_name: z.string().optional(),
    finra_associated_entity: z.string().optional(),
    foreign_identification: foreignidentificationupdate_js_1.ForeignIdentificationUpdate$inboundSchema.optional(),
    given_name: z.string().optional(),
    identity_verification_result: identityverificationresultupdate_js_1.IdentityVerificationResultUpdate$inboundSchema
        .optional(),
    institutional_customer: z.boolean().optional(),
    large_trader: largetraderupdate_js_1.LargeTraderUpdate$inboundSchema.optional(),
    marital_status: exports.LegalNaturalPersonUpdateMaritalStatus$inboundSchema
        .optional(),
    middle_names: z.string().optional(),
    name_suffix: exports.LegalNaturalPersonUpdateNameSuffix$inboundSchema.optional(),
    natural_person_fdd: naturalpersonfddupdate_js_1.NaturalPersonFddUpdate$inboundSchema.optional(),
    non_citizen_residency: noncitizenresidencyupdate_js_1.NonCitizenResidencyUpdate$inboundSchema.optional(),
    personal_address: postaladdressupdate_js_1.PostalAddressUpdate$inboundSchema.optional(),
    politically_exposed_immediate_family_names: z.array(z.string()).optional(),
    politically_exposed_organization: z.string().optional(),
    subject_to_backup_withholding: z.boolean().optional(),
    tax_id: z.string().optional(),
    tax_id_type: exports.LegalNaturalPersonUpdateTaxIdType$inboundSchema.optional(),
    tax_profile: taxprofileupdate_js_1.TaxProfileUpdate$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accredited_investor": "accreditedInvestor",
        "birth_date": "birthDate",
        "citizenship_countries": "citizenshipCountries",
        "control_person_company_symbols": "controlPersonCompanySymbols",
        "correspondent_employee": "correspondentEmployee",
        "correspondent_id": "correspondentId",
        "death_date": "deathDate",
        "doing_business_as": "doingBusinessAs",
        "family_name": "familyName",
        "finra_associated_entity": "finraAssociatedEntity",
        "foreign_identification": "foreignIdentification",
        "given_name": "givenName",
        "identity_verification_result": "identityVerificationResult",
        "institutional_customer": "institutionalCustomer",
        "large_trader": "largeTrader",
        "marital_status": "maritalStatus",
        "middle_names": "middleNames",
        "name_suffix": "nameSuffix",
        "natural_person_fdd": "naturalPersonFdd",
        "non_citizen_residency": "nonCitizenResidency",
        "personal_address": "personalAddress",
        "politically_exposed_immediate_family_names": "politicallyExposedImmediateFamilyNames",
        "politically_exposed_organization": "politicallyExposedOrganization",
        "subject_to_backup_withholding": "subjectToBackupWithholding",
        "tax_id": "taxId",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
exports.LegalNaturalPersonUpdate$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birthDate: dateupdate_js_1.DateUpdate$outboundSchema.optional(),
    citizenshipCountries: z.array(z.string()).optional(),
    controlPersonCompanySymbols: z.string().optional(),
    correspondentEmployee: z.boolean().optional(),
    correspondentId: z.string().optional(),
    deathDate: dateupdate_js_1.DateUpdate$outboundSchema.optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    employment: employmentupdate_js_1.EmploymentUpdate$outboundSchema.optional(),
    familyName: z.string().optional(),
    finraAssociatedEntity: z.string().optional(),
    foreignIdentification: foreignidentificationupdate_js_1.ForeignIdentificationUpdate$outboundSchema.optional(),
    givenName: z.string().optional(),
    identityVerificationResult: identityverificationresultupdate_js_1.IdentityVerificationResultUpdate$outboundSchema
        .optional(),
    institutionalCustomer: z.boolean().optional(),
    largeTrader: largetraderupdate_js_1.LargeTraderUpdate$outboundSchema.optional(),
    maritalStatus: exports.LegalNaturalPersonUpdateMaritalStatus$outboundSchema
        .optional(),
    middleNames: z.string().optional(),
    nameSuffix: exports.LegalNaturalPersonUpdateNameSuffix$outboundSchema.optional(),
    naturalPersonFdd: naturalpersonfddupdate_js_1.NaturalPersonFddUpdate$outboundSchema.optional(),
    nonCitizenResidency: noncitizenresidencyupdate_js_1.NonCitizenResidencyUpdate$outboundSchema.optional(),
    personalAddress: postaladdressupdate_js_1.PostalAddressUpdate$outboundSchema.optional(),
    politicallyExposedImmediateFamilyNames: z.array(z.string()).optional(),
    politicallyExposedOrganization: z.string().optional(),
    subjectToBackupWithholding: z.boolean().optional(),
    taxId: z.string().optional(),
    taxIdType: exports.LegalNaturalPersonUpdateTaxIdType$outboundSchema.optional(),
    taxProfile: taxprofileupdate_js_1.TaxProfileUpdate$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accreditedInvestor: "accredited_investor",
        birthDate: "birth_date",
        citizenshipCountries: "citizenship_countries",
        controlPersonCompanySymbols: "control_person_company_symbols",
        correspondentEmployee: "correspondent_employee",
        correspondentId: "correspondent_id",
        deathDate: "death_date",
        doingBusinessAs: "doing_business_as",
        familyName: "family_name",
        finraAssociatedEntity: "finra_associated_entity",
        foreignIdentification: "foreign_identification",
        givenName: "given_name",
        identityVerificationResult: "identity_verification_result",
        institutionalCustomer: "institutional_customer",
        largeTrader: "large_trader",
        maritalStatus: "marital_status",
        middleNames: "middle_names",
        nameSuffix: "name_suffix",
        naturalPersonFdd: "natural_person_fdd",
        nonCitizenResidency: "non_citizen_residency",
        personalAddress: "personal_address",
        politicallyExposedImmediateFamilyNames: "politically_exposed_immediate_family_names",
        politicallyExposedOrganization: "politically_exposed_organization",
        subjectToBackupWithholding: "subject_to_backup_withholding",
        taxId: "tax_id",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalNaturalPersonUpdate$;
(function (LegalNaturalPersonUpdate$) {
    /** @deprecated use `LegalNaturalPersonUpdate$inboundSchema` instead. */
    LegalNaturalPersonUpdate$.inboundSchema = exports.LegalNaturalPersonUpdate$inboundSchema;
    /** @deprecated use `LegalNaturalPersonUpdate$outboundSchema` instead. */
    LegalNaturalPersonUpdate$.outboundSchema = exports.LegalNaturalPersonUpdate$outboundSchema;
})(LegalNaturalPersonUpdate$ || (exports.LegalNaturalPersonUpdate$ = LegalNaturalPersonUpdate$ = {}));
//# sourceMappingURL=legalnaturalpersonupdate.js.map