"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransfersCredit$ = exports.TransfersCredit$outboundSchema = exports.TransfersCredit$inboundSchema = exports.TransfersCreditType$ = exports.TransfersCreditType$outboundSchema = exports.TransfersCreditType$inboundSchema = exports.TransfersCreditState$ = exports.TransfersCreditState$outboundSchema = exports.TransfersCreditState$inboundSchema = exports.TransfersCreditStateState$ = exports.TransfersCreditStateState$outboundSchema = exports.TransfersCreditStateState$inboundSchema = exports.TransfersCreditAmount$ = exports.TransfersCreditAmount$outboundSchema = exports.TransfersCreditAmount$inboundSchema = exports.TransfersCreditType = exports.TransfersCreditStateState = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
var TransfersCreditStateState;
(function (TransfersCreditStateState) {
    TransfersCreditStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    TransfersCreditStateState["Processing"] = "PROCESSING";
    TransfersCreditStateState["PendingReview"] = "PENDING_REVIEW";
    TransfersCreditStateState["Posted"] = "POSTED";
    TransfersCreditStateState["Completed"] = "COMPLETED";
    TransfersCreditStateState["Rejected"] = "REJECTED";
    TransfersCreditStateState["Canceled"] = "CANCELED";
    TransfersCreditStateState["Returned"] = "RETURNED";
    TransfersCreditStateState["Postponed"] = "POSTPONED";
})(TransfersCreditStateState || (exports.TransfersCreditStateState = TransfersCreditStateState = {}));
/**
 * The type of the credit being issued
 */
var TransfersCreditType;
(function (TransfersCreditType) {
    TransfersCreditType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    TransfersCreditType["Promotional"] = "PROMOTIONAL";
    TransfersCreditType["WriteOff"] = "WRITE_OFF";
    TransfersCreditType["Reimbursement"] = "REIMBURSEMENT";
})(TransfersCreditType || (exports.TransfersCreditType = TransfersCreditType = {}));
/** @internal */
exports.TransfersCreditAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TransfersCreditAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersCreditAmount$;
(function (TransfersCreditAmount$) {
    /** @deprecated use `TransfersCreditAmount$inboundSchema` instead. */
    TransfersCreditAmount$.inboundSchema = exports.TransfersCreditAmount$inboundSchema;
    /** @deprecated use `TransfersCreditAmount$outboundSchema` instead. */
    TransfersCreditAmount$.outboundSchema = exports.TransfersCreditAmount$outboundSchema;
})(TransfersCreditAmount$ || (exports.TransfersCreditAmount$ = TransfersCreditAmount$ = {}));
/** @internal */
exports.TransfersCreditStateState$inboundSchema = z
    .union([
    z.nativeEnum(TransfersCreditStateState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TransfersCreditStateState$outboundSchema = z.union([
    z.nativeEnum(TransfersCreditStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersCreditStateState$;
(function (TransfersCreditStateState$) {
    /** @deprecated use `TransfersCreditStateState$inboundSchema` instead. */
    TransfersCreditStateState$.inboundSchema = exports.TransfersCreditStateState$inboundSchema;
    /** @deprecated use `TransfersCreditStateState$outboundSchema` instead. */
    TransfersCreditStateState$.outboundSchema = exports.TransfersCreditStateState$outboundSchema;
})(TransfersCreditStateState$ || (exports.TransfersCreditStateState$ = TransfersCreditStateState$ = {}));
/** @internal */
exports.TransfersCreditState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.TransfersCreditStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
exports.TransfersCreditState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.TransfersCreditStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersCreditState$;
(function (TransfersCreditState$) {
    /** @deprecated use `TransfersCreditState$inboundSchema` instead. */
    TransfersCreditState$.inboundSchema = exports.TransfersCreditState$inboundSchema;
    /** @deprecated use `TransfersCreditState$outboundSchema` instead. */
    TransfersCreditState$.outboundSchema = exports.TransfersCreditState$outboundSchema;
})(TransfersCreditState$ || (exports.TransfersCreditState$ = TransfersCreditState$ = {}));
/** @internal */
exports.TransfersCreditType$inboundSchema = z
    .union([
    z.nativeEnum(TransfersCreditType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TransfersCreditType$outboundSchema = z.union([
    z.nativeEnum(TransfersCreditType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersCreditType$;
(function (TransfersCreditType$) {
    /** @deprecated use `TransfersCreditType$inboundSchema` instead. */
    TransfersCreditType$.inboundSchema = exports.TransfersCreditType$inboundSchema;
    /** @deprecated use `TransfersCreditType$outboundSchema` instead. */
    TransfersCreditType$.outboundSchema = exports.TransfersCreditType$outboundSchema;
})(TransfersCreditType$ || (exports.TransfersCreditType$ = TransfersCreditType$ = {}));
/** @internal */
exports.TransfersCredit$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.TransfersCreditAmount$inboundSchema))
        .optional(),
    client_transfer_id: z.string().optional(),
    description: z.string().optional(),
    fee_operating_account: z.string().optional(),
    name: z.string().optional(),
    state: z.nullable(z.lazy(() => exports.TransfersCreditState$inboundSchema))
        .optional(),
    type: exports.TransfersCreditType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "client_transfer_id": "clientTransferId",
        "fee_operating_account": "feeOperatingAccount",
    });
});
/** @internal */
exports.TransfersCredit$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.TransfersCreditAmount$outboundSchema))
        .optional(),
    clientTransferId: z.string().optional(),
    description: z.string().optional(),
    feeOperatingAccount: z.string().optional(),
    name: z.string().optional(),
    state: z.nullable(z.lazy(() => exports.TransfersCreditState$outboundSchema))
        .optional(),
    type: exports.TransfersCreditType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        clientTransferId: "client_transfer_id",
        feeOperatingAccount: "fee_operating_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransfersCredit$;
(function (TransfersCredit$) {
    /** @deprecated use `TransfersCredit$inboundSchema` instead. */
    TransfersCredit$.inboundSchema = exports.TransfersCredit$inboundSchema;
    /** @deprecated use `TransfersCredit$outboundSchema` instead. */
    TransfersCredit$.outboundSchema = exports.TransfersCredit$outboundSchema;
})(TransfersCredit$ || (exports.TransfersCredit$ = TransfersCredit$ = {}));
//# sourceMappingURL=transferscredit.js.map