"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountGoalsUpdate$ = exports.AccountGoalsUpdate$outboundSchema = exports.AccountGoalsUpdate$inboundSchema = exports.AccountGoalsUpdateTimeHorizon$ = exports.AccountGoalsUpdateTimeHorizon$outboundSchema = exports.AccountGoalsUpdateTimeHorizon$inboundSchema = exports.AccountGoalsUpdateRiskTolerance$ = exports.AccountGoalsUpdateRiskTolerance$outboundSchema = exports.AccountGoalsUpdateRiskTolerance$inboundSchema = exports.AccountGoalsUpdateLiquidityNeeds$ = exports.AccountGoalsUpdateLiquidityNeeds$outboundSchema = exports.AccountGoalsUpdateLiquidityNeeds$inboundSchema = exports.AccountGoalsUpdateInvestmentObjective$ = exports.AccountGoalsUpdateInvestmentObjective$outboundSchema = exports.AccountGoalsUpdateInvestmentObjective$inboundSchema = exports.AccountGoalsUpdateTimeHorizon = exports.AccountGoalsUpdateRiskTolerance = exports.AccountGoalsUpdateLiquidityNeeds = exports.AccountGoalsUpdateInvestmentObjective = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The financial goal or purpose that an investor has in mind when making investment decisions; firms often ask investors to specify their investment objectives when opening an account, in order to provide appropriate investment recommendations and manage risk appropriately
 */
var AccountGoalsUpdateInvestmentObjective;
(function (AccountGoalsUpdateInvestmentObjective) {
    AccountGoalsUpdateInvestmentObjective["InvestmentObjectiveUnspecified"] = "INVESTMENT_OBJECTIVE_UNSPECIFIED";
    AccountGoalsUpdateInvestmentObjective["Balanced"] = "BALANCED";
    AccountGoalsUpdateInvestmentObjective["CapitalAppreciation"] = "CAPITAL_APPRECIATION";
    AccountGoalsUpdateInvestmentObjective["CapitalPreservation"] = "CAPITAL_PRESERVATION";
    AccountGoalsUpdateInvestmentObjective["Growth"] = "GROWTH";
    AccountGoalsUpdateInvestmentObjective["GrowthAndIncome"] = "GROWTH_AND_INCOME";
    AccountGoalsUpdateInvestmentObjective["GrowthIncome"] = "GROWTH_INCOME";
    AccountGoalsUpdateInvestmentObjective["Income"] = "INCOME";
    AccountGoalsUpdateInvestmentObjective["LongTermGrowthWithGreaterRisk"] = "LONG_TERM_GROWTH_WITH_GREATER_RISK";
    AccountGoalsUpdateInvestmentObjective["LongTermGrowthWithSafety"] = "LONG_TERM_GROWTH_WITH_SAFETY";
    AccountGoalsUpdateInvestmentObjective["MaximumGrowth"] = "MAXIMUM_GROWTH";
    AccountGoalsUpdateInvestmentObjective["ShortTermGrowthWithRisk"] = "SHORT_TERM_GROWTH_WITH_RISK";
    AccountGoalsUpdateInvestmentObjective["Speculation"] = "SPECULATION";
    AccountGoalsUpdateInvestmentObjective["Other"] = "OTHER";
})(AccountGoalsUpdateInvestmentObjective || (exports.AccountGoalsUpdateInvestmentObjective = AccountGoalsUpdateInvestmentObjective = {}));
/**
 * An investor’s short-term cash requirements or the need to access funds quickly; it is important to consider an investor’s liquidity needs to ensure that they have sufficient cash or easily liquidated assets available to meet their financial obligations - this may include holding cash or cash equivalents
 */
var AccountGoalsUpdateLiquidityNeeds;
(function (AccountGoalsUpdateLiquidityNeeds) {
    AccountGoalsUpdateLiquidityNeeds["LiquidityNeedsUnspecified"] = "LIQUIDITY_NEEDS_UNSPECIFIED";
    AccountGoalsUpdateLiquidityNeeds["VeryImportant"] = "VERY_IMPORTANT";
    AccountGoalsUpdateLiquidityNeeds["SomewhatImportant"] = "SOMEWHAT_IMPORTANT";
    AccountGoalsUpdateLiquidityNeeds["NotImportant"] = "NOT_IMPORTANT";
})(AccountGoalsUpdateLiquidityNeeds || (exports.AccountGoalsUpdateLiquidityNeeds = AccountGoalsUpdateLiquidityNeeds = {}));
/**
 * An investor’s willingness and ability to tolerate risk when making investment decisions; reflects the investor’s comfort level with the potential ups and downs of the market and their ability to withstand potential losses
 */
var AccountGoalsUpdateRiskTolerance;
(function (AccountGoalsUpdateRiskTolerance) {
    AccountGoalsUpdateRiskTolerance["RiskToleranceUnspecified"] = "RISK_TOLERANCE_UNSPECIFIED";
    AccountGoalsUpdateRiskTolerance["Low"] = "LOW";
    AccountGoalsUpdateRiskTolerance["Medium"] = "MEDIUM";
    AccountGoalsUpdateRiskTolerance["High"] = "HIGH";
})(AccountGoalsUpdateRiskTolerance || (exports.AccountGoalsUpdateRiskTolerance = AccountGoalsUpdateRiskTolerance = {}));
/**
 * TThe length of time an investor expects to hold an investment before selling it; this can affect the appropriate asset allocation and risk level for the portfolio
 */
var AccountGoalsUpdateTimeHorizon;
(function (AccountGoalsUpdateTimeHorizon) {
    AccountGoalsUpdateTimeHorizon["TimeHorizonUnspecified"] = "TIME_HORIZON_UNSPECIFIED";
    AccountGoalsUpdateTimeHorizon["Short"] = "SHORT";
    AccountGoalsUpdateTimeHorizon["Average"] = "AVERAGE";
    AccountGoalsUpdateTimeHorizon["Long"] = "LONG";
})(AccountGoalsUpdateTimeHorizon || (exports.AccountGoalsUpdateTimeHorizon = AccountGoalsUpdateTimeHorizon = {}));
/** @internal */
exports.AccountGoalsUpdateInvestmentObjective$inboundSchema = z
    .union([
    z.nativeEnum(AccountGoalsUpdateInvestmentObjective),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountGoalsUpdateInvestmentObjective$outboundSchema = z.union([
    z.nativeEnum(AccountGoalsUpdateInvestmentObjective),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountGoalsUpdateInvestmentObjective$;
(function (AccountGoalsUpdateInvestmentObjective$) {
    /** @deprecated use `AccountGoalsUpdateInvestmentObjective$inboundSchema` instead. */
    AccountGoalsUpdateInvestmentObjective$.inboundSchema = exports.AccountGoalsUpdateInvestmentObjective$inboundSchema;
    /** @deprecated use `AccountGoalsUpdateInvestmentObjective$outboundSchema` instead. */
    AccountGoalsUpdateInvestmentObjective$.outboundSchema = exports.AccountGoalsUpdateInvestmentObjective$outboundSchema;
})(AccountGoalsUpdateInvestmentObjective$ || (exports.AccountGoalsUpdateInvestmentObjective$ = AccountGoalsUpdateInvestmentObjective$ = {}));
/** @internal */
exports.AccountGoalsUpdateLiquidityNeeds$inboundSchema = z
    .union([
    z.nativeEnum(AccountGoalsUpdateLiquidityNeeds),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountGoalsUpdateLiquidityNeeds$outboundSchema = z.union([
    z.nativeEnum(AccountGoalsUpdateLiquidityNeeds),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountGoalsUpdateLiquidityNeeds$;
(function (AccountGoalsUpdateLiquidityNeeds$) {
    /** @deprecated use `AccountGoalsUpdateLiquidityNeeds$inboundSchema` instead. */
    AccountGoalsUpdateLiquidityNeeds$.inboundSchema = exports.AccountGoalsUpdateLiquidityNeeds$inboundSchema;
    /** @deprecated use `AccountGoalsUpdateLiquidityNeeds$outboundSchema` instead. */
    AccountGoalsUpdateLiquidityNeeds$.outboundSchema = exports.AccountGoalsUpdateLiquidityNeeds$outboundSchema;
})(AccountGoalsUpdateLiquidityNeeds$ || (exports.AccountGoalsUpdateLiquidityNeeds$ = AccountGoalsUpdateLiquidityNeeds$ = {}));
/** @internal */
exports.AccountGoalsUpdateRiskTolerance$inboundSchema = z
    .union([
    z.nativeEnum(AccountGoalsUpdateRiskTolerance),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountGoalsUpdateRiskTolerance$outboundSchema = z.union([
    z.nativeEnum(AccountGoalsUpdateRiskTolerance),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountGoalsUpdateRiskTolerance$;
(function (AccountGoalsUpdateRiskTolerance$) {
    /** @deprecated use `AccountGoalsUpdateRiskTolerance$inboundSchema` instead. */
    AccountGoalsUpdateRiskTolerance$.inboundSchema = exports.AccountGoalsUpdateRiskTolerance$inboundSchema;
    /** @deprecated use `AccountGoalsUpdateRiskTolerance$outboundSchema` instead. */
    AccountGoalsUpdateRiskTolerance$.outboundSchema = exports.AccountGoalsUpdateRiskTolerance$outboundSchema;
})(AccountGoalsUpdateRiskTolerance$ || (exports.AccountGoalsUpdateRiskTolerance$ = AccountGoalsUpdateRiskTolerance$ = {}));
/** @internal */
exports.AccountGoalsUpdateTimeHorizon$inboundSchema = z
    .union([
    z.nativeEnum(AccountGoalsUpdateTimeHorizon),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountGoalsUpdateTimeHorizon$outboundSchema = z.union([
    z.nativeEnum(AccountGoalsUpdateTimeHorizon),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountGoalsUpdateTimeHorizon$;
(function (AccountGoalsUpdateTimeHorizon$) {
    /** @deprecated use `AccountGoalsUpdateTimeHorizon$inboundSchema` instead. */
    AccountGoalsUpdateTimeHorizon$.inboundSchema = exports.AccountGoalsUpdateTimeHorizon$inboundSchema;
    /** @deprecated use `AccountGoalsUpdateTimeHorizon$outboundSchema` instead. */
    AccountGoalsUpdateTimeHorizon$.outboundSchema = exports.AccountGoalsUpdateTimeHorizon$outboundSchema;
})(AccountGoalsUpdateTimeHorizon$ || (exports.AccountGoalsUpdateTimeHorizon$ = AccountGoalsUpdateTimeHorizon$ = {}));
/** @internal */
exports.AccountGoalsUpdate$inboundSchema = z.object({
    investment_objective: exports.AccountGoalsUpdateInvestmentObjective$inboundSchema
        .optional(),
    liquidity_needs: exports.AccountGoalsUpdateLiquidityNeeds$inboundSchema.optional(),
    risk_tolerance: exports.AccountGoalsUpdateRiskTolerance$inboundSchema.optional(),
    time_horizon: exports.AccountGoalsUpdateTimeHorizon$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "investment_objective": "investmentObjective",
        "liquidity_needs": "liquidityNeeds",
        "risk_tolerance": "riskTolerance",
        "time_horizon": "timeHorizon",
    });
});
/** @internal */
exports.AccountGoalsUpdate$outboundSchema = z.object({
    investmentObjective: exports.AccountGoalsUpdateInvestmentObjective$outboundSchema
        .optional(),
    liquidityNeeds: exports.AccountGoalsUpdateLiquidityNeeds$outboundSchema.optional(),
    riskTolerance: exports.AccountGoalsUpdateRiskTolerance$outboundSchema.optional(),
    timeHorizon: exports.AccountGoalsUpdateTimeHorizon$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        investmentObjective: "investment_objective",
        liquidityNeeds: "liquidity_needs",
        riskTolerance: "risk_tolerance",
        timeHorizon: "time_horizon",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountGoalsUpdate$;
(function (AccountGoalsUpdate$) {
    /** @deprecated use `AccountGoalsUpdate$inboundSchema` instead. */
    AccountGoalsUpdate$.inboundSchema = exports.AccountGoalsUpdate$inboundSchema;
    /** @deprecated use `AccountGoalsUpdate$outboundSchema` instead. */
    AccountGoalsUpdate$.outboundSchema = exports.AccountGoalsUpdate$outboundSchema;
})(AccountGoalsUpdate$ || (exports.AccountGoalsUpdate$ = AccountGoalsUpdate$ = {}));
//# sourceMappingURL=accountgoalsupdate.js.map