import * as z from "zod";
import { OpenEnum } from "../../types/enums.js";
import { Lot, Lot$Outbound } from "./lot.js";
import { YieldRecord, YieldRecord$Outbound } from "./yieldrecord.js";
/**
 * Used to calculate broadridge blotter code
 */
export declare enum CancelTradeResponseBrokerCapacity {
    CapacityUnspecified = "CAPACITY_UNSPECIFIED",
    Agency = "AGENCY",
    Principal = "PRINCIPAL",
    Mixed = "MIXED"
}
/**
 * Used to calculate broadridge blotter code
 */
export type CancelTradeResponseBrokerCapacityOpen = OpenEnum<typeof CancelTradeResponseBrokerCapacity>;
/**
 * The price for the instrument that is prevailing in the market.
 */
export type CancelTradeResponsePrevailingMarketPrice = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Total monetary value of the price_adjustment
 */
export type CancelTradeResponsePriceAdjustmentAmount = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type CancelTradeResponsePriceAdjustmentPercent = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export declare enum CancelTradeResponsePriceAdjustmentType {
    PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
    Markup = "MARKUP",
    Markdown = "MARKDOWN",
    SalesLoad = "SALES_LOAD"
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type CancelTradeResponsePriceAdjustmentTypeOpen = OpenEnum<typeof CancelTradeResponsePriceAdjustmentType>;
/**
 * Information about any price adjustments applied to the security
 */
export type CancelTradeResponsePriceAdjustmentRecord = {
    /**
     * Total monetary value of the price_adjustment
     */
    priceAdjustmentAmount?: CancelTradeResponsePriceAdjustmentAmount | null | undefined;
    /**
     * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
     */
    priceAdjustmentPercent?: CancelTradeResponsePriceAdjustmentPercent | null | undefined;
    /**
     * The type of price adjustment being applied by the broker to the net price of the security
     */
    priceAdjustmentType?: CancelTradeResponsePriceAdjustmentTypeOpen | undefined;
};
/**
 * The trade that was canceled.
 */
export type CancelTradeResponseTrade = {
    /**
     * Free form text field containing additional information for a trade
     */
    additionalInstructions?: Array<string> | undefined;
    /**
     * Max Length 100 characters. Alternate order id from the street used for FRAC trades
     */
    alternateOrderId?: string | undefined;
    /**
     * uuid assigned by the Booking API if a trade belongs to an allocation
     */
    bookingApiTradeAllocationId?: string | undefined;
    /**
     * uuid assigned by the Booking API to all trades
     */
    bookingApiTradeId?: string | undefined;
    /**
     * Executing broker of the trade
     */
    broker?: string | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    brokerCapacity?: CancelTradeResponseBrokerCapacityOpen | undefined;
    /**
     * Free form text submitted by the client for internal purposes
     */
    clientMemos?: Array<string> | undefined;
    /**
     * 32 characters. The client order ID from the order submitted
     */
    clientOrderId?: string | undefined;
    /**
     * MIC code for the exchange
     */
    exchange?: string | undefined;
    /**
     * Execution id from the street
     */
    executionId?: string | undefined;
    /**
     * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
     */
    executionOnly?: boolean | undefined;
    /**
     * Max Length 100 characters. External system id provided by a client
     */
    externalId?: string | undefined;
    /**
     * The confirmation number associated with a mutual fund trade
     */
    fundConfirmationNumber?: string | undefined;
    /**
     * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
     */
    gatewayClientOrderId?: string | undefined;
    /**
     * If set to true, indicates the trade should be omitted from client billing
     */
    internalError?: boolean | undefined;
    /**
     * Set on penny-for-the-lot trades
     */
    isWriteoff?: boolean | undefined;
    /**
     * Repeated record containing information about the tax lots, if specified
     */
    lots?: Array<Lot> | undefined;
    /**
     * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
     */
    orderId?: string | undefined;
    /**
     * The price for the instrument that is prevailing in the market.
     */
    prevailingMarketPrice?: CancelTradeResponsePrevailingMarketPrice | null | undefined;
    /**
     * Information about any price adjustments applied to the security
     */
    priceAdjustmentRecord?: CancelTradeResponsePriceAdjustmentRecord | null | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    route?: string | undefined;
    /**
     * The special instructions for a trade
     */
    specialInstructions?: Array<string> | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the particular issue
     */
    symbolDescription?: string | undefined;
    /**
     * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
     */
    whenIssued?: boolean | undefined;
    /**
     * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
     */
    yieldRecords?: Array<YieldRecord> | undefined;
};
/**
 * A response for the cancel trade method.
 */
export type CancelTradeResponse = {
    /**
     * The trade that was canceled.
     */
    trade?: CancelTradeResponseTrade | null | undefined;
};
/** @internal */
export declare const CancelTradeResponseBrokerCapacity$inboundSchema: z.ZodType<CancelTradeResponseBrokerCapacityOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const CancelTradeResponseBrokerCapacity$outboundSchema: z.ZodType<CancelTradeResponseBrokerCapacityOpen, z.ZodTypeDef, CancelTradeResponseBrokerCapacityOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelTradeResponseBrokerCapacity$ {
    /** @deprecated use `CancelTradeResponseBrokerCapacity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelTradeResponseBrokerCapacityOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelTradeResponseBrokerCapacity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelTradeResponseBrokerCapacityOpen, z.ZodTypeDef, CancelTradeResponseBrokerCapacityOpen>;
}
/** @internal */
export declare const CancelTradeResponsePrevailingMarketPrice$inboundSchema: z.ZodType<CancelTradeResponsePrevailingMarketPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelTradeResponsePrevailingMarketPrice$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const CancelTradeResponsePrevailingMarketPrice$outboundSchema: z.ZodType<CancelTradeResponsePrevailingMarketPrice$Outbound, z.ZodTypeDef, CancelTradeResponsePrevailingMarketPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelTradeResponsePrevailingMarketPrice$ {
    /** @deprecated use `CancelTradeResponsePrevailingMarketPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelTradeResponsePrevailingMarketPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelTradeResponsePrevailingMarketPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelTradeResponsePrevailingMarketPrice$Outbound, z.ZodTypeDef, CancelTradeResponsePrevailingMarketPrice>;
    /** @deprecated use `CancelTradeResponsePrevailingMarketPrice$Outbound` instead. */
    type Outbound = CancelTradeResponsePrevailingMarketPrice$Outbound;
}
/** @internal */
export declare const CancelTradeResponsePriceAdjustmentAmount$inboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelTradeResponsePriceAdjustmentAmount$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const CancelTradeResponsePriceAdjustmentAmount$outboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentAmount$Outbound, z.ZodTypeDef, CancelTradeResponsePriceAdjustmentAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelTradeResponsePriceAdjustmentAmount$ {
    /** @deprecated use `CancelTradeResponsePriceAdjustmentAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelTradeResponsePriceAdjustmentAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentAmount$Outbound, z.ZodTypeDef, CancelTradeResponsePriceAdjustmentAmount>;
    /** @deprecated use `CancelTradeResponsePriceAdjustmentAmount$Outbound` instead. */
    type Outbound = CancelTradeResponsePriceAdjustmentAmount$Outbound;
}
/** @internal */
export declare const CancelTradeResponsePriceAdjustmentPercent$inboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentPercent, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelTradeResponsePriceAdjustmentPercent$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const CancelTradeResponsePriceAdjustmentPercent$outboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentPercent$Outbound, z.ZodTypeDef, CancelTradeResponsePriceAdjustmentPercent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelTradeResponsePriceAdjustmentPercent$ {
    /** @deprecated use `CancelTradeResponsePriceAdjustmentPercent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentPercent, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelTradeResponsePriceAdjustmentPercent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentPercent$Outbound, z.ZodTypeDef, CancelTradeResponsePriceAdjustmentPercent>;
    /** @deprecated use `CancelTradeResponsePriceAdjustmentPercent$Outbound` instead. */
    type Outbound = CancelTradeResponsePriceAdjustmentPercent$Outbound;
}
/** @internal */
export declare const CancelTradeResponsePriceAdjustmentType$inboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const CancelTradeResponsePriceAdjustmentType$outboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, CancelTradeResponsePriceAdjustmentTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelTradeResponsePriceAdjustmentType$ {
    /** @deprecated use `CancelTradeResponsePriceAdjustmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelTradeResponsePriceAdjustmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, CancelTradeResponsePriceAdjustmentTypeOpen>;
}
/** @internal */
export declare const CancelTradeResponsePriceAdjustmentRecord$inboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentRecord, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelTradeResponsePriceAdjustmentRecord$Outbound = {
    price_adjustment_amount?: CancelTradeResponsePriceAdjustmentAmount$Outbound | null | undefined;
    price_adjustment_percent?: CancelTradeResponsePriceAdjustmentPercent$Outbound | null | undefined;
    price_adjustment_type?: string | undefined;
};
/** @internal */
export declare const CancelTradeResponsePriceAdjustmentRecord$outboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentRecord$Outbound, z.ZodTypeDef, CancelTradeResponsePriceAdjustmentRecord>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelTradeResponsePriceAdjustmentRecord$ {
    /** @deprecated use `CancelTradeResponsePriceAdjustmentRecord$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentRecord, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelTradeResponsePriceAdjustmentRecord$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelTradeResponsePriceAdjustmentRecord$Outbound, z.ZodTypeDef, CancelTradeResponsePriceAdjustmentRecord>;
    /** @deprecated use `CancelTradeResponsePriceAdjustmentRecord$Outbound` instead. */
    type Outbound = CancelTradeResponsePriceAdjustmentRecord$Outbound;
}
/** @internal */
export declare const CancelTradeResponseTrade$inboundSchema: z.ZodType<CancelTradeResponseTrade, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelTradeResponseTrade$Outbound = {
    additional_instructions?: Array<string> | undefined;
    alternate_order_id?: string | undefined;
    booking_api_trade_allocation_id?: string | undefined;
    booking_api_trade_id?: string | undefined;
    broker?: string | undefined;
    broker_capacity?: string | undefined;
    client_memos?: Array<string> | undefined;
    client_order_id?: string | undefined;
    exchange?: string | undefined;
    execution_id?: string | undefined;
    execution_only?: boolean | undefined;
    external_id?: string | undefined;
    fund_confirmation_number?: string | undefined;
    gateway_client_order_id?: string | undefined;
    internal_error?: boolean | undefined;
    is_writeoff?: boolean | undefined;
    lots?: Array<Lot$Outbound> | undefined;
    order_id?: string | undefined;
    prevailing_market_price?: CancelTradeResponsePrevailingMarketPrice$Outbound | null | undefined;
    price_adjustment_record?: CancelTradeResponsePriceAdjustmentRecord$Outbound | null | undefined;
    route?: string | undefined;
    special_instructions?: Array<string> | undefined;
    symbol_description?: string | undefined;
    when_issued?: boolean | undefined;
    yield_records?: Array<YieldRecord$Outbound> | undefined;
};
/** @internal */
export declare const CancelTradeResponseTrade$outboundSchema: z.ZodType<CancelTradeResponseTrade$Outbound, z.ZodTypeDef, CancelTradeResponseTrade>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelTradeResponseTrade$ {
    /** @deprecated use `CancelTradeResponseTrade$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelTradeResponseTrade, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelTradeResponseTrade$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelTradeResponseTrade$Outbound, z.ZodTypeDef, CancelTradeResponseTrade>;
    /** @deprecated use `CancelTradeResponseTrade$Outbound` instead. */
    type Outbound = CancelTradeResponseTrade$Outbound;
}
/** @internal */
export declare const CancelTradeResponse$inboundSchema: z.ZodType<CancelTradeResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelTradeResponse$Outbound = {
    trade?: CancelTradeResponseTrade$Outbound | null | undefined;
};
/** @internal */
export declare const CancelTradeResponse$outboundSchema: z.ZodType<CancelTradeResponse$Outbound, z.ZodTypeDef, CancelTradeResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelTradeResponse$ {
    /** @deprecated use `CancelTradeResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelTradeResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelTradeResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelTradeResponse$Outbound, z.ZodTypeDef, CancelTradeResponse>;
    /** @deprecated use `CancelTradeResponse$Outbound` instead. */
    type Outbound = CancelTradeResponse$Outbound;
}
//# sourceMappingURL=canceltraderesponse.d.ts.map