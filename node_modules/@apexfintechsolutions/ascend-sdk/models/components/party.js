"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartyFormationDate$ = exports.PartyFormationDate$outboundSchema = exports.PartyFormationDate$inboundSchema = exports.PartyExemptCustomerReason$ = exports.PartyExemptCustomerReason$outboundSchema = exports.PartyExemptCustomerReason$inboundSchema = exports.PartyEntityType$ = exports.PartyEntityType$outboundSchema = exports.PartyEntityType$inboundSchema = exports.PartyEntityDueDiligence$ = exports.PartyEntityDueDiligence$outboundSchema = exports.PartyEntityDueDiligence$inboundSchema = exports.PartyNegativeNews$ = exports.PartyNegativeNews$outboundSchema = exports.PartyNegativeNews$inboundSchema = exports.PartyCorporateStructure$ = exports.PartyCorporateStructure$outboundSchema = exports.PartyCorporateStructure$inboundSchema = exports.PartyBusinessIndustrialClassification$ = exports.PartyBusinessIndustrialClassification$outboundSchema = exports.PartyBusinessIndustrialClassification$inboundSchema = exports.PartyTradeConfirmationDeliveryPreference = exports.PartyTaxDocumentDeliveryPreference = exports.PartyStatementDeliveryPreference = exports.PartyRelationType = exports.PartyProxyDeliveryPreference = exports.PartyProspectusDeliveryPreference = exports.PartyLegalNaturalPersonWithholdingState = exports.PartyLegalNaturalPersonUsTinStatus = exports.PartyLegalNaturalPersonTaxpayerCertificationState = exports.PartyLegalNaturalPersonReportingEligibility = exports.PartyLegalNaturalPersonIrsFormType = exports.PartyLegalNaturalPersonFederalTaxClassification = exports.PartyLegalNaturalPersonTaxIdType = exports.PartyResidencyStatus = exports.PartyNameSuffix = exports.PartyMaritalStatus = exports.PartyLegalNaturalPersonType = exports.PartyEmploymentStatus = exports.PartyWithholdingState = exports.PartyUsTinStatus = exports.PartyTaxpayerCertificationState = exports.PartyReportingEligibility = exports.PartyIrsFormType = exports.PartyFederalTaxClassification = exports.PartyTaxIdType = exports.PartyExemptCustomerReason = exports.PartyEntityType = exports.PartyCorporateStructure = exports.PartyBusinessIndustrialClassification = void 0;
exports.PartyDeathDate$outboundSchema = exports.PartyDeathDate$inboundSchema = exports.PartyBirthDate$ = exports.PartyBirthDate$outboundSchema = exports.PartyBirthDate$inboundSchema = exports.PartyLegalEntity$ = exports.PartyLegalEntity$outboundSchema = exports.PartyLegalEntity$inboundSchema = exports.PartyTaxProfile$ = exports.PartyTaxProfile$outboundSchema = exports.PartyTaxProfile$inboundSchema = exports.PartyWithholdingState$ = exports.PartyWithholdingState$outboundSchema = exports.PartyWithholdingState$inboundSchema = exports.PartyUsTinStatus$ = exports.PartyUsTinStatus$outboundSchema = exports.PartyUsTinStatus$inboundSchema = exports.PartyTaxpayerCertificationState$ = exports.PartyTaxpayerCertificationState$outboundSchema = exports.PartyTaxpayerCertificationState$inboundSchema = exports.PartyTaxCertificationDate$ = exports.PartyTaxCertificationDate$outboundSchema = exports.PartyTaxCertificationDate$inboundSchema = exports.PartyReportingEligibility$ = exports.PartyReportingEligibility$outboundSchema = exports.PartyReportingEligibility$inboundSchema = exports.PartyIrsFormType$ = exports.PartyIrsFormType$outboundSchema = exports.PartyIrsFormType$inboundSchema = exports.PartyFirstBNoticeDate$ = exports.PartyFirstBNoticeDate$outboundSchema = exports.PartyFirstBNoticeDate$inboundSchema = exports.PartyFederalTaxClassification$ = exports.PartyFederalTaxClassification$outboundSchema = exports.PartyFederalTaxClassification$inboundSchema = exports.PartyCNoticeDate$ = exports.PartyCNoticeDate$outboundSchema = exports.PartyCNoticeDate$inboundSchema = exports.PartyTaxIdType$ = exports.PartyTaxIdType$outboundSchema = exports.PartyTaxIdType$inboundSchema = exports.PartyLegalAddress$ = exports.PartyLegalAddress$outboundSchema = exports.PartyLegalAddress$inboundSchema = exports.PartyLargeTrader$ = exports.PartyLargeTrader$outboundSchema = exports.PartyLargeTrader$inboundSchema = exports.PartyEffectiveDate$ = exports.PartyEffectiveDate$outboundSchema = exports.PartyEffectiveDate$inboundSchema = void 0;
exports.PartyNaturalPersonFdd$inboundSchema = exports.PartyOtherSourcesOfWealth$ = exports.PartyOtherSourcesOfWealth$outboundSchema = exports.PartyOtherSourcesOfWealth$inboundSchema = exports.PartyLegalNaturalPersonNegativeNews$ = exports.PartyLegalNaturalPersonNegativeNews$outboundSchema = exports.PartyLegalNaturalPersonNegativeNews$inboundSchema = exports.PartyCustomerReferralSource$ = exports.PartyCustomerReferralSource$outboundSchema = exports.PartyCustomerReferralSource$inboundSchema = exports.PartyNameSuffix$ = exports.PartyNameSuffix$outboundSchema = exports.PartyNameSuffix$inboundSchema = exports.PartyMaritalStatus$ = exports.PartyMaritalStatus$outboundSchema = exports.PartyMaritalStatus$inboundSchema = exports.PartyLegalNaturalPersonLargeTrader$ = exports.PartyLegalNaturalPersonLargeTrader$outboundSchema = exports.PartyLegalNaturalPersonLargeTrader$inboundSchema = exports.PartyLegalNaturalPersonEffectiveDate$ = exports.PartyLegalNaturalPersonEffectiveDate$outboundSchema = exports.PartyLegalNaturalPersonEffectiveDate$inboundSchema = exports.PartyIdentityVerificationResult$ = exports.PartyIdentityVerificationResult$outboundSchema = exports.PartyIdentityVerificationResult$inboundSchema = exports.PartyExecutionDate$ = exports.PartyExecutionDate$outboundSchema = exports.PartyExecutionDate$inboundSchema = exports.PartyForeignIdentification$ = exports.PartyForeignIdentification$outboundSchema = exports.PartyForeignIdentification$inboundSchema = exports.PartyLegalNaturalPersonType$ = exports.PartyLegalNaturalPersonType$outboundSchema = exports.PartyLegalNaturalPersonType$inboundSchema = exports.PartyIssueDate$ = exports.PartyIssueDate$outboundSchema = exports.PartyIssueDate$inboundSchema = exports.PartyExpirationDate$ = exports.PartyExpirationDate$outboundSchema = exports.PartyExpirationDate$inboundSchema = exports.PartyEmployment$ = exports.PartyEmployment$outboundSchema = exports.PartyEmployment$inboundSchema = exports.PartyEmploymentStatus$ = exports.PartyEmploymentStatus$outboundSchema = exports.PartyEmploymentStatus$inboundSchema = exports.PartyEmployerAddress$ = exports.PartyEmployerAddress$outboundSchema = exports.PartyEmployerAddress$inboundSchema = exports.PartyDeathDate$ = void 0;
exports.PartyMailingAddress$ = exports.PartyMailingAddress$outboundSchema = exports.PartyMailingAddress$inboundSchema = exports.PartyLegalNaturalPerson$ = exports.PartyLegalNaturalPerson$outboundSchema = exports.PartyLegalNaturalPerson$inboundSchema = exports.PartyLegalNaturalPersonTaxProfile$ = exports.PartyLegalNaturalPersonTaxProfile$outboundSchema = exports.PartyLegalNaturalPersonTaxProfile$inboundSchema = exports.PartyLegalNaturalPersonWithholdingState$ = exports.PartyLegalNaturalPersonWithholdingState$outboundSchema = exports.PartyLegalNaturalPersonWithholdingState$inboundSchema = exports.PartyLegalNaturalPersonUsTinStatus$ = exports.PartyLegalNaturalPersonUsTinStatus$outboundSchema = exports.PartyLegalNaturalPersonUsTinStatus$inboundSchema = exports.PartyLegalNaturalPersonTaxpayerCertificationState$ = exports.PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema = exports.PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema = exports.PartyLegalNaturalPersonTaxCertificationDate$ = exports.PartyLegalNaturalPersonTaxCertificationDate$outboundSchema = exports.PartyLegalNaturalPersonTaxCertificationDate$inboundSchema = exports.PartyLegalNaturalPersonReportingEligibility$ = exports.PartyLegalNaturalPersonReportingEligibility$outboundSchema = exports.PartyLegalNaturalPersonReportingEligibility$inboundSchema = exports.PartyLegalNaturalPersonIrsFormType$ = exports.PartyLegalNaturalPersonIrsFormType$outboundSchema = exports.PartyLegalNaturalPersonIrsFormType$inboundSchema = exports.PartyLegalNaturalPersonFirstBNoticeDate$ = exports.PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema = exports.PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema = exports.PartyLegalNaturalPersonFederalTaxClassification$ = exports.PartyLegalNaturalPersonFederalTaxClassification$outboundSchema = exports.PartyLegalNaturalPersonFederalTaxClassification$inboundSchema = exports.PartyLegalNaturalPersonCNoticeDate$ = exports.PartyLegalNaturalPersonCNoticeDate$outboundSchema = exports.PartyLegalNaturalPersonCNoticeDate$inboundSchema = exports.PartyLegalNaturalPersonTaxIdType$ = exports.PartyLegalNaturalPersonTaxIdType$outboundSchema = exports.PartyLegalNaturalPersonTaxIdType$inboundSchema = exports.PartyPersonalAddress$ = exports.PartyPersonalAddress$outboundSchema = exports.PartyPersonalAddress$inboundSchema = exports.PartyNonCitizenResidency$ = exports.PartyNonCitizenResidency$outboundSchema = exports.PartyNonCitizenResidency$inboundSchema = exports.PartyResidencyStatus$ = exports.PartyResidencyStatus$outboundSchema = exports.PartyResidencyStatus$inboundSchema = exports.PartyNaturalPersonFdd$ = exports.PartyNaturalPersonFdd$outboundSchema = void 0;
exports.Party$ = exports.Party$outboundSchema = exports.Party$inboundSchema = exports.PartyTradeConfirmationDeliveryPreference$ = exports.PartyTradeConfirmationDeliveryPreference$outboundSchema = exports.PartyTradeConfirmationDeliveryPreference$inboundSchema = exports.PartyTaxDocumentDeliveryPreference$ = exports.PartyTaxDocumentDeliveryPreference$outboundSchema = exports.PartyTaxDocumentDeliveryPreference$inboundSchema = exports.PartyStatementDeliveryPreference$ = exports.PartyStatementDeliveryPreference$outboundSchema = exports.PartyStatementDeliveryPreference$inboundSchema = exports.PartyRelationType$ = exports.PartyRelationType$outboundSchema = exports.PartyRelationType$inboundSchema = exports.PartyProxyDeliveryPreference$ = exports.PartyProxyDeliveryPreference$outboundSchema = exports.PartyProxyDeliveryPreference$inboundSchema = exports.PartyProspectusDeliveryPreference$ = exports.PartyProspectusDeliveryPreference$outboundSchema = exports.PartyProspectusDeliveryPreference$inboundSchema = exports.PartyPhoneNumber$ = exports.PartyPhoneNumber$outboundSchema = exports.PartyPhoneNumber$inboundSchema = exports.PartyShortCode$ = exports.PartyShortCode$outboundSchema = exports.PartyShortCode$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
var PartyBusinessIndustrialClassification;
(function (PartyBusinessIndustrialClassification) {
    PartyBusinessIndustrialClassification["BusinessIndustrialClassificationUnspecified"] = "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED";
    PartyBusinessIndustrialClassification["AgricultureForestryAndFishing"] = "AGRICULTURE_FORESTRY_AND_FISHING";
    PartyBusinessIndustrialClassification["Mining"] = "MINING";
    PartyBusinessIndustrialClassification["Construction"] = "CONSTRUCTION";
    PartyBusinessIndustrialClassification["Manufacturing"] = "MANUFACTURING";
    PartyBusinessIndustrialClassification["TransportationCommunicationsElectricGasAndSanitaryServices"] = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES";
    PartyBusinessIndustrialClassification["WholesaleTrade"] = "WHOLESALE_TRADE";
    PartyBusinessIndustrialClassification["RetailTrade"] = "RETAIL_TRADE";
    PartyBusinessIndustrialClassification["FinanceInsuranceAndRealEstate"] = "FINANCE_INSURANCE_AND_REAL_ESTATE";
    PartyBusinessIndustrialClassification["Services"] = "SERVICES";
    PartyBusinessIndustrialClassification["PublicAdministration"] = "PUBLIC_ADMINISTRATION";
})(PartyBusinessIndustrialClassification || (exports.PartyBusinessIndustrialClassification = PartyBusinessIndustrialClassification = {}));
/**
 * Corporate structure of the entity.
 */
var PartyCorporateStructure;
(function (PartyCorporateStructure) {
    PartyCorporateStructure["EntityCorporateStructureUnspecified"] = "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED";
    PartyCorporateStructure["CorporationCCorp"] = "CORPORATION_C_CORP";
    PartyCorporateStructure["CorporationSCorp"] = "CORPORATION_S_CORP";
    PartyCorporateStructure["CorporationBCorp"] = "CORPORATION_B_CORP";
    PartyCorporateStructure["CorporationNonprofit"] = "CORPORATION_NONPROFIT";
})(PartyCorporateStructure || (exports.PartyCorporateStructure = PartyCorporateStructure = {}));
/**
 * The entity type.
 */
var PartyEntityType;
(function (PartyEntityType) {
    PartyEntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    PartyEntityType["Corporation"] = "CORPORATION";
    PartyEntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    PartyEntityType["Partnership"] = "PARTNERSHIP";
    PartyEntityType["Trust"] = "TRUST";
    PartyEntityType["Estate"] = "ESTATE";
})(PartyEntityType || (exports.PartyEntityType = PartyEntityType = {}));
/**
 * The reason the customer is exempt from verifying beneficial owners, if applicable.
 */
var PartyExemptCustomerReason;
(function (PartyExemptCustomerReason) {
    PartyExemptCustomerReason["ExemptReasonUnspecified"] = "EXEMPT_REASON_UNSPECIFIED";
    PartyExemptCustomerReason["RegulatedFinancialInstitution"] = "REGULATED_FINANCIAL_INSTITUTION";
    PartyExemptCustomerReason["DepartmentOrAgencyOfFederalStateOrSubdivision"] = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION";
    PartyExemptCustomerReason["NonBankListedEntity"] = "NON_BANK_LISTED_ENTITY";
    PartyExemptCustomerReason["Section12SecuritiesExchangeAct1934Or15D"] = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D";
    PartyExemptCustomerReason["Section3InvestmentCompanyAct1940"] = "SECTION_3_INVESTMENT_COMPANY_ACT_1940";
    PartyExemptCustomerReason["Section202AInvestmentAdvisorsAct1940"] = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940";
    PartyExemptCustomerReason["Section3SecuritiesExchangeAct1934Section6Or17A"] = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A";
    PartyExemptCustomerReason["AnyOtherSecuritiesExchangeAct1934"] = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934";
    PartyExemptCustomerReason["CommodityFuturesTradingCommissionRegistered"] = "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED";
    PartyExemptCustomerReason["PublicAccountingFirmSection102SarbanesOxley"] = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY";
    PartyExemptCustomerReason["StateRegulatedInsuranceCompany"] = "STATE_REGULATED_INSURANCE_COMPANY";
})(PartyExemptCustomerReason || (exports.PartyExemptCustomerReason = PartyExemptCustomerReason = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
var PartyTaxIdType;
(function (PartyTaxIdType) {
    PartyTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    PartyTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    PartyTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    PartyTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(PartyTaxIdType || (exports.PartyTaxIdType = PartyTaxIdType = {}));
/**
 * Federal tax classification.
 */
var PartyFederalTaxClassification;
(function (PartyFederalTaxClassification) {
    PartyFederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    PartyFederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    PartyFederalTaxClassification["Partnership"] = "PARTNERSHIP";
    PartyFederalTaxClassification["CCorporation"] = "C_CORPORATION";
    PartyFederalTaxClassification["SCorporation"] = "S_CORPORATION";
    PartyFederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    PartyFederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    PartyFederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    PartyFederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    PartyFederalTaxClassification["Other"] = "OTHER";
})(PartyFederalTaxClassification || (exports.PartyFederalTaxClassification = PartyFederalTaxClassification = {}));
/**
 * IRS form type.
 */
var PartyIrsFormType;
(function (PartyIrsFormType) {
    PartyIrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    PartyIrsFormType["W9"] = "W_9";
    PartyIrsFormType["W8Ben"] = "W_8BEN";
})(PartyIrsFormType || (exports.PartyIrsFormType = PartyIrsFormType = {}));
/**
 * Tax reporting eligibility.
 */
var PartyReportingEligibility;
(function (PartyReportingEligibility) {
    PartyReportingEligibility["TaxReportingEligibilityUnspecified"] = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED";
    PartyReportingEligibility["Eligible"] = "ELIGIBLE";
    PartyReportingEligibility["Ineligible"] = "INELIGIBLE";
})(PartyReportingEligibility || (exports.PartyReportingEligibility = PartyReportingEligibility = {}));
/**
 * Taxpayer certification status.
 */
var PartyTaxpayerCertificationState;
(function (PartyTaxpayerCertificationState) {
    PartyTaxpayerCertificationState["TaxpayerCertificationStateUnspecified"] = "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED";
    PartyTaxpayerCertificationState["Certified"] = "CERTIFIED";
    PartyTaxpayerCertificationState["Uncertified"] = "UNCERTIFIED";
})(PartyTaxpayerCertificationState || (exports.PartyTaxpayerCertificationState = PartyTaxpayerCertificationState = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
var PartyUsTinStatus;
(function (PartyUsTinStatus) {
    PartyUsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    PartyUsTinStatus["Passing"] = "PASSING";
    PartyUsTinStatus["Failing"] = "FAILING";
})(PartyUsTinStatus || (exports.PartyUsTinStatus = PartyUsTinStatus = {}));
/**
 * B/C Notice status.
 */
var PartyWithholdingState;
(function (PartyWithholdingState) {
    PartyWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    PartyWithholdingState["FirstBNoticeReceived"] = "FIRST_B_NOTICE_RECEIVED";
    PartyWithholdingState["SecondBNoticeReceived"] = "SECOND_B_NOTICE_RECEIVED";
    PartyWithholdingState["CNoticeReceived"] = "C_NOTICE_RECEIVED";
    PartyWithholdingState["CNoticeIndicatedByCustomer"] = "C_NOTICE_INDICATED_BY_CUSTOMER";
})(PartyWithholdingState || (exports.PartyWithholdingState = PartyWithholdingState = {}));
/**
 * Classifies in what capacity (or if) the underlying natural person holds a job
 */
var PartyEmploymentStatus;
(function (PartyEmploymentStatus) {
    PartyEmploymentStatus["StatusUnspecified"] = "STATUS_UNSPECIFIED";
    PartyEmploymentStatus["Employed"] = "EMPLOYED";
    PartyEmploymentStatus["SelfEmployed"] = "SELF_EMPLOYED";
    PartyEmploymentStatus["Unemployed"] = "UNEMPLOYED";
    PartyEmploymentStatus["Retired"] = "RETIRED";
    PartyEmploymentStatus["Student"] = "STUDENT";
})(PartyEmploymentStatus || (exports.PartyEmploymentStatus = PartyEmploymentStatus = {}));
/**
 * Identification type
 */
var PartyLegalNaturalPersonType;
(function (PartyLegalNaturalPersonType) {
    PartyLegalNaturalPersonType["IdentificationTypeUnspecified"] = "IDENTIFICATION_TYPE_UNSPECIFIED";
    PartyLegalNaturalPersonType["Passport"] = "PASSPORT";
    PartyLegalNaturalPersonType["NationalId"] = "NATIONAL_ID";
    PartyLegalNaturalPersonType["DriversLicense"] = "DRIVERS_LICENSE";
})(PartyLegalNaturalPersonType || (exports.PartyLegalNaturalPersonType = PartyLegalNaturalPersonType = {}));
/**
 * The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
 */
var PartyMaritalStatus;
(function (PartyMaritalStatus) {
    PartyMaritalStatus["MaritalStatusUnspecified"] = "MARITAL_STATUS_UNSPECIFIED";
    PartyMaritalStatus["Single"] = "SINGLE";
    PartyMaritalStatus["Married"] = "MARRIED";
    PartyMaritalStatus["Divorced"] = "DIVORCED";
    PartyMaritalStatus["Widowed"] = "WIDOWED";
})(PartyMaritalStatus || (exports.PartyMaritalStatus = PartyMaritalStatus = {}));
/**
 * The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
 */
var PartyNameSuffix;
(function (PartyNameSuffix) {
    PartyNameSuffix["NameSuffixUnspecified"] = "NAME_SUFFIX_UNSPECIFIED";
    PartyNameSuffix["Sr"] = "SR";
    PartyNameSuffix["Jr"] = "JR";
    PartyNameSuffix["Iii"] = "III";
    PartyNameSuffix["Iv"] = "IV";
    PartyNameSuffix["V"] = "V";
})(PartyNameSuffix || (exports.PartyNameSuffix = PartyNameSuffix = {}));
var PartyResidencyStatus;
(function (PartyResidencyStatus) {
    PartyResidencyStatus["ResidencyStatusUnspecified"] = "RESIDENCY_STATUS_UNSPECIFIED";
    PartyResidencyStatus["UsPermanentResident"] = "US_PERMANENT_RESIDENT";
    PartyResidencyStatus["UsTemporaryResident"] = "US_TEMPORARY_RESIDENT";
    PartyResidencyStatus["UsNonResident"] = "US_NON_RESIDENT";
})(PartyResidencyStatus || (exports.PartyResidencyStatus = PartyResidencyStatus = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
var PartyLegalNaturalPersonTaxIdType;
(function (PartyLegalNaturalPersonTaxIdType) {
    PartyLegalNaturalPersonTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    PartyLegalNaturalPersonTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    PartyLegalNaturalPersonTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    PartyLegalNaturalPersonTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(PartyLegalNaturalPersonTaxIdType || (exports.PartyLegalNaturalPersonTaxIdType = PartyLegalNaturalPersonTaxIdType = {}));
/**
 * Federal tax classification.
 */
var PartyLegalNaturalPersonFederalTaxClassification;
(function (PartyLegalNaturalPersonFederalTaxClassification) {
    PartyLegalNaturalPersonFederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    PartyLegalNaturalPersonFederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    PartyLegalNaturalPersonFederalTaxClassification["Partnership"] = "PARTNERSHIP";
    PartyLegalNaturalPersonFederalTaxClassification["CCorporation"] = "C_CORPORATION";
    PartyLegalNaturalPersonFederalTaxClassification["SCorporation"] = "S_CORPORATION";
    PartyLegalNaturalPersonFederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    PartyLegalNaturalPersonFederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    PartyLegalNaturalPersonFederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    PartyLegalNaturalPersonFederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    PartyLegalNaturalPersonFederalTaxClassification["Other"] = "OTHER";
})(PartyLegalNaturalPersonFederalTaxClassification || (exports.PartyLegalNaturalPersonFederalTaxClassification = PartyLegalNaturalPersonFederalTaxClassification = {}));
/**
 * IRS form type.
 */
var PartyLegalNaturalPersonIrsFormType;
(function (PartyLegalNaturalPersonIrsFormType) {
    PartyLegalNaturalPersonIrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    PartyLegalNaturalPersonIrsFormType["W9"] = "W_9";
    PartyLegalNaturalPersonIrsFormType["W8Ben"] = "W_8BEN";
})(PartyLegalNaturalPersonIrsFormType || (exports.PartyLegalNaturalPersonIrsFormType = PartyLegalNaturalPersonIrsFormType = {}));
/**
 * Tax reporting eligibility.
 */
var PartyLegalNaturalPersonReportingEligibility;
(function (PartyLegalNaturalPersonReportingEligibility) {
    PartyLegalNaturalPersonReportingEligibility["TaxReportingEligibilityUnspecified"] = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED";
    PartyLegalNaturalPersonReportingEligibility["Eligible"] = "ELIGIBLE";
    PartyLegalNaturalPersonReportingEligibility["Ineligible"] = "INELIGIBLE";
})(PartyLegalNaturalPersonReportingEligibility || (exports.PartyLegalNaturalPersonReportingEligibility = PartyLegalNaturalPersonReportingEligibility = {}));
/**
 * Taxpayer certification status.
 */
var PartyLegalNaturalPersonTaxpayerCertificationState;
(function (PartyLegalNaturalPersonTaxpayerCertificationState) {
    PartyLegalNaturalPersonTaxpayerCertificationState["TaxpayerCertificationStateUnspecified"] = "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED";
    PartyLegalNaturalPersonTaxpayerCertificationState["Certified"] = "CERTIFIED";
    PartyLegalNaturalPersonTaxpayerCertificationState["Uncertified"] = "UNCERTIFIED";
})(PartyLegalNaturalPersonTaxpayerCertificationState || (exports.PartyLegalNaturalPersonTaxpayerCertificationState = PartyLegalNaturalPersonTaxpayerCertificationState = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
var PartyLegalNaturalPersonUsTinStatus;
(function (PartyLegalNaturalPersonUsTinStatus) {
    PartyLegalNaturalPersonUsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    PartyLegalNaturalPersonUsTinStatus["Passing"] = "PASSING";
    PartyLegalNaturalPersonUsTinStatus["Failing"] = "FAILING";
})(PartyLegalNaturalPersonUsTinStatus || (exports.PartyLegalNaturalPersonUsTinStatus = PartyLegalNaturalPersonUsTinStatus = {}));
/**
 * B/C Notice status.
 */
var PartyLegalNaturalPersonWithholdingState;
(function (PartyLegalNaturalPersonWithholdingState) {
    PartyLegalNaturalPersonWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    PartyLegalNaturalPersonWithholdingState["FirstBNoticeReceived"] = "FIRST_B_NOTICE_RECEIVED";
    PartyLegalNaturalPersonWithholdingState["SecondBNoticeReceived"] = "SECOND_B_NOTICE_RECEIVED";
    PartyLegalNaturalPersonWithholdingState["CNoticeReceived"] = "C_NOTICE_RECEIVED";
    PartyLegalNaturalPersonWithholdingState["CNoticeIndicatedByCustomer"] = "C_NOTICE_INDICATED_BY_CUSTOMER";
})(PartyLegalNaturalPersonWithholdingState || (exports.PartyLegalNaturalPersonWithholdingState = PartyLegalNaturalPersonWithholdingState = {}));
/**
 * Delivery method instruction for prospectuses for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
var PartyProspectusDeliveryPreference;
(function (PartyProspectusDeliveryPreference) {
    PartyProspectusDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyProspectusDeliveryPreference["Digital"] = "DIGITAL";
    PartyProspectusDeliveryPreference["Physical"] = "PHYSICAL";
    PartyProspectusDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyProspectusDeliveryPreference || (exports.PartyProspectusDeliveryPreference = PartyProspectusDeliveryPreference = {}));
/**
 * Delivery method instruction for proxy voting for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
var PartyProxyDeliveryPreference;
(function (PartyProxyDeliveryPreference) {
    PartyProxyDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyProxyDeliveryPreference["Digital"] = "DIGITAL";
    PartyProxyDeliveryPreference["Physical"] = "PHYSICAL";
    PartyProxyDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyProxyDeliveryPreference || (exports.PartyProxyDeliveryPreference = PartyProxyDeliveryPreference = {}));
/**
 * Conveys how a person is related to account; Located on each account Party record; Examples are `PRIMARY_OWNER`, `JOINT_OWNER`, `EXECUTOR`, etc.
 */
var PartyRelationType;
(function (PartyRelationType) {
    PartyRelationType["PartyRelationTypeUnspecified"] = "PARTY_RELATION_TYPE_UNSPECIFIED";
    PartyRelationType["PrimaryOwner"] = "PRIMARY_OWNER";
    PartyRelationType["JointOwner"] = "JOINT_OWNER";
    PartyRelationType["Custodian"] = "CUSTODIAN";
    PartyRelationType["Executor"] = "EXECUTOR";
    PartyRelationType["AuthorizedSigner"] = "AUTHORIZED_SIGNER";
    PartyRelationType["BeneficialOwner"] = "BENEFICIAL_OWNER";
    PartyRelationType["ControlPerson"] = "CONTROL_PERSON";
    PartyRelationType["AuthorizedRepresentative"] = "AUTHORIZED_REPRESENTATIVE";
    PartyRelationType["Trustee"] = "TRUSTEE";
    PartyRelationType["AuthTrusteeRep"] = "AUTH_TRUSTEE_REP";
})(PartyRelationType || (exports.PartyRelationType = PartyRelationType = {}));
/**
 * Delivery method instruction for account statements for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
var PartyStatementDeliveryPreference;
(function (PartyStatementDeliveryPreference) {
    PartyStatementDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyStatementDeliveryPreference["Digital"] = "DIGITAL";
    PartyStatementDeliveryPreference["Physical"] = "PHYSICAL";
    PartyStatementDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyStatementDeliveryPreference || (exports.PartyStatementDeliveryPreference = PartyStatementDeliveryPreference = {}));
/**
 * Delivery method instruction for tax documents for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated; Per regulation, selected tax forms will be mailed by regulation regardless of this setting
 */
var PartyTaxDocumentDeliveryPreference;
(function (PartyTaxDocumentDeliveryPreference) {
    PartyTaxDocumentDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyTaxDocumentDeliveryPreference["Digital"] = "DIGITAL";
    PartyTaxDocumentDeliveryPreference["Physical"] = "PHYSICAL";
    PartyTaxDocumentDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyTaxDocumentDeliveryPreference || (exports.PartyTaxDocumentDeliveryPreference = PartyTaxDocumentDeliveryPreference = {}));
/**
 * Delivery method instruction for trade confirmations for a given Party record; Can be `DIGITAL`, `PHYSICAL`, `SUPPRESS`; Defaults to `DIGITAL` on account creation but may be updated
 */
var PartyTradeConfirmationDeliveryPreference;
(function (PartyTradeConfirmationDeliveryPreference) {
    PartyTradeConfirmationDeliveryPreference["DeliveryPreferenceUnspecified"] = "DELIVERY_PREFERENCE_UNSPECIFIED";
    PartyTradeConfirmationDeliveryPreference["Digital"] = "DIGITAL";
    PartyTradeConfirmationDeliveryPreference["Physical"] = "PHYSICAL";
    PartyTradeConfirmationDeliveryPreference["Suppress"] = "SUPPRESS";
})(PartyTradeConfirmationDeliveryPreference || (exports.PartyTradeConfirmationDeliveryPreference = PartyTradeConfirmationDeliveryPreference = {}));
/** @internal */
exports.PartyBusinessIndustrialClassification$inboundSchema = z
    .union([
    z.nativeEnum(PartyBusinessIndustrialClassification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyBusinessIndustrialClassification$outboundSchema = z.union([
    z.nativeEnum(PartyBusinessIndustrialClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyBusinessIndustrialClassification$;
(function (PartyBusinessIndustrialClassification$) {
    /** @deprecated use `PartyBusinessIndustrialClassification$inboundSchema` instead. */
    PartyBusinessIndustrialClassification$.inboundSchema = exports.PartyBusinessIndustrialClassification$inboundSchema;
    /** @deprecated use `PartyBusinessIndustrialClassification$outboundSchema` instead. */
    PartyBusinessIndustrialClassification$.outboundSchema = exports.PartyBusinessIndustrialClassification$outboundSchema;
})(PartyBusinessIndustrialClassification$ || (exports.PartyBusinessIndustrialClassification$ = PartyBusinessIndustrialClassification$ = {}));
/** @internal */
exports.PartyCorporateStructure$inboundSchema = z
    .union([
    z.nativeEnum(PartyCorporateStructure),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyCorporateStructure$outboundSchema = z.union([
    z.nativeEnum(PartyCorporateStructure),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyCorporateStructure$;
(function (PartyCorporateStructure$) {
    /** @deprecated use `PartyCorporateStructure$inboundSchema` instead. */
    PartyCorporateStructure$.inboundSchema = exports.PartyCorporateStructure$inboundSchema;
    /** @deprecated use `PartyCorporateStructure$outboundSchema` instead. */
    PartyCorporateStructure$.outboundSchema = exports.PartyCorporateStructure$outboundSchema;
})(PartyCorporateStructure$ || (exports.PartyCorporateStructure$ = PartyCorporateStructure$ = {}));
/** @internal */
exports.PartyNegativeNews$inboundSchema = z.object({
    negative_news_against_related_parties: z.boolean().optional(),
    negative_news_against_related_parties_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "negative_news_against_related_parties": "negativeNewsAgainstRelatedParties",
        "negative_news_against_related_parties_description": "negativeNewsAgainstRelatedPartiesDescription",
    });
});
/** @internal */
exports.PartyNegativeNews$outboundSchema = z.object({
    negativeNewsAgainstRelatedParties: z.boolean().optional(),
    negativeNewsAgainstRelatedPartiesDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        negativeNewsAgainstRelatedParties: "negative_news_against_related_parties",
        negativeNewsAgainstRelatedPartiesDescription: "negative_news_against_related_parties_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyNegativeNews$;
(function (PartyNegativeNews$) {
    /** @deprecated use `PartyNegativeNews$inboundSchema` instead. */
    PartyNegativeNews$.inboundSchema = exports.PartyNegativeNews$inboundSchema;
    /** @deprecated use `PartyNegativeNews$outboundSchema` instead. */
    PartyNegativeNews$.outboundSchema = exports.PartyNegativeNews$outboundSchema;
})(PartyNegativeNews$ || (exports.PartyNegativeNews$ = PartyNegativeNews$ = {}));
/** @internal */
exports.PartyEntityDueDiligence$inboundSchema = z.object({
    entity_issues_bearer_shares: z.boolean().optional(),
    negative_news: z.nullable(z.lazy(() => exports.PartyNegativeNews$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "entity_issues_bearer_shares": "entityIssuesBearerShares",
        "negative_news": "negativeNews",
    });
});
/** @internal */
exports.PartyEntityDueDiligence$outboundSchema = z.object({
    entityIssuesBearerShares: z.boolean().optional(),
    negativeNews: z.nullable(z.lazy(() => exports.PartyNegativeNews$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        entityIssuesBearerShares: "entity_issues_bearer_shares",
        negativeNews: "negative_news",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyEntityDueDiligence$;
(function (PartyEntityDueDiligence$) {
    /** @deprecated use `PartyEntityDueDiligence$inboundSchema` instead. */
    PartyEntityDueDiligence$.inboundSchema = exports.PartyEntityDueDiligence$inboundSchema;
    /** @deprecated use `PartyEntityDueDiligence$outboundSchema` instead. */
    PartyEntityDueDiligence$.outboundSchema = exports.PartyEntityDueDiligence$outboundSchema;
})(PartyEntityDueDiligence$ || (exports.PartyEntityDueDiligence$ = PartyEntityDueDiligence$ = {}));
/** @internal */
exports.PartyEntityType$inboundSchema = z
    .union([
    z.nativeEnum(PartyEntityType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyEntityType$outboundSchema = z.union([
    z.nativeEnum(PartyEntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyEntityType$;
(function (PartyEntityType$) {
    /** @deprecated use `PartyEntityType$inboundSchema` instead. */
    PartyEntityType$.inboundSchema = exports.PartyEntityType$inboundSchema;
    /** @deprecated use `PartyEntityType$outboundSchema` instead. */
    PartyEntityType$.outboundSchema = exports.PartyEntityType$outboundSchema;
})(PartyEntityType$ || (exports.PartyEntityType$ = PartyEntityType$ = {}));
/** @internal */
exports.PartyExemptCustomerReason$inboundSchema = z
    .union([
    z.nativeEnum(PartyExemptCustomerReason),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyExemptCustomerReason$outboundSchema = z.union([
    z.nativeEnum(PartyExemptCustomerReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyExemptCustomerReason$;
(function (PartyExemptCustomerReason$) {
    /** @deprecated use `PartyExemptCustomerReason$inboundSchema` instead. */
    PartyExemptCustomerReason$.inboundSchema = exports.PartyExemptCustomerReason$inboundSchema;
    /** @deprecated use `PartyExemptCustomerReason$outboundSchema` instead. */
    PartyExemptCustomerReason$.outboundSchema = exports.PartyExemptCustomerReason$outboundSchema;
})(PartyExemptCustomerReason$ || (exports.PartyExemptCustomerReason$ = PartyExemptCustomerReason$ = {}));
/** @internal */
exports.PartyFormationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyFormationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyFormationDate$;
(function (PartyFormationDate$) {
    /** @deprecated use `PartyFormationDate$inboundSchema` instead. */
    PartyFormationDate$.inboundSchema = exports.PartyFormationDate$inboundSchema;
    /** @deprecated use `PartyFormationDate$outboundSchema` instead. */
    PartyFormationDate$.outboundSchema = exports.PartyFormationDate$outboundSchema;
})(PartyFormationDate$ || (exports.PartyFormationDate$ = PartyFormationDate$ = {}));
/** @internal */
exports.PartyEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyEffectiveDate$;
(function (PartyEffectiveDate$) {
    /** @deprecated use `PartyEffectiveDate$inboundSchema` instead. */
    PartyEffectiveDate$.inboundSchema = exports.PartyEffectiveDate$inboundSchema;
    /** @deprecated use `PartyEffectiveDate$outboundSchema` instead. */
    PartyEffectiveDate$.outboundSchema = exports.PartyEffectiveDate$outboundSchema;
})(PartyEffectiveDate$ || (exports.PartyEffectiveDate$ = PartyEffectiveDate$ = {}));
/** @internal */
exports.PartyLargeTrader$inboundSchema = z.object({
    effective_date: z.nullable(z.lazy(() => exports.PartyEffectiveDate$inboundSchema))
        .optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
exports.PartyLargeTrader$outboundSchema = z.object({
    effectiveDate: z.nullable(z.lazy(() => exports.PartyEffectiveDate$outboundSchema))
        .optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLargeTrader$;
(function (PartyLargeTrader$) {
    /** @deprecated use `PartyLargeTrader$inboundSchema` instead. */
    PartyLargeTrader$.inboundSchema = exports.PartyLargeTrader$inboundSchema;
    /** @deprecated use `PartyLargeTrader$outboundSchema` instead. */
    PartyLargeTrader$.outboundSchema = exports.PartyLargeTrader$outboundSchema;
})(PartyLargeTrader$ || (exports.PartyLargeTrader$ = PartyLargeTrader$ = {}));
/** @internal */
exports.PartyLegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.PartyLegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalAddress$;
(function (PartyLegalAddress$) {
    /** @deprecated use `PartyLegalAddress$inboundSchema` instead. */
    PartyLegalAddress$.inboundSchema = exports.PartyLegalAddress$inboundSchema;
    /** @deprecated use `PartyLegalAddress$outboundSchema` instead. */
    PartyLegalAddress$.outboundSchema = exports.PartyLegalAddress$outboundSchema;
})(PartyLegalAddress$ || (exports.PartyLegalAddress$ = PartyLegalAddress$ = {}));
/** @internal */
exports.PartyTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(PartyTaxIdType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyTaxIdType$outboundSchema = z.union([
    z.nativeEnum(PartyTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyTaxIdType$;
(function (PartyTaxIdType$) {
    /** @deprecated use `PartyTaxIdType$inboundSchema` instead. */
    PartyTaxIdType$.inboundSchema = exports.PartyTaxIdType$inboundSchema;
    /** @deprecated use `PartyTaxIdType$outboundSchema` instead. */
    PartyTaxIdType$.outboundSchema = exports.PartyTaxIdType$outboundSchema;
})(PartyTaxIdType$ || (exports.PartyTaxIdType$ = PartyTaxIdType$ = {}));
/** @internal */
exports.PartyCNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyCNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyCNoticeDate$;
(function (PartyCNoticeDate$) {
    /** @deprecated use `PartyCNoticeDate$inboundSchema` instead. */
    PartyCNoticeDate$.inboundSchema = exports.PartyCNoticeDate$inboundSchema;
    /** @deprecated use `PartyCNoticeDate$outboundSchema` instead. */
    PartyCNoticeDate$.outboundSchema = exports.PartyCNoticeDate$outboundSchema;
})(PartyCNoticeDate$ || (exports.PartyCNoticeDate$ = PartyCNoticeDate$ = {}));
/** @internal */
exports.PartyFederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(PartyFederalTaxClassification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyFederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(PartyFederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyFederalTaxClassification$;
(function (PartyFederalTaxClassification$) {
    /** @deprecated use `PartyFederalTaxClassification$inboundSchema` instead. */
    PartyFederalTaxClassification$.inboundSchema = exports.PartyFederalTaxClassification$inboundSchema;
    /** @deprecated use `PartyFederalTaxClassification$outboundSchema` instead. */
    PartyFederalTaxClassification$.outboundSchema = exports.PartyFederalTaxClassification$outboundSchema;
})(PartyFederalTaxClassification$ || (exports.PartyFederalTaxClassification$ = PartyFederalTaxClassification$ = {}));
/** @internal */
exports.PartyFirstBNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyFirstBNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyFirstBNoticeDate$;
(function (PartyFirstBNoticeDate$) {
    /** @deprecated use `PartyFirstBNoticeDate$inboundSchema` instead. */
    PartyFirstBNoticeDate$.inboundSchema = exports.PartyFirstBNoticeDate$inboundSchema;
    /** @deprecated use `PartyFirstBNoticeDate$outboundSchema` instead. */
    PartyFirstBNoticeDate$.outboundSchema = exports.PartyFirstBNoticeDate$outboundSchema;
})(PartyFirstBNoticeDate$ || (exports.PartyFirstBNoticeDate$ = PartyFirstBNoticeDate$ = {}));
/** @internal */
exports.PartyIrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(PartyIrsFormType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyIrsFormType$outboundSchema = z.union([
    z.nativeEnum(PartyIrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyIrsFormType$;
(function (PartyIrsFormType$) {
    /** @deprecated use `PartyIrsFormType$inboundSchema` instead. */
    PartyIrsFormType$.inboundSchema = exports.PartyIrsFormType$inboundSchema;
    /** @deprecated use `PartyIrsFormType$outboundSchema` instead. */
    PartyIrsFormType$.outboundSchema = exports.PartyIrsFormType$outboundSchema;
})(PartyIrsFormType$ || (exports.PartyIrsFormType$ = PartyIrsFormType$ = {}));
/** @internal */
exports.PartyReportingEligibility$inboundSchema = z
    .union([
    z.nativeEnum(PartyReportingEligibility),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyReportingEligibility$outboundSchema = z.union([
    z.nativeEnum(PartyReportingEligibility),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyReportingEligibility$;
(function (PartyReportingEligibility$) {
    /** @deprecated use `PartyReportingEligibility$inboundSchema` instead. */
    PartyReportingEligibility$.inboundSchema = exports.PartyReportingEligibility$inboundSchema;
    /** @deprecated use `PartyReportingEligibility$outboundSchema` instead. */
    PartyReportingEligibility$.outboundSchema = exports.PartyReportingEligibility$outboundSchema;
})(PartyReportingEligibility$ || (exports.PartyReportingEligibility$ = PartyReportingEligibility$ = {}));
/** @internal */
exports.PartyTaxCertificationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyTaxCertificationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyTaxCertificationDate$;
(function (PartyTaxCertificationDate$) {
    /** @deprecated use `PartyTaxCertificationDate$inboundSchema` instead. */
    PartyTaxCertificationDate$.inboundSchema = exports.PartyTaxCertificationDate$inboundSchema;
    /** @deprecated use `PartyTaxCertificationDate$outboundSchema` instead. */
    PartyTaxCertificationDate$.outboundSchema = exports.PartyTaxCertificationDate$outboundSchema;
})(PartyTaxCertificationDate$ || (exports.PartyTaxCertificationDate$ = PartyTaxCertificationDate$ = {}));
/** @internal */
exports.PartyTaxpayerCertificationState$inboundSchema = z
    .union([
    z.nativeEnum(PartyTaxpayerCertificationState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyTaxpayerCertificationState$outboundSchema = z.union([
    z.nativeEnum(PartyTaxpayerCertificationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyTaxpayerCertificationState$;
(function (PartyTaxpayerCertificationState$) {
    /** @deprecated use `PartyTaxpayerCertificationState$inboundSchema` instead. */
    PartyTaxpayerCertificationState$.inboundSchema = exports.PartyTaxpayerCertificationState$inboundSchema;
    /** @deprecated use `PartyTaxpayerCertificationState$outboundSchema` instead. */
    PartyTaxpayerCertificationState$.outboundSchema = exports.PartyTaxpayerCertificationState$outboundSchema;
})(PartyTaxpayerCertificationState$ || (exports.PartyTaxpayerCertificationState$ = PartyTaxpayerCertificationState$ = {}));
/** @internal */
exports.PartyUsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyUsTinStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyUsTinStatus$outboundSchema = z.union([
    z.nativeEnum(PartyUsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyUsTinStatus$;
(function (PartyUsTinStatus$) {
    /** @deprecated use `PartyUsTinStatus$inboundSchema` instead. */
    PartyUsTinStatus$.inboundSchema = exports.PartyUsTinStatus$inboundSchema;
    /** @deprecated use `PartyUsTinStatus$outboundSchema` instead. */
    PartyUsTinStatus$.outboundSchema = exports.PartyUsTinStatus$outboundSchema;
})(PartyUsTinStatus$ || (exports.PartyUsTinStatus$ = PartyUsTinStatus$ = {}));
/** @internal */
exports.PartyWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(PartyWithholdingState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyWithholdingState$outboundSchema = z.union([
    z.nativeEnum(PartyWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyWithholdingState$;
(function (PartyWithholdingState$) {
    /** @deprecated use `PartyWithholdingState$inboundSchema` instead. */
    PartyWithholdingState$.inboundSchema = exports.PartyWithholdingState$inboundSchema;
    /** @deprecated use `PartyWithholdingState$outboundSchema` instead. */
    PartyWithholdingState$.outboundSchema = exports.PartyWithholdingState$outboundSchema;
})(PartyWithholdingState$ || (exports.PartyWithholdingState$ = PartyWithholdingState$ = {}));
/** @internal */
exports.PartyTaxProfile$inboundSchema = z.object({
    c_notice_date: z.nullable(z.lazy(() => exports.PartyCNoticeDate$inboundSchema))
        .optional(),
    federal_tax_classification: exports.PartyFederalTaxClassification$inboundSchema
        .optional(),
    first_b_notice_date: z.nullable(z.lazy(() => exports.PartyFirstBNoticeDate$inboundSchema)).optional(),
    irs_form_type: exports.PartyIrsFormType$inboundSchema.optional(),
    legal_tax_region_code: z.string().optional(),
    reporting_eligibility: exports.PartyReportingEligibility$inboundSchema.optional(),
    tax_certification_date: z.nullable(z.lazy(() => exports.PartyTaxCertificationDate$inboundSchema)).optional(),
    taxpayer_certification_state: exports.PartyTaxpayerCertificationState$inboundSchema
        .optional(),
    us_tin_status: exports.PartyUsTinStatus$inboundSchema.optional(),
    withholding_state: exports.PartyWithholdingState$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "c_notice_date": "cNoticeDate",
        "federal_tax_classification": "federalTaxClassification",
        "first_b_notice_date": "firstBNoticeDate",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "reporting_eligibility": "reportingEligibility",
        "tax_certification_date": "taxCertificationDate",
        "taxpayer_certification_state": "taxpayerCertificationState",
        "us_tin_status": "usTinStatus",
        "withholding_state": "withholdingState",
    });
});
/** @internal */
exports.PartyTaxProfile$outboundSchema = z.object({
    cNoticeDate: z.nullable(z.lazy(() => exports.PartyCNoticeDate$outboundSchema))
        .optional(),
    federalTaxClassification: exports.PartyFederalTaxClassification$outboundSchema
        .optional(),
    firstBNoticeDate: z.nullable(z.lazy(() => exports.PartyFirstBNoticeDate$outboundSchema)).optional(),
    irsFormType: exports.PartyIrsFormType$outboundSchema.optional(),
    legalTaxRegionCode: z.string().optional(),
    reportingEligibility: exports.PartyReportingEligibility$outboundSchema.optional(),
    taxCertificationDate: z.nullable(z.lazy(() => exports.PartyTaxCertificationDate$outboundSchema)).optional(),
    taxpayerCertificationState: exports.PartyTaxpayerCertificationState$outboundSchema
        .optional(),
    usTinStatus: exports.PartyUsTinStatus$outboundSchema.optional(),
    withholdingState: exports.PartyWithholdingState$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cNoticeDate: "c_notice_date",
        federalTaxClassification: "federal_tax_classification",
        firstBNoticeDate: "first_b_notice_date",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        reportingEligibility: "reporting_eligibility",
        taxCertificationDate: "tax_certification_date",
        taxpayerCertificationState: "taxpayer_certification_state",
        usTinStatus: "us_tin_status",
        withholdingState: "withholding_state",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyTaxProfile$;
(function (PartyTaxProfile$) {
    /** @deprecated use `PartyTaxProfile$inboundSchema` instead. */
    PartyTaxProfile$.inboundSchema = exports.PartyTaxProfile$inboundSchema;
    /** @deprecated use `PartyTaxProfile$outboundSchema` instead. */
    PartyTaxProfile$.outboundSchema = exports.PartyTaxProfile$outboundSchema;
})(PartyTaxProfile$ || (exports.PartyTaxProfile$ = PartyTaxProfile$ = {}));
/** @internal */
exports.PartyLegalEntity$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    broker_dealer: z.boolean().optional(),
    business_industrial_classification: exports.PartyBusinessIndustrialClassification$inboundSchema.optional(),
    corporate_structure: exports.PartyCorporateStructure$inboundSchema.optional(),
    correspondent_id: z.string().optional(),
    doing_business_as: z.array(z.string()).optional(),
    entity_due_diligence: z.nullable(z.lazy(() => exports.PartyEntityDueDiligence$inboundSchema)).optional(),
    entity_name: z.string().optional(),
    entity_type: exports.PartyEntityType$inboundSchema.optional(),
    exempt_customer_reason: exports.PartyExemptCustomerReason$inboundSchema.optional(),
    exempt_verifying_beneficial_owners: z.boolean().optional(),
    for_the_benefit_of: z.string().optional(),
    foreign_entity: z.boolean().optional(),
    foreign_financial_institution: z.boolean().optional(),
    formation_date: z.nullable(z.lazy(() => exports.PartyFormationDate$inboundSchema))
        .optional(),
    global_person_id: z.string().optional(),
    institutional_customer: z.boolean().optional(),
    investigation_id: z.string().optional(),
    large_trader: z.nullable(z.lazy(() => exports.PartyLargeTrader$inboundSchema))
        .optional(),
    legal_address: z.nullable(z.lazy(() => exports.PartyLegalAddress$inboundSchema))
        .optional(),
    legal_entity_id: z.string().optional(),
    lei_code: z.string().optional(),
    name: z.string().optional(),
    operating_regions: z.array(z.string()).optional(),
    registration_region: z.string().optional(),
    regulated_investment_company: z.boolean().optional(),
    related_document_ids: z.array(z.string()).optional(),
    revocable_trust: z.boolean().optional(),
    tax_id: z.string().optional(),
    tax_id_last_four: z.string().optional(),
    tax_id_type: exports.PartyTaxIdType$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => exports.PartyTaxProfile$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accredited_investor": "accreditedInvestor",
        "broker_dealer": "brokerDealer",
        "business_industrial_classification": "businessIndustrialClassification",
        "corporate_structure": "corporateStructure",
        "correspondent_id": "correspondentId",
        "doing_business_as": "doingBusinessAs",
        "entity_due_diligence": "entityDueDiligence",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "exempt_customer_reason": "exemptCustomerReason",
        "exempt_verifying_beneficial_owners": "exemptVerifyingBeneficialOwners",
        "for_the_benefit_of": "forTheBenefitOf",
        "foreign_entity": "foreignEntity",
        "foreign_financial_institution": "foreignFinancialInstitution",
        "formation_date": "formationDate",
        "global_person_id": "globalPersonId",
        "institutional_customer": "institutionalCustomer",
        "investigation_id": "investigationId",
        "large_trader": "largeTrader",
        "legal_address": "legalAddress",
        "legal_entity_id": "legalEntityId",
        "lei_code": "leiCode",
        "operating_regions": "operatingRegions",
        "registration_region": "registrationRegion",
        "regulated_investment_company": "regulatedInvestmentCompany",
        "related_document_ids": "relatedDocumentIds",
        "revocable_trust": "revocableTrust",
        "tax_id": "taxId",
        "tax_id_last_four": "taxIdLastFour",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
exports.PartyLegalEntity$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    brokerDealer: z.boolean().optional(),
    businessIndustrialClassification: exports.PartyBusinessIndustrialClassification$outboundSchema.optional(),
    corporateStructure: exports.PartyCorporateStructure$outboundSchema.optional(),
    correspondentId: z.string().optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    entityDueDiligence: z.nullable(z.lazy(() => exports.PartyEntityDueDiligence$outboundSchema)).optional(),
    entityName: z.string().optional(),
    entityType: exports.PartyEntityType$outboundSchema.optional(),
    exemptCustomerReason: exports.PartyExemptCustomerReason$outboundSchema.optional(),
    exemptVerifyingBeneficialOwners: z.boolean().optional(),
    forTheBenefitOf: z.string().optional(),
    foreignEntity: z.boolean().optional(),
    foreignFinancialInstitution: z.boolean().optional(),
    formationDate: z.nullable(z.lazy(() => exports.PartyFormationDate$outboundSchema))
        .optional(),
    globalPersonId: z.string().optional(),
    institutionalCustomer: z.boolean().optional(),
    investigationId: z.string().optional(),
    largeTrader: z.nullable(z.lazy(() => exports.PartyLargeTrader$outboundSchema))
        .optional(),
    legalAddress: z.nullable(z.lazy(() => exports.PartyLegalAddress$outboundSchema))
        .optional(),
    legalEntityId: z.string().optional(),
    leiCode: z.string().optional(),
    name: z.string().optional(),
    operatingRegions: z.array(z.string()).optional(),
    registrationRegion: z.string().optional(),
    regulatedInvestmentCompany: z.boolean().optional(),
    relatedDocumentIds: z.array(z.string()).optional(),
    revocableTrust: z.boolean().optional(),
    taxId: z.string().optional(),
    taxIdLastFour: z.string().optional(),
    taxIdType: exports.PartyTaxIdType$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => exports.PartyTaxProfile$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accreditedInvestor: "accredited_investor",
        brokerDealer: "broker_dealer",
        businessIndustrialClassification: "business_industrial_classification",
        corporateStructure: "corporate_structure",
        correspondentId: "correspondent_id",
        doingBusinessAs: "doing_business_as",
        entityDueDiligence: "entity_due_diligence",
        entityName: "entity_name",
        entityType: "entity_type",
        exemptCustomerReason: "exempt_customer_reason",
        exemptVerifyingBeneficialOwners: "exempt_verifying_beneficial_owners",
        forTheBenefitOf: "for_the_benefit_of",
        foreignEntity: "foreign_entity",
        foreignFinancialInstitution: "foreign_financial_institution",
        formationDate: "formation_date",
        globalPersonId: "global_person_id",
        institutionalCustomer: "institutional_customer",
        investigationId: "investigation_id",
        largeTrader: "large_trader",
        legalAddress: "legal_address",
        legalEntityId: "legal_entity_id",
        leiCode: "lei_code",
        operatingRegions: "operating_regions",
        registrationRegion: "registration_region",
        regulatedInvestmentCompany: "regulated_investment_company",
        relatedDocumentIds: "related_document_ids",
        revocableTrust: "revocable_trust",
        taxId: "tax_id",
        taxIdLastFour: "tax_id_last_four",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalEntity$;
(function (PartyLegalEntity$) {
    /** @deprecated use `PartyLegalEntity$inboundSchema` instead. */
    PartyLegalEntity$.inboundSchema = exports.PartyLegalEntity$inboundSchema;
    /** @deprecated use `PartyLegalEntity$outboundSchema` instead. */
    PartyLegalEntity$.outboundSchema = exports.PartyLegalEntity$outboundSchema;
})(PartyLegalEntity$ || (exports.PartyLegalEntity$ = PartyLegalEntity$ = {}));
/** @internal */
exports.PartyBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyBirthDate$;
(function (PartyBirthDate$) {
    /** @deprecated use `PartyBirthDate$inboundSchema` instead. */
    PartyBirthDate$.inboundSchema = exports.PartyBirthDate$inboundSchema;
    /** @deprecated use `PartyBirthDate$outboundSchema` instead. */
    PartyBirthDate$.outboundSchema = exports.PartyBirthDate$outboundSchema;
})(PartyBirthDate$ || (exports.PartyBirthDate$ = PartyBirthDate$ = {}));
/** @internal */
exports.PartyDeathDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyDeathDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyDeathDate$;
(function (PartyDeathDate$) {
    /** @deprecated use `PartyDeathDate$inboundSchema` instead. */
    PartyDeathDate$.inboundSchema = exports.PartyDeathDate$inboundSchema;
    /** @deprecated use `PartyDeathDate$outboundSchema` instead. */
    PartyDeathDate$.outboundSchema = exports.PartyDeathDate$outboundSchema;
})(PartyDeathDate$ || (exports.PartyDeathDate$ = PartyDeathDate$ = {}));
/** @internal */
exports.PartyEmployerAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.PartyEmployerAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyEmployerAddress$;
(function (PartyEmployerAddress$) {
    /** @deprecated use `PartyEmployerAddress$inboundSchema` instead. */
    PartyEmployerAddress$.inboundSchema = exports.PartyEmployerAddress$inboundSchema;
    /** @deprecated use `PartyEmployerAddress$outboundSchema` instead. */
    PartyEmployerAddress$.outboundSchema = exports.PartyEmployerAddress$outboundSchema;
})(PartyEmployerAddress$ || (exports.PartyEmployerAddress$ = PartyEmployerAddress$ = {}));
/** @internal */
exports.PartyEmploymentStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyEmploymentStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyEmploymentStatus$outboundSchema = z.union([
    z.nativeEnum(PartyEmploymentStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyEmploymentStatus$;
(function (PartyEmploymentStatus$) {
    /** @deprecated use `PartyEmploymentStatus$inboundSchema` instead. */
    PartyEmploymentStatus$.inboundSchema = exports.PartyEmploymentStatus$inboundSchema;
    /** @deprecated use `PartyEmploymentStatus$outboundSchema` instead. */
    PartyEmploymentStatus$.outboundSchema = exports.PartyEmploymentStatus$outboundSchema;
})(PartyEmploymentStatus$ || (exports.PartyEmploymentStatus$ = PartyEmploymentStatus$ = {}));
/** @internal */
exports.PartyEmployment$inboundSchema = z.object({
    employer: z.string().optional(),
    employer_address: z.nullable(z.lazy(() => exports.PartyEmployerAddress$inboundSchema))
        .optional(),
    employment_id: z.string().optional(),
    employment_status: exports.PartyEmploymentStatus$inboundSchema.optional(),
    occupation: z.string().optional(),
    start_year: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "employer_address": "employerAddress",
        "employment_id": "employmentId",
        "employment_status": "employmentStatus",
        "start_year": "startYear",
    });
});
/** @internal */
exports.PartyEmployment$outboundSchema = z.object({
    employer: z.string().optional(),
    employerAddress: z.nullable(z.lazy(() => exports.PartyEmployerAddress$outboundSchema))
        .optional(),
    employmentId: z.string().optional(),
    employmentStatus: exports.PartyEmploymentStatus$outboundSchema.optional(),
    occupation: z.string().optional(),
    startYear: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        employerAddress: "employer_address",
        employmentId: "employment_id",
        employmentStatus: "employment_status",
        startYear: "start_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyEmployment$;
(function (PartyEmployment$) {
    /** @deprecated use `PartyEmployment$inboundSchema` instead. */
    PartyEmployment$.inboundSchema = exports.PartyEmployment$inboundSchema;
    /** @deprecated use `PartyEmployment$outboundSchema` instead. */
    PartyEmployment$.outboundSchema = exports.PartyEmployment$outboundSchema;
})(PartyEmployment$ || (exports.PartyEmployment$ = PartyEmployment$ = {}));
/** @internal */
exports.PartyExpirationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyExpirationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyExpirationDate$;
(function (PartyExpirationDate$) {
    /** @deprecated use `PartyExpirationDate$inboundSchema` instead. */
    PartyExpirationDate$.inboundSchema = exports.PartyExpirationDate$inboundSchema;
    /** @deprecated use `PartyExpirationDate$outboundSchema` instead. */
    PartyExpirationDate$.outboundSchema = exports.PartyExpirationDate$outboundSchema;
})(PartyExpirationDate$ || (exports.PartyExpirationDate$ = PartyExpirationDate$ = {}));
/** @internal */
exports.PartyIssueDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyIssueDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyIssueDate$;
(function (PartyIssueDate$) {
    /** @deprecated use `PartyIssueDate$inboundSchema` instead. */
    PartyIssueDate$.inboundSchema = exports.PartyIssueDate$inboundSchema;
    /** @deprecated use `PartyIssueDate$outboundSchema` instead. */
    PartyIssueDate$.outboundSchema = exports.PartyIssueDate$outboundSchema;
})(PartyIssueDate$ || (exports.PartyIssueDate$ = PartyIssueDate$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonType$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyLegalNaturalPersonType$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonType$;
(function (PartyLegalNaturalPersonType$) {
    /** @deprecated use `PartyLegalNaturalPersonType$inboundSchema` instead. */
    PartyLegalNaturalPersonType$.inboundSchema = exports.PartyLegalNaturalPersonType$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonType$outboundSchema` instead. */
    PartyLegalNaturalPersonType$.outboundSchema = exports.PartyLegalNaturalPersonType$outboundSchema;
})(PartyLegalNaturalPersonType$ || (exports.PartyLegalNaturalPersonType$ = PartyLegalNaturalPersonType$ = {}));
/** @internal */
exports.PartyForeignIdentification$inboundSchema = z.object({
    expiration_date: z.nullable(z.lazy(() => exports.PartyExpirationDate$inboundSchema))
        .optional(),
    ftin: z.boolean().optional(),
    identification_number: z.string().optional(),
    issue_date: z.nullable(z.lazy(() => exports.PartyIssueDate$inboundSchema)).optional(),
    issuing_region_code: z.string().optional(),
    type: exports.PartyLegalNaturalPersonType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "expiration_date": "expirationDate",
        "identification_number": "identificationNumber",
        "issue_date": "issueDate",
        "issuing_region_code": "issuingRegionCode",
    });
});
/** @internal */
exports.PartyForeignIdentification$outboundSchema = z.object({
    expirationDate: z.nullable(z.lazy(() => exports.PartyExpirationDate$outboundSchema))
        .optional(),
    ftin: z.boolean().optional(),
    identificationNumber: z.string().optional(),
    issueDate: z.nullable(z.lazy(() => exports.PartyIssueDate$outboundSchema)).optional(),
    issuingRegionCode: z.string().optional(),
    type: exports.PartyLegalNaturalPersonType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        expirationDate: "expiration_date",
        identificationNumber: "identification_number",
        issueDate: "issue_date",
        issuingRegionCode: "issuing_region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyForeignIdentification$;
(function (PartyForeignIdentification$) {
    /** @deprecated use `PartyForeignIdentification$inboundSchema` instead. */
    PartyForeignIdentification$.inboundSchema = exports.PartyForeignIdentification$inboundSchema;
    /** @deprecated use `PartyForeignIdentification$outboundSchema` instead. */
    PartyForeignIdentification$.outboundSchema = exports.PartyForeignIdentification$outboundSchema;
})(PartyForeignIdentification$ || (exports.PartyForeignIdentification$ = PartyForeignIdentification$ = {}));
/** @internal */
exports.PartyExecutionDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyExecutionDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyExecutionDate$;
(function (PartyExecutionDate$) {
    /** @deprecated use `PartyExecutionDate$inboundSchema` instead. */
    PartyExecutionDate$.inboundSchema = exports.PartyExecutionDate$inboundSchema;
    /** @deprecated use `PartyExecutionDate$outboundSchema` instead. */
    PartyExecutionDate$.outboundSchema = exports.PartyExecutionDate$outboundSchema;
})(PartyExecutionDate$ || (exports.PartyExecutionDate$ = PartyExecutionDate$ = {}));
/** @internal */
exports.PartyIdentityVerificationResult$inboundSchema = z.object({
    address_verified: z.boolean().optional(),
    birth_date_verified: z.boolean().optional(),
    execution_date: z.nullable(z.lazy(() => exports.PartyExecutionDate$inboundSchema))
        .optional(),
    external_case_id: z.string().optional(),
    identity_verification_document_ids: z.array(z.string()).optional(),
    identity_verification_result_id: z.string().optional(),
    name_verified: z.boolean().optional(),
    raw_vendor_data_document_id: z.string().optional(),
    tax_id_verified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_verified": "addressVerified",
        "birth_date_verified": "birthDateVerified",
        "execution_date": "executionDate",
        "external_case_id": "externalCaseId",
        "identity_verification_document_ids": "identityVerificationDocumentIds",
        "identity_verification_result_id": "identityVerificationResultId",
        "name_verified": "nameVerified",
        "raw_vendor_data_document_id": "rawVendorDataDocumentId",
        "tax_id_verified": "taxIdVerified",
    });
});
/** @internal */
exports.PartyIdentityVerificationResult$outboundSchema = z.object({
    addressVerified: z.boolean().optional(),
    birthDateVerified: z.boolean().optional(),
    executionDate: z.nullable(z.lazy(() => exports.PartyExecutionDate$outboundSchema))
        .optional(),
    externalCaseId: z.string().optional(),
    identityVerificationDocumentIds: z.array(z.string()).optional(),
    identityVerificationResultId: z.string().optional(),
    nameVerified: z.boolean().optional(),
    rawVendorDataDocumentId: z.string().optional(),
    taxIdVerified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressVerified: "address_verified",
        birthDateVerified: "birth_date_verified",
        executionDate: "execution_date",
        externalCaseId: "external_case_id",
        identityVerificationDocumentIds: "identity_verification_document_ids",
        identityVerificationResultId: "identity_verification_result_id",
        nameVerified: "name_verified",
        rawVendorDataDocumentId: "raw_vendor_data_document_id",
        taxIdVerified: "tax_id_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyIdentityVerificationResult$;
(function (PartyIdentityVerificationResult$) {
    /** @deprecated use `PartyIdentityVerificationResult$inboundSchema` instead. */
    PartyIdentityVerificationResult$.inboundSchema = exports.PartyIdentityVerificationResult$inboundSchema;
    /** @deprecated use `PartyIdentityVerificationResult$outboundSchema` instead. */
    PartyIdentityVerificationResult$.outboundSchema = exports.PartyIdentityVerificationResult$outboundSchema;
})(PartyIdentityVerificationResult$ || (exports.PartyIdentityVerificationResult$ = PartyIdentityVerificationResult$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyLegalNaturalPersonEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonEffectiveDate$;
(function (PartyLegalNaturalPersonEffectiveDate$) {
    /** @deprecated use `PartyLegalNaturalPersonEffectiveDate$inboundSchema` instead. */
    PartyLegalNaturalPersonEffectiveDate$.inboundSchema = exports.PartyLegalNaturalPersonEffectiveDate$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonEffectiveDate$outboundSchema` instead. */
    PartyLegalNaturalPersonEffectiveDate$.outboundSchema = exports.PartyLegalNaturalPersonEffectiveDate$outboundSchema;
})(PartyLegalNaturalPersonEffectiveDate$ || (exports.PartyLegalNaturalPersonEffectiveDate$ = PartyLegalNaturalPersonEffectiveDate$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonLargeTrader$inboundSchema = z.object({
    effective_date: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonEffectiveDate$inboundSchema)).optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
exports.PartyLegalNaturalPersonLargeTrader$outboundSchema = z.object({
    effectiveDate: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonEffectiveDate$outboundSchema)).optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonLargeTrader$;
(function (PartyLegalNaturalPersonLargeTrader$) {
    /** @deprecated use `PartyLegalNaturalPersonLargeTrader$inboundSchema` instead. */
    PartyLegalNaturalPersonLargeTrader$.inboundSchema = exports.PartyLegalNaturalPersonLargeTrader$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonLargeTrader$outboundSchema` instead. */
    PartyLegalNaturalPersonLargeTrader$.outboundSchema = exports.PartyLegalNaturalPersonLargeTrader$outboundSchema;
})(PartyLegalNaturalPersonLargeTrader$ || (exports.PartyLegalNaturalPersonLargeTrader$ = PartyLegalNaturalPersonLargeTrader$ = {}));
/** @internal */
exports.PartyMaritalStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyMaritalStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyMaritalStatus$outboundSchema = z.union([
    z.nativeEnum(PartyMaritalStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyMaritalStatus$;
(function (PartyMaritalStatus$) {
    /** @deprecated use `PartyMaritalStatus$inboundSchema` instead. */
    PartyMaritalStatus$.inboundSchema = exports.PartyMaritalStatus$inboundSchema;
    /** @deprecated use `PartyMaritalStatus$outboundSchema` instead. */
    PartyMaritalStatus$.outboundSchema = exports.PartyMaritalStatus$outboundSchema;
})(PartyMaritalStatus$ || (exports.PartyMaritalStatus$ = PartyMaritalStatus$ = {}));
/** @internal */
exports.PartyNameSuffix$inboundSchema = z
    .union([
    z.nativeEnum(PartyNameSuffix),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyNameSuffix$outboundSchema = z.union([
    z.nativeEnum(PartyNameSuffix),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyNameSuffix$;
(function (PartyNameSuffix$) {
    /** @deprecated use `PartyNameSuffix$inboundSchema` instead. */
    PartyNameSuffix$.inboundSchema = exports.PartyNameSuffix$inboundSchema;
    /** @deprecated use `PartyNameSuffix$outboundSchema` instead. */
    PartyNameSuffix$.outboundSchema = exports.PartyNameSuffix$outboundSchema;
})(PartyNameSuffix$ || (exports.PartyNameSuffix$ = PartyNameSuffix$ = {}));
/** @internal */
exports.PartyCustomerReferralSource$inboundSchema = z.object({
    name: z.string().optional(),
    relationship_to_applicant: z.string().optional(),
    relationship_years_with_applicant: z.number().int().optional(),
    relationship_years_with_broker: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "relationship_to_applicant": "relationshipToApplicant",
        "relationship_years_with_applicant": "relationshipYearsWithApplicant",
        "relationship_years_with_broker": "relationshipYearsWithBroker",
    });
});
/** @internal */
exports.PartyCustomerReferralSource$outboundSchema = z.object({
    name: z.string().optional(),
    relationshipToApplicant: z.string().optional(),
    relationshipYearsWithApplicant: z.number().int().optional(),
    relationshipYearsWithBroker: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        relationshipToApplicant: "relationship_to_applicant",
        relationshipYearsWithApplicant: "relationship_years_with_applicant",
        relationshipYearsWithBroker: "relationship_years_with_broker",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyCustomerReferralSource$;
(function (PartyCustomerReferralSource$) {
    /** @deprecated use `PartyCustomerReferralSource$inboundSchema` instead. */
    PartyCustomerReferralSource$.inboundSchema = exports.PartyCustomerReferralSource$inboundSchema;
    /** @deprecated use `PartyCustomerReferralSource$outboundSchema` instead. */
    PartyCustomerReferralSource$.outboundSchema = exports.PartyCustomerReferralSource$outboundSchema;
})(PartyCustomerReferralSource$ || (exports.PartyCustomerReferralSource$ = PartyCustomerReferralSource$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonNegativeNews$inboundSchema = z.object({
    negative_news_against_related_parties: z.boolean().optional(),
    negative_news_against_related_parties_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "negative_news_against_related_parties": "negativeNewsAgainstRelatedParties",
        "negative_news_against_related_parties_description": "negativeNewsAgainstRelatedPartiesDescription",
    });
});
/** @internal */
exports.PartyLegalNaturalPersonNegativeNews$outboundSchema = z.object({
    negativeNewsAgainstRelatedParties: z.boolean().optional(),
    negativeNewsAgainstRelatedPartiesDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        negativeNewsAgainstRelatedParties: "negative_news_against_related_parties",
        negativeNewsAgainstRelatedPartiesDescription: "negative_news_against_related_parties_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonNegativeNews$;
(function (PartyLegalNaturalPersonNegativeNews$) {
    /** @deprecated use `PartyLegalNaturalPersonNegativeNews$inboundSchema` instead. */
    PartyLegalNaturalPersonNegativeNews$.inboundSchema = exports.PartyLegalNaturalPersonNegativeNews$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonNegativeNews$outboundSchema` instead. */
    PartyLegalNaturalPersonNegativeNews$.outboundSchema = exports.PartyLegalNaturalPersonNegativeNews$outboundSchema;
})(PartyLegalNaturalPersonNegativeNews$ || (exports.PartyLegalNaturalPersonNegativeNews$ = PartyLegalNaturalPersonNegativeNews$ = {}));
/** @internal */
exports.PartyOtherSourcesOfWealth$inboundSchema = z.object({
    applicant_has_other_sources_of_wealth: z.boolean().optional(),
    other_sources_of_wealth: z.string().optional(),
    other_sources_of_wealth_verification: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "applicant_has_other_sources_of_wealth": "applicantHasOtherSourcesOfWealth",
        "other_sources_of_wealth": "otherSourcesOfWealth",
        "other_sources_of_wealth_verification": "otherSourcesOfWealthVerification",
    });
});
/** @internal */
exports.PartyOtherSourcesOfWealth$outboundSchema = z.object({
    applicantHasOtherSourcesOfWealth: z.boolean().optional(),
    otherSourcesOfWealth: z.string().optional(),
    otherSourcesOfWealthVerification: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        applicantHasOtherSourcesOfWealth: "applicant_has_other_sources_of_wealth",
        otherSourcesOfWealth: "other_sources_of_wealth",
        otherSourcesOfWealthVerification: "other_sources_of_wealth_verification",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyOtherSourcesOfWealth$;
(function (PartyOtherSourcesOfWealth$) {
    /** @deprecated use `PartyOtherSourcesOfWealth$inboundSchema` instead. */
    PartyOtherSourcesOfWealth$.inboundSchema = exports.PartyOtherSourcesOfWealth$inboundSchema;
    /** @deprecated use `PartyOtherSourcesOfWealth$outboundSchema` instead. */
    PartyOtherSourcesOfWealth$.outboundSchema = exports.PartyOtherSourcesOfWealth$outboundSchema;
})(PartyOtherSourcesOfWealth$ || (exports.PartyOtherSourcesOfWealth$ = PartyOtherSourcesOfWealth$ = {}));
/** @internal */
exports.PartyNaturalPersonFdd$inboundSchema = z.object({
    customer_non_referral_source: z.string().optional(),
    customer_referral_source: z.nullable(z.lazy(() => exports.PartyCustomerReferralSource$inboundSchema)).optional(),
    employment_and_employer_description: z.string().optional(),
    negative_news: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonNegativeNews$inboundSchema)).optional(),
    other_sources_of_wealth: z.nullable(z.lazy(() => exports.PartyOtherSourcesOfWealth$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "customer_non_referral_source": "customerNonReferralSource",
        "customer_referral_source": "customerReferralSource",
        "employment_and_employer_description": "employmentAndEmployerDescription",
        "negative_news": "negativeNews",
        "other_sources_of_wealth": "otherSourcesOfWealth",
    });
});
/** @internal */
exports.PartyNaturalPersonFdd$outboundSchema = z.object({
    customerNonReferralSource: z.string().optional(),
    customerReferralSource: z.nullable(z.lazy(() => exports.PartyCustomerReferralSource$outboundSchema)).optional(),
    employmentAndEmployerDescription: z.string().optional(),
    negativeNews: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonNegativeNews$outboundSchema)).optional(),
    otherSourcesOfWealth: z.nullable(z.lazy(() => exports.PartyOtherSourcesOfWealth$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        customerNonReferralSource: "customer_non_referral_source",
        customerReferralSource: "customer_referral_source",
        employmentAndEmployerDescription: "employment_and_employer_description",
        negativeNews: "negative_news",
        otherSourcesOfWealth: "other_sources_of_wealth",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyNaturalPersonFdd$;
(function (PartyNaturalPersonFdd$) {
    /** @deprecated use `PartyNaturalPersonFdd$inboundSchema` instead. */
    PartyNaturalPersonFdd$.inboundSchema = exports.PartyNaturalPersonFdd$inboundSchema;
    /** @deprecated use `PartyNaturalPersonFdd$outboundSchema` instead. */
    PartyNaturalPersonFdd$.outboundSchema = exports.PartyNaturalPersonFdd$outboundSchema;
})(PartyNaturalPersonFdd$ || (exports.PartyNaturalPersonFdd$ = PartyNaturalPersonFdd$ = {}));
/** @internal */
exports.PartyResidencyStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyResidencyStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyResidencyStatus$outboundSchema = z.union([
    z.nativeEnum(PartyResidencyStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyResidencyStatus$;
(function (PartyResidencyStatus$) {
    /** @deprecated use `PartyResidencyStatus$inboundSchema` instead. */
    PartyResidencyStatus$.inboundSchema = exports.PartyResidencyStatus$inboundSchema;
    /** @deprecated use `PartyResidencyStatus$outboundSchema` instead. */
    PartyResidencyStatus$.outboundSchema = exports.PartyResidencyStatus$outboundSchema;
})(PartyResidencyStatus$ || (exports.PartyResidencyStatus$ = PartyResidencyStatus$ = {}));
/** @internal */
exports.PartyNonCitizenResidency$inboundSchema = z.object({
    residency_status: exports.PartyResidencyStatus$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "residency_status": "residencyStatus",
    });
});
/** @internal */
exports.PartyNonCitizenResidency$outboundSchema = z.object({
    residencyStatus: exports.PartyResidencyStatus$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        residencyStatus: "residency_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyNonCitizenResidency$;
(function (PartyNonCitizenResidency$) {
    /** @deprecated use `PartyNonCitizenResidency$inboundSchema` instead. */
    PartyNonCitizenResidency$.inboundSchema = exports.PartyNonCitizenResidency$inboundSchema;
    /** @deprecated use `PartyNonCitizenResidency$outboundSchema` instead. */
    PartyNonCitizenResidency$.outboundSchema = exports.PartyNonCitizenResidency$outboundSchema;
})(PartyNonCitizenResidency$ || (exports.PartyNonCitizenResidency$ = PartyNonCitizenResidency$ = {}));
/** @internal */
exports.PartyPersonalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.PartyPersonalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyPersonalAddress$;
(function (PartyPersonalAddress$) {
    /** @deprecated use `PartyPersonalAddress$inboundSchema` instead. */
    PartyPersonalAddress$.inboundSchema = exports.PartyPersonalAddress$inboundSchema;
    /** @deprecated use `PartyPersonalAddress$outboundSchema` instead. */
    PartyPersonalAddress$.outboundSchema = exports.PartyPersonalAddress$outboundSchema;
})(PartyPersonalAddress$ || (exports.PartyPersonalAddress$ = PartyPersonalAddress$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonTaxIdType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyLegalNaturalPersonTaxIdType$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonTaxIdType$;
(function (PartyLegalNaturalPersonTaxIdType$) {
    /** @deprecated use `PartyLegalNaturalPersonTaxIdType$inboundSchema` instead. */
    PartyLegalNaturalPersonTaxIdType$.inboundSchema = exports.PartyLegalNaturalPersonTaxIdType$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonTaxIdType$outboundSchema` instead. */
    PartyLegalNaturalPersonTaxIdType$.outboundSchema = exports.PartyLegalNaturalPersonTaxIdType$outboundSchema;
})(PartyLegalNaturalPersonTaxIdType$ || (exports.PartyLegalNaturalPersonTaxIdType$ = PartyLegalNaturalPersonTaxIdType$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonCNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyLegalNaturalPersonCNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonCNoticeDate$;
(function (PartyLegalNaturalPersonCNoticeDate$) {
    /** @deprecated use `PartyLegalNaturalPersonCNoticeDate$inboundSchema` instead. */
    PartyLegalNaturalPersonCNoticeDate$.inboundSchema = exports.PartyLegalNaturalPersonCNoticeDate$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonCNoticeDate$outboundSchema` instead. */
    PartyLegalNaturalPersonCNoticeDate$.outboundSchema = exports.PartyLegalNaturalPersonCNoticeDate$outboundSchema;
})(PartyLegalNaturalPersonCNoticeDate$ || (exports.PartyLegalNaturalPersonCNoticeDate$ = PartyLegalNaturalPersonCNoticeDate$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonFederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonFederalTaxClassification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyLegalNaturalPersonFederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonFederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonFederalTaxClassification$;
(function (PartyLegalNaturalPersonFederalTaxClassification$) {
    /** @deprecated use `PartyLegalNaturalPersonFederalTaxClassification$inboundSchema` instead. */
    PartyLegalNaturalPersonFederalTaxClassification$.inboundSchema = exports.PartyLegalNaturalPersonFederalTaxClassification$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonFederalTaxClassification$outboundSchema` instead. */
    PartyLegalNaturalPersonFederalTaxClassification$.outboundSchema = exports.PartyLegalNaturalPersonFederalTaxClassification$outboundSchema;
})(PartyLegalNaturalPersonFederalTaxClassification$ || (exports.PartyLegalNaturalPersonFederalTaxClassification$ = PartyLegalNaturalPersonFederalTaxClassification$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonFirstBNoticeDate$;
(function (PartyLegalNaturalPersonFirstBNoticeDate$) {
    /** @deprecated use `PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema` instead. */
    PartyLegalNaturalPersonFirstBNoticeDate$.inboundSchema = exports.PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema` instead. */
    PartyLegalNaturalPersonFirstBNoticeDate$.outboundSchema = exports.PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema;
})(PartyLegalNaturalPersonFirstBNoticeDate$ || (exports.PartyLegalNaturalPersonFirstBNoticeDate$ = PartyLegalNaturalPersonFirstBNoticeDate$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonIrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonIrsFormType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyLegalNaturalPersonIrsFormType$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonIrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonIrsFormType$;
(function (PartyLegalNaturalPersonIrsFormType$) {
    /** @deprecated use `PartyLegalNaturalPersonIrsFormType$inboundSchema` instead. */
    PartyLegalNaturalPersonIrsFormType$.inboundSchema = exports.PartyLegalNaturalPersonIrsFormType$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonIrsFormType$outboundSchema` instead. */
    PartyLegalNaturalPersonIrsFormType$.outboundSchema = exports.PartyLegalNaturalPersonIrsFormType$outboundSchema;
})(PartyLegalNaturalPersonIrsFormType$ || (exports.PartyLegalNaturalPersonIrsFormType$ = PartyLegalNaturalPersonIrsFormType$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonReportingEligibility$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonReportingEligibility),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyLegalNaturalPersonReportingEligibility$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonReportingEligibility),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonReportingEligibility$;
(function (PartyLegalNaturalPersonReportingEligibility$) {
    /** @deprecated use `PartyLegalNaturalPersonReportingEligibility$inboundSchema` instead. */
    PartyLegalNaturalPersonReportingEligibility$.inboundSchema = exports.PartyLegalNaturalPersonReportingEligibility$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonReportingEligibility$outboundSchema` instead. */
    PartyLegalNaturalPersonReportingEligibility$.outboundSchema = exports.PartyLegalNaturalPersonReportingEligibility$outboundSchema;
})(PartyLegalNaturalPersonReportingEligibility$ || (exports.PartyLegalNaturalPersonReportingEligibility$ = PartyLegalNaturalPersonReportingEligibility$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonTaxCertificationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PartyLegalNaturalPersonTaxCertificationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonTaxCertificationDate$;
(function (PartyLegalNaturalPersonTaxCertificationDate$) {
    /** @deprecated use `PartyLegalNaturalPersonTaxCertificationDate$inboundSchema` instead. */
    PartyLegalNaturalPersonTaxCertificationDate$.inboundSchema = exports.PartyLegalNaturalPersonTaxCertificationDate$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonTaxCertificationDate$outboundSchema` instead. */
    PartyLegalNaturalPersonTaxCertificationDate$.outboundSchema = exports.PartyLegalNaturalPersonTaxCertificationDate$outboundSchema;
})(PartyLegalNaturalPersonTaxCertificationDate$ || (exports.PartyLegalNaturalPersonTaxCertificationDate$ = PartyLegalNaturalPersonTaxCertificationDate$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonTaxpayerCertificationState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonTaxpayerCertificationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonTaxpayerCertificationState$;
(function (PartyLegalNaturalPersonTaxpayerCertificationState$) {
    /** @deprecated use `PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema` instead. */
    PartyLegalNaturalPersonTaxpayerCertificationState$.inboundSchema = exports.PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema` instead. */
    PartyLegalNaturalPersonTaxpayerCertificationState$.outboundSchema = exports.PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema;
})(PartyLegalNaturalPersonTaxpayerCertificationState$ || (exports.PartyLegalNaturalPersonTaxpayerCertificationState$ = PartyLegalNaturalPersonTaxpayerCertificationState$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonUsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonUsTinStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyLegalNaturalPersonUsTinStatus$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonUsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonUsTinStatus$;
(function (PartyLegalNaturalPersonUsTinStatus$) {
    /** @deprecated use `PartyLegalNaturalPersonUsTinStatus$inboundSchema` instead. */
    PartyLegalNaturalPersonUsTinStatus$.inboundSchema = exports.PartyLegalNaturalPersonUsTinStatus$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonUsTinStatus$outboundSchema` instead. */
    PartyLegalNaturalPersonUsTinStatus$.outboundSchema = exports.PartyLegalNaturalPersonUsTinStatus$outboundSchema;
})(PartyLegalNaturalPersonUsTinStatus$ || (exports.PartyLegalNaturalPersonUsTinStatus$ = PartyLegalNaturalPersonUsTinStatus$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(PartyLegalNaturalPersonWithholdingState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyLegalNaturalPersonWithholdingState$outboundSchema = z.union([
    z.nativeEnum(PartyLegalNaturalPersonWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonWithholdingState$;
(function (PartyLegalNaturalPersonWithholdingState$) {
    /** @deprecated use `PartyLegalNaturalPersonWithholdingState$inboundSchema` instead. */
    PartyLegalNaturalPersonWithholdingState$.inboundSchema = exports.PartyLegalNaturalPersonWithholdingState$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonWithholdingState$outboundSchema` instead. */
    PartyLegalNaturalPersonWithholdingState$.outboundSchema = exports.PartyLegalNaturalPersonWithholdingState$outboundSchema;
})(PartyLegalNaturalPersonWithholdingState$ || (exports.PartyLegalNaturalPersonWithholdingState$ = PartyLegalNaturalPersonWithholdingState$ = {}));
/** @internal */
exports.PartyLegalNaturalPersonTaxProfile$inboundSchema = z.object({
    c_notice_date: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonCNoticeDate$inboundSchema)).optional(),
    federal_tax_classification: exports.PartyLegalNaturalPersonFederalTaxClassification$inboundSchema.optional(),
    first_b_notice_date: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonFirstBNoticeDate$inboundSchema)).optional(),
    irs_form_type: exports.PartyLegalNaturalPersonIrsFormType$inboundSchema.optional(),
    legal_tax_region_code: z.string().optional(),
    reporting_eligibility: exports.PartyLegalNaturalPersonReportingEligibility$inboundSchema.optional(),
    tax_certification_date: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonTaxCertificationDate$inboundSchema)).optional(),
    taxpayer_certification_state: exports.PartyLegalNaturalPersonTaxpayerCertificationState$inboundSchema.optional(),
    us_tin_status: exports.PartyLegalNaturalPersonUsTinStatus$inboundSchema.optional(),
    withholding_state: exports.PartyLegalNaturalPersonWithholdingState$inboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "c_notice_date": "cNoticeDate",
        "federal_tax_classification": "federalTaxClassification",
        "first_b_notice_date": "firstBNoticeDate",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "reporting_eligibility": "reportingEligibility",
        "tax_certification_date": "taxCertificationDate",
        "taxpayer_certification_state": "taxpayerCertificationState",
        "us_tin_status": "usTinStatus",
        "withholding_state": "withholdingState",
    });
});
/** @internal */
exports.PartyLegalNaturalPersonTaxProfile$outboundSchema = z.object({
    cNoticeDate: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonCNoticeDate$outboundSchema)).optional(),
    federalTaxClassification: exports.PartyLegalNaturalPersonFederalTaxClassification$outboundSchema.optional(),
    firstBNoticeDate: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonFirstBNoticeDate$outboundSchema)).optional(),
    irsFormType: exports.PartyLegalNaturalPersonIrsFormType$outboundSchema.optional(),
    legalTaxRegionCode: z.string().optional(),
    reportingEligibility: exports.PartyLegalNaturalPersonReportingEligibility$outboundSchema.optional(),
    taxCertificationDate: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonTaxCertificationDate$outboundSchema)).optional(),
    taxpayerCertificationState: exports.PartyLegalNaturalPersonTaxpayerCertificationState$outboundSchema.optional(),
    usTinStatus: exports.PartyLegalNaturalPersonUsTinStatus$outboundSchema.optional(),
    withholdingState: exports.PartyLegalNaturalPersonWithholdingState$outboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cNoticeDate: "c_notice_date",
        federalTaxClassification: "federal_tax_classification",
        firstBNoticeDate: "first_b_notice_date",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        reportingEligibility: "reporting_eligibility",
        taxCertificationDate: "tax_certification_date",
        taxpayerCertificationState: "taxpayer_certification_state",
        usTinStatus: "us_tin_status",
        withholdingState: "withholding_state",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPersonTaxProfile$;
(function (PartyLegalNaturalPersonTaxProfile$) {
    /** @deprecated use `PartyLegalNaturalPersonTaxProfile$inboundSchema` instead. */
    PartyLegalNaturalPersonTaxProfile$.inboundSchema = exports.PartyLegalNaturalPersonTaxProfile$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPersonTaxProfile$outboundSchema` instead. */
    PartyLegalNaturalPersonTaxProfile$.outboundSchema = exports.PartyLegalNaturalPersonTaxProfile$outboundSchema;
})(PartyLegalNaturalPersonTaxProfile$ || (exports.PartyLegalNaturalPersonTaxProfile$ = PartyLegalNaturalPersonTaxProfile$ = {}));
/** @internal */
exports.PartyLegalNaturalPerson$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birth_date: z.nullable(z.lazy(() => exports.PartyBirthDate$inboundSchema)).optional(),
    citizenship_countries: z.array(z.string()).optional(),
    control_person_company_symbols: z.string().optional(),
    correspondent_employee: z.boolean().optional(),
    correspondent_id: z.string().optional(),
    custodian_employee: z.boolean().optional(),
    death_date: z.nullable(z.lazy(() => exports.PartyDeathDate$inboundSchema)).optional(),
    doing_business_as: z.array(z.string()).optional(),
    employment: z.nullable(z.lazy(() => exports.PartyEmployment$inboundSchema))
        .optional(),
    family_name: z.string().optional(),
    finra_associated_entity: z.string().optional(),
    foreign_identification: z.nullable(z.lazy(() => exports.PartyForeignIdentification$inboundSchema)).optional(),
    given_name: z.string().optional(),
    global_person_id: z.string().optional(),
    identity_verification_result: z.nullable(z.lazy(() => exports.PartyIdentityVerificationResult$inboundSchema)).optional(),
    institutional_customer: z.boolean().optional(),
    investigation_id: z.string().optional(),
    large_trader: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonLargeTrader$inboundSchema)).optional(),
    legal_natural_person_id: z.string().optional(),
    marital_status: exports.PartyMaritalStatus$inboundSchema.optional(),
    middle_names: z.string().optional(),
    name: z.string().optional(),
    name_suffix: exports.PartyNameSuffix$inboundSchema.optional(),
    natural_person_fdd: z.nullable(z.lazy(() => exports.PartyNaturalPersonFdd$inboundSchema)).optional(),
    non_citizen_residency: z.nullable(z.lazy(() => exports.PartyNonCitizenResidency$inboundSchema)).optional(),
    personal_address: z.nullable(z.lazy(() => exports.PartyPersonalAddress$inboundSchema))
        .optional(),
    politically_exposed_immediate_family_names: z.array(z.string()).optional(),
    politically_exposed_organization: z.string().optional(),
    tax_id: z.string().optional(),
    tax_id_last_four: z.string().optional(),
    tax_id_type: exports.PartyLegalNaturalPersonTaxIdType$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonTaxProfile$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accredited_investor": "accreditedInvestor",
        "birth_date": "birthDate",
        "citizenship_countries": "citizenshipCountries",
        "control_person_company_symbols": "controlPersonCompanySymbols",
        "correspondent_employee": "correspondentEmployee",
        "correspondent_id": "correspondentId",
        "custodian_employee": "custodianEmployee",
        "death_date": "deathDate",
        "doing_business_as": "doingBusinessAs",
        "family_name": "familyName",
        "finra_associated_entity": "finraAssociatedEntity",
        "foreign_identification": "foreignIdentification",
        "given_name": "givenName",
        "global_person_id": "globalPersonId",
        "identity_verification_result": "identityVerificationResult",
        "institutional_customer": "institutionalCustomer",
        "investigation_id": "investigationId",
        "large_trader": "largeTrader",
        "legal_natural_person_id": "legalNaturalPersonId",
        "marital_status": "maritalStatus",
        "middle_names": "middleNames",
        "name_suffix": "nameSuffix",
        "natural_person_fdd": "naturalPersonFdd",
        "non_citizen_residency": "nonCitizenResidency",
        "personal_address": "personalAddress",
        "politically_exposed_immediate_family_names": "politicallyExposedImmediateFamilyNames",
        "politically_exposed_organization": "politicallyExposedOrganization",
        "tax_id": "taxId",
        "tax_id_last_four": "taxIdLastFour",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
exports.PartyLegalNaturalPerson$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    birthDate: z.nullable(z.lazy(() => exports.PartyBirthDate$outboundSchema)).optional(),
    citizenshipCountries: z.array(z.string()).optional(),
    controlPersonCompanySymbols: z.string().optional(),
    correspondentEmployee: z.boolean().optional(),
    correspondentId: z.string().optional(),
    custodianEmployee: z.boolean().optional(),
    deathDate: z.nullable(z.lazy(() => exports.PartyDeathDate$outboundSchema)).optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    employment: z.nullable(z.lazy(() => exports.PartyEmployment$outboundSchema))
        .optional(),
    familyName: z.string().optional(),
    finraAssociatedEntity: z.string().optional(),
    foreignIdentification: z.nullable(z.lazy(() => exports.PartyForeignIdentification$outboundSchema)).optional(),
    givenName: z.string().optional(),
    globalPersonId: z.string().optional(),
    identityVerificationResult: z.nullable(z.lazy(() => exports.PartyIdentityVerificationResult$outboundSchema)).optional(),
    institutionalCustomer: z.boolean().optional(),
    investigationId: z.string().optional(),
    largeTrader: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonLargeTrader$outboundSchema)).optional(),
    legalNaturalPersonId: z.string().optional(),
    maritalStatus: exports.PartyMaritalStatus$outboundSchema.optional(),
    middleNames: z.string().optional(),
    name: z.string().optional(),
    nameSuffix: exports.PartyNameSuffix$outboundSchema.optional(),
    naturalPersonFdd: z.nullable(z.lazy(() => exports.PartyNaturalPersonFdd$outboundSchema)).optional(),
    nonCitizenResidency: z.nullable(z.lazy(() => exports.PartyNonCitizenResidency$outboundSchema)).optional(),
    personalAddress: z.nullable(z.lazy(() => exports.PartyPersonalAddress$outboundSchema))
        .optional(),
    politicallyExposedImmediateFamilyNames: z.array(z.string()).optional(),
    politicallyExposedOrganization: z.string().optional(),
    taxId: z.string().optional(),
    taxIdLastFour: z.string().optional(),
    taxIdType: exports.PartyLegalNaturalPersonTaxIdType$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => exports.PartyLegalNaturalPersonTaxProfile$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accreditedInvestor: "accredited_investor",
        birthDate: "birth_date",
        citizenshipCountries: "citizenship_countries",
        controlPersonCompanySymbols: "control_person_company_symbols",
        correspondentEmployee: "correspondent_employee",
        correspondentId: "correspondent_id",
        custodianEmployee: "custodian_employee",
        deathDate: "death_date",
        doingBusinessAs: "doing_business_as",
        familyName: "family_name",
        finraAssociatedEntity: "finra_associated_entity",
        foreignIdentification: "foreign_identification",
        givenName: "given_name",
        globalPersonId: "global_person_id",
        identityVerificationResult: "identity_verification_result",
        institutionalCustomer: "institutional_customer",
        investigationId: "investigation_id",
        largeTrader: "large_trader",
        legalNaturalPersonId: "legal_natural_person_id",
        maritalStatus: "marital_status",
        middleNames: "middle_names",
        nameSuffix: "name_suffix",
        naturalPersonFdd: "natural_person_fdd",
        nonCitizenResidency: "non_citizen_residency",
        personalAddress: "personal_address",
        politicallyExposedImmediateFamilyNames: "politically_exposed_immediate_family_names",
        politicallyExposedOrganization: "politically_exposed_organization",
        taxId: "tax_id",
        taxIdLastFour: "tax_id_last_four",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyLegalNaturalPerson$;
(function (PartyLegalNaturalPerson$) {
    /** @deprecated use `PartyLegalNaturalPerson$inboundSchema` instead. */
    PartyLegalNaturalPerson$.inboundSchema = exports.PartyLegalNaturalPerson$inboundSchema;
    /** @deprecated use `PartyLegalNaturalPerson$outboundSchema` instead. */
    PartyLegalNaturalPerson$.outboundSchema = exports.PartyLegalNaturalPerson$outboundSchema;
})(PartyLegalNaturalPerson$ || (exports.PartyLegalNaturalPerson$ = PartyLegalNaturalPerson$ = {}));
/** @internal */
exports.PartyMailingAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.PartyMailingAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyMailingAddress$;
(function (PartyMailingAddress$) {
    /** @deprecated use `PartyMailingAddress$inboundSchema` instead. */
    PartyMailingAddress$.inboundSchema = exports.PartyMailingAddress$inboundSchema;
    /** @deprecated use `PartyMailingAddress$outboundSchema` instead. */
    PartyMailingAddress$.outboundSchema = exports.PartyMailingAddress$outboundSchema;
})(PartyMailingAddress$ || (exports.PartyMailingAddress$ = PartyMailingAddress$ = {}));
/** @internal */
exports.PartyShortCode$inboundSchema = z.object({
    number: z.string().optional(),
    region_code: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "region_code": "regionCode",
    });
});
/** @internal */
exports.PartyShortCode$outboundSchema = z.object({
    number: z.string().optional(),
    regionCode: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyShortCode$;
(function (PartyShortCode$) {
    /** @deprecated use `PartyShortCode$inboundSchema` instead. */
    PartyShortCode$.inboundSchema = exports.PartyShortCode$inboundSchema;
    /** @deprecated use `PartyShortCode$outboundSchema` instead. */
    PartyShortCode$.outboundSchema = exports.PartyShortCode$outboundSchema;
})(PartyShortCode$ || (exports.PartyShortCode$ = PartyShortCode$ = {}));
/** @internal */
exports.PartyPhoneNumber$inboundSchema = z.object({
    e164_number: z.string().optional(),
    extension: z.string().optional(),
    short_code: z.nullable(z.lazy(() => exports.PartyShortCode$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "e164_number": "e164Number",
        "short_code": "shortCode",
    });
});
/** @internal */
exports.PartyPhoneNumber$outboundSchema = z.object({
    e164Number: z.string().optional(),
    extension: z.string().optional(),
    shortCode: z.nullable(z.lazy(() => exports.PartyShortCode$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        e164Number: "e164_number",
        shortCode: "short_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyPhoneNumber$;
(function (PartyPhoneNumber$) {
    /** @deprecated use `PartyPhoneNumber$inboundSchema` instead. */
    PartyPhoneNumber$.inboundSchema = exports.PartyPhoneNumber$inboundSchema;
    /** @deprecated use `PartyPhoneNumber$outboundSchema` instead. */
    PartyPhoneNumber$.outboundSchema = exports.PartyPhoneNumber$outboundSchema;
})(PartyPhoneNumber$ || (exports.PartyPhoneNumber$ = PartyPhoneNumber$ = {}));
/** @internal */
exports.PartyProspectusDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyProspectusDeliveryPreference),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyProspectusDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyProspectusDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyProspectusDeliveryPreference$;
(function (PartyProspectusDeliveryPreference$) {
    /** @deprecated use `PartyProspectusDeliveryPreference$inboundSchema` instead. */
    PartyProspectusDeliveryPreference$.inboundSchema = exports.PartyProspectusDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyProspectusDeliveryPreference$outboundSchema` instead. */
    PartyProspectusDeliveryPreference$.outboundSchema = exports.PartyProspectusDeliveryPreference$outboundSchema;
})(PartyProspectusDeliveryPreference$ || (exports.PartyProspectusDeliveryPreference$ = PartyProspectusDeliveryPreference$ = {}));
/** @internal */
exports.PartyProxyDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyProxyDeliveryPreference),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyProxyDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyProxyDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyProxyDeliveryPreference$;
(function (PartyProxyDeliveryPreference$) {
    /** @deprecated use `PartyProxyDeliveryPreference$inboundSchema` instead. */
    PartyProxyDeliveryPreference$.inboundSchema = exports.PartyProxyDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyProxyDeliveryPreference$outboundSchema` instead. */
    PartyProxyDeliveryPreference$.outboundSchema = exports.PartyProxyDeliveryPreference$outboundSchema;
})(PartyProxyDeliveryPreference$ || (exports.PartyProxyDeliveryPreference$ = PartyProxyDeliveryPreference$ = {}));
/** @internal */
exports.PartyRelationType$inboundSchema = z
    .union([
    z.nativeEnum(PartyRelationType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyRelationType$outboundSchema = z.union([
    z.nativeEnum(PartyRelationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyRelationType$;
(function (PartyRelationType$) {
    /** @deprecated use `PartyRelationType$inboundSchema` instead. */
    PartyRelationType$.inboundSchema = exports.PartyRelationType$inboundSchema;
    /** @deprecated use `PartyRelationType$outboundSchema` instead. */
    PartyRelationType$.outboundSchema = exports.PartyRelationType$outboundSchema;
})(PartyRelationType$ || (exports.PartyRelationType$ = PartyRelationType$ = {}));
/** @internal */
exports.PartyStatementDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyStatementDeliveryPreference),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyStatementDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyStatementDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyStatementDeliveryPreference$;
(function (PartyStatementDeliveryPreference$) {
    /** @deprecated use `PartyStatementDeliveryPreference$inboundSchema` instead. */
    PartyStatementDeliveryPreference$.inboundSchema = exports.PartyStatementDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyStatementDeliveryPreference$outboundSchema` instead. */
    PartyStatementDeliveryPreference$.outboundSchema = exports.PartyStatementDeliveryPreference$outboundSchema;
})(PartyStatementDeliveryPreference$ || (exports.PartyStatementDeliveryPreference$ = PartyStatementDeliveryPreference$ = {}));
/** @internal */
exports.PartyTaxDocumentDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyTaxDocumentDeliveryPreference),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyTaxDocumentDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyTaxDocumentDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyTaxDocumentDeliveryPreference$;
(function (PartyTaxDocumentDeliveryPreference$) {
    /** @deprecated use `PartyTaxDocumentDeliveryPreference$inboundSchema` instead. */
    PartyTaxDocumentDeliveryPreference$.inboundSchema = exports.PartyTaxDocumentDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyTaxDocumentDeliveryPreference$outboundSchema` instead. */
    PartyTaxDocumentDeliveryPreference$.outboundSchema = exports.PartyTaxDocumentDeliveryPreference$outboundSchema;
})(PartyTaxDocumentDeliveryPreference$ || (exports.PartyTaxDocumentDeliveryPreference$ = PartyTaxDocumentDeliveryPreference$ = {}));
/** @internal */
exports.PartyTradeConfirmationDeliveryPreference$inboundSchema = z
    .union([
    z.nativeEnum(PartyTradeConfirmationDeliveryPreference),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PartyTradeConfirmationDeliveryPreference$outboundSchema = z.union([
    z.nativeEnum(PartyTradeConfirmationDeliveryPreference),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartyTradeConfirmationDeliveryPreference$;
(function (PartyTradeConfirmationDeliveryPreference$) {
    /** @deprecated use `PartyTradeConfirmationDeliveryPreference$inboundSchema` instead. */
    PartyTradeConfirmationDeliveryPreference$.inboundSchema = exports.PartyTradeConfirmationDeliveryPreference$inboundSchema;
    /** @deprecated use `PartyTradeConfirmationDeliveryPreference$outboundSchema` instead. */
    PartyTradeConfirmationDeliveryPreference$.outboundSchema = exports.PartyTradeConfirmationDeliveryPreference$outboundSchema;
})(PartyTradeConfirmationDeliveryPreference$ || (exports.PartyTradeConfirmationDeliveryPreference$ = PartyTradeConfirmationDeliveryPreference$ = {}));
/** @internal */
exports.Party$inboundSchema = z
    .object({
    email_address: z.string().optional(),
    legal_entity: z.nullable(z.lazy(() => exports.PartyLegalEntity$inboundSchema))
        .optional(),
    legal_natural_person: z.nullable(z.lazy(() => exports.PartyLegalNaturalPerson$inboundSchema)).optional(),
    mailing_address: z.nullable(z.lazy(() => exports.PartyMailingAddress$inboundSchema))
        .optional(),
    name: z.string().optional(),
    party_id: z.string().optional(),
    phone_number: z.nullable(z.lazy(() => exports.PartyPhoneNumber$inboundSchema))
        .optional(),
    prospectus_delivery_preference: exports.PartyProspectusDeliveryPreference$inboundSchema.optional(),
    proxy_delivery_preference: exports.PartyProxyDeliveryPreference$inboundSchema
        .optional(),
    relation_type: exports.PartyRelationType$inboundSchema.optional(),
    statement_delivery_preference: exports.PartyStatementDeliveryPreference$inboundSchema.optional(),
    tax_document_delivery_preference: exports.PartyTaxDocumentDeliveryPreference$inboundSchema.optional(),
    trade_confirmation_delivery_preference: exports.PartyTradeConfirmationDeliveryPreference$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "email_address": "emailAddress",
        "legal_entity": "legalEntity",
        "legal_natural_person": "legalNaturalPerson",
        "mailing_address": "mailingAddress",
        "party_id": "partyId",
        "phone_number": "phoneNumber",
        "prospectus_delivery_preference": "prospectusDeliveryPreference",
        "proxy_delivery_preference": "proxyDeliveryPreference",
        "relation_type": "relationType",
        "statement_delivery_preference": "statementDeliveryPreference",
        "tax_document_delivery_preference": "taxDocumentDeliveryPreference",
        "trade_confirmation_delivery_preference": "tradeConfirmationDeliveryPreference",
    });
});
/** @internal */
exports.Party$outboundSchema = z.object({
    emailAddress: z.string().optional(),
    legalEntity: z.nullable(z.lazy(() => exports.PartyLegalEntity$outboundSchema))
        .optional(),
    legalNaturalPerson: z.nullable(z.lazy(() => exports.PartyLegalNaturalPerson$outboundSchema)).optional(),
    mailingAddress: z.nullable(z.lazy(() => exports.PartyMailingAddress$outboundSchema))
        .optional(),
    name: z.string().optional(),
    partyId: z.string().optional(),
    phoneNumber: z.nullable(z.lazy(() => exports.PartyPhoneNumber$outboundSchema))
        .optional(),
    prospectusDeliveryPreference: exports.PartyProspectusDeliveryPreference$outboundSchema
        .optional(),
    proxyDeliveryPreference: exports.PartyProxyDeliveryPreference$outboundSchema
        .optional(),
    relationType: exports.PartyRelationType$outboundSchema.optional(),
    statementDeliveryPreference: exports.PartyStatementDeliveryPreference$outboundSchema
        .optional(),
    taxDocumentDeliveryPreference: exports.PartyTaxDocumentDeliveryPreference$outboundSchema.optional(),
    tradeConfirmationDeliveryPreference: exports.PartyTradeConfirmationDeliveryPreference$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        emailAddress: "email_address",
        legalEntity: "legal_entity",
        legalNaturalPerson: "legal_natural_person",
        mailingAddress: "mailing_address",
        partyId: "party_id",
        phoneNumber: "phone_number",
        prospectusDeliveryPreference: "prospectus_delivery_preference",
        proxyDeliveryPreference: "proxy_delivery_preference",
        relationType: "relation_type",
        statementDeliveryPreference: "statement_delivery_preference",
        taxDocumentDeliveryPreference: "tax_document_delivery_preference",
        tradeConfirmationDeliveryPreference: "trade_confirmation_delivery_preference",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Party$;
(function (Party$) {
    /** @deprecated use `Party$inboundSchema` instead. */
    Party$.inboundSchema = exports.Party$inboundSchema;
    /** @deprecated use `Party$outboundSchema` instead. */
    Party$.outboundSchema = exports.Party$outboundSchema;
})(Party$ || (exports.Party$ = Party$ = {}));
//# sourceMappingURL=party.js.map