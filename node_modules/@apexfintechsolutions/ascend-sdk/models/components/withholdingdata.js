"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithholdingData$ = exports.WithholdingData$outboundSchema = exports.WithholdingData$inboundSchema = exports.WithholdingDataType$ = exports.WithholdingDataType$outboundSchema = exports.WithholdingDataType$inboundSchema = exports.WithholdingDataState$ = exports.WithholdingDataState$outboundSchema = exports.WithholdingDataState$inboundSchema = exports.Rate$ = exports.Rate$outboundSchema = exports.Rate$inboundSchema = exports.WithholdingDataType = exports.WithholdingDataState = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
var WithholdingDataState;
(function (WithholdingDataState) {
    WithholdingDataState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    WithholdingDataState["Ca"] = "CA";
    WithholdingDataState["Me"] = "ME";
    WithholdingDataState["Vt"] = "VT";
    WithholdingDataState["Al"] = "AL";
    WithholdingDataState["Ak"] = "AK";
    WithholdingDataState["Az"] = "AZ";
    WithholdingDataState["Ar"] = "AR";
    WithholdingDataState["Co"] = "CO";
    WithholdingDataState["Ct"] = "CT";
    WithholdingDataState["De"] = "DE";
    WithholdingDataState["Fl"] = "FL";
    WithholdingDataState["Ga"] = "GA";
    WithholdingDataState["Hi"] = "HI";
    WithholdingDataState["Id"] = "ID";
    WithholdingDataState["Il"] = "IL";
    WithholdingDataState["In"] = "IN";
    WithholdingDataState["Ia"] = "IA";
    WithholdingDataState["Ks"] = "KS";
    WithholdingDataState["Ky"] = "KY";
    WithholdingDataState["La"] = "LA";
    WithholdingDataState["Md"] = "MD";
    WithholdingDataState["Ma"] = "MA";
    WithholdingDataState["Mi"] = "MI";
    WithholdingDataState["Mn"] = "MN";
    WithholdingDataState["Ms"] = "MS";
    WithholdingDataState["Mo"] = "MO";
    WithholdingDataState["Mt"] = "MT";
    WithholdingDataState["Ne"] = "NE";
    WithholdingDataState["Nv"] = "NV";
    WithholdingDataState["Nh"] = "NH";
    WithholdingDataState["Nj"] = "NJ";
    WithholdingDataState["Nm"] = "NM";
    WithholdingDataState["Ny"] = "NY";
    WithholdingDataState["Nc"] = "NC";
    WithholdingDataState["Nd"] = "ND";
    WithholdingDataState["Oh"] = "OH";
    WithholdingDataState["Ok"] = "OK";
    WithholdingDataState["Or"] = "OR";
    WithholdingDataState["Pa"] = "PA";
    WithholdingDataState["Ri"] = "RI";
    WithholdingDataState["Sc"] = "SC";
    WithholdingDataState["Sd"] = "SD";
    WithholdingDataState["Tn"] = "TN";
    WithholdingDataState["Tx"] = "TX";
    WithholdingDataState["Ut"] = "UT";
    WithholdingDataState["Va"] = "VA";
    WithholdingDataState["Wa"] = "WA";
    WithholdingDataState["Wv"] = "WV";
    WithholdingDataState["Wi"] = "WI";
    WithholdingDataState["Wy"] = "WY";
})(WithholdingDataState || (exports.WithholdingDataState = WithholdingDataState = {}));
/**
 * Provides more detail on the type of the withholding (Federal, State, etc.)
 */
var WithholdingDataType;
(function (WithholdingDataType) {
    WithholdingDataType["WithholdingTypeUnspecified"] = "WITHHOLDING_TYPE_UNSPECIFIED";
    WithholdingDataType["Federal"] = "FEDERAL";
    WithholdingDataType["State"] = "STATE";
    WithholdingDataType["ForeignSecurity"] = "FOREIGN_SECURITY";
    WithholdingDataType["FederalIra"] = "FEDERAL_IRA";
    WithholdingDataType["StateIra"] = "STATE_IRA";
    WithholdingDataType["NonResidentAlien"] = "NON_RESIDENT_ALIEN";
})(WithholdingDataType || (exports.WithholdingDataType = WithholdingDataType = {}));
/** @internal */
exports.Rate$inboundSchema = z
    .object({
    value: z.string().optional(),
});
/** @internal */
exports.Rate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Rate$;
(function (Rate$) {
    /** @deprecated use `Rate$inboundSchema` instead. */
    Rate$.inboundSchema = exports.Rate$inboundSchema;
    /** @deprecated use `Rate$outboundSchema` instead. */
    Rate$.outboundSchema = exports.Rate$outboundSchema;
})(Rate$ || (exports.Rate$ = Rate$ = {}));
/** @internal */
exports.WithholdingDataState$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingDataState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.WithholdingDataState$outboundSchema = z.union([
    z.nativeEnum(WithholdingDataState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithholdingDataState$;
(function (WithholdingDataState$) {
    /** @deprecated use `WithholdingDataState$inboundSchema` instead. */
    WithholdingDataState$.inboundSchema = exports.WithholdingDataState$inboundSchema;
    /** @deprecated use `WithholdingDataState$outboundSchema` instead. */
    WithholdingDataState$.outboundSchema = exports.WithholdingDataState$outboundSchema;
})(WithholdingDataState$ || (exports.WithholdingDataState$ = WithholdingDataState$ = {}));
/** @internal */
exports.WithholdingDataType$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingDataType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.WithholdingDataType$outboundSchema = z.union([
    z.nativeEnum(WithholdingDataType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithholdingDataType$;
(function (WithholdingDataType$) {
    /** @deprecated use `WithholdingDataType$inboundSchema` instead. */
    WithholdingDataType$.inboundSchema = exports.WithholdingDataType$inboundSchema;
    /** @deprecated use `WithholdingDataType$outboundSchema` instead. */
    WithholdingDataType$.outboundSchema = exports.WithholdingDataType$outboundSchema;
})(WithholdingDataType$ || (exports.WithholdingDataType$ = WithholdingDataType$ = {}));
/** @internal */
exports.WithholdingData$inboundSchema = z.object({
    rate: z.nullable(z.lazy(() => exports.Rate$inboundSchema)).optional(),
    region_code: z.string().optional(),
    state: exports.WithholdingDataState$inboundSchema.optional(),
    tax_year: z.number().int().optional(),
    type: exports.WithholdingDataType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "region_code": "regionCode",
        "tax_year": "taxYear",
    });
});
/** @internal */
exports.WithholdingData$outboundSchema = z.object({
    rate: z.nullable(z.lazy(() => exports.Rate$outboundSchema)).optional(),
    regionCode: z.string().optional(),
    state: exports.WithholdingDataState$outboundSchema.optional(),
    taxYear: z.number().int().optional(),
    type: exports.WithholdingDataType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        regionCode: "region_code",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithholdingData$;
(function (WithholdingData$) {
    /** @deprecated use `WithholdingData$inboundSchema` instead. */
    WithholdingData$.inboundSchema = exports.WithholdingData$inboundSchema;
    /** @deprecated use `WithholdingData$outboundSchema` instead. */
    WithholdingData$.outboundSchema = exports.WithholdingData$outboundSchema;
})(WithholdingData$ || (exports.WithholdingData$ = WithholdingData$ = {}));
//# sourceMappingURL=withholdingdata.js.map