"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndividualRecipientParty$inboundSchema = exports.IctDepositTravelRuleIndividualRecipientPartyAddress$ = exports.IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema = exports.IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema = exports.IndividualOriginatingParty$ = exports.IndividualOriginatingParty$outboundSchema = exports.IndividualOriginatingParty$inboundSchema = exports.IctDepositTravelRuleAddress$ = exports.IctDepositTravelRuleAddress$outboundSchema = exports.IctDepositTravelRuleAddress$inboundSchema = exports.EntityRecipientParty$ = exports.EntityRecipientParty$outboundSchema = exports.EntityRecipientParty$inboundSchema = exports.IctDepositAddress$ = exports.IctDepositAddress$outboundSchema = exports.IctDepositAddress$inboundSchema = exports.EntityOriginatingParty$ = exports.EntityOriginatingParty$outboundSchema = exports.EntityOriginatingParty$inboundSchema = exports.IctDepositTravelRuleEntityOriginatingPartyAddress$ = exports.IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema = exports.IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema = exports.TransferState$ = exports.TransferState$outboundSchema = exports.TransferState$inboundSchema = exports.IctDepositTransferStateState$ = exports.IctDepositTransferStateState$outboundSchema = exports.IctDepositTransferStateState$inboundSchema = exports.IctDepositState$ = exports.IctDepositState$outboundSchema = exports.IctDepositState$inboundSchema = exports.IctDepositStateState$ = exports.IctDepositStateState$outboundSchema = exports.IctDepositStateState$inboundSchema = exports.IctDepositRetirementContribution$ = exports.IctDepositRetirementContribution$outboundSchema = exports.IctDepositRetirementContribution$inboundSchema = exports.IctDepositType$ = exports.IctDepositType$outboundSchema = exports.IctDepositType$inboundSchema = exports.IctDepositProgram$ = exports.IctDepositProgram$outboundSchema = exports.IctDepositProgram$inboundSchema = exports.IctDepositAmount$ = exports.IctDepositAmount$outboundSchema = exports.IctDepositAmount$inboundSchema = exports.IctDepositTransferStateState = exports.IctDepositStateState = exports.IctDepositType = exports.IctDepositProgram = void 0;
exports.IctDeposit$ = exports.IctDeposit$outboundSchema = exports.IctDeposit$inboundSchema = exports.TravelRule$ = exports.TravelRule$outboundSchema = exports.TravelRule$inboundSchema = exports.RecipientInstitution$ = exports.RecipientInstitution$outboundSchema = exports.RecipientInstitution$inboundSchema = exports.OriginatingInstitution$ = exports.OriginatingInstitution$outboundSchema = exports.OriginatingInstitution$inboundSchema = exports.IndividualRecipientParty$ = exports.IndividualRecipientParty$outboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The name of the program the ICT deposit is associated with
 */
var IctDepositProgram;
(function (IctDepositProgram) {
    IctDepositProgram["IctProgramUnspecified"] = "ICT_PROGRAM_UNSPECIFIED";
    IctDepositProgram["BrokerPartner"] = "BROKER_PARTNER";
    IctDepositProgram["DepositOnly"] = "DEPOSIT_ONLY";
    IctDepositProgram["BankingPartner"] = "BANKING_PARTNER";
    IctDepositProgram["MoneyTransmitter"] = "MONEY_TRANSMITTER";
    IctDepositProgram["WithdrawalOnly"] = "WITHDRAWAL_ONLY";
    IctDepositProgram["DigitalPartner"] = "DIGITAL_PARTNER";
})(IctDepositProgram || (exports.IctDepositProgram = IctDepositProgram = {}));
/**
 * The type of retirement contribution.
 */
var IctDepositType;
(function (IctDepositType) {
    IctDepositType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    IctDepositType["Regular"] = "REGULAR";
    IctDepositType["Employee"] = "EMPLOYEE";
    IctDepositType["Employer"] = "EMPLOYER";
    IctDepositType["Recharacterization"] = "RECHARACTERIZATION";
    IctDepositType["Rollover60Day"] = "ROLLOVER_60_DAY";
    IctDepositType["RolloverDirect"] = "ROLLOVER_DIRECT";
    IctDepositType["Transfer"] = "TRANSFER";
    IctDepositType["TrusteeFee"] = "TRUSTEE_FEE";
    IctDepositType["Conversion"] = "CONVERSION";
    IctDepositType["Repayment"] = "REPAYMENT";
    IctDepositType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(IctDepositType || (exports.IctDepositType = IctDepositType = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
var IctDepositStateState;
(function (IctDepositStateState) {
    IctDepositStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    IctDepositStateState["Processing"] = "PROCESSING";
    IctDepositStateState["PendingReview"] = "PENDING_REVIEW";
    IctDepositStateState["Posted"] = "POSTED";
    IctDepositStateState["Completed"] = "COMPLETED";
    IctDepositStateState["Rejected"] = "REJECTED";
    IctDepositStateState["Canceled"] = "CANCELED";
    IctDepositStateState["Returned"] = "RETURNED";
    IctDepositStateState["Postponed"] = "POSTPONED";
})(IctDepositStateState || (exports.IctDepositStateState = IctDepositStateState = {}));
/**
 * The high level state of a transfer, one of:
 *
 * @remarks
 * - `PROCESSING` - The transfer is being processed and will be posted if successful.
 * - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
 * - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
 * - `COMPLETED` - The transfer has been batched and completed.
 * - `REJECTED` - The transfer was rejected.
 * - `CANCELED` - The transfer was canceled.
 * - `RETURNED` - The transfer was returned.
 * - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
 */
var IctDepositTransferStateState;
(function (IctDepositTransferStateState) {
    IctDepositTransferStateState["StateUnspecified"] = "STATE_UNSPECIFIED";
    IctDepositTransferStateState["Processing"] = "PROCESSING";
    IctDepositTransferStateState["PendingReview"] = "PENDING_REVIEW";
    IctDepositTransferStateState["Posted"] = "POSTED";
    IctDepositTransferStateState["Completed"] = "COMPLETED";
    IctDepositTransferStateState["Rejected"] = "REJECTED";
    IctDepositTransferStateState["Canceled"] = "CANCELED";
    IctDepositTransferStateState["Returned"] = "RETURNED";
    IctDepositTransferStateState["Postponed"] = "POSTPONED";
})(IctDepositTransferStateState || (exports.IctDepositTransferStateState = IctDepositTransferStateState = {}));
/** @internal */
exports.IctDepositAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.IctDepositAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositAmount$;
(function (IctDepositAmount$) {
    /** @deprecated use `IctDepositAmount$inboundSchema` instead. */
    IctDepositAmount$.inboundSchema = exports.IctDepositAmount$inboundSchema;
    /** @deprecated use `IctDepositAmount$outboundSchema` instead. */
    IctDepositAmount$.outboundSchema = exports.IctDepositAmount$outboundSchema;
})(IctDepositAmount$ || (exports.IctDepositAmount$ = IctDepositAmount$ = {}));
/** @internal */
exports.IctDepositProgram$inboundSchema = z
    .union([
    z.nativeEnum(IctDepositProgram),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.IctDepositProgram$outboundSchema = z.union([
    z.nativeEnum(IctDepositProgram),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositProgram$;
(function (IctDepositProgram$) {
    /** @deprecated use `IctDepositProgram$inboundSchema` instead. */
    IctDepositProgram$.inboundSchema = exports.IctDepositProgram$inboundSchema;
    /** @deprecated use `IctDepositProgram$outboundSchema` instead. */
    IctDepositProgram$.outboundSchema = exports.IctDepositProgram$outboundSchema;
})(IctDepositProgram$ || (exports.IctDepositProgram$ = IctDepositProgram$ = {}));
/** @internal */
exports.IctDepositType$inboundSchema = z
    .union([
    z.nativeEnum(IctDepositType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.IctDepositType$outboundSchema = z.union([
    z.nativeEnum(IctDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositType$;
(function (IctDepositType$) {
    /** @deprecated use `IctDepositType$inboundSchema` instead. */
    IctDepositType$.inboundSchema = exports.IctDepositType$inboundSchema;
    /** @deprecated use `IctDepositType$outboundSchema` instead. */
    IctDepositType$.outboundSchema = exports.IctDepositType$outboundSchema;
})(IctDepositType$ || (exports.IctDepositType$ = IctDepositType$ = {}));
/** @internal */
exports.IctDepositRetirementContribution$inboundSchema = z.object({
    tax_year: z.number().int().optional(),
    type: exports.IctDepositType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
exports.IctDepositRetirementContribution$outboundSchema = z.object({
    taxYear: z.number().int().optional(),
    type: exports.IctDepositType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositRetirementContribution$;
(function (IctDepositRetirementContribution$) {
    /** @deprecated use `IctDepositRetirementContribution$inboundSchema` instead. */
    IctDepositRetirementContribution$.inboundSchema = exports.IctDepositRetirementContribution$inboundSchema;
    /** @deprecated use `IctDepositRetirementContribution$outboundSchema` instead. */
    IctDepositRetirementContribution$.outboundSchema = exports.IctDepositRetirementContribution$outboundSchema;
})(IctDepositRetirementContribution$ || (exports.IctDepositRetirementContribution$ = IctDepositRetirementContribution$ = {}));
/** @internal */
exports.IctDepositStateState$inboundSchema = z
    .union([
    z.nativeEnum(IctDepositStateState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.IctDepositStateState$outboundSchema = z.union([
    z.nativeEnum(IctDepositStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositStateState$;
(function (IctDepositStateState$) {
    /** @deprecated use `IctDepositStateState$inboundSchema` instead. */
    IctDepositStateState$.inboundSchema = exports.IctDepositStateState$inboundSchema;
    /** @deprecated use `IctDepositStateState$outboundSchema` instead. */
    IctDepositStateState$.outboundSchema = exports.IctDepositStateState$outboundSchema;
})(IctDepositStateState$ || (exports.IctDepositStateState$ = IctDepositStateState$ = {}));
/** @internal */
exports.IctDepositState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.IctDepositStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
exports.IctDepositState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.IctDepositStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositState$;
(function (IctDepositState$) {
    /** @deprecated use `IctDepositState$inboundSchema` instead. */
    IctDepositState$.inboundSchema = exports.IctDepositState$inboundSchema;
    /** @deprecated use `IctDepositState$outboundSchema` instead. */
    IctDepositState$.outboundSchema = exports.IctDepositState$outboundSchema;
})(IctDepositState$ || (exports.IctDepositState$ = IctDepositState$ = {}));
/** @internal */
exports.IctDepositTransferStateState$inboundSchema = z
    .union([
    z.nativeEnum(IctDepositTransferStateState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.IctDepositTransferStateState$outboundSchema = z.union([
    z.nativeEnum(IctDepositTransferStateState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositTransferStateState$;
(function (IctDepositTransferStateState$) {
    /** @deprecated use `IctDepositTransferStateState$inboundSchema` instead. */
    IctDepositTransferStateState$.inboundSchema = exports.IctDepositTransferStateState$inboundSchema;
    /** @deprecated use `IctDepositTransferStateState$outboundSchema` instead. */
    IctDepositTransferStateState$.outboundSchema = exports.IctDepositTransferStateState$outboundSchema;
})(IctDepositTransferStateState$ || (exports.IctDepositTransferStateState$ = IctDepositTransferStateState$ = {}));
/** @internal */
exports.TransferState$inboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.IctDepositTransferStateState$inboundSchema.optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "update_time": "updateTime",
    });
});
/** @internal */
exports.TransferState$outboundSchema = z.object({
    actor: z.string().optional(),
    message: z.string().optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    state: exports.IctDepositTransferStateState$outboundSchema.optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        updateTime: "update_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransferState$;
(function (TransferState$) {
    /** @deprecated use `TransferState$inboundSchema` instead. */
    TransferState$.inboundSchema = exports.TransferState$inboundSchema;
    /** @deprecated use `TransferState$outboundSchema` instead. */
    TransferState$.outboundSchema = exports.TransferState$outboundSchema;
})(TransferState$ || (exports.TransferState$ = TransferState$ = {}));
/** @internal */
exports.IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositTravelRuleEntityOriginatingPartyAddress$;
(function (IctDepositTravelRuleEntityOriginatingPartyAddress$) {
    /** @deprecated use `IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema` instead. */
    IctDepositTravelRuleEntityOriginatingPartyAddress$.inboundSchema = exports.IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema;
    /** @deprecated use `IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema` instead. */
    IctDepositTravelRuleEntityOriginatingPartyAddress$.outboundSchema = exports.IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema;
})(IctDepositTravelRuleEntityOriginatingPartyAddress$ || (exports.IctDepositTravelRuleEntityOriginatingPartyAddress$ = IctDepositTravelRuleEntityOriginatingPartyAddress$ = {}));
/** @internal */
exports.EntityOriginatingParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => exports.IctDepositTravelRuleEntityOriginatingPartyAddress$inboundSchema)).optional(),
    tax_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "tax_id": "taxId",
    });
});
/** @internal */
exports.EntityOriginatingParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => exports.IctDepositTravelRuleEntityOriginatingPartyAddress$outboundSchema)).optional(),
    taxId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        taxId: "tax_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntityOriginatingParty$;
(function (EntityOriginatingParty$) {
    /** @deprecated use `EntityOriginatingParty$inboundSchema` instead. */
    EntityOriginatingParty$.inboundSchema = exports.EntityOriginatingParty$inboundSchema;
    /** @deprecated use `EntityOriginatingParty$outboundSchema` instead. */
    EntityOriginatingParty$.outboundSchema = exports.EntityOriginatingParty$outboundSchema;
})(EntityOriginatingParty$ || (exports.EntityOriginatingParty$ = EntityOriginatingParty$ = {}));
/** @internal */
exports.IctDepositAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.IctDepositAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositAddress$;
(function (IctDepositAddress$) {
    /** @deprecated use `IctDepositAddress$inboundSchema` instead. */
    IctDepositAddress$.inboundSchema = exports.IctDepositAddress$inboundSchema;
    /** @deprecated use `IctDepositAddress$outboundSchema` instead. */
    IctDepositAddress$.outboundSchema = exports.IctDepositAddress$outboundSchema;
})(IctDepositAddress$ || (exports.IctDepositAddress$ = IctDepositAddress$ = {}));
/** @internal */
exports.EntityRecipientParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => exports.IctDepositAddress$inboundSchema)).optional(),
    tax_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "tax_id": "taxId",
    });
});
/** @internal */
exports.EntityRecipientParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => exports.IctDepositAddress$outboundSchema))
        .optional(),
    taxId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        taxId: "tax_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntityRecipientParty$;
(function (EntityRecipientParty$) {
    /** @deprecated use `EntityRecipientParty$inboundSchema` instead. */
    EntityRecipientParty$.inboundSchema = exports.EntityRecipientParty$inboundSchema;
    /** @deprecated use `EntityRecipientParty$outboundSchema` instead. */
    EntityRecipientParty$.outboundSchema = exports.EntityRecipientParty$outboundSchema;
})(EntityRecipientParty$ || (exports.EntityRecipientParty$ = EntityRecipientParty$ = {}));
/** @internal */
exports.IctDepositTravelRuleAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.IctDepositTravelRuleAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositTravelRuleAddress$;
(function (IctDepositTravelRuleAddress$) {
    /** @deprecated use `IctDepositTravelRuleAddress$inboundSchema` instead. */
    IctDepositTravelRuleAddress$.inboundSchema = exports.IctDepositTravelRuleAddress$inboundSchema;
    /** @deprecated use `IctDepositTravelRuleAddress$outboundSchema` instead. */
    IctDepositTravelRuleAddress$.outboundSchema = exports.IctDepositTravelRuleAddress$outboundSchema;
})(IctDepositTravelRuleAddress$ || (exports.IctDepositTravelRuleAddress$ = IctDepositTravelRuleAddress$ = {}));
/** @internal */
exports.IndividualOriginatingParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => exports.IctDepositTravelRuleAddress$inboundSchema))
        .optional(),
    family_name: z.string().optional(),
    given_names: z.array(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "family_name": "familyName",
        "given_names": "givenNames",
    });
});
/** @internal */
exports.IndividualOriginatingParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => exports.IctDepositTravelRuleAddress$outboundSchema))
        .optional(),
    familyName: z.string().optional(),
    givenNames: z.array(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        familyName: "family_name",
        givenNames: "given_names",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IndividualOriginatingParty$;
(function (IndividualOriginatingParty$) {
    /** @deprecated use `IndividualOriginatingParty$inboundSchema` instead. */
    IndividualOriginatingParty$.inboundSchema = exports.IndividualOriginatingParty$inboundSchema;
    /** @deprecated use `IndividualOriginatingParty$outboundSchema` instead. */
    IndividualOriginatingParty$.outboundSchema = exports.IndividualOriginatingParty$outboundSchema;
})(IndividualOriginatingParty$ || (exports.IndividualOriginatingParty$ = IndividualOriginatingParty$ = {}));
/** @internal */
exports.IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDepositTravelRuleIndividualRecipientPartyAddress$;
(function (IctDepositTravelRuleIndividualRecipientPartyAddress$) {
    /** @deprecated use `IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema` instead. */
    IctDepositTravelRuleIndividualRecipientPartyAddress$.inboundSchema = exports.IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema;
    /** @deprecated use `IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema` instead. */
    IctDepositTravelRuleIndividualRecipientPartyAddress$.outboundSchema = exports.IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema;
})(IctDepositTravelRuleIndividualRecipientPartyAddress$ || (exports.IctDepositTravelRuleIndividualRecipientPartyAddress$ = IctDepositTravelRuleIndividualRecipientPartyAddress$ = {}));
/** @internal */
exports.IndividualRecipientParty$inboundSchema = z.object({
    address: z.nullable(z.lazy(() => exports.IctDepositTravelRuleIndividualRecipientPartyAddress$inboundSchema)).optional(),
    family_name: z.string().optional(),
    given_names: z.array(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "family_name": "familyName",
        "given_names": "givenNames",
    });
});
/** @internal */
exports.IndividualRecipientParty$outboundSchema = z.object({
    address: z.nullable(z.lazy(() => exports.IctDepositTravelRuleIndividualRecipientPartyAddress$outboundSchema)).optional(),
    familyName: z.string().optional(),
    givenNames: z.array(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        familyName: "family_name",
        givenNames: "given_names",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IndividualRecipientParty$;
(function (IndividualRecipientParty$) {
    /** @deprecated use `IndividualRecipientParty$inboundSchema` instead. */
    IndividualRecipientParty$.inboundSchema = exports.IndividualRecipientParty$inboundSchema;
    /** @deprecated use `IndividualRecipientParty$outboundSchema` instead. */
    IndividualRecipientParty$.outboundSchema = exports.IndividualRecipientParty$outboundSchema;
})(IndividualRecipientParty$ || (exports.IndividualRecipientParty$ = IndividualRecipientParty$ = {}));
/** @internal */
exports.OriginatingInstitution$inboundSchema = z.object({
    account_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
    });
});
/** @internal */
exports.OriginatingInstitution$outboundSchema = z.object({
    accountId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OriginatingInstitution$;
(function (OriginatingInstitution$) {
    /** @deprecated use `OriginatingInstitution$inboundSchema` instead. */
    OriginatingInstitution$.inboundSchema = exports.OriginatingInstitution$inboundSchema;
    /** @deprecated use `OriginatingInstitution$outboundSchema` instead. */
    OriginatingInstitution$.outboundSchema = exports.OriginatingInstitution$outboundSchema;
})(OriginatingInstitution$ || (exports.OriginatingInstitution$ = OriginatingInstitution$ = {}));
/** @internal */
exports.RecipientInstitution$inboundSchema = z.object({
    account_id: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
    });
});
/** @internal */
exports.RecipientInstitution$outboundSchema = z.object({
    accountId: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RecipientInstitution$;
(function (RecipientInstitution$) {
    /** @deprecated use `RecipientInstitution$inboundSchema` instead. */
    RecipientInstitution$.inboundSchema = exports.RecipientInstitution$inboundSchema;
    /** @deprecated use `RecipientInstitution$outboundSchema` instead. */
    RecipientInstitution$.outboundSchema = exports.RecipientInstitution$outboundSchema;
})(RecipientInstitution$ || (exports.RecipientInstitution$ = RecipientInstitution$ = {}));
/** @internal */
exports.TravelRule$inboundSchema = z.object({
    entity_originating_party: z.nullable(z.lazy(() => exports.EntityOriginatingParty$inboundSchema)).optional(),
    entity_recipient_party: z.nullable(z.lazy(() => exports.EntityRecipientParty$inboundSchema)).optional(),
    individual_originating_party: z.nullable(z.lazy(() => exports.IndividualOriginatingParty$inboundSchema)).optional(),
    individual_recipient_party: z.nullable(z.lazy(() => exports.IndividualRecipientParty$inboundSchema)).optional(),
    originating_institution: z.nullable(z.lazy(() => exports.OriginatingInstitution$inboundSchema)).optional(),
    recipient_institution: z.nullable(z.lazy(() => exports.RecipientInstitution$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "entity_originating_party": "entityOriginatingParty",
        "entity_recipient_party": "entityRecipientParty",
        "individual_originating_party": "individualOriginatingParty",
        "individual_recipient_party": "individualRecipientParty",
        "originating_institution": "originatingInstitution",
        "recipient_institution": "recipientInstitution",
    });
});
/** @internal */
exports.TravelRule$outboundSchema = z.object({
    entityOriginatingParty: z.nullable(z.lazy(() => exports.EntityOriginatingParty$outboundSchema)).optional(),
    entityRecipientParty: z.nullable(z.lazy(() => exports.EntityRecipientParty$outboundSchema)).optional(),
    individualOriginatingParty: z.nullable(z.lazy(() => exports.IndividualOriginatingParty$outboundSchema)).optional(),
    individualRecipientParty: z.nullable(z.lazy(() => exports.IndividualRecipientParty$outboundSchema)).optional(),
    originatingInstitution: z.nullable(z.lazy(() => exports.OriginatingInstitution$outboundSchema)).optional(),
    recipientInstitution: z.nullable(z.lazy(() => exports.RecipientInstitution$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        entityOriginatingParty: "entity_originating_party",
        entityRecipientParty: "entity_recipient_party",
        individualOriginatingParty: "individual_originating_party",
        individualRecipientParty: "individual_recipient_party",
        originatingInstitution: "originating_institution",
        recipientInstitution: "recipient_institution",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TravelRule$;
(function (TravelRule$) {
    /** @deprecated use `TravelRule$inboundSchema` instead. */
    TravelRule$.inboundSchema = exports.TravelRule$inboundSchema;
    /** @deprecated use `TravelRule$outboundSchema` instead. */
    TravelRule$.outboundSchema = exports.TravelRule$outboundSchema;
})(TravelRule$ || (exports.TravelRule$ = TravelRule$ = {}));
/** @internal */
exports.IctDeposit$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.IctDepositAmount$inboundSchema)).optional(),
    client_transfer_id: z.string().optional(),
    name: z.string().optional(),
    program: exports.IctDepositProgram$inboundSchema.optional(),
    retirement_contribution: z.nullable(z.lazy(() => exports.IctDepositRetirementContribution$inboundSchema)).optional(),
    state: z.nullable(z.lazy(() => exports.IctDepositState$inboundSchema)).optional(),
    transfer_state: z.nullable(z.lazy(() => exports.TransferState$inboundSchema))
        .optional(),
    travel_rule: z.nullable(z.lazy(() => exports.TravelRule$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "client_transfer_id": "clientTransferId",
        "retirement_contribution": "retirementContribution",
        "transfer_state": "transferState",
        "travel_rule": "travelRule",
    });
});
/** @internal */
exports.IctDeposit$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.IctDepositAmount$outboundSchema)).optional(),
    clientTransferId: z.string().optional(),
    name: z.string().optional(),
    program: exports.IctDepositProgram$outboundSchema.optional(),
    retirementContribution: z.nullable(z.lazy(() => exports.IctDepositRetirementContribution$outboundSchema)).optional(),
    state: z.nullable(z.lazy(() => exports.IctDepositState$outboundSchema)).optional(),
    transferState: z.nullable(z.lazy(() => exports.TransferState$outboundSchema))
        .optional(),
    travelRule: z.nullable(z.lazy(() => exports.TravelRule$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        clientTransferId: "client_transfer_id",
        retirementContribution: "retirement_contribution",
        transferState: "transfer_state",
        travelRule: "travel_rule",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IctDeposit$;
(function (IctDeposit$) {
    /** @deprecated use `IctDeposit$inboundSchema` instead. */
    IctDeposit$.inboundSchema = exports.IctDeposit$inboundSchema;
    /** @deprecated use `IctDeposit$outboundSchema` instead. */
    IctDeposit$.outboundSchema = exports.IctDeposit$outboundSchema;
})(IctDeposit$ || (exports.IctDeposit$ = IctDeposit$ = {}));
//# sourceMappingURL=ictdeposit.js.map