import * as z from "zod";
import { OpenEnum } from "../../types/enums.js";
import { Lot, Lot$Outbound } from "./lot.js";
import { YieldRecord, YieldRecord$Outbound } from "./yieldrecord.js";
/**
 * Used to calculate broadridge blotter code
 */
export declare enum CompleteTradeResponseBrokerCapacity {
    CapacityUnspecified = "CAPACITY_UNSPECIFIED",
    Agency = "AGENCY",
    Principal = "PRINCIPAL",
    Mixed = "MIXED"
}
/**
 * Used to calculate broadridge blotter code
 */
export type CompleteTradeResponseBrokerCapacityOpen = OpenEnum<typeof CompleteTradeResponseBrokerCapacity>;
/**
 * The price for the instrument that is prevailing in the market.
 */
export type CompleteTradeResponsePrevailingMarketPrice = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * Total monetary value of the price_adjustment
 */
export type CompleteTradeResponsePriceAdjustmentAmount = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type CompleteTradeResponsePriceAdjustmentPercent = {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
};
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export declare enum CompleteTradeResponsePriceAdjustmentType {
    PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
    Markup = "MARKUP",
    Markdown = "MARKDOWN",
    SalesLoad = "SALES_LOAD"
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type CompleteTradeResponsePriceAdjustmentTypeOpen = OpenEnum<typeof CompleteTradeResponsePriceAdjustmentType>;
/**
 * Information about any price adjustments applied to the security
 */
export type CompleteTradeResponsePriceAdjustmentRecord = {
    /**
     * Total monetary value of the price_adjustment
     */
    priceAdjustmentAmount?: CompleteTradeResponsePriceAdjustmentAmount | null | undefined;
    /**
     * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
     */
    priceAdjustmentPercent?: CompleteTradeResponsePriceAdjustmentPercent | null | undefined;
    /**
     * The type of price adjustment being applied by the broker to the net price of the security
     */
    priceAdjustmentType?: CompleteTradeResponsePriceAdjustmentTypeOpen | undefined;
};
/**
 * The completed trade.
 */
export type CompleteTradeResponseTrade = {
    /**
     * Free form text field containing additional information for a trade
     */
    additionalInstructions?: Array<string> | undefined;
    /**
     * Max Length 100 characters. Alternate order id from the street used for FRAC trades
     */
    alternateOrderId?: string | undefined;
    /**
     * uuid assigned by the Booking API if a trade belongs to an allocation
     */
    bookingApiTradeAllocationId?: string | undefined;
    /**
     * uuid assigned by the Booking API to all trades
     */
    bookingApiTradeId?: string | undefined;
    /**
     * Executing broker of the trade
     */
    broker?: string | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    brokerCapacity?: CompleteTradeResponseBrokerCapacityOpen | undefined;
    /**
     * Free form text submitted by the client for internal purposes
     */
    clientMemos?: Array<string> | undefined;
    /**
     * 32 characters. The client order ID from the order submitted
     */
    clientOrderId?: string | undefined;
    /**
     * MIC code for the exchange
     */
    exchange?: string | undefined;
    /**
     * Execution id from the street
     */
    executionId?: string | undefined;
    /**
     * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
     */
    executionOnly?: boolean | undefined;
    /**
     * Max Length 100 characters. External system id provided by a client
     */
    externalId?: string | undefined;
    /**
     * The confirmation number associated with a mutual fund trade
     */
    fundConfirmationNumber?: string | undefined;
    /**
     * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
     */
    gatewayClientOrderId?: string | undefined;
    /**
     * If set to true, indicates the trade should be omitted from client billing
     */
    internalError?: boolean | undefined;
    /**
     * Set on penny-for-the-lot trades
     */
    isWriteoff?: boolean | undefined;
    /**
     * Repeated record containing information about the tax lots, if specified
     */
    lots?: Array<Lot> | undefined;
    /**
     * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
     */
    orderId?: string | undefined;
    /**
     * The price for the instrument that is prevailing in the market.
     */
    prevailingMarketPrice?: CompleteTradeResponsePrevailingMarketPrice | null | undefined;
    /**
     * Information about any price adjustments applied to the security
     */
    priceAdjustmentRecord?: CompleteTradeResponsePriceAdjustmentRecord | null | undefined;
    /**
     * Used to calculate broadridge blotter code
     */
    route?: string | undefined;
    /**
     * The special instructions for a trade
     */
    specialInstructions?: Array<string> | undefined;
    /**
     * Name of the issuer of a security and additional descriptive information about the particular issue
     */
    symbolDescription?: string | undefined;
    /**
     * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
     */
    whenIssued?: boolean | undefined;
    /**
     * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
     */
    yieldRecords?: Array<YieldRecord> | undefined;
};
/**
 * A response to the complete trade method.
 */
export type CompleteTradeResponse = {
    /**
     * The completed trade.
     */
    trade?: CompleteTradeResponseTrade | null | undefined;
};
/** @internal */
export declare const CompleteTradeResponseBrokerCapacity$inboundSchema: z.ZodType<CompleteTradeResponseBrokerCapacityOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const CompleteTradeResponseBrokerCapacity$outboundSchema: z.ZodType<CompleteTradeResponseBrokerCapacityOpen, z.ZodTypeDef, CompleteTradeResponseBrokerCapacityOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteTradeResponseBrokerCapacity$ {
    /** @deprecated use `CompleteTradeResponseBrokerCapacity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteTradeResponseBrokerCapacityOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteTradeResponseBrokerCapacity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteTradeResponseBrokerCapacityOpen, z.ZodTypeDef, CompleteTradeResponseBrokerCapacityOpen>;
}
/** @internal */
export declare const CompleteTradeResponsePrevailingMarketPrice$inboundSchema: z.ZodType<CompleteTradeResponsePrevailingMarketPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteTradeResponsePrevailingMarketPrice$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const CompleteTradeResponsePrevailingMarketPrice$outboundSchema: z.ZodType<CompleteTradeResponsePrevailingMarketPrice$Outbound, z.ZodTypeDef, CompleteTradeResponsePrevailingMarketPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteTradeResponsePrevailingMarketPrice$ {
    /** @deprecated use `CompleteTradeResponsePrevailingMarketPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteTradeResponsePrevailingMarketPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteTradeResponsePrevailingMarketPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteTradeResponsePrevailingMarketPrice$Outbound, z.ZodTypeDef, CompleteTradeResponsePrevailingMarketPrice>;
    /** @deprecated use `CompleteTradeResponsePrevailingMarketPrice$Outbound` instead. */
    type Outbound = CompleteTradeResponsePrevailingMarketPrice$Outbound;
}
/** @internal */
export declare const CompleteTradeResponsePriceAdjustmentAmount$inboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteTradeResponsePriceAdjustmentAmount$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const CompleteTradeResponsePriceAdjustmentAmount$outboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentAmount$Outbound, z.ZodTypeDef, CompleteTradeResponsePriceAdjustmentAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteTradeResponsePriceAdjustmentAmount$ {
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentAmount$Outbound, z.ZodTypeDef, CompleteTradeResponsePriceAdjustmentAmount>;
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentAmount$Outbound` instead. */
    type Outbound = CompleteTradeResponsePriceAdjustmentAmount$Outbound;
}
/** @internal */
export declare const CompleteTradeResponsePriceAdjustmentPercent$inboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentPercent, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteTradeResponsePriceAdjustmentPercent$Outbound = {
    value?: string | undefined;
};
/** @internal */
export declare const CompleteTradeResponsePriceAdjustmentPercent$outboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentPercent$Outbound, z.ZodTypeDef, CompleteTradeResponsePriceAdjustmentPercent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteTradeResponsePriceAdjustmentPercent$ {
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentPercent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentPercent, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentPercent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentPercent$Outbound, z.ZodTypeDef, CompleteTradeResponsePriceAdjustmentPercent>;
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentPercent$Outbound` instead. */
    type Outbound = CompleteTradeResponsePriceAdjustmentPercent$Outbound;
}
/** @internal */
export declare const CompleteTradeResponsePriceAdjustmentType$inboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
/** @internal */
export declare const CompleteTradeResponsePriceAdjustmentType$outboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, CompleteTradeResponsePriceAdjustmentTypeOpen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteTradeResponsePriceAdjustmentType$ {
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentTypeOpen, z.ZodTypeDef, CompleteTradeResponsePriceAdjustmentTypeOpen>;
}
/** @internal */
export declare const CompleteTradeResponsePriceAdjustmentRecord$inboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentRecord, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteTradeResponsePriceAdjustmentRecord$Outbound = {
    price_adjustment_amount?: CompleteTradeResponsePriceAdjustmentAmount$Outbound | null | undefined;
    price_adjustment_percent?: CompleteTradeResponsePriceAdjustmentPercent$Outbound | null | undefined;
    price_adjustment_type?: string | undefined;
};
/** @internal */
export declare const CompleteTradeResponsePriceAdjustmentRecord$outboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentRecord$Outbound, z.ZodTypeDef, CompleteTradeResponsePriceAdjustmentRecord>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteTradeResponsePriceAdjustmentRecord$ {
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentRecord$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentRecord, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentRecord$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteTradeResponsePriceAdjustmentRecord$Outbound, z.ZodTypeDef, CompleteTradeResponsePriceAdjustmentRecord>;
    /** @deprecated use `CompleteTradeResponsePriceAdjustmentRecord$Outbound` instead. */
    type Outbound = CompleteTradeResponsePriceAdjustmentRecord$Outbound;
}
/** @internal */
export declare const CompleteTradeResponseTrade$inboundSchema: z.ZodType<CompleteTradeResponseTrade, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteTradeResponseTrade$Outbound = {
    additional_instructions?: Array<string> | undefined;
    alternate_order_id?: string | undefined;
    booking_api_trade_allocation_id?: string | undefined;
    booking_api_trade_id?: string | undefined;
    broker?: string | undefined;
    broker_capacity?: string | undefined;
    client_memos?: Array<string> | undefined;
    client_order_id?: string | undefined;
    exchange?: string | undefined;
    execution_id?: string | undefined;
    execution_only?: boolean | undefined;
    external_id?: string | undefined;
    fund_confirmation_number?: string | undefined;
    gateway_client_order_id?: string | undefined;
    internal_error?: boolean | undefined;
    is_writeoff?: boolean | undefined;
    lots?: Array<Lot$Outbound> | undefined;
    order_id?: string | undefined;
    prevailing_market_price?: CompleteTradeResponsePrevailingMarketPrice$Outbound | null | undefined;
    price_adjustment_record?: CompleteTradeResponsePriceAdjustmentRecord$Outbound | null | undefined;
    route?: string | undefined;
    special_instructions?: Array<string> | undefined;
    symbol_description?: string | undefined;
    when_issued?: boolean | undefined;
    yield_records?: Array<YieldRecord$Outbound> | undefined;
};
/** @internal */
export declare const CompleteTradeResponseTrade$outboundSchema: z.ZodType<CompleteTradeResponseTrade$Outbound, z.ZodTypeDef, CompleteTradeResponseTrade>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteTradeResponseTrade$ {
    /** @deprecated use `CompleteTradeResponseTrade$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteTradeResponseTrade, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteTradeResponseTrade$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteTradeResponseTrade$Outbound, z.ZodTypeDef, CompleteTradeResponseTrade>;
    /** @deprecated use `CompleteTradeResponseTrade$Outbound` instead. */
    type Outbound = CompleteTradeResponseTrade$Outbound;
}
/** @internal */
export declare const CompleteTradeResponse$inboundSchema: z.ZodType<CompleteTradeResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteTradeResponse$Outbound = {
    trade?: CompleteTradeResponseTrade$Outbound | null | undefined;
};
/** @internal */
export declare const CompleteTradeResponse$outboundSchema: z.ZodType<CompleteTradeResponse$Outbound, z.ZodTypeDef, CompleteTradeResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteTradeResponse$ {
    /** @deprecated use `CompleteTradeResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteTradeResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteTradeResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteTradeResponse$Outbound, z.ZodTypeDef, CompleteTradeResponse>;
    /** @deprecated use `CompleteTradeResponse$Outbound` instead. */
    type Outbound = CompleteTradeResponse$Outbound;
}
//# sourceMappingURL=completetraderesponse.d.ts.map