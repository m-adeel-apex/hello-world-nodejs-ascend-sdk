"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Basket$ = exports.Basket$outboundSchema = exports.Basket$inboundSchema = exports.BasketState$ = exports.BasketState$outboundSchema = exports.BasketState$inboundSchema = exports.BasketState = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The processing status of the basket
 */
var BasketState;
(function (BasketState) {
    BasketState["StateUnspecified"] = "STATE_UNSPECIFIED";
    BasketState["New"] = "NEW";
    BasketState["Submitted"] = "SUBMITTED";
    BasketState["Executing"] = "EXECUTING";
    BasketState["Allocating"] = "ALLOCATING";
    BasketState["Done"] = "DONE";
    BasketState["Rejected"] = "REJECTED";
    BasketState["PartiallyFilled"] = "PARTIALLY_FILLED";
})(BasketState || (exports.BasketState = BasketState = {}));
/** @internal */
exports.BasketState$inboundSchema = z
    .union([
    z.nativeEnum(BasketState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BasketState$outboundSchema = z.union([
    z.nativeEnum(BasketState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketState$;
(function (BasketState$) {
    /** @deprecated use `BasketState$inboundSchema` instead. */
    BasketState$.inboundSchema = exports.BasketState$inboundSchema;
    /** @deprecated use `BasketState$outboundSchema` instead. */
    BasketState$.outboundSchema = exports.BasketState$outboundSchema;
})(BasketState$ || (exports.BasketState$ = BasketState$ = {}));
/** @internal */
exports.Basket$inboundSchema = z
    .object({
    basket_id: z.string().optional(),
    basket_order_count: z.string().optional(),
    basket_state: exports.BasketState$inboundSchema.optional(),
    client_basket_id: z.string().optional(),
    complete_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    compressed_order_count: z.string().optional(),
    correspondent_id: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    distinct_account_count: z.string().optional(),
    last_update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    name: z.string().optional(),
    rejected_account_count: z.string().optional(),
    submit_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "basket_id": "basketId",
        "basket_order_count": "basketOrderCount",
        "basket_state": "basketState",
        "client_basket_id": "clientBasketId",
        "complete_time": "completeTime",
        "compressed_order_count": "compressedOrderCount",
        "correspondent_id": "correspondentId",
        "create_time": "createTime",
        "distinct_account_count": "distinctAccountCount",
        "last_update_time": "lastUpdateTime",
        "rejected_account_count": "rejectedAccountCount",
        "submit_time": "submitTime",
    });
});
/** @internal */
exports.Basket$outboundSchema = z.object({
    basketId: z.string().optional(),
    basketOrderCount: z.string().optional(),
    basketState: exports.BasketState$outboundSchema.optional(),
    clientBasketId: z.string().optional(),
    completeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    compressedOrderCount: z.string().optional(),
    correspondentId: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    distinctAccountCount: z.string().optional(),
    lastUpdateTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    name: z.string().optional(),
    rejectedAccountCount: z.string().optional(),
    submitTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        basketId: "basket_id",
        basketOrderCount: "basket_order_count",
        basketState: "basket_state",
        clientBasketId: "client_basket_id",
        completeTime: "complete_time",
        compressedOrderCount: "compressed_order_count",
        correspondentId: "correspondent_id",
        createTime: "create_time",
        distinctAccountCount: "distinct_account_count",
        lastUpdateTime: "last_update_time",
        rejectedAccountCount: "rejected_account_count",
        submitTime: "submit_time",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Basket$;
(function (Basket$) {
    /** @deprecated use `Basket$inboundSchema` instead. */
    Basket$.inboundSchema = exports.Basket$inboundSchema;
    /** @deprecated use `Basket$outboundSchema` instead. */
    Basket$.outboundSchema = exports.Basket$outboundSchema;
})(Basket$ || (exports.Basket$ = Basket$ = {}));
//# sourceMappingURL=basket.js.map