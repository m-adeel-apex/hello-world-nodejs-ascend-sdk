"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaxWithholdingMetadataCreate$ = exports.TaxWithholdingMetadataCreate$outboundSchema = exports.TaxWithholdingMetadataCreate$inboundSchema = exports.WithholdingType$ = exports.WithholdingType$outboundSchema = exports.WithholdingType$inboundSchema = exports.TaxAuthority$ = exports.TaxAuthority$outboundSchema = exports.TaxAuthority$inboundSchema = exports.WithholdingType = exports.TaxAuthority = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * Tax Authority for Enrollment
 */
var TaxAuthority;
(function (TaxAuthority) {
    TaxAuthority["TaxAuthorityUnspecified"] = "TAX_AUTHORITY_UNSPECIFIED";
    TaxAuthority["Al"] = "AL";
    TaxAuthority["Ak"] = "AK";
    TaxAuthority["Az"] = "AZ";
    TaxAuthority["Ar"] = "AR";
    TaxAuthority["Ca"] = "CA";
    TaxAuthority["Co"] = "CO";
    TaxAuthority["Ct"] = "CT";
    TaxAuthority["De"] = "DE";
    TaxAuthority["Fl"] = "FL";
    TaxAuthority["Ga"] = "GA";
    TaxAuthority["Hi"] = "HI";
    TaxAuthority["Id"] = "ID";
    TaxAuthority["Il"] = "IL";
    TaxAuthority["In"] = "IN";
    TaxAuthority["Ia"] = "IA";
    TaxAuthority["Ks"] = "KS";
    TaxAuthority["Ky"] = "KY";
    TaxAuthority["La"] = "LA";
    TaxAuthority["Me"] = "ME";
    TaxAuthority["Md"] = "MD";
    TaxAuthority["Ma"] = "MA";
    TaxAuthority["Mi"] = "MI";
    TaxAuthority["Mn"] = "MN";
    TaxAuthority["Ms"] = "MS";
    TaxAuthority["Mo"] = "MO";
    TaxAuthority["Mt"] = "MT";
    TaxAuthority["Ne"] = "NE";
    TaxAuthority["Nv"] = "NV";
    TaxAuthority["Nh"] = "NH";
    TaxAuthority["Nj"] = "NJ";
    TaxAuthority["Nm"] = "NM";
    TaxAuthority["Ny"] = "NY";
    TaxAuthority["Nc"] = "NC";
    TaxAuthority["Nd"] = "ND";
    TaxAuthority["Oh"] = "OH";
    TaxAuthority["Ok"] = "OK";
    TaxAuthority["Or"] = "OR";
    TaxAuthority["Pa"] = "PA";
    TaxAuthority["Ri"] = "RI";
    TaxAuthority["Sc"] = "SC";
    TaxAuthority["Sd"] = "SD";
    TaxAuthority["Tn"] = "TN";
    TaxAuthority["Tx"] = "TX";
    TaxAuthority["Ut"] = "UT";
    TaxAuthority["Vt"] = "VT";
    TaxAuthority["Va"] = "VA";
    TaxAuthority["Wa"] = "WA";
    TaxAuthority["Wv"] = "WV";
    TaxAuthority["Wi"] = "WI";
    TaxAuthority["Wy"] = "WY";
    TaxAuthority["Irs"] = "IRS";
})(TaxAuthority || (exports.TaxAuthority = TaxAuthority = {}));
/**
 * A designation used by the custodian to determine how much federal income tax should be withheld from the proceeds of a sale
 */
var WithholdingType;
(function (WithholdingType) {
    WithholdingType["WithholdingTypeUnspecified"] = "WITHHOLDING_TYPE_UNSPECIFIED";
    WithholdingType["Backup"] = "BACKUP";
    WithholdingType["BackupProceeds"] = "BACKUP_PROCEEDS";
    WithholdingType["BackupDividendsAndInterest"] = "BACKUP_DIVIDENDS_AND_INTEREST";
    WithholdingType["Ira"] = "IRA";
})(WithholdingType || (exports.WithholdingType = WithholdingType = {}));
/** @internal */
exports.TaxAuthority$inboundSchema = z
    .union([
    z.nativeEnum(TaxAuthority),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TaxAuthority$outboundSchema = z.union([
    z.nativeEnum(TaxAuthority),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaxAuthority$;
(function (TaxAuthority$) {
    /** @deprecated use `TaxAuthority$inboundSchema` instead. */
    TaxAuthority$.inboundSchema = exports.TaxAuthority$inboundSchema;
    /** @deprecated use `TaxAuthority$outboundSchema` instead. */
    TaxAuthority$.outboundSchema = exports.TaxAuthority$outboundSchema;
})(TaxAuthority$ || (exports.TaxAuthority$ = TaxAuthority$ = {}));
/** @internal */
exports.WithholdingType$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.WithholdingType$outboundSchema = z.union([
    z.nativeEnum(WithholdingType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithholdingType$;
(function (WithholdingType$) {
    /** @deprecated use `WithholdingType$inboundSchema` instead. */
    WithholdingType$.inboundSchema = exports.WithholdingType$inboundSchema;
    /** @deprecated use `WithholdingType$outboundSchema` instead. */
    WithholdingType$.outboundSchema = exports.WithholdingType$outboundSchema;
})(WithholdingType$ || (exports.WithholdingType$ = WithholdingType$ = {}));
/** @internal */
exports.TaxWithholdingMetadataCreate$inboundSchema = z.object({
    tax_authority: exports.TaxAuthority$inboundSchema,
    withholding_type: exports.WithholdingType$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "tax_authority": "taxAuthority",
        "withholding_type": "withholdingType",
    });
});
/** @internal */
exports.TaxWithholdingMetadataCreate$outboundSchema = z.object({
    taxAuthority: exports.TaxAuthority$outboundSchema,
    withholdingType: exports.WithholdingType$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        taxAuthority: "tax_authority",
        withholdingType: "withholding_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TaxWithholdingMetadataCreate$;
(function (TaxWithholdingMetadataCreate$) {
    /** @deprecated use `TaxWithholdingMetadataCreate$inboundSchema` instead. */
    TaxWithholdingMetadataCreate$.inboundSchema = exports.TaxWithholdingMetadataCreate$inboundSchema;
    /** @deprecated use `TaxWithholdingMetadataCreate$outboundSchema` instead. */
    TaxWithholdingMetadataCreate$.outboundSchema = exports.TaxWithholdingMetadataCreate$outboundSchema;
})(TaxWithholdingMetadataCreate$ || (exports.TaxWithholdingMetadataCreate$ = TaxWithholdingMetadataCreate$ = {}));
//# sourceMappingURL=taxwithholdingmetadatacreate.js.map