"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcatsTransfer$ = exports.AcatsTransfer$outboundSchema = exports.AcatsTransfer$inboundSchema = exports.TransferType$ = exports.TransferType$outboundSchema = exports.TransferType$inboundSchema = exports.AcatsTransferState$ = exports.AcatsTransferState$outboundSchema = exports.AcatsTransferState$inboundSchema = exports.RejectCode$ = exports.RejectCode$outboundSchema = exports.RejectCode$inboundSchema = exports.Receiver$ = exports.Receiver$outboundSchema = exports.Receiver$inboundSchema = exports.AcatsTransferExternalAccount$ = exports.AcatsTransferExternalAccount$outboundSchema = exports.AcatsTransferExternalAccount$inboundSchema = exports.NsccStatus$ = exports.NsccStatus$outboundSchema = exports.NsccStatus$inboundSchema = exports.AcatsTransferDirection$ = exports.AcatsTransferDirection$outboundSchema = exports.AcatsTransferDirection$inboundSchema = exports.Deliverer$ = exports.Deliverer$outboundSchema = exports.Deliverer$inboundSchema = exports.ExternalAccount$ = exports.ExternalAccount$outboundSchema = exports.ExternalAccount$inboundSchema = exports.TransferType = exports.AcatsTransferState = exports.RejectCode = exports.NsccStatus = exports.AcatsTransferDirection = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const acatsasset_js_1 = require("./acatsasset.js");
/**
 * The direction of the transfer
 */
var AcatsTransferDirection;
(function (AcatsTransferDirection) {
    AcatsTransferDirection["DirectionUnspecified"] = "DIRECTION_UNSPECIFIED";
    AcatsTransferDirection["Outgoing"] = "OUTGOING";
    AcatsTransferDirection["Incoming"] = "INCOMING";
})(AcatsTransferDirection || (exports.AcatsTransferDirection = AcatsTransferDirection = {}));
/**
 * The NSCC transfer status
 */
var NsccStatus;
(function (NsccStatus) {
    NsccStatus["NsccStatusUnspecified"] = "NSCC_STATUS_UNSPECIFIED";
    NsccStatus["Request"] = "REQUEST";
    NsccStatus["RequestAdjust"] = "REQUEST_ADJUST";
    NsccStatus["RequestAdjustPast"] = "REQUEST_ADJUST_PAST";
    NsccStatus["RequestPast"] = "REQUEST_PAST";
    NsccStatus["RequestReject"] = "REQUEST_REJECT";
    NsccStatus["Review"] = "REVIEW";
    NsccStatus["ReviewAdjustDeliverer"] = "REVIEW_ADJUST_DELIVERER";
    NsccStatus["ReviewError"] = "REVIEW_ERROR";
    NsccStatus["ReviewAccelerate"] = "REVIEW_ACCELERATE";
    NsccStatus["ReviewAdjustReceiverAccelerate"] = "REVIEW_ADJUST_RECEIVER_ACCELERATE";
    NsccStatus["SettlePrep"] = "SETTLE_PREP";
    NsccStatus["SettleClose"] = "SETTLE_CLOSE";
    NsccStatus["ClosePurge"] = "CLOSE_PURGE";
    NsccStatus["PartialRequest"] = "PARTIAL_REQUEST";
    NsccStatus["MemoPurgePartialTransferRequestReceiver"] = "MEMO_PURGE_PARTIAL_TRANSFER_REQUEST_RECEIVER";
    NsccStatus["Reject"] = "REJECT";
    NsccStatus["SystemPurge"] = "SYSTEM_PURGE";
})(NsccStatus || (exports.NsccStatus = NsccStatus = {}));
/**
 * The reject code
 */
var RejectCode;
(function (RejectCode) {
    RejectCode["RejectCodeUnspecified"] = "REJECT_CODE_UNSPECIFIED";
    RejectCode["RejectCodeSsnTaxIdMismatch"] = "REJECT_CODE_SSN_TAX_ID_MISMATCH";
    RejectCode["RejectCodeAccountTitleMismatch"] = "REJECT_CODE_ACCOUNT_TITLE_MISMATCH";
    RejectCode["RejectCodeDocumentationNeeded"] = "REJECT_CODE_DOCUMENTATION_NEEDED";
    RejectCode["RejectCodeAccountFlat"] = "REJECT_CODE_ACCOUNT_FLAT";
    RejectCode["RejectCodeInvalidAccountNumber"] = "REJECT_CODE_INVALID_ACCOUNT_NUMBER";
    RejectCode["RejectCodeDuplicate"] = "REJECT_CODE_DUPLICATE";
    RejectCode["RejectCodeAccountInDistributionOrTransfer"] = "REJECT_CODE_ACCOUNT_IN_DISTRIBUTION_OR_TRANSFER";
    RejectCode["RejectCodeClientRescinded"] = "REJECT_CODE_CLIENT_RESCINDED";
    RejectCode["RejectCodeMissingAuthorizationSignature"] = "REJECT_CODE_MISSING_AUTHORIZATION_SIGNATURE";
    RejectCode["RejectCodeAccountViolatesCreditPolicyOfReceivingFirm"] = "REJECT_CODE_ACCOUNT_VIOLATES_CREDIT_POLICY_OF_RECEIVING_FIRM";
    RejectCode["RejectCodeUnrecognizedForResidualCreditBalance"] = "REJECT_CODE_UNRECOGNIZED_FOR_RESIDUAL_CREDIT_BALANCE";
    RejectCode["RejectCodePartialTransferDeliverer"] = "REJECT_CODE_PARTIAL_TRANSFER_DELIVERER";
    RejectCode["RejectCodeFailReversal"] = "REJECT_CODE_FAIL_REVERSAL";
    RejectCode["RejectCodeReclaim"] = "REJECT_CODE_RECLAIM";
    RejectCode["RejectCodeMutualFundCleanup"] = "REJECT_CODE_MUTUAL_FUND_CLEANUP";
})(RejectCode || (exports.RejectCode = RejectCode = {}));
/**
 * The transfer state
 */
var AcatsTransferState;
(function (AcatsTransferState) {
    AcatsTransferState["StateUnspecified"] = "STATE_UNSPECIFIED";
    AcatsTransferState["Received"] = "RECEIVED";
    AcatsTransferState["Submitted"] = "SUBMITTED";
    AcatsTransferState["Rejected"] = "REJECTED";
    AcatsTransferState["PendingContraResponse"] = "PENDING_CONTRA_RESPONSE";
    AcatsTransferState["Error"] = "ERROR";
    AcatsTransferState["Accepted"] = "ACCEPTED";
    AcatsTransferState["PendingReview"] = "PENDING_REVIEW";
    AcatsTransferState["PendingRejection"] = "PENDING_REJECTION";
    AcatsTransferState["PendingSettlement"] = "PENDING_SETTLEMENT";
    AcatsTransferState["PendingBookkeeping"] = "PENDING_BOOKKEEPING";
    AcatsTransferState["Completed"] = "COMPLETED";
    AcatsTransferState["Purged"] = "PURGED";
})(AcatsTransferState || (exports.AcatsTransferState = AcatsTransferState = {}));
/**
 * The type of transfer
 */
var TransferType;
(function (TransferType) {
    TransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    TransferType["FailReversalBrokerToBrokerOnly"] = "FAIL_REVERSAL_BROKER_TO_BROKER_ONLY";
    TransferType["FullTransfer"] = "FULL_TRANSFER";
    TransferType["MutualFundCleanup"] = "MUTUAL_FUND_CLEANUP";
    TransferType["PartialTransferDeliverer"] = "PARTIAL_TRANSFER_DELIVERER";
    TransferType["PartialTransferReceiver"] = "PARTIAL_TRANSFER_RECEIVER";
    TransferType["PositionTransferFundFirmToMutualFundCompanyOnly"] = "POSITION_TRANSFER_FUND_FIRM_TO_MUTUAL_FUND_COMPANY_ONLY";
    TransferType["Reclaim"] = "RECLAIM";
    TransferType["ResidualCredit"] = "RESIDUAL_CREDIT";
})(TransferType || (exports.TransferType = TransferType = {}));
/** @internal */
exports.ExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
exports.ExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ExternalAccount$;
(function (ExternalAccount$) {
    /** @deprecated use `ExternalAccount$inboundSchema` instead. */
    ExternalAccount$.inboundSchema = exports.ExternalAccount$inboundSchema;
    /** @deprecated use `ExternalAccount$outboundSchema` instead. */
    ExternalAccount$.outboundSchema = exports.ExternalAccount$outboundSchema;
})(ExternalAccount$ || (exports.ExternalAccount$ = ExternalAccount$ = {}));
/** @internal */
exports.Deliverer$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => exports.ExternalAccount$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
exports.Deliverer$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => exports.ExternalAccount$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Deliverer$;
(function (Deliverer$) {
    /** @deprecated use `Deliverer$inboundSchema` instead. */
    Deliverer$.inboundSchema = exports.Deliverer$inboundSchema;
    /** @deprecated use `Deliverer$outboundSchema` instead. */
    Deliverer$.outboundSchema = exports.Deliverer$outboundSchema;
})(Deliverer$ || (exports.Deliverer$ = Deliverer$ = {}));
/** @internal */
exports.AcatsTransferDirection$inboundSchema = z
    .union([
    z.nativeEnum(AcatsTransferDirection),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AcatsTransferDirection$outboundSchema = z.union([
    z.nativeEnum(AcatsTransferDirection),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcatsTransferDirection$;
(function (AcatsTransferDirection$) {
    /** @deprecated use `AcatsTransferDirection$inboundSchema` instead. */
    AcatsTransferDirection$.inboundSchema = exports.AcatsTransferDirection$inboundSchema;
    /** @deprecated use `AcatsTransferDirection$outboundSchema` instead. */
    AcatsTransferDirection$.outboundSchema = exports.AcatsTransferDirection$outboundSchema;
})(AcatsTransferDirection$ || (exports.AcatsTransferDirection$ = AcatsTransferDirection$ = {}));
/** @internal */
exports.NsccStatus$inboundSchema = z
    .union([
    z.nativeEnum(NsccStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.NsccStatus$outboundSchema = z.union([
    z.nativeEnum(NsccStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NsccStatus$;
(function (NsccStatus$) {
    /** @deprecated use `NsccStatus$inboundSchema` instead. */
    NsccStatus$.inboundSchema = exports.NsccStatus$inboundSchema;
    /** @deprecated use `NsccStatus$outboundSchema` instead. */
    NsccStatus$.outboundSchema = exports.NsccStatus$outboundSchema;
})(NsccStatus$ || (exports.NsccStatus$ = NsccStatus$ = {}));
/** @internal */
exports.AcatsTransferExternalAccount$inboundSchema = z.object({
    account_number: z.string().optional(),
    account_title: z.string().optional(),
    participant_number: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_number": "accountNumber",
        "account_title": "accountTitle",
        "participant_number": "participantNumber",
    });
});
/** @internal */
exports.AcatsTransferExternalAccount$outboundSchema = z.object({
    accountNumber: z.string().optional(),
    accountTitle: z.string().optional(),
    participantNumber: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountNumber: "account_number",
        accountTitle: "account_title",
        participantNumber: "participant_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcatsTransferExternalAccount$;
(function (AcatsTransferExternalAccount$) {
    /** @deprecated use `AcatsTransferExternalAccount$inboundSchema` instead. */
    AcatsTransferExternalAccount$.inboundSchema = exports.AcatsTransferExternalAccount$inboundSchema;
    /** @deprecated use `AcatsTransferExternalAccount$outboundSchema` instead. */
    AcatsTransferExternalAccount$.outboundSchema = exports.AcatsTransferExternalAccount$outboundSchema;
})(AcatsTransferExternalAccount$ || (exports.AcatsTransferExternalAccount$ = AcatsTransferExternalAccount$ = {}));
/** @internal */
exports.Receiver$inboundSchema = z.object({
    apex_account_id: z.string().optional(),
    external_account: z.nullable(z.lazy(() => exports.AcatsTransferExternalAccount$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "apex_account_id": "apexAccountId",
        "external_account": "externalAccount",
    });
});
/** @internal */
exports.Receiver$outboundSchema = z.object({
    apexAccountId: z.string().optional(),
    externalAccount: z.nullable(z.lazy(() => exports.AcatsTransferExternalAccount$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        apexAccountId: "apex_account_id",
        externalAccount: "external_account",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Receiver$;
(function (Receiver$) {
    /** @deprecated use `Receiver$inboundSchema` instead. */
    Receiver$.inboundSchema = exports.Receiver$inboundSchema;
    /** @deprecated use `Receiver$outboundSchema` instead. */
    Receiver$.outboundSchema = exports.Receiver$outboundSchema;
})(Receiver$ || (exports.Receiver$ = Receiver$ = {}));
/** @internal */
exports.RejectCode$inboundSchema = z
    .union([
    z.nativeEnum(RejectCode),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RejectCode$outboundSchema = z.union([
    z.nativeEnum(RejectCode),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RejectCode$;
(function (RejectCode$) {
    /** @deprecated use `RejectCode$inboundSchema` instead. */
    RejectCode$.inboundSchema = exports.RejectCode$inboundSchema;
    /** @deprecated use `RejectCode$outboundSchema` instead. */
    RejectCode$.outboundSchema = exports.RejectCode$outboundSchema;
})(RejectCode$ || (exports.RejectCode$ = RejectCode$ = {}));
/** @internal */
exports.AcatsTransferState$inboundSchema = z
    .union([
    z.nativeEnum(AcatsTransferState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AcatsTransferState$outboundSchema = z.union([
    z.nativeEnum(AcatsTransferState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcatsTransferState$;
(function (AcatsTransferState$) {
    /** @deprecated use `AcatsTransferState$inboundSchema` instead. */
    AcatsTransferState$.inboundSchema = exports.AcatsTransferState$inboundSchema;
    /** @deprecated use `AcatsTransferState$outboundSchema` instead. */
    AcatsTransferState$.outboundSchema = exports.AcatsTransferState$outboundSchema;
})(AcatsTransferState$ || (exports.AcatsTransferState$ = AcatsTransferState$ = {}));
/** @internal */
exports.TransferType$inboundSchema = z.nativeEnum(TransferType);
/** @internal */
exports.TransferType$outboundSchema = exports.TransferType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransferType$;
(function (TransferType$) {
    /** @deprecated use `TransferType$inboundSchema` instead. */
    TransferType$.inboundSchema = exports.TransferType$inboundSchema;
    /** @deprecated use `TransferType$outboundSchema` instead. */
    TransferType$.outboundSchema = exports.TransferType$outboundSchema;
})(TransferType$ || (exports.TransferType$ = TransferType$ = {}));
/** @internal */
exports.AcatsTransfer$inboundSchema = z.object({
    acat_control_number: z.string().optional(),
    assets: z.array(acatsasset_js_1.AcatsAsset$inboundSchema).optional(),
    comment: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    deliverer: z.nullable(z.lazy(() => exports.Deliverer$inboundSchema)).optional(),
    direction: exports.AcatsTransferDirection$inboundSchema.optional(),
    name: z.string().optional(),
    nscc_status: exports.NsccStatus$inboundSchema.optional(),
    original_control_number: z.string().optional(),
    receiver: z.nullable(z.lazy(() => exports.Receiver$inboundSchema)).optional(),
    reject_code: exports.RejectCode$inboundSchema.optional(),
    state: exports.AcatsTransferState$inboundSchema.optional(),
    transfer_type: exports.TransferType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "acat_control_number": "acatControlNumber",
        "create_time": "createTime",
        "nscc_status": "nsccStatus",
        "original_control_number": "originalControlNumber",
        "reject_code": "rejectCode",
        "transfer_type": "transferType",
    });
});
/** @internal */
exports.AcatsTransfer$outboundSchema = z.object({
    acatControlNumber: z.string().optional(),
    assets: z.array(acatsasset_js_1.AcatsAsset$outboundSchema).optional(),
    comment: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    deliverer: z.nullable(z.lazy(() => exports.Deliverer$outboundSchema)).optional(),
    direction: exports.AcatsTransferDirection$outboundSchema.optional(),
    name: z.string().optional(),
    nsccStatus: exports.NsccStatus$outboundSchema.optional(),
    originalControlNumber: z.string().optional(),
    receiver: z.nullable(z.lazy(() => exports.Receiver$outboundSchema)).optional(),
    rejectCode: exports.RejectCode$outboundSchema.optional(),
    state: exports.AcatsTransferState$outboundSchema.optional(),
    transferType: exports.TransferType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acatControlNumber: "acat_control_number",
        createTime: "create_time",
        nsccStatus: "nscc_status",
        originalControlNumber: "original_control_number",
        rejectCode: "reject_code",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcatsTransfer$;
(function (AcatsTransfer$) {
    /** @deprecated use `AcatsTransfer$inboundSchema` instead. */
    AcatsTransfer$.inboundSchema = exports.AcatsTransfer$inboundSchema;
    /** @deprecated use `AcatsTransfer$outboundSchema` instead. */
    AcatsTransfer$.outboundSchema = exports.AcatsTransfer$outboundSchema;
})(AcatsTransfer$ || (exports.AcatsTransfer$ = AcatsTransfer$ = {}));
//# sourceMappingURL=acatstransfer.js.map