"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lot$ = exports.Lot$outboundSchema = exports.Lot$inboundSchema = exports.TradeDate$ = exports.TradeDate$outboundSchema = exports.TradeDate$inboundSchema = exports.LotQuantity$ = exports.LotQuantity$outboundSchema = exports.LotQuantity$inboundSchema = exports.LotMoney$ = exports.LotMoney$outboundSchema = exports.LotMoney$inboundSchema = exports.LotPrice$ = exports.LotPrice$outboundSchema = exports.LotPrice$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
/** @internal */
exports.LotPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.LotPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LotPrice$;
(function (LotPrice$) {
    /** @deprecated use `LotPrice$inboundSchema` instead. */
    LotPrice$.inboundSchema = exports.LotPrice$inboundSchema;
    /** @deprecated use `LotPrice$outboundSchema` instead. */
    LotPrice$.outboundSchema = exports.LotPrice$outboundSchema;
})(LotPrice$ || (exports.LotPrice$ = LotPrice$ = {}));
/** @internal */
exports.LotMoney$inboundSchema = z.object({
    currency_code: z.string().optional(),
    price: z.nullable(z.lazy(() => exports.LotPrice$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "currency_code": "currencyCode",
    });
});
/** @internal */
exports.LotMoney$outboundSchema = z.object({
    currencyCode: z.string().optional(),
    price: z.nullable(z.lazy(() => exports.LotPrice$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        currencyCode: "currency_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LotMoney$;
(function (LotMoney$) {
    /** @deprecated use `LotMoney$inboundSchema` instead. */
    LotMoney$.inboundSchema = exports.LotMoney$inboundSchema;
    /** @deprecated use `LotMoney$outboundSchema` instead. */
    LotMoney$.outboundSchema = exports.LotMoney$outboundSchema;
})(LotMoney$ || (exports.LotMoney$ = LotMoney$ = {}));
/** @internal */
exports.LotQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.LotQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LotQuantity$;
(function (LotQuantity$) {
    /** @deprecated use `LotQuantity$inboundSchema` instead. */
    LotQuantity$.inboundSchema = exports.LotQuantity$inboundSchema;
    /** @deprecated use `LotQuantity$outboundSchema` instead. */
    LotQuantity$.outboundSchema = exports.LotQuantity$outboundSchema;
})(LotQuantity$ || (exports.LotQuantity$ = LotQuantity$ = {}));
/** @internal */
exports.TradeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.TradeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeDate$;
(function (TradeDate$) {
    /** @deprecated use `TradeDate$inboundSchema` instead. */
    TradeDate$.inboundSchema = exports.TradeDate$inboundSchema;
    /** @deprecated use `TradeDate$outboundSchema` instead. */
    TradeDate$.outboundSchema = exports.TradeDate$outboundSchema;
})(TradeDate$ || (exports.TradeDate$ = TradeDate$ = {}));
/** @internal */
exports.Lot$inboundSchema = z
    .object({
    id: z.string().optional(),
    money: z.nullable(z.lazy(() => exports.LotMoney$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.LotQuantity$inboundSchema)).optional(),
    trade_date: z.nullable(z.lazy(() => exports.TradeDate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "trade_date": "tradeDate",
    });
});
/** @internal */
exports.Lot$outboundSchema = z
    .object({
    id: z.string().optional(),
    money: z.nullable(z.lazy(() => exports.LotMoney$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.LotQuantity$outboundSchema)).optional(),
    tradeDate: z.nullable(z.lazy(() => exports.TradeDate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        tradeDate: "trade_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Lot$;
(function (Lot$) {
    /** @deprecated use `Lot$inboundSchema` instead. */
    Lot$.inboundSchema = exports.Lot$inboundSchema;
    /** @deprecated use `Lot$outboundSchema` instead. */
    Lot$.outboundSchema = exports.Lot$outboundSchema;
})(Lot$ || (exports.Lot$ = Lot$ = {}));
//# sourceMappingURL=lot.js.map