"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Beneficiary$ = exports.Beneficiary$outboundSchema = exports.Beneficiary$inboundSchema = exports.BeneficiaryTaxIdType$ = exports.BeneficiaryTaxIdType$outboundSchema = exports.BeneficiaryTaxIdType$inboundSchema = exports.BeneficiaryRelationType$ = exports.BeneficiaryRelationType$outboundSchema = exports.BeneficiaryRelationType$inboundSchema = exports.PhoneNumber$ = exports.PhoneNumber$outboundSchema = exports.PhoneNumber$inboundSchema = exports.ShortCode$ = exports.ShortCode$outboundSchema = exports.ShortCode$inboundSchema = exports.MailingAddress$ = exports.MailingAddress$outboundSchema = exports.MailingAddress$inboundSchema = exports.BeneficiaryEntityType$ = exports.BeneficiaryEntityType$outboundSchema = exports.BeneficiaryEntityType$inboundSchema = exports.BeneficiaryBirthDate$ = exports.BeneficiaryBirthDate$outboundSchema = exports.BeneficiaryBirthDate$inboundSchema = exports.BeneficiaryTaxIdType = exports.BeneficiaryRelationType = exports.BeneficiaryEntityType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The entity type of the beneficiary; Required if the beneficiary is a legal entity.
 */
var BeneficiaryEntityType;
(function (BeneficiaryEntityType) {
    BeneficiaryEntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    BeneficiaryEntityType["Corporation"] = "CORPORATION";
    BeneficiaryEntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    BeneficiaryEntityType["Partnership"] = "PARTNERSHIP";
    BeneficiaryEntityType["Trust"] = "TRUST";
    BeneficiaryEntityType["Estate"] = "ESTATE";
})(BeneficiaryEntityType || (exports.BeneficiaryEntityType = BeneficiaryEntityType = {}));
/**
 * The relationship of the beneficiary to the account owner
 */
var BeneficiaryRelationType;
(function (BeneficiaryRelationType) {
    BeneficiaryRelationType["RelationTypeUnspecified"] = "RELATION_TYPE_UNSPECIFIED";
    BeneficiaryRelationType["Spouse"] = "SPOUSE";
    BeneficiaryRelationType["Trust"] = "TRUST";
    BeneficiaryRelationType["Other"] = "OTHER";
})(BeneficiaryRelationType || (exports.BeneficiaryRelationType = BeneficiaryRelationType = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN. Tax id type is required if birth date is not provided.
 */
var BeneficiaryTaxIdType;
(function (BeneficiaryTaxIdType) {
    BeneficiaryTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    BeneficiaryTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    BeneficiaryTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    BeneficiaryTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(BeneficiaryTaxIdType || (exports.BeneficiaryTaxIdType = BeneficiaryTaxIdType = {}));
/** @internal */
exports.BeneficiaryBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.BeneficiaryBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BeneficiaryBirthDate$;
(function (BeneficiaryBirthDate$) {
    /** @deprecated use `BeneficiaryBirthDate$inboundSchema` instead. */
    BeneficiaryBirthDate$.inboundSchema = exports.BeneficiaryBirthDate$inboundSchema;
    /** @deprecated use `BeneficiaryBirthDate$outboundSchema` instead. */
    BeneficiaryBirthDate$.outboundSchema = exports.BeneficiaryBirthDate$outboundSchema;
})(BeneficiaryBirthDate$ || (exports.BeneficiaryBirthDate$ = BeneficiaryBirthDate$ = {}));
/** @internal */
exports.BeneficiaryEntityType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryEntityType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BeneficiaryEntityType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryEntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BeneficiaryEntityType$;
(function (BeneficiaryEntityType$) {
    /** @deprecated use `BeneficiaryEntityType$inboundSchema` instead. */
    BeneficiaryEntityType$.inboundSchema = exports.BeneficiaryEntityType$inboundSchema;
    /** @deprecated use `BeneficiaryEntityType$outboundSchema` instead. */
    BeneficiaryEntityType$.outboundSchema = exports.BeneficiaryEntityType$outboundSchema;
})(BeneficiaryEntityType$ || (exports.BeneficiaryEntityType$ = BeneficiaryEntityType$ = {}));
/** @internal */
exports.MailingAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.MailingAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MailingAddress$;
(function (MailingAddress$) {
    /** @deprecated use `MailingAddress$inboundSchema` instead. */
    MailingAddress$.inboundSchema = exports.MailingAddress$inboundSchema;
    /** @deprecated use `MailingAddress$outboundSchema` instead. */
    MailingAddress$.outboundSchema = exports.MailingAddress$outboundSchema;
})(MailingAddress$ || (exports.MailingAddress$ = MailingAddress$ = {}));
/** @internal */
exports.ShortCode$inboundSchema = z.object({
    number: z.string().optional(),
    region_code: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "region_code": "regionCode",
    });
});
/** @internal */
exports.ShortCode$outboundSchema = z.object({
    number: z.string().optional(),
    regionCode: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ShortCode$;
(function (ShortCode$) {
    /** @deprecated use `ShortCode$inboundSchema` instead. */
    ShortCode$.inboundSchema = exports.ShortCode$inboundSchema;
    /** @deprecated use `ShortCode$outboundSchema` instead. */
    ShortCode$.outboundSchema = exports.ShortCode$outboundSchema;
})(ShortCode$ || (exports.ShortCode$ = ShortCode$ = {}));
/** @internal */
exports.PhoneNumber$inboundSchema = z.object({
    e164_number: z.string().optional(),
    extension: z.string().optional(),
    short_code: z.nullable(z.lazy(() => exports.ShortCode$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "e164_number": "e164Number",
        "short_code": "shortCode",
    });
});
/** @internal */
exports.PhoneNumber$outboundSchema = z.object({
    e164Number: z.string().optional(),
    extension: z.string().optional(),
    shortCode: z.nullable(z.lazy(() => exports.ShortCode$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        e164Number: "e164_number",
        shortCode: "short_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PhoneNumber$;
(function (PhoneNumber$) {
    /** @deprecated use `PhoneNumber$inboundSchema` instead. */
    PhoneNumber$.inboundSchema = exports.PhoneNumber$inboundSchema;
    /** @deprecated use `PhoneNumber$outboundSchema` instead. */
    PhoneNumber$.outboundSchema = exports.PhoneNumber$outboundSchema;
})(PhoneNumber$ || (exports.PhoneNumber$ = PhoneNumber$ = {}));
/** @internal */
exports.BeneficiaryRelationType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryRelationType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BeneficiaryRelationType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryRelationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BeneficiaryRelationType$;
(function (BeneficiaryRelationType$) {
    /** @deprecated use `BeneficiaryRelationType$inboundSchema` instead. */
    BeneficiaryRelationType$.inboundSchema = exports.BeneficiaryRelationType$inboundSchema;
    /** @deprecated use `BeneficiaryRelationType$outboundSchema` instead. */
    BeneficiaryRelationType$.outboundSchema = exports.BeneficiaryRelationType$outboundSchema;
})(BeneficiaryRelationType$ || (exports.BeneficiaryRelationType$ = BeneficiaryRelationType$ = {}));
/** @internal */
exports.BeneficiaryTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(BeneficiaryTaxIdType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BeneficiaryTaxIdType$outboundSchema = z.union([
    z.nativeEnum(BeneficiaryTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BeneficiaryTaxIdType$;
(function (BeneficiaryTaxIdType$) {
    /** @deprecated use `BeneficiaryTaxIdType$inboundSchema` instead. */
    BeneficiaryTaxIdType$.inboundSchema = exports.BeneficiaryTaxIdType$inboundSchema;
    /** @deprecated use `BeneficiaryTaxIdType$outboundSchema` instead. */
    BeneficiaryTaxIdType$.outboundSchema = exports.BeneficiaryTaxIdType$outboundSchema;
})(BeneficiaryTaxIdType$ || (exports.BeneficiaryTaxIdType$ = BeneficiaryTaxIdType$ = {}));
/** @internal */
exports.Beneficiary$inboundSchema = z.object({
    beneficiary_percentage: z.number().int().optional(),
    birth_date: z.nullable(z.lazy(() => exports.BeneficiaryBirthDate$inboundSchema))
        .optional(),
    email: z.string().optional(),
    entity_name: z.string().optional(),
    entity_type: exports.BeneficiaryEntityType$inboundSchema.optional(),
    family_name: z.string().optional(),
    given_name: z.string().optional(),
    mailing_address: z.nullable(z.lazy(() => exports.MailingAddress$inboundSchema))
        .optional(),
    middle_names: z.string().optional(),
    phone_number: z.nullable(z.lazy(() => exports.PhoneNumber$inboundSchema)).optional(),
    relation_type: exports.BeneficiaryRelationType$inboundSchema.optional(),
    tax_id: z.string().optional(),
    tax_id_type: exports.BeneficiaryTaxIdType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "beneficiary_percentage": "beneficiaryPercentage",
        "birth_date": "birthDate",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "family_name": "familyName",
        "given_name": "givenName",
        "mailing_address": "mailingAddress",
        "middle_names": "middleNames",
        "phone_number": "phoneNumber",
        "relation_type": "relationType",
        "tax_id": "taxId",
        "tax_id_type": "taxIdType",
    });
});
/** @internal */
exports.Beneficiary$outboundSchema = z.object({
    beneficiaryPercentage: z.number().int().optional(),
    birthDate: z.nullable(z.lazy(() => exports.BeneficiaryBirthDate$outboundSchema))
        .optional(),
    email: z.string().optional(),
    entityName: z.string().optional(),
    entityType: exports.BeneficiaryEntityType$outboundSchema.optional(),
    familyName: z.string().optional(),
    givenName: z.string().optional(),
    mailingAddress: z.nullable(z.lazy(() => exports.MailingAddress$outboundSchema))
        .optional(),
    middleNames: z.string().optional(),
    phoneNumber: z.nullable(z.lazy(() => exports.PhoneNumber$outboundSchema)).optional(),
    relationType: exports.BeneficiaryRelationType$outboundSchema.optional(),
    taxId: z.string().optional(),
    taxIdType: exports.BeneficiaryTaxIdType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        beneficiaryPercentage: "beneficiary_percentage",
        birthDate: "birth_date",
        entityName: "entity_name",
        entityType: "entity_type",
        familyName: "family_name",
        givenName: "given_name",
        mailingAddress: "mailing_address",
        middleNames: "middle_names",
        phoneNumber: "phone_number",
        relationType: "relation_type",
        taxId: "tax_id",
        taxIdType: "tax_id_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Beneficiary$;
(function (Beneficiary$) {
    /** @deprecated use `Beneficiary$inboundSchema` instead. */
    Beneficiary$.inboundSchema = exports.Beneficiary$inboundSchema;
    /** @deprecated use `Beneficiary$outboundSchema` instead. */
    Beneficiary$.outboundSchema = exports.Beneficiary$outboundSchema;
})(Beneficiary$ || (exports.Beneficiary$ = Beneficiary$ = {}));
//# sourceMappingURL=beneficiary.js.map