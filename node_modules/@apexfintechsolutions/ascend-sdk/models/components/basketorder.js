"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasketOrder$ = exports.BasketOrder$outboundSchema = exports.BasketOrder$inboundSchema = exports.BasketOrderTimeInForce$ = exports.BasketOrderTimeInForce$outboundSchema = exports.BasketOrderTimeInForce$inboundSchema = exports.BasketOrderSide$ = exports.BasketOrderSide$outboundSchema = exports.BasketOrderSide$inboundSchema = exports.BasketOrderQuantity$ = exports.BasketOrderQuantity$outboundSchema = exports.BasketOrderQuantity$inboundSchema = exports.BasketOrderOrderType$ = exports.BasketOrderOrderType$outboundSchema = exports.BasketOrderOrderType$inboundSchema = exports.BasketOrderOrderStatus$ = exports.BasketOrderOrderStatus$outboundSchema = exports.BasketOrderOrderStatus$inboundSchema = exports.BasketOrderOrderRejectedReason$ = exports.BasketOrderOrderRejectedReason$outboundSchema = exports.BasketOrderOrderRejectedReason$inboundSchema = exports.BasketOrderNotionalValue$ = exports.BasketOrderNotionalValue$outboundSchema = exports.BasketOrderNotionalValue$inboundSchema = exports.BasketOrderIdentifierType$ = exports.BasketOrderIdentifierType$outboundSchema = exports.BasketOrderIdentifierType$inboundSchema = exports.BasketOrderFilledQuantity$ = exports.BasketOrderFilledQuantity$outboundSchema = exports.BasketOrderFilledQuantity$inboundSchema = exports.BasketOrderCumulativeNotionalValue$ = exports.BasketOrderCumulativeNotionalValue$outboundSchema = exports.BasketOrderCumulativeNotionalValue$inboundSchema = exports.BasketOrderAssetType$ = exports.BasketOrderAssetType$outboundSchema = exports.BasketOrderAssetType$inboundSchema = exports.BasketOrderTimeInForce = exports.BasketOrderSide = exports.BasketOrderOrderType = exports.BasketOrderOrderStatus = exports.BasketOrderOrderRejectedReason = exports.BasketOrderIdentifierType = exports.BasketOrderAssetType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const executedprice_js_1 = require("./executedprice.js");
/**
 * The type of the asset in this order
 */
var BasketOrderAssetType;
(function (BasketOrderAssetType) {
    BasketOrderAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    BasketOrderAssetType["Equity"] = "EQUITY";
    BasketOrderAssetType["MutualFund"] = "MUTUAL_FUND";
})(BasketOrderAssetType || (exports.BasketOrderAssetType = BasketOrderAssetType = {}));
/**
 * The identifier type of the asset being ordered. For Equities: only SYMBOL is supported For Mutual Funds: only SYMBOL and CUSIP are supported
 */
var BasketOrderIdentifierType;
(function (BasketOrderIdentifierType) {
    BasketOrderIdentifierType["Symbol"] = "SYMBOL";
    BasketOrderIdentifierType["Cusip"] = "CUSIP";
    BasketOrderIdentifierType["Isin"] = "ISIN";
})(BasketOrderIdentifierType || (exports.BasketOrderIdentifierType = BasketOrderIdentifierType = {}));
/**
 * When an order has the REJECTED status, this will be populated with a system code describing the rejection.
 */
var BasketOrderOrderRejectedReason;
(function (BasketOrderOrderRejectedReason) {
    BasketOrderOrderRejectedReason["OrderRejectReasonUnspecified"] = "ORDER_REJECT_REASON_UNSPECIFIED";
    BasketOrderOrderRejectedReason["BrokerOption"] = "BROKER_OPTION";
    BasketOrderOrderRejectedReason["UnknownSecurity"] = "UNKNOWN_SECURITY";
    BasketOrderOrderRejectedReason["ExchangeClosed"] = "EXCHANGE_CLOSED";
    BasketOrderOrderRejectedReason["TooLateToEnter"] = "TOO_LATE_TO_ENTER";
    BasketOrderOrderRejectedReason["UnknownOrder"] = "UNKNOWN_ORDER";
    BasketOrderOrderRejectedReason["DuplicateOrder"] = "DUPLICATE_ORDER";
    BasketOrderOrderRejectedReason["StaleOrder"] = "STALE_ORDER";
    BasketOrderOrderRejectedReason["BelowNotionalMinimum"] = "BELOW_NOTIONAL_MINIMUM";
    BasketOrderOrderRejectedReason["AccountNotEntitled"] = "ACCOUNT_NOT_ENTITLED";
    BasketOrderOrderRejectedReason["SystemError"] = "SYSTEM_ERROR";
    BasketOrderOrderRejectedReason["BlockingCorporateAction"] = "BLOCKING_CORPORATE_ACTION";
    BasketOrderOrderRejectedReason["UnavailablePriceQuote"] = "UNAVAILABLE_PRICE_QUOTE";
    BasketOrderOrderRejectedReason["ExecutionMisconfiguredClient"] = "EXECUTION_MISCONFIGURED_CLIENT";
    BasketOrderOrderRejectedReason["FractionalQuantityNotAllowedForSecurity"] = "FRACTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY";
    BasketOrderOrderRejectedReason["OnlyFractionalSellOrWholeOrdersAllowedForSecurity"] = "ONLY_FRACTIONAL_SELL_OR_WHOLE_ORDERS_ALLOWED_FOR_SECURITY";
    BasketOrderOrderRejectedReason["SymbolNotTradeable"] = "SYMBOL_NOT_TRADEABLE";
    BasketOrderOrderRejectedReason["AboveNotionalMaximum"] = "ABOVE_NOTIONAL_MAXIMUM";
    BasketOrderOrderRejectedReason["AboveShareMaximum"] = "ABOVE_SHARE_MAXIMUM";
    BasketOrderOrderRejectedReason["MaxSellQuantityRequired"] = "MAX_SELL_QUANTITY_REQUIRED";
    BasketOrderOrderRejectedReason["MaxSellQuantityProhibited"] = "MAX_SELL_QUANTITY_PROHIBITED";
    BasketOrderOrderRejectedReason["StockTradesDisabled"] = "STOCK_TRADES_DISABLED";
    BasketOrderOrderRejectedReason["AssetNotSetUpToTrade"] = "ASSET_NOT_SET_UP_TO_TRADE";
    BasketOrderOrderRejectedReason["AnotherBasketOrderForAccountHasFailedRiskChecks"] = "ANOTHER_BASKET_ORDER_FOR_ACCOUNT_HAS_FAILED_RISK_CHECKS";
    BasketOrderOrderRejectedReason["InsufficientPosition"] = "INSUFFICIENT_POSITION";
    BasketOrderOrderRejectedReason["FailedBuyingPower"] = "FAILED_BUYING_POWER";
})(BasketOrderOrderRejectedReason || (exports.BasketOrderOrderRejectedReason = BasketOrderOrderRejectedReason = {}));
/**
 * The processing status of the order
 */
var BasketOrderOrderStatus;
(function (BasketOrderOrderStatus) {
    BasketOrderOrderStatus["OrderStatusUnspecified"] = "ORDER_STATUS_UNSPECIFIED";
    BasketOrderOrderStatus["PendingNew"] = "PENDING_NEW";
    BasketOrderOrderStatus["New"] = "NEW";
    BasketOrderOrderStatus["PartiallyFilled"] = "PARTIALLY_FILLED";
    BasketOrderOrderStatus["Filled"] = "FILLED";
    BasketOrderOrderStatus["Rejected"] = "REJECTED";
})(BasketOrderOrderStatus || (exports.BasketOrderOrderStatus = BasketOrderOrderStatus = {}));
/**
 * The execution type of this order.
 */
var BasketOrderOrderType;
(function (BasketOrderOrderType) {
    BasketOrderOrderType["OrderTypeUnspecified"] = "ORDER_TYPE_UNSPECIFIED";
    BasketOrderOrderType["Market"] = "MARKET";
})(BasketOrderOrderType || (exports.BasketOrderOrderType = BasketOrderOrderType = {}));
/**
 * The side of this order.
 */
var BasketOrderSide;
(function (BasketOrderSide) {
    BasketOrderSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    BasketOrderSide["Buy"] = "BUY";
    BasketOrderSide["Sell"] = "SELL";
})(BasketOrderSide || (exports.BasketOrderSide = BasketOrderSide = {}));
/**
 * Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
 */
var BasketOrderTimeInForce;
(function (BasketOrderTimeInForce) {
    BasketOrderTimeInForce["TimeInForceUnspecified"] = "TIME_IN_FORCE_UNSPECIFIED";
    BasketOrderTimeInForce["Day"] = "DAY";
})(BasketOrderTimeInForce || (exports.BasketOrderTimeInForce = BasketOrderTimeInForce = {}));
/** @internal */
exports.BasketOrderAssetType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BasketOrderAssetType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderAssetType$;
(function (BasketOrderAssetType$) {
    /** @deprecated use `BasketOrderAssetType$inboundSchema` instead. */
    BasketOrderAssetType$.inboundSchema = exports.BasketOrderAssetType$inboundSchema;
    /** @deprecated use `BasketOrderAssetType$outboundSchema` instead. */
    BasketOrderAssetType$.outboundSchema = exports.BasketOrderAssetType$outboundSchema;
})(BasketOrderAssetType$ || (exports.BasketOrderAssetType$ = BasketOrderAssetType$ = {}));
/** @internal */
exports.BasketOrderCumulativeNotionalValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.BasketOrderCumulativeNotionalValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderCumulativeNotionalValue$;
(function (BasketOrderCumulativeNotionalValue$) {
    /** @deprecated use `BasketOrderCumulativeNotionalValue$inboundSchema` instead. */
    BasketOrderCumulativeNotionalValue$.inboundSchema = exports.BasketOrderCumulativeNotionalValue$inboundSchema;
    /** @deprecated use `BasketOrderCumulativeNotionalValue$outboundSchema` instead. */
    BasketOrderCumulativeNotionalValue$.outboundSchema = exports.BasketOrderCumulativeNotionalValue$outboundSchema;
})(BasketOrderCumulativeNotionalValue$ || (exports.BasketOrderCumulativeNotionalValue$ = BasketOrderCumulativeNotionalValue$ = {}));
/** @internal */
exports.BasketOrderFilledQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.BasketOrderFilledQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderFilledQuantity$;
(function (BasketOrderFilledQuantity$) {
    /** @deprecated use `BasketOrderFilledQuantity$inboundSchema` instead. */
    BasketOrderFilledQuantity$.inboundSchema = exports.BasketOrderFilledQuantity$inboundSchema;
    /** @deprecated use `BasketOrderFilledQuantity$outboundSchema` instead. */
    BasketOrderFilledQuantity$.outboundSchema = exports.BasketOrderFilledQuantity$outboundSchema;
})(BasketOrderFilledQuantity$ || (exports.BasketOrderFilledQuantity$ = BasketOrderFilledQuantity$ = {}));
/** @internal */
exports.BasketOrderIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BasketOrderIdentifierType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderIdentifierType$;
(function (BasketOrderIdentifierType$) {
    /** @deprecated use `BasketOrderIdentifierType$inboundSchema` instead. */
    BasketOrderIdentifierType$.inboundSchema = exports.BasketOrderIdentifierType$inboundSchema;
    /** @deprecated use `BasketOrderIdentifierType$outboundSchema` instead. */
    BasketOrderIdentifierType$.outboundSchema = exports.BasketOrderIdentifierType$outboundSchema;
})(BasketOrderIdentifierType$ || (exports.BasketOrderIdentifierType$ = BasketOrderIdentifierType$ = {}));
/** @internal */
exports.BasketOrderNotionalValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.BasketOrderNotionalValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderNotionalValue$;
(function (BasketOrderNotionalValue$) {
    /** @deprecated use `BasketOrderNotionalValue$inboundSchema` instead. */
    BasketOrderNotionalValue$.inboundSchema = exports.BasketOrderNotionalValue$inboundSchema;
    /** @deprecated use `BasketOrderNotionalValue$outboundSchema` instead. */
    BasketOrderNotionalValue$.outboundSchema = exports.BasketOrderNotionalValue$outboundSchema;
})(BasketOrderNotionalValue$ || (exports.BasketOrderNotionalValue$ = BasketOrderNotionalValue$ = {}));
/** @internal */
exports.BasketOrderOrderRejectedReason$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderOrderRejectedReason),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BasketOrderOrderRejectedReason$outboundSchema = z.union([
    z.nativeEnum(BasketOrderOrderRejectedReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderOrderRejectedReason$;
(function (BasketOrderOrderRejectedReason$) {
    /** @deprecated use `BasketOrderOrderRejectedReason$inboundSchema` instead. */
    BasketOrderOrderRejectedReason$.inboundSchema = exports.BasketOrderOrderRejectedReason$inboundSchema;
    /** @deprecated use `BasketOrderOrderRejectedReason$outboundSchema` instead. */
    BasketOrderOrderRejectedReason$.outboundSchema = exports.BasketOrderOrderRejectedReason$outboundSchema;
})(BasketOrderOrderRejectedReason$ || (exports.BasketOrderOrderRejectedReason$ = BasketOrderOrderRejectedReason$ = {}));
/** @internal */
exports.BasketOrderOrderStatus$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderOrderStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BasketOrderOrderStatus$outboundSchema = z.union([
    z.nativeEnum(BasketOrderOrderStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderOrderStatus$;
(function (BasketOrderOrderStatus$) {
    /** @deprecated use `BasketOrderOrderStatus$inboundSchema` instead. */
    BasketOrderOrderStatus$.inboundSchema = exports.BasketOrderOrderStatus$inboundSchema;
    /** @deprecated use `BasketOrderOrderStatus$outboundSchema` instead. */
    BasketOrderOrderStatus$.outboundSchema = exports.BasketOrderOrderStatus$outboundSchema;
})(BasketOrderOrderStatus$ || (exports.BasketOrderOrderStatus$ = BasketOrderOrderStatus$ = {}));
/** @internal */
exports.BasketOrderOrderType$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderOrderType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BasketOrderOrderType$outboundSchema = z.union([
    z.nativeEnum(BasketOrderOrderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderOrderType$;
(function (BasketOrderOrderType$) {
    /** @deprecated use `BasketOrderOrderType$inboundSchema` instead. */
    BasketOrderOrderType$.inboundSchema = exports.BasketOrderOrderType$inboundSchema;
    /** @deprecated use `BasketOrderOrderType$outboundSchema` instead. */
    BasketOrderOrderType$.outboundSchema = exports.BasketOrderOrderType$outboundSchema;
})(BasketOrderOrderType$ || (exports.BasketOrderOrderType$ = BasketOrderOrderType$ = {}));
/** @internal */
exports.BasketOrderQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.BasketOrderQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderQuantity$;
(function (BasketOrderQuantity$) {
    /** @deprecated use `BasketOrderQuantity$inboundSchema` instead. */
    BasketOrderQuantity$.inboundSchema = exports.BasketOrderQuantity$inboundSchema;
    /** @deprecated use `BasketOrderQuantity$outboundSchema` instead. */
    BasketOrderQuantity$.outboundSchema = exports.BasketOrderQuantity$outboundSchema;
})(BasketOrderQuantity$ || (exports.BasketOrderQuantity$ = BasketOrderQuantity$ = {}));
/** @internal */
exports.BasketOrderSide$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BasketOrderSide$outboundSchema = z.union([
    z.nativeEnum(BasketOrderSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderSide$;
(function (BasketOrderSide$) {
    /** @deprecated use `BasketOrderSide$inboundSchema` instead. */
    BasketOrderSide$.inboundSchema = exports.BasketOrderSide$inboundSchema;
    /** @deprecated use `BasketOrderSide$outboundSchema` instead. */
    BasketOrderSide$.outboundSchema = exports.BasketOrderSide$outboundSchema;
})(BasketOrderSide$ || (exports.BasketOrderSide$ = BasketOrderSide$ = {}));
/** @internal */
exports.BasketOrderTimeInForce$inboundSchema = z
    .union([
    z.nativeEnum(BasketOrderTimeInForce),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BasketOrderTimeInForce$outboundSchema = z.union([
    z.nativeEnum(BasketOrderTimeInForce),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrderTimeInForce$;
(function (BasketOrderTimeInForce$) {
    /** @deprecated use `BasketOrderTimeInForce$inboundSchema` instead. */
    BasketOrderTimeInForce$.inboundSchema = exports.BasketOrderTimeInForce$inboundSchema;
    /** @deprecated use `BasketOrderTimeInForce$outboundSchema` instead. */
    BasketOrderTimeInForce$.outboundSchema = exports.BasketOrderTimeInForce$outboundSchema;
})(BasketOrderTimeInForce$ || (exports.BasketOrderTimeInForce$ = BasketOrderTimeInForce$ = {}));
/** @internal */
exports.BasketOrder$inboundSchema = z.object({
    account_id: z.string().optional(),
    asset_id: z.string().optional(),
    asset_type: exports.BasketOrderAssetType$inboundSchema.optional(),
    average_prices: z.array(executedprice_js_1.ExecutedPrice$inboundSchema).optional(),
    basket_order_id: z.string().optional(),
    client_order_id: z.string().optional(),
    client_order_received_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    cumulative_notional_value: z.nullable(z.lazy(() => exports.BasketOrderCumulativeNotionalValue$inboundSchema)).optional(),
    currency_code: z.string().optional(),
    filled_quantity: z.nullable(z.lazy(() => exports.BasketOrderFilledQuantity$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: exports.BasketOrderIdentifierType$inboundSchema.optional(),
    last_update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    name: z.string().optional(),
    notional_value: z.nullable(z.lazy(() => exports.BasketOrderNotionalValue$inboundSchema)).optional(),
    order_rejected_reason: exports.BasketOrderOrderRejectedReason$inboundSchema
        .optional(),
    order_status: exports.BasketOrderOrderStatus$inboundSchema.optional(),
    order_type: exports.BasketOrderOrderType$inboundSchema.optional(),
    quantity: z.nullable(z.lazy(() => exports.BasketOrderQuantity$inboundSchema))
        .optional(),
    side: exports.BasketOrderSide$inboundSchema.optional(),
    time_in_force: exports.BasketOrderTimeInForce$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
        "asset_id": "assetId",
        "asset_type": "assetType",
        "average_prices": "averagePrices",
        "basket_order_id": "basketOrderId",
        "client_order_id": "clientOrderId",
        "client_order_received_time": "clientOrderReceivedTime",
        "create_time": "createTime",
        "cumulative_notional_value": "cumulativeNotionalValue",
        "currency_code": "currencyCode",
        "filled_quantity": "filledQuantity",
        "identifier_type": "identifierType",
        "last_update_time": "lastUpdateTime",
        "notional_value": "notionalValue",
        "order_rejected_reason": "orderRejectedReason",
        "order_status": "orderStatus",
        "order_type": "orderType",
        "time_in_force": "timeInForce",
    });
});
/** @internal */
exports.BasketOrder$outboundSchema = z.object({
    accountId: z.string().optional(),
    assetId: z.string().optional(),
    assetType: exports.BasketOrderAssetType$outboundSchema.optional(),
    averagePrices: z.array(executedprice_js_1.ExecutedPrice$outboundSchema).optional(),
    basketOrderId: z.string().optional(),
    clientOrderId: z.string().optional(),
    clientOrderReceivedTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    cumulativeNotionalValue: z.nullable(z.lazy(() => exports.BasketOrderCumulativeNotionalValue$outboundSchema)).optional(),
    currencyCode: z.string().optional(),
    filledQuantity: z.nullable(z.lazy(() => exports.BasketOrderFilledQuantity$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: exports.BasketOrderIdentifierType$outboundSchema.optional(),
    lastUpdateTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    name: z.string().optional(),
    notionalValue: z.nullable(z.lazy(() => exports.BasketOrderNotionalValue$outboundSchema)).optional(),
    orderRejectedReason: exports.BasketOrderOrderRejectedReason$outboundSchema.optional(),
    orderStatus: exports.BasketOrderOrderStatus$outboundSchema.optional(),
    orderType: exports.BasketOrderOrderType$outboundSchema.optional(),
    quantity: z.nullable(z.lazy(() => exports.BasketOrderQuantity$outboundSchema))
        .optional(),
    side: exports.BasketOrderSide$outboundSchema.optional(),
    timeInForce: exports.BasketOrderTimeInForce$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
        assetId: "asset_id",
        assetType: "asset_type",
        averagePrices: "average_prices",
        basketOrderId: "basket_order_id",
        clientOrderId: "client_order_id",
        clientOrderReceivedTime: "client_order_received_time",
        createTime: "create_time",
        cumulativeNotionalValue: "cumulative_notional_value",
        currencyCode: "currency_code",
        filledQuantity: "filled_quantity",
        identifierType: "identifier_type",
        lastUpdateTime: "last_update_time",
        notionalValue: "notional_value",
        orderRejectedReason: "order_rejected_reason",
        orderStatus: "order_status",
        orderType: "order_type",
        timeInForce: "time_in_force",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BasketOrder$;
(function (BasketOrder$) {
    /** @deprecated use `BasketOrder$inboundSchema` instead. */
    BasketOrder$.inboundSchema = exports.BasketOrder$inboundSchema;
    /** @deprecated use `BasketOrder$outboundSchema` instead. */
    BasketOrder$.outboundSchema = exports.BasketOrder$outboundSchema;
})(BasketOrder$ || (exports.BasketOrder$ = BasketOrder$ = {}));
//# sourceMappingURL=basketorder.js.map