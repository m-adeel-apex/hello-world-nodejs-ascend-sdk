"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agreement$ = exports.Agreement$outboundSchema = exports.Agreement$inboundSchema = exports.AgreementState$ = exports.AgreementState$outboundSchema = exports.AgreementState$inboundSchema = exports.AgreementSource$ = exports.AgreementSource$outboundSchema = exports.AgreementSource$inboundSchema = exports.AgreementState = exports.AgreementSource = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * An internal indicator from where the agreement was generated; Typically `ACCOUNTS_SERVICE` if accessing our public APIs
 */
var AgreementSource;
(function (AgreementSource) {
    AgreementSource["AgreementSourceUnspecified"] = "AGREEMENT_SOURCE_UNSPECIFIED";
    AgreementSource["AtlasForm"] = "ATLAS_FORM";
    AgreementSource["OtherSource"] = "OTHER_SOURCE";
    AgreementSource["AccountsService"] = "ACCOUNTS_SERVICE";
})(AgreementSource || (exports.AgreementSource = AgreementSource = {}));
/**
 * The status of an agreement which blocks an enrollment; `REQUIRED` if not yet received, or `AFFIRMED` if acknowledgement has been received by AFS
 */
var AgreementState;
(function (AgreementState) {
    AgreementState["AgreementStateUnspecified"] = "AGREEMENT_STATE_UNSPECIFIED";
    AgreementState["Required"] = "REQUIRED";
    AgreementState["Affirmed"] = "AFFIRMED";
    AgreementState["Voided"] = "VOIDED";
})(AgreementState || (exports.AgreementState = AgreementState = {}));
/** @internal */
exports.AgreementSource$inboundSchema = z
    .union([
    z.nativeEnum(AgreementSource),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AgreementSource$outboundSchema = z.union([
    z.nativeEnum(AgreementSource),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AgreementSource$;
(function (AgreementSource$) {
    /** @deprecated use `AgreementSource$inboundSchema` instead. */
    AgreementSource$.inboundSchema = exports.AgreementSource$inboundSchema;
    /** @deprecated use `AgreementSource$outboundSchema` instead. */
    AgreementSource$.outboundSchema = exports.AgreementSource$outboundSchema;
})(AgreementSource$ || (exports.AgreementSource$ = AgreementSource$ = {}));
/** @internal */
exports.AgreementState$inboundSchema = z
    .union([
    z.nativeEnum(AgreementState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AgreementState$outboundSchema = z.union([
    z.nativeEnum(AgreementState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AgreementState$;
(function (AgreementState$) {
    /** @deprecated use `AgreementState$inboundSchema` instead. */
    AgreementState$.inboundSchema = exports.AgreementState$inboundSchema;
    /** @deprecated use `AgreementState$outboundSchema` instead. */
    AgreementState$.outboundSchema = exports.AgreementState$outboundSchema;
})(AgreementState$ || (exports.AgreementState$ = AgreementState$ = {}));
/** @internal */
exports.Agreement$inboundSchema = z.object({
    affirmation_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    agreement_id: z.string().optional(),
    agreement_name: z.string().optional(),
    agreement_source: exports.AgreementSource$inboundSchema.optional(),
    agreement_state: exports.AgreementState$inboundSchema.optional(),
    agreement_uri: z.string().optional(),
    agreement_version: z.string().optional(),
    enrollment_id: z.string().optional(),
    legal_entity_id: z.string().optional(),
    legal_natural_person_id: z.string().optional(),
    name: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "affirmation_time": "affirmationTime",
        "agreement_id": "agreementId",
        "agreement_name": "agreementName",
        "agreement_source": "agreementSource",
        "agreement_state": "agreementState",
        "agreement_uri": "agreementUri",
        "agreement_version": "agreementVersion",
        "enrollment_id": "enrollmentId",
        "legal_entity_id": "legalEntityId",
        "legal_natural_person_id": "legalNaturalPersonId",
    });
});
/** @internal */
exports.Agreement$outboundSchema = z.object({
    affirmationTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    agreementId: z.string().optional(),
    agreementName: z.string().optional(),
    agreementSource: exports.AgreementSource$outboundSchema.optional(),
    agreementState: exports.AgreementState$outboundSchema.optional(),
    agreementUri: z.string().optional(),
    agreementVersion: z.string().optional(),
    enrollmentId: z.string().optional(),
    legalEntityId: z.string().optional(),
    legalNaturalPersonId: z.string().optional(),
    name: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        affirmationTime: "affirmation_time",
        agreementId: "agreement_id",
        agreementName: "agreement_name",
        agreementSource: "agreement_source",
        agreementState: "agreement_state",
        agreementUri: "agreement_uri",
        agreementVersion: "agreement_version",
        enrollmentId: "enrollment_id",
        legalEntityId: "legal_entity_id",
        legalNaturalPersonId: "legal_natural_person_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Agreement$;
(function (Agreement$) {
    /** @deprecated use `Agreement$inboundSchema` instead. */
    Agreement$.inboundSchema = exports.Agreement$inboundSchema;
    /** @deprecated use `Agreement$outboundSchema` instead. */
    Agreement$.outboundSchema = exports.Agreement$outboundSchema;
})(Agreement$ || (exports.Agreement$ = Agreement$ = {}));
//# sourceMappingURL=agreement.js.map