"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountTaxProfileUpdate$ = exports.AccountTaxProfileUpdate$outboundSchema = exports.AccountTaxProfileUpdate$inboundSchema = exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$ = exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema = exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema = exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * A method of determining the cost basis of an asset that has been sold or disposed of, by identifying which specific lot of the asset was sold and using the cost of that lot to calculate the cost basis; this method is commonly used for tax purposes to determine the amount of reportable capital gains or losses By default, this is set to `COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM`
 */
var AccountTaxProfileUpdateCostBasisLotDisposalMethod;
(function (AccountTaxProfileUpdateCostBasisLotDisposalMethod) {
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalMethodUnspecified"] = "COST_BASIS_LOT_DISPOSAL_METHOD_UNSPECIFIED";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalFifo"] = "COST_BASIS_LOT_DISPOSAL_FIFO";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalLifo"] = "COST_BASIS_LOT_DISPOSAL_LIFO";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalHighCost"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalHighCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_LONG_TERM";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalHighCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_SHORT_TERM";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalLowCost"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalLowCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_LONG_TERM";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalLowCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_SHORT_TERM";
    AccountTaxProfileUpdateCostBasisLotDisposalMethod["CostBasisLotDisposalMinTaxTerm"] = "COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM";
})(AccountTaxProfileUpdateCostBasisLotDisposalMethod || (exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod = AccountTaxProfileUpdateCostBasisLotDisposalMethod = {}));
/** @internal */
exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema = z
    .union([
    z.nativeEnum(AccountTaxProfileUpdateCostBasisLotDisposalMethod),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema = z.union([
    z.nativeEnum(AccountTaxProfileUpdateCostBasisLotDisposalMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountTaxProfileUpdateCostBasisLotDisposalMethod$;
(function (AccountTaxProfileUpdateCostBasisLotDisposalMethod$) {
    /** @deprecated use `AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema` instead. */
    AccountTaxProfileUpdateCostBasisLotDisposalMethod$.inboundSchema = exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema;
    /** @deprecated use `AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema` instead. */
    AccountTaxProfileUpdateCostBasisLotDisposalMethod$.outboundSchema = exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema;
})(AccountTaxProfileUpdateCostBasisLotDisposalMethod$ || (exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$ = AccountTaxProfileUpdateCostBasisLotDisposalMethod$ = {}));
/** @internal */
exports.AccountTaxProfileUpdate$inboundSchema = z.object({
    cost_basis_lot_disposal_method: exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$inboundSchema.optional(),
    section_475_election: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cost_basis_lot_disposal_method": "costBasisLotDisposalMethod",
        "section_475_election": "section475Election",
    });
});
/** @internal */
exports.AccountTaxProfileUpdate$outboundSchema = z.object({
    costBasisLotDisposalMethod: exports.AccountTaxProfileUpdateCostBasisLotDisposalMethod$outboundSchema.optional(),
    section475Election: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        costBasisLotDisposalMethod: "cost_basis_lot_disposal_method",
        section475Election: "section_475_election",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountTaxProfileUpdate$;
(function (AccountTaxProfileUpdate$) {
    /** @deprecated use `AccountTaxProfileUpdate$inboundSchema` instead. */
    AccountTaxProfileUpdate$.inboundSchema = exports.AccountTaxProfileUpdate$inboundSchema;
    /** @deprecated use `AccountTaxProfileUpdate$outboundSchema` instead. */
    AccountTaxProfileUpdate$.outboundSchema = exports.AccountTaxProfileUpdate$outboundSchema;
})(AccountTaxProfileUpdate$ || (exports.AccountTaxProfileUpdate$ = AccountTaxProfileUpdate$ = {}));
//# sourceMappingURL=accounttaxprofileupdate.js.map