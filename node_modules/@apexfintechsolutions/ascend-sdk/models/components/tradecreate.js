"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeCreate$ = exports.TradeCreate$outboundSchema = exports.TradeCreate$inboundSchema = exports.WhenIssued$ = exports.WhenIssued$outboundSchema = exports.WhenIssued$inboundSchema = exports.Venue$ = exports.Venue$outboundSchema = exports.Venue$inboundSchema = exports.SpecialInstructions$ = exports.SpecialInstructions$outboundSchema = exports.SpecialInstructions$inboundSchema = exports.SideModifier$ = exports.SideModifier$outboundSchema = exports.SideModifier$inboundSchema = exports.TradeCreateSide$ = exports.TradeCreateSide$outboundSchema = exports.TradeCreateSide$inboundSchema = exports.RouteType$ = exports.RouteType$outboundSchema = exports.RouteType$inboundSchema = exports.TradeCreateIdentifierType$ = exports.TradeCreateIdentifierType$outboundSchema = exports.TradeCreateIdentifierType$inboundSchema = exports.TradeCreateBrokerCapacity$ = exports.TradeCreateBrokerCapacity$outboundSchema = exports.TradeCreateBrokerCapacity$inboundSchema = exports.TradeCreateAssetType$ = exports.TradeCreateAssetType$outboundSchema = exports.TradeCreateAssetType$inboundSchema = exports.WhenIssued = exports.Venue = exports.SpecialInstructions = exports.SideModifier = exports.TradeCreateSide = exports.RouteType = exports.TradeCreateIdentifierType = exports.TradeCreateBrokerCapacity = exports.TradeCreateAssetType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const datecreate_js_1 = require("./datecreate.js");
const executioncreate_js_1 = require("./executioncreate.js");
const feecreate_js_1 = require("./feecreate.js");
const lotcreate_js_1 = require("./lotcreate.js");
/**
 * Type of the asset being traded. Required for SYMBOL and CUSIP.
 */
var TradeCreateAssetType;
(function (TradeCreateAssetType) {
    TradeCreateAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    TradeCreateAssetType["Equity"] = "EQUITY";
    TradeCreateAssetType["FixedIncome"] = "FIXED_INCOME";
})(TradeCreateAssetType || (exports.TradeCreateAssetType = TradeCreateAssetType = {}));
/**
 * Broker capacity for the trade.
 */
var TradeCreateBrokerCapacity;
(function (TradeCreateBrokerCapacity) {
    TradeCreateBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    TradeCreateBrokerCapacity["Agency"] = "AGENCY";
    TradeCreateBrokerCapacity["Principal"] = "PRINCIPAL";
    TradeCreateBrokerCapacity["Mixed"] = "MIXED";
})(TradeCreateBrokerCapacity || (exports.TradeCreateBrokerCapacity = TradeCreateBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
var TradeCreateIdentifierType;
(function (TradeCreateIdentifierType) {
    TradeCreateIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    TradeCreateIdentifierType["AssetId"] = "ASSET_ID";
    TradeCreateIdentifierType["Symbol"] = "SYMBOL";
    TradeCreateIdentifierType["Cusip"] = "CUSIP";
    TradeCreateIdentifierType["Isin"] = "ISIN";
})(TradeCreateIdentifierType || (exports.TradeCreateIdentifierType = TradeCreateIdentifierType = {}));
/**
 * Route type for the trade.
 */
var RouteType;
(function (RouteType) {
    RouteType["RouteTypeUnspecified"] = "ROUTE_TYPE_UNSPECIFIED";
    RouteType["Dma"] = "DMA";
    RouteType["Mngd"] = "MNGD";
    RouteType["Quik"] = "QUIK";
    RouteType["Algo"] = "ALGO";
    RouteType["Away"] = "AWAY";
    RouteType["Corr"] = "CORR";
    RouteType["Boats"] = "BOATS";
})(RouteType || (exports.RouteType = RouteType = {}));
/**
 * Denotes if the trade is a SELL or a BUY.
 */
var TradeCreateSide;
(function (TradeCreateSide) {
    TradeCreateSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    TradeCreateSide["Buy"] = "BUY";
    TradeCreateSide["Sell"] = "SELL";
})(TradeCreateSide || (exports.TradeCreateSide = TradeCreateSide = {}));
/**
 * Side modifier for the trade.
 */
var SideModifier;
(function (SideModifier) {
    SideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    SideModifier["Short"] = "SHORT";
    SideModifier["ShortExempt"] = "SHORT_EXEMPT";
    SideModifier["ShortCover"] = "SHORT_COVER";
    SideModifier["Open"] = "OPEN";
    SideModifier["Close"] = "CLOSE";
})(SideModifier || (exports.SideModifier = SideModifier = {}));
var SpecialInstructions;
(function (SpecialInstructions) {
    SpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    SpecialInstructions["Rule144"] = "RULE_144";
    SpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    SpecialInstructions["WithRights"] = "WITH_RIGHTS";
    SpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    SpecialInstructions["CoverShort"] = "COVER_SHORT";
    SpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    SpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    SpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    SpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    SpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    SpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    SpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    SpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    SpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    SpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    SpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    SpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    SpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    SpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    SpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    SpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    SpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    SpecialInstructions["Solicited"] = "SOLICITED";
    SpecialInstructions["Unsolicited"] = "UNSOLICITED";
    SpecialInstructions["XDividend"] = "X_DIVIDEND";
    SpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    SpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    SpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    SpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    SpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    SpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    SpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    SpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    SpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    SpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    SpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    SpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    SpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    SpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    SpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    SpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    SpecialInstructions["StockReward"] = "STOCK_REWARD";
    SpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    SpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    SpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    SpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(SpecialInstructions || (exports.SpecialInstructions = SpecialInstructions = {}));
/**
 * Exchange venue
 */
var Venue;
(function (Venue) {
    Venue["ExchangeVenueUnspecified"] = "EXCHANGE_VENUE_UNSPECIFIED";
    Venue["Amex"] = "AMEX";
    Venue["Arca"] = "ARCA";
    Venue["Bats"] = "BATS";
    Venue["BatsByx"] = "BATS_BYX";
    Venue["Boston"] = "BOSTON";
    Venue["Box"] = "BOX";
    Venue["Bzx"] = "BZX";
    Venue["C2"] = "C2";
    Venue["Cboe"] = "CBOE";
    Venue["Chicago"] = "CHICAGO";
    Venue["Cincinnati"] = "CINCINNATI";
    Venue["Edga"] = "EDGA";
    Venue["Edgx"] = "EDGX";
    Venue["Exclearing"] = "EXCLEARING";
    Venue["Iex"] = "IEX";
    Venue["Ise"] = "ISE";
    Venue["IseGemini"] = "ISE_GEMINI";
    Venue["Miax"] = "MIAX";
    Venue["Nasdaq"] = "NASDAQ";
    Venue["NasdaqOmxBx"] = "NASDAQ_OMX_BX";
    Venue["Nyse"] = "NYSE";
    Venue["Phlx"] = "PHLX";
    Venue["Otc"] = "OTC";
    Venue["Qsr"] = "QSR";
})(Venue || (exports.Venue = Venue = {}));
/**
 * Denotes that this trade was either when_issued or when_distributed.
 */
var WhenIssued;
(function (WhenIssued) {
    WhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    WhenIssued["WhenIssued"] = "WHEN_ISSUED";
    WhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(WhenIssued || (exports.WhenIssued = WhenIssued = {}));
/** @internal */
exports.TradeCreateAssetType$inboundSchema = z
    .union([
    z.nativeEnum(TradeCreateAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeCreateAssetType$outboundSchema = z.union([
    z.nativeEnum(TradeCreateAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeCreateAssetType$;
(function (TradeCreateAssetType$) {
    /** @deprecated use `TradeCreateAssetType$inboundSchema` instead. */
    TradeCreateAssetType$.inboundSchema = exports.TradeCreateAssetType$inboundSchema;
    /** @deprecated use `TradeCreateAssetType$outboundSchema` instead. */
    TradeCreateAssetType$.outboundSchema = exports.TradeCreateAssetType$outboundSchema;
})(TradeCreateAssetType$ || (exports.TradeCreateAssetType$ = TradeCreateAssetType$ = {}));
/** @internal */
exports.TradeCreateBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(TradeCreateBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeCreateBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(TradeCreateBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeCreateBrokerCapacity$;
(function (TradeCreateBrokerCapacity$) {
    /** @deprecated use `TradeCreateBrokerCapacity$inboundSchema` instead. */
    TradeCreateBrokerCapacity$.inboundSchema = exports.TradeCreateBrokerCapacity$inboundSchema;
    /** @deprecated use `TradeCreateBrokerCapacity$outboundSchema` instead. */
    TradeCreateBrokerCapacity$.outboundSchema = exports.TradeCreateBrokerCapacity$outboundSchema;
})(TradeCreateBrokerCapacity$ || (exports.TradeCreateBrokerCapacity$ = TradeCreateBrokerCapacity$ = {}));
/** @internal */
exports.TradeCreateIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(TradeCreateIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeCreateIdentifierType$outboundSchema = z.union([
    z.nativeEnum(TradeCreateIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeCreateIdentifierType$;
(function (TradeCreateIdentifierType$) {
    /** @deprecated use `TradeCreateIdentifierType$inboundSchema` instead. */
    TradeCreateIdentifierType$.inboundSchema = exports.TradeCreateIdentifierType$inboundSchema;
    /** @deprecated use `TradeCreateIdentifierType$outboundSchema` instead. */
    TradeCreateIdentifierType$.outboundSchema = exports.TradeCreateIdentifierType$outboundSchema;
})(TradeCreateIdentifierType$ || (exports.TradeCreateIdentifierType$ = TradeCreateIdentifierType$ = {}));
/** @internal */
exports.RouteType$inboundSchema = z
    .union([
    z.nativeEnum(RouteType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RouteType$outboundSchema = z.union([
    z.nativeEnum(RouteType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RouteType$;
(function (RouteType$) {
    /** @deprecated use `RouteType$inboundSchema` instead. */
    RouteType$.inboundSchema = exports.RouteType$inboundSchema;
    /** @deprecated use `RouteType$outboundSchema` instead. */
    RouteType$.outboundSchema = exports.RouteType$outboundSchema;
})(RouteType$ || (exports.RouteType$ = RouteType$ = {}));
/** @internal */
exports.TradeCreateSide$inboundSchema = z
    .union([
    z.nativeEnum(TradeCreateSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeCreateSide$outboundSchema = z.union([
    z.nativeEnum(TradeCreateSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeCreateSide$;
(function (TradeCreateSide$) {
    /** @deprecated use `TradeCreateSide$inboundSchema` instead. */
    TradeCreateSide$.inboundSchema = exports.TradeCreateSide$inboundSchema;
    /** @deprecated use `TradeCreateSide$outboundSchema` instead. */
    TradeCreateSide$.outboundSchema = exports.TradeCreateSide$outboundSchema;
})(TradeCreateSide$ || (exports.TradeCreateSide$ = TradeCreateSide$ = {}));
/** @internal */
exports.SideModifier$inboundSchema = z
    .union([
    z.nativeEnum(SideModifier),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SideModifier$outboundSchema = z.union([
    z.nativeEnum(SideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SideModifier$;
(function (SideModifier$) {
    /** @deprecated use `SideModifier$inboundSchema` instead. */
    SideModifier$.inboundSchema = exports.SideModifier$inboundSchema;
    /** @deprecated use `SideModifier$outboundSchema` instead. */
    SideModifier$.outboundSchema = exports.SideModifier$outboundSchema;
})(SideModifier$ || (exports.SideModifier$ = SideModifier$ = {}));
/** @internal */
exports.SpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(SpecialInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(SpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SpecialInstructions$;
(function (SpecialInstructions$) {
    /** @deprecated use `SpecialInstructions$inboundSchema` instead. */
    SpecialInstructions$.inboundSchema = exports.SpecialInstructions$inboundSchema;
    /** @deprecated use `SpecialInstructions$outboundSchema` instead. */
    SpecialInstructions$.outboundSchema = exports.SpecialInstructions$outboundSchema;
})(SpecialInstructions$ || (exports.SpecialInstructions$ = SpecialInstructions$ = {}));
/** @internal */
exports.Venue$inboundSchema = z
    .union([
    z.nativeEnum(Venue),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.Venue$outboundSchema = z.union([
    z.nativeEnum(Venue),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Venue$;
(function (Venue$) {
    /** @deprecated use `Venue$inboundSchema` instead. */
    Venue$.inboundSchema = exports.Venue$inboundSchema;
    /** @deprecated use `Venue$outboundSchema` instead. */
    Venue$.outboundSchema = exports.Venue$outboundSchema;
})(Venue$ || (exports.Venue$ = Venue$ = {}));
/** @internal */
exports.WhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(WhenIssued),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.WhenIssued$outboundSchema = z.union([
    z.nativeEnum(WhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WhenIssued$;
(function (WhenIssued$) {
    /** @deprecated use `WhenIssued$inboundSchema` instead. */
    WhenIssued$.inboundSchema = exports.WhenIssued$inboundSchema;
    /** @deprecated use `WhenIssued$outboundSchema` instead. */
    WhenIssued$.outboundSchema = exports.WhenIssued$outboundSchema;
})(WhenIssued$ || (exports.WhenIssued$ = WhenIssued$ = {}));
/** @internal */
exports.TradeCreate$inboundSchema = z.object({
    account_id: z.string(),
    additional_instructions: z.string().optional(),
    alternate_order_id: z.string().optional(),
    asset_type: exports.TradeCreateAssetType$inboundSchema.optional(),
    broker_capacity: exports.TradeCreateBrokerCapacity$inboundSchema,
    client_order_id: z.string(),
    executing_broker: z.string().optional(),
    executions: z.array(executioncreate_js_1.ExecutionCreate$inboundSchema),
    fees: z.array(feecreate_js_1.FeeCreate$inboundSchema).optional(),
    identifier: z.string(),
    identifier_type: exports.TradeCreateIdentifierType$inboundSchema,
    issuing_region_code: z.string().optional(),
    local_market_trade_date: datecreate_js_1.DateCreate$inboundSchema.optional(),
    lot_matching_instructions: z.array(lotcreate_js_1.LotCreate$inboundSchema).optional(),
    mic_code: z.string().optional(),
    open: z.boolean().optional(),
    order_id: z.string().optional(),
    route_type: exports.RouteType$inboundSchema,
    settlement_date: datecreate_js_1.DateCreate$inboundSchema.optional(),
    side: exports.TradeCreateSide$inboundSchema,
    side_modifier: exports.SideModifier$inboundSchema.optional(),
    source_application: z.string(),
    special_instructions: z.array(exports.SpecialInstructions$inboundSchema).optional(),
    venue: exports.Venue$inboundSchema.optional(),
    when_issued: exports.WhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "executing_broker": "executingBroker",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "local_market_trade_date": "localMarketTradeDate",
        "lot_matching_instructions": "lotMatchingInstructions",
        "mic_code": "micCode",
        "order_id": "orderId",
        "route_type": "routeType",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "when_issued": "whenIssued",
    });
});
/** @internal */
exports.TradeCreate$outboundSchema = z.object({
    accountId: z.string(),
    additionalInstructions: z.string().optional(),
    alternateOrderId: z.string().optional(),
    assetType: exports.TradeCreateAssetType$outboundSchema.optional(),
    brokerCapacity: exports.TradeCreateBrokerCapacity$outboundSchema,
    clientOrderId: z.string(),
    executingBroker: z.string().optional(),
    executions: z.array(executioncreate_js_1.ExecutionCreate$outboundSchema),
    fees: z.array(feecreate_js_1.FeeCreate$outboundSchema).optional(),
    identifier: z.string(),
    identifierType: exports.TradeCreateIdentifierType$outboundSchema,
    issuingRegionCode: z.string().optional(),
    localMarketTradeDate: datecreate_js_1.DateCreate$outboundSchema.optional(),
    lotMatchingInstructions: z.array(lotcreate_js_1.LotCreate$outboundSchema).optional(),
    micCode: z.string().optional(),
    open: z.boolean().optional(),
    orderId: z.string().optional(),
    routeType: exports.RouteType$outboundSchema,
    settlementDate: datecreate_js_1.DateCreate$outboundSchema.optional(),
    side: exports.TradeCreateSide$outboundSchema,
    sideModifier: exports.SideModifier$outboundSchema.optional(),
    sourceApplication: z.string(),
    specialInstructions: z.array(exports.SpecialInstructions$outboundSchema).optional(),
    venue: exports.Venue$outboundSchema.optional(),
    whenIssued: exports.WhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        executingBroker: "executing_broker",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        localMarketTradeDate: "local_market_trade_date",
        lotMatchingInstructions: "lot_matching_instructions",
        micCode: "mic_code",
        orderId: "order_id",
        routeType: "route_type",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeCreate$;
(function (TradeCreate$) {
    /** @deprecated use `TradeCreate$inboundSchema` instead. */
    TradeCreate$.inboundSchema = exports.TradeCreate$inboundSchema;
    /** @deprecated use `TradeCreate$outboundSchema` instead. */
    TradeCreate$.outboundSchema = exports.TradeCreate$outboundSchema;
})(TradeCreate$ || (exports.TradeCreate$ = TradeCreate$ = {}));
//# sourceMappingURL=tradecreate.js.map