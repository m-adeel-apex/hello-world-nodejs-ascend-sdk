"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegalEntityFederalTaxClassification$ = exports.LegalEntityFederalTaxClassification$outboundSchema = exports.LegalEntityFederalTaxClassification$inboundSchema = exports.LegalEntityCNoticeDate$ = exports.LegalEntityCNoticeDate$outboundSchema = exports.LegalEntityCNoticeDate$inboundSchema = exports.LegalEntityTaxIdType$ = exports.LegalEntityTaxIdType$outboundSchema = exports.LegalEntityTaxIdType$inboundSchema = exports.LegalAddress$ = exports.LegalAddress$outboundSchema = exports.LegalAddress$inboundSchema = exports.LegalEntityLargeTrader$ = exports.LegalEntityLargeTrader$outboundSchema = exports.LegalEntityLargeTrader$inboundSchema = exports.LegalEntityEffectiveDate$ = exports.LegalEntityEffectiveDate$outboundSchema = exports.LegalEntityEffectiveDate$inboundSchema = exports.FormationDate$ = exports.FormationDate$outboundSchema = exports.FormationDate$inboundSchema = exports.LegalEntityExemptCustomerReason$ = exports.LegalEntityExemptCustomerReason$outboundSchema = exports.LegalEntityExemptCustomerReason$inboundSchema = exports.LegalEntityEntityType$ = exports.LegalEntityEntityType$outboundSchema = exports.LegalEntityEntityType$inboundSchema = exports.EntityDueDiligence$ = exports.EntityDueDiligence$outboundSchema = exports.EntityDueDiligence$inboundSchema = exports.LegalEntityNegativeNews$ = exports.LegalEntityNegativeNews$outboundSchema = exports.LegalEntityNegativeNews$inboundSchema = exports.LegalEntityCorporateStructure$ = exports.LegalEntityCorporateStructure$outboundSchema = exports.LegalEntityCorporateStructure$inboundSchema = exports.LegalEntityBusinessIndustrialClassification$ = exports.LegalEntityBusinessIndustrialClassification$outboundSchema = exports.LegalEntityBusinessIndustrialClassification$inboundSchema = exports.LegalEntityWithholdingState = exports.LegalEntityUsTinStatus = exports.LegalEntityTaxpayerCertificationState = exports.LegalEntityReportingEligibility = exports.LegalEntityIrsFormType = exports.LegalEntityFederalTaxClassification = exports.LegalEntityTaxIdType = exports.LegalEntityExemptCustomerReason = exports.LegalEntityEntityType = exports.LegalEntityCorporateStructure = exports.LegalEntityBusinessIndustrialClassification = void 0;
exports.LegalEntity$ = exports.LegalEntity$outboundSchema = exports.LegalEntity$inboundSchema = exports.LegalEntityTaxProfile$ = exports.LegalEntityTaxProfile$outboundSchema = exports.LegalEntityTaxProfile$inboundSchema = exports.LegalEntityWithholdingState$ = exports.LegalEntityWithholdingState$outboundSchema = exports.LegalEntityWithholdingState$inboundSchema = exports.LegalEntityUsTinStatus$ = exports.LegalEntityUsTinStatus$outboundSchema = exports.LegalEntityUsTinStatus$inboundSchema = exports.LegalEntityTaxpayerCertificationState$ = exports.LegalEntityTaxpayerCertificationState$outboundSchema = exports.LegalEntityTaxpayerCertificationState$inboundSchema = exports.LegalEntityTaxCertificationDate$ = exports.LegalEntityTaxCertificationDate$outboundSchema = exports.LegalEntityTaxCertificationDate$inboundSchema = exports.LegalEntityReportingEligibility$ = exports.LegalEntityReportingEligibility$outboundSchema = exports.LegalEntityReportingEligibility$inboundSchema = exports.LegalEntityIrsFormType$ = exports.LegalEntityIrsFormType$outboundSchema = exports.LegalEntityIrsFormType$inboundSchema = exports.LegalEntityFirstBNoticeDate$ = exports.LegalEntityFirstBNoticeDate$outboundSchema = exports.LegalEntityFirstBNoticeDate$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
var LegalEntityBusinessIndustrialClassification;
(function (LegalEntityBusinessIndustrialClassification) {
    LegalEntityBusinessIndustrialClassification["BusinessIndustrialClassificationUnspecified"] = "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED";
    LegalEntityBusinessIndustrialClassification["AgricultureForestryAndFishing"] = "AGRICULTURE_FORESTRY_AND_FISHING";
    LegalEntityBusinessIndustrialClassification["Mining"] = "MINING";
    LegalEntityBusinessIndustrialClassification["Construction"] = "CONSTRUCTION";
    LegalEntityBusinessIndustrialClassification["Manufacturing"] = "MANUFACTURING";
    LegalEntityBusinessIndustrialClassification["TransportationCommunicationsElectricGasAndSanitaryServices"] = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES";
    LegalEntityBusinessIndustrialClassification["WholesaleTrade"] = "WHOLESALE_TRADE";
    LegalEntityBusinessIndustrialClassification["RetailTrade"] = "RETAIL_TRADE";
    LegalEntityBusinessIndustrialClassification["FinanceInsuranceAndRealEstate"] = "FINANCE_INSURANCE_AND_REAL_ESTATE";
    LegalEntityBusinessIndustrialClassification["Services"] = "SERVICES";
    LegalEntityBusinessIndustrialClassification["PublicAdministration"] = "PUBLIC_ADMINISTRATION";
})(LegalEntityBusinessIndustrialClassification || (exports.LegalEntityBusinessIndustrialClassification = LegalEntityBusinessIndustrialClassification = {}));
/**
 * Corporate structure of the entity.
 */
var LegalEntityCorporateStructure;
(function (LegalEntityCorporateStructure) {
    LegalEntityCorporateStructure["EntityCorporateStructureUnspecified"] = "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED";
    LegalEntityCorporateStructure["CorporationCCorp"] = "CORPORATION_C_CORP";
    LegalEntityCorporateStructure["CorporationSCorp"] = "CORPORATION_S_CORP";
    LegalEntityCorporateStructure["CorporationBCorp"] = "CORPORATION_B_CORP";
    LegalEntityCorporateStructure["CorporationNonprofit"] = "CORPORATION_NONPROFIT";
})(LegalEntityCorporateStructure || (exports.LegalEntityCorporateStructure = LegalEntityCorporateStructure = {}));
/**
 * The entity type.
 */
var LegalEntityEntityType;
(function (LegalEntityEntityType) {
    LegalEntityEntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    LegalEntityEntityType["Corporation"] = "CORPORATION";
    LegalEntityEntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    LegalEntityEntityType["Partnership"] = "PARTNERSHIP";
    LegalEntityEntityType["Trust"] = "TRUST";
    LegalEntityEntityType["Estate"] = "ESTATE";
})(LegalEntityEntityType || (exports.LegalEntityEntityType = LegalEntityEntityType = {}));
/**
 * The reason the customer is exempt from verifying beneficial owners, if applicable.
 */
var LegalEntityExemptCustomerReason;
(function (LegalEntityExemptCustomerReason) {
    LegalEntityExemptCustomerReason["ExemptReasonUnspecified"] = "EXEMPT_REASON_UNSPECIFIED";
    LegalEntityExemptCustomerReason["RegulatedFinancialInstitution"] = "REGULATED_FINANCIAL_INSTITUTION";
    LegalEntityExemptCustomerReason["DepartmentOrAgencyOfFederalStateOrSubdivision"] = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION";
    LegalEntityExemptCustomerReason["NonBankListedEntity"] = "NON_BANK_LISTED_ENTITY";
    LegalEntityExemptCustomerReason["Section12SecuritiesExchangeAct1934Or15D"] = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D";
    LegalEntityExemptCustomerReason["Section3InvestmentCompanyAct1940"] = "SECTION_3_INVESTMENT_COMPANY_ACT_1940";
    LegalEntityExemptCustomerReason["Section202AInvestmentAdvisorsAct1940"] = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940";
    LegalEntityExemptCustomerReason["Section3SecuritiesExchangeAct1934Section6Or17A"] = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A";
    LegalEntityExemptCustomerReason["AnyOtherSecuritiesExchangeAct1934"] = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934";
    LegalEntityExemptCustomerReason["CommodityFuturesTradingCommissionRegistered"] = "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED";
    LegalEntityExemptCustomerReason["PublicAccountingFirmSection102SarbanesOxley"] = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY";
    LegalEntityExemptCustomerReason["StateRegulatedInsuranceCompany"] = "STATE_REGULATED_INSURANCE_COMPANY";
})(LegalEntityExemptCustomerReason || (exports.LegalEntityExemptCustomerReason = LegalEntityExemptCustomerReason = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
var LegalEntityTaxIdType;
(function (LegalEntityTaxIdType) {
    LegalEntityTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    LegalEntityTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    LegalEntityTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    LegalEntityTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(LegalEntityTaxIdType || (exports.LegalEntityTaxIdType = LegalEntityTaxIdType = {}));
/**
 * Federal tax classification.
 */
var LegalEntityFederalTaxClassification;
(function (LegalEntityFederalTaxClassification) {
    LegalEntityFederalTaxClassification["FederalTaxClassificationUnspecified"] = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED";
    LegalEntityFederalTaxClassification["IndivSolepropOrSinglememberllc"] = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC";
    LegalEntityFederalTaxClassification["Partnership"] = "PARTNERSHIP";
    LegalEntityFederalTaxClassification["CCorporation"] = "C_CORPORATION";
    LegalEntityFederalTaxClassification["SCorporation"] = "S_CORPORATION";
    LegalEntityFederalTaxClassification["TrustEstate"] = "TRUST_ESTATE";
    LegalEntityFederalTaxClassification["LlcTaxedAsCCorp"] = "LLC_TAXED_AS_C_CORP";
    LegalEntityFederalTaxClassification["LlcTaxedAsSCorp"] = "LLC_TAXED_AS_S_CORP";
    LegalEntityFederalTaxClassification["LlcTaxedAsPartnership"] = "LLC_TAXED_AS_PARTNERSHIP";
    LegalEntityFederalTaxClassification["Other"] = "OTHER";
})(LegalEntityFederalTaxClassification || (exports.LegalEntityFederalTaxClassification = LegalEntityFederalTaxClassification = {}));
/**
 * IRS form type.
 */
var LegalEntityIrsFormType;
(function (LegalEntityIrsFormType) {
    LegalEntityIrsFormType["IrsFormTypeUnspecified"] = "IRS_FORM_TYPE_UNSPECIFIED";
    LegalEntityIrsFormType["W9"] = "W_9";
    LegalEntityIrsFormType["W8Ben"] = "W_8BEN";
})(LegalEntityIrsFormType || (exports.LegalEntityIrsFormType = LegalEntityIrsFormType = {}));
/**
 * Tax reporting eligibility.
 */
var LegalEntityReportingEligibility;
(function (LegalEntityReportingEligibility) {
    LegalEntityReportingEligibility["TaxReportingEligibilityUnspecified"] = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED";
    LegalEntityReportingEligibility["Eligible"] = "ELIGIBLE";
    LegalEntityReportingEligibility["Ineligible"] = "INELIGIBLE";
})(LegalEntityReportingEligibility || (exports.LegalEntityReportingEligibility = LegalEntityReportingEligibility = {}));
/**
 * Taxpayer certification status.
 */
var LegalEntityTaxpayerCertificationState;
(function (LegalEntityTaxpayerCertificationState) {
    LegalEntityTaxpayerCertificationState["TaxpayerCertificationStateUnspecified"] = "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED";
    LegalEntityTaxpayerCertificationState["Certified"] = "CERTIFIED";
    LegalEntityTaxpayerCertificationState["Uncertified"] = "UNCERTIFIED";
})(LegalEntityTaxpayerCertificationState || (exports.LegalEntityTaxpayerCertificationState = LegalEntityTaxpayerCertificationState = {}));
/**
 * United States Individual Taxpayer Identification Number (ITIN) status.
 */
var LegalEntityUsTinStatus;
(function (LegalEntityUsTinStatus) {
    LegalEntityUsTinStatus["UsTinStatusUnspecified"] = "US_TIN_STATUS_UNSPECIFIED";
    LegalEntityUsTinStatus["Passing"] = "PASSING";
    LegalEntityUsTinStatus["Failing"] = "FAILING";
})(LegalEntityUsTinStatus || (exports.LegalEntityUsTinStatus = LegalEntityUsTinStatus = {}));
/**
 * B/C Notice status.
 */
var LegalEntityWithholdingState;
(function (LegalEntityWithholdingState) {
    LegalEntityWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    LegalEntityWithholdingState["FirstBNoticeReceived"] = "FIRST_B_NOTICE_RECEIVED";
    LegalEntityWithholdingState["SecondBNoticeReceived"] = "SECOND_B_NOTICE_RECEIVED";
    LegalEntityWithholdingState["CNoticeReceived"] = "C_NOTICE_RECEIVED";
    LegalEntityWithholdingState["CNoticeIndicatedByCustomer"] = "C_NOTICE_INDICATED_BY_CUSTOMER";
})(LegalEntityWithholdingState || (exports.LegalEntityWithholdingState = LegalEntityWithholdingState = {}));
/** @internal */
exports.LegalEntityBusinessIndustrialClassification$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityBusinessIndustrialClassification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityBusinessIndustrialClassification$outboundSchema = z.union([
    z.nativeEnum(LegalEntityBusinessIndustrialClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityBusinessIndustrialClassification$;
(function (LegalEntityBusinessIndustrialClassification$) {
    /** @deprecated use `LegalEntityBusinessIndustrialClassification$inboundSchema` instead. */
    LegalEntityBusinessIndustrialClassification$.inboundSchema = exports.LegalEntityBusinessIndustrialClassification$inboundSchema;
    /** @deprecated use `LegalEntityBusinessIndustrialClassification$outboundSchema` instead. */
    LegalEntityBusinessIndustrialClassification$.outboundSchema = exports.LegalEntityBusinessIndustrialClassification$outboundSchema;
})(LegalEntityBusinessIndustrialClassification$ || (exports.LegalEntityBusinessIndustrialClassification$ = LegalEntityBusinessIndustrialClassification$ = {}));
/** @internal */
exports.LegalEntityCorporateStructure$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityCorporateStructure),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityCorporateStructure$outboundSchema = z.union([
    z.nativeEnum(LegalEntityCorporateStructure),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityCorporateStructure$;
(function (LegalEntityCorporateStructure$) {
    /** @deprecated use `LegalEntityCorporateStructure$inboundSchema` instead. */
    LegalEntityCorporateStructure$.inboundSchema = exports.LegalEntityCorporateStructure$inboundSchema;
    /** @deprecated use `LegalEntityCorporateStructure$outboundSchema` instead. */
    LegalEntityCorporateStructure$.outboundSchema = exports.LegalEntityCorporateStructure$outboundSchema;
})(LegalEntityCorporateStructure$ || (exports.LegalEntityCorporateStructure$ = LegalEntityCorporateStructure$ = {}));
/** @internal */
exports.LegalEntityNegativeNews$inboundSchema = z.object({
    negative_news_against_related_parties: z.boolean().optional(),
    negative_news_against_related_parties_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "negative_news_against_related_parties": "negativeNewsAgainstRelatedParties",
        "negative_news_against_related_parties_description": "negativeNewsAgainstRelatedPartiesDescription",
    });
});
/** @internal */
exports.LegalEntityNegativeNews$outboundSchema = z.object({
    negativeNewsAgainstRelatedParties: z.boolean().optional(),
    negativeNewsAgainstRelatedPartiesDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        negativeNewsAgainstRelatedParties: "negative_news_against_related_parties",
        negativeNewsAgainstRelatedPartiesDescription: "negative_news_against_related_parties_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityNegativeNews$;
(function (LegalEntityNegativeNews$) {
    /** @deprecated use `LegalEntityNegativeNews$inboundSchema` instead. */
    LegalEntityNegativeNews$.inboundSchema = exports.LegalEntityNegativeNews$inboundSchema;
    /** @deprecated use `LegalEntityNegativeNews$outboundSchema` instead. */
    LegalEntityNegativeNews$.outboundSchema = exports.LegalEntityNegativeNews$outboundSchema;
})(LegalEntityNegativeNews$ || (exports.LegalEntityNegativeNews$ = LegalEntityNegativeNews$ = {}));
/** @internal */
exports.EntityDueDiligence$inboundSchema = z.object({
    entity_issues_bearer_shares: z.boolean().optional(),
    negative_news: z.nullable(z.lazy(() => exports.LegalEntityNegativeNews$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "entity_issues_bearer_shares": "entityIssuesBearerShares",
        "negative_news": "negativeNews",
    });
});
/** @internal */
exports.EntityDueDiligence$outboundSchema = z.object({
    entityIssuesBearerShares: z.boolean().optional(),
    negativeNews: z.nullable(z.lazy(() => exports.LegalEntityNegativeNews$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        entityIssuesBearerShares: "entity_issues_bearer_shares",
        negativeNews: "negative_news",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntityDueDiligence$;
(function (EntityDueDiligence$) {
    /** @deprecated use `EntityDueDiligence$inboundSchema` instead. */
    EntityDueDiligence$.inboundSchema = exports.EntityDueDiligence$inboundSchema;
    /** @deprecated use `EntityDueDiligence$outboundSchema` instead. */
    EntityDueDiligence$.outboundSchema = exports.EntityDueDiligence$outboundSchema;
})(EntityDueDiligence$ || (exports.EntityDueDiligence$ = EntityDueDiligence$ = {}));
/** @internal */
exports.LegalEntityEntityType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityEntityType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityEntityType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityEntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityEntityType$;
(function (LegalEntityEntityType$) {
    /** @deprecated use `LegalEntityEntityType$inboundSchema` instead. */
    LegalEntityEntityType$.inboundSchema = exports.LegalEntityEntityType$inboundSchema;
    /** @deprecated use `LegalEntityEntityType$outboundSchema` instead. */
    LegalEntityEntityType$.outboundSchema = exports.LegalEntityEntityType$outboundSchema;
})(LegalEntityEntityType$ || (exports.LegalEntityEntityType$ = LegalEntityEntityType$ = {}));
/** @internal */
exports.LegalEntityExemptCustomerReason$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityExemptCustomerReason),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityExemptCustomerReason$outboundSchema = z.union([
    z.nativeEnum(LegalEntityExemptCustomerReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityExemptCustomerReason$;
(function (LegalEntityExemptCustomerReason$) {
    /** @deprecated use `LegalEntityExemptCustomerReason$inboundSchema` instead. */
    LegalEntityExemptCustomerReason$.inboundSchema = exports.LegalEntityExemptCustomerReason$inboundSchema;
    /** @deprecated use `LegalEntityExemptCustomerReason$outboundSchema` instead. */
    LegalEntityExemptCustomerReason$.outboundSchema = exports.LegalEntityExemptCustomerReason$outboundSchema;
})(LegalEntityExemptCustomerReason$ || (exports.LegalEntityExemptCustomerReason$ = LegalEntityExemptCustomerReason$ = {}));
/** @internal */
exports.FormationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.FormationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FormationDate$;
(function (FormationDate$) {
    /** @deprecated use `FormationDate$inboundSchema` instead. */
    FormationDate$.inboundSchema = exports.FormationDate$inboundSchema;
    /** @deprecated use `FormationDate$outboundSchema` instead. */
    FormationDate$.outboundSchema = exports.FormationDate$outboundSchema;
})(FormationDate$ || (exports.FormationDate$ = FormationDate$ = {}));
/** @internal */
exports.LegalEntityEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.LegalEntityEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityEffectiveDate$;
(function (LegalEntityEffectiveDate$) {
    /** @deprecated use `LegalEntityEffectiveDate$inboundSchema` instead. */
    LegalEntityEffectiveDate$.inboundSchema = exports.LegalEntityEffectiveDate$inboundSchema;
    /** @deprecated use `LegalEntityEffectiveDate$outboundSchema` instead. */
    LegalEntityEffectiveDate$.outboundSchema = exports.LegalEntityEffectiveDate$outboundSchema;
})(LegalEntityEffectiveDate$ || (exports.LegalEntityEffectiveDate$ = LegalEntityEffectiveDate$ = {}));
/** @internal */
exports.LegalEntityLargeTrader$inboundSchema = z.object({
    effective_date: z.nullable(z.lazy(() => exports.LegalEntityEffectiveDate$inboundSchema)).optional(),
    large_trader_id: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "effective_date": "effectiveDate",
        "large_trader_id": "largeTraderId",
    });
});
/** @internal */
exports.LegalEntityLargeTrader$outboundSchema = z.object({
    effectiveDate: z.nullable(z.lazy(() => exports.LegalEntityEffectiveDate$outboundSchema)).optional(),
    largeTraderId: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        effectiveDate: "effective_date",
        largeTraderId: "large_trader_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityLargeTrader$;
(function (LegalEntityLargeTrader$) {
    /** @deprecated use `LegalEntityLargeTrader$inboundSchema` instead. */
    LegalEntityLargeTrader$.inboundSchema = exports.LegalEntityLargeTrader$inboundSchema;
    /** @deprecated use `LegalEntityLargeTrader$outboundSchema` instead. */
    LegalEntityLargeTrader$.outboundSchema = exports.LegalEntityLargeTrader$outboundSchema;
})(LegalEntityLargeTrader$ || (exports.LegalEntityLargeTrader$ = LegalEntityLargeTrader$ = {}));
/** @internal */
exports.LegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.LegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalAddress$;
(function (LegalAddress$) {
    /** @deprecated use `LegalAddress$inboundSchema` instead. */
    LegalAddress$.inboundSchema = exports.LegalAddress$inboundSchema;
    /** @deprecated use `LegalAddress$outboundSchema` instead. */
    LegalAddress$.outboundSchema = exports.LegalAddress$outboundSchema;
})(LegalAddress$ || (exports.LegalAddress$ = LegalAddress$ = {}));
/** @internal */
exports.LegalEntityTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityTaxIdType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityTaxIdType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityTaxIdType$;
(function (LegalEntityTaxIdType$) {
    /** @deprecated use `LegalEntityTaxIdType$inboundSchema` instead. */
    LegalEntityTaxIdType$.inboundSchema = exports.LegalEntityTaxIdType$inboundSchema;
    /** @deprecated use `LegalEntityTaxIdType$outboundSchema` instead. */
    LegalEntityTaxIdType$.outboundSchema = exports.LegalEntityTaxIdType$outboundSchema;
})(LegalEntityTaxIdType$ || (exports.LegalEntityTaxIdType$ = LegalEntityTaxIdType$ = {}));
/** @internal */
exports.LegalEntityCNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.LegalEntityCNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityCNoticeDate$;
(function (LegalEntityCNoticeDate$) {
    /** @deprecated use `LegalEntityCNoticeDate$inboundSchema` instead. */
    LegalEntityCNoticeDate$.inboundSchema = exports.LegalEntityCNoticeDate$inboundSchema;
    /** @deprecated use `LegalEntityCNoticeDate$outboundSchema` instead. */
    LegalEntityCNoticeDate$.outboundSchema = exports.LegalEntityCNoticeDate$outboundSchema;
})(LegalEntityCNoticeDate$ || (exports.LegalEntityCNoticeDate$ = LegalEntityCNoticeDate$ = {}));
/** @internal */
exports.LegalEntityFederalTaxClassification$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityFederalTaxClassification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityFederalTaxClassification$outboundSchema = z.union([
    z.nativeEnum(LegalEntityFederalTaxClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityFederalTaxClassification$;
(function (LegalEntityFederalTaxClassification$) {
    /** @deprecated use `LegalEntityFederalTaxClassification$inboundSchema` instead. */
    LegalEntityFederalTaxClassification$.inboundSchema = exports.LegalEntityFederalTaxClassification$inboundSchema;
    /** @deprecated use `LegalEntityFederalTaxClassification$outboundSchema` instead. */
    LegalEntityFederalTaxClassification$.outboundSchema = exports.LegalEntityFederalTaxClassification$outboundSchema;
})(LegalEntityFederalTaxClassification$ || (exports.LegalEntityFederalTaxClassification$ = LegalEntityFederalTaxClassification$ = {}));
/** @internal */
exports.LegalEntityFirstBNoticeDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.LegalEntityFirstBNoticeDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityFirstBNoticeDate$;
(function (LegalEntityFirstBNoticeDate$) {
    /** @deprecated use `LegalEntityFirstBNoticeDate$inboundSchema` instead. */
    LegalEntityFirstBNoticeDate$.inboundSchema = exports.LegalEntityFirstBNoticeDate$inboundSchema;
    /** @deprecated use `LegalEntityFirstBNoticeDate$outboundSchema` instead. */
    LegalEntityFirstBNoticeDate$.outboundSchema = exports.LegalEntityFirstBNoticeDate$outboundSchema;
})(LegalEntityFirstBNoticeDate$ || (exports.LegalEntityFirstBNoticeDate$ = LegalEntityFirstBNoticeDate$ = {}));
/** @internal */
exports.LegalEntityIrsFormType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityIrsFormType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityIrsFormType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityIrsFormType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityIrsFormType$;
(function (LegalEntityIrsFormType$) {
    /** @deprecated use `LegalEntityIrsFormType$inboundSchema` instead. */
    LegalEntityIrsFormType$.inboundSchema = exports.LegalEntityIrsFormType$inboundSchema;
    /** @deprecated use `LegalEntityIrsFormType$outboundSchema` instead. */
    LegalEntityIrsFormType$.outboundSchema = exports.LegalEntityIrsFormType$outboundSchema;
})(LegalEntityIrsFormType$ || (exports.LegalEntityIrsFormType$ = LegalEntityIrsFormType$ = {}));
/** @internal */
exports.LegalEntityReportingEligibility$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityReportingEligibility),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityReportingEligibility$outboundSchema = z.union([
    z.nativeEnum(LegalEntityReportingEligibility),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityReportingEligibility$;
(function (LegalEntityReportingEligibility$) {
    /** @deprecated use `LegalEntityReportingEligibility$inboundSchema` instead. */
    LegalEntityReportingEligibility$.inboundSchema = exports.LegalEntityReportingEligibility$inboundSchema;
    /** @deprecated use `LegalEntityReportingEligibility$outboundSchema` instead. */
    LegalEntityReportingEligibility$.outboundSchema = exports.LegalEntityReportingEligibility$outboundSchema;
})(LegalEntityReportingEligibility$ || (exports.LegalEntityReportingEligibility$ = LegalEntityReportingEligibility$ = {}));
/** @internal */
exports.LegalEntityTaxCertificationDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.LegalEntityTaxCertificationDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityTaxCertificationDate$;
(function (LegalEntityTaxCertificationDate$) {
    /** @deprecated use `LegalEntityTaxCertificationDate$inboundSchema` instead. */
    LegalEntityTaxCertificationDate$.inboundSchema = exports.LegalEntityTaxCertificationDate$inboundSchema;
    /** @deprecated use `LegalEntityTaxCertificationDate$outboundSchema` instead. */
    LegalEntityTaxCertificationDate$.outboundSchema = exports.LegalEntityTaxCertificationDate$outboundSchema;
})(LegalEntityTaxCertificationDate$ || (exports.LegalEntityTaxCertificationDate$ = LegalEntityTaxCertificationDate$ = {}));
/** @internal */
exports.LegalEntityTaxpayerCertificationState$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityTaxpayerCertificationState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityTaxpayerCertificationState$outboundSchema = z.union([
    z.nativeEnum(LegalEntityTaxpayerCertificationState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityTaxpayerCertificationState$;
(function (LegalEntityTaxpayerCertificationState$) {
    /** @deprecated use `LegalEntityTaxpayerCertificationState$inboundSchema` instead. */
    LegalEntityTaxpayerCertificationState$.inboundSchema = exports.LegalEntityTaxpayerCertificationState$inboundSchema;
    /** @deprecated use `LegalEntityTaxpayerCertificationState$outboundSchema` instead. */
    LegalEntityTaxpayerCertificationState$.outboundSchema = exports.LegalEntityTaxpayerCertificationState$outboundSchema;
})(LegalEntityTaxpayerCertificationState$ || (exports.LegalEntityTaxpayerCertificationState$ = LegalEntityTaxpayerCertificationState$ = {}));
/** @internal */
exports.LegalEntityUsTinStatus$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityUsTinStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityUsTinStatus$outboundSchema = z.union([
    z.nativeEnum(LegalEntityUsTinStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityUsTinStatus$;
(function (LegalEntityUsTinStatus$) {
    /** @deprecated use `LegalEntityUsTinStatus$inboundSchema` instead. */
    LegalEntityUsTinStatus$.inboundSchema = exports.LegalEntityUsTinStatus$inboundSchema;
    /** @deprecated use `LegalEntityUsTinStatus$outboundSchema` instead. */
    LegalEntityUsTinStatus$.outboundSchema = exports.LegalEntityUsTinStatus$outboundSchema;
})(LegalEntityUsTinStatus$ || (exports.LegalEntityUsTinStatus$ = LegalEntityUsTinStatus$ = {}));
/** @internal */
exports.LegalEntityWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityWithholdingState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityWithholdingState$outboundSchema = z.union([
    z.nativeEnum(LegalEntityWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityWithholdingState$;
(function (LegalEntityWithholdingState$) {
    /** @deprecated use `LegalEntityWithholdingState$inboundSchema` instead. */
    LegalEntityWithholdingState$.inboundSchema = exports.LegalEntityWithholdingState$inboundSchema;
    /** @deprecated use `LegalEntityWithholdingState$outboundSchema` instead. */
    LegalEntityWithholdingState$.outboundSchema = exports.LegalEntityWithholdingState$outboundSchema;
})(LegalEntityWithholdingState$ || (exports.LegalEntityWithholdingState$ = LegalEntityWithholdingState$ = {}));
/** @internal */
exports.LegalEntityTaxProfile$inboundSchema = z.object({
    c_notice_date: z.nullable(z.lazy(() => exports.LegalEntityCNoticeDate$inboundSchema))
        .optional(),
    federal_tax_classification: exports.LegalEntityFederalTaxClassification$inboundSchema
        .optional(),
    first_b_notice_date: z.nullable(z.lazy(() => exports.LegalEntityFirstBNoticeDate$inboundSchema)).optional(),
    irs_form_type: exports.LegalEntityIrsFormType$inboundSchema.optional(),
    legal_tax_region_code: z.string().optional(),
    reporting_eligibility: exports.LegalEntityReportingEligibility$inboundSchema
        .optional(),
    tax_certification_date: z.nullable(z.lazy(() => exports.LegalEntityTaxCertificationDate$inboundSchema)).optional(),
    taxpayer_certification_state: exports.LegalEntityTaxpayerCertificationState$inboundSchema.optional(),
    us_tin_status: exports.LegalEntityUsTinStatus$inboundSchema.optional(),
    withholding_state: exports.LegalEntityWithholdingState$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "c_notice_date": "cNoticeDate",
        "federal_tax_classification": "federalTaxClassification",
        "first_b_notice_date": "firstBNoticeDate",
        "irs_form_type": "irsFormType",
        "legal_tax_region_code": "legalTaxRegionCode",
        "reporting_eligibility": "reportingEligibility",
        "tax_certification_date": "taxCertificationDate",
        "taxpayer_certification_state": "taxpayerCertificationState",
        "us_tin_status": "usTinStatus",
        "withholding_state": "withholdingState",
    });
});
/** @internal */
exports.LegalEntityTaxProfile$outboundSchema = z.object({
    cNoticeDate: z.nullable(z.lazy(() => exports.LegalEntityCNoticeDate$outboundSchema))
        .optional(),
    federalTaxClassification: exports.LegalEntityFederalTaxClassification$outboundSchema
        .optional(),
    firstBNoticeDate: z.nullable(z.lazy(() => exports.LegalEntityFirstBNoticeDate$outboundSchema)).optional(),
    irsFormType: exports.LegalEntityIrsFormType$outboundSchema.optional(),
    legalTaxRegionCode: z.string().optional(),
    reportingEligibility: exports.LegalEntityReportingEligibility$outboundSchema
        .optional(),
    taxCertificationDate: z.nullable(z.lazy(() => exports.LegalEntityTaxCertificationDate$outboundSchema)).optional(),
    taxpayerCertificationState: exports.LegalEntityTaxpayerCertificationState$outboundSchema.optional(),
    usTinStatus: exports.LegalEntityUsTinStatus$outboundSchema.optional(),
    withholdingState: exports.LegalEntityWithholdingState$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cNoticeDate: "c_notice_date",
        federalTaxClassification: "federal_tax_classification",
        firstBNoticeDate: "first_b_notice_date",
        irsFormType: "irs_form_type",
        legalTaxRegionCode: "legal_tax_region_code",
        reportingEligibility: "reporting_eligibility",
        taxCertificationDate: "tax_certification_date",
        taxpayerCertificationState: "taxpayer_certification_state",
        usTinStatus: "us_tin_status",
        withholdingState: "withholding_state",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityTaxProfile$;
(function (LegalEntityTaxProfile$) {
    /** @deprecated use `LegalEntityTaxProfile$inboundSchema` instead. */
    LegalEntityTaxProfile$.inboundSchema = exports.LegalEntityTaxProfile$inboundSchema;
    /** @deprecated use `LegalEntityTaxProfile$outboundSchema` instead. */
    LegalEntityTaxProfile$.outboundSchema = exports.LegalEntityTaxProfile$outboundSchema;
})(LegalEntityTaxProfile$ || (exports.LegalEntityTaxProfile$ = LegalEntityTaxProfile$ = {}));
/** @internal */
exports.LegalEntity$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    broker_dealer: z.boolean().optional(),
    business_industrial_classification: exports.LegalEntityBusinessIndustrialClassification$inboundSchema.optional(),
    corporate_structure: exports.LegalEntityCorporateStructure$inboundSchema.optional(),
    correspondent_id: z.string().optional(),
    doing_business_as: z.array(z.string()).optional(),
    entity_due_diligence: z.nullable(z.lazy(() => exports.EntityDueDiligence$inboundSchema)).optional(),
    entity_name: z.string().optional(),
    entity_type: exports.LegalEntityEntityType$inboundSchema.optional(),
    exempt_customer_reason: exports.LegalEntityExemptCustomerReason$inboundSchema
        .optional(),
    exempt_verifying_beneficial_owners: z.boolean().optional(),
    for_the_benefit_of: z.string().optional(),
    foreign_entity: z.boolean().optional(),
    foreign_financial_institution: z.boolean().optional(),
    formation_date: z.nullable(z.lazy(() => exports.FormationDate$inboundSchema))
        .optional(),
    global_person_id: z.string().optional(),
    institutional_customer: z.boolean().optional(),
    investigation_id: z.string().optional(),
    large_trader: z.nullable(z.lazy(() => exports.LegalEntityLargeTrader$inboundSchema))
        .optional(),
    legal_address: z.nullable(z.lazy(() => exports.LegalAddress$inboundSchema))
        .optional(),
    legal_entity_id: z.string().optional(),
    lei_code: z.string().optional(),
    name: z.string().optional(),
    operating_regions: z.array(z.string()).optional(),
    registration_region: z.string().optional(),
    regulated_investment_company: z.boolean().optional(),
    related_document_ids: z.array(z.string()).optional(),
    revocable_trust: z.boolean().optional(),
    tax_id: z.string().optional(),
    tax_id_last_four: z.string().optional(),
    tax_id_type: exports.LegalEntityTaxIdType$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => exports.LegalEntityTaxProfile$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accredited_investor": "accreditedInvestor",
        "broker_dealer": "brokerDealer",
        "business_industrial_classification": "businessIndustrialClassification",
        "corporate_structure": "corporateStructure",
        "correspondent_id": "correspondentId",
        "doing_business_as": "doingBusinessAs",
        "entity_due_diligence": "entityDueDiligence",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "exempt_customer_reason": "exemptCustomerReason",
        "exempt_verifying_beneficial_owners": "exemptVerifyingBeneficialOwners",
        "for_the_benefit_of": "forTheBenefitOf",
        "foreign_entity": "foreignEntity",
        "foreign_financial_institution": "foreignFinancialInstitution",
        "formation_date": "formationDate",
        "global_person_id": "globalPersonId",
        "institutional_customer": "institutionalCustomer",
        "investigation_id": "investigationId",
        "large_trader": "largeTrader",
        "legal_address": "legalAddress",
        "legal_entity_id": "legalEntityId",
        "lei_code": "leiCode",
        "operating_regions": "operatingRegions",
        "registration_region": "registrationRegion",
        "regulated_investment_company": "regulatedInvestmentCompany",
        "related_document_ids": "relatedDocumentIds",
        "revocable_trust": "revocableTrust",
        "tax_id": "taxId",
        "tax_id_last_four": "taxIdLastFour",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
exports.LegalEntity$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    brokerDealer: z.boolean().optional(),
    businessIndustrialClassification: exports.LegalEntityBusinessIndustrialClassification$outboundSchema.optional(),
    corporateStructure: exports.LegalEntityCorporateStructure$outboundSchema.optional(),
    correspondentId: z.string().optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    entityDueDiligence: z.nullable(z.lazy(() => exports.EntityDueDiligence$outboundSchema)).optional(),
    entityName: z.string().optional(),
    entityType: exports.LegalEntityEntityType$outboundSchema.optional(),
    exemptCustomerReason: exports.LegalEntityExemptCustomerReason$outboundSchema
        .optional(),
    exemptVerifyingBeneficialOwners: z.boolean().optional(),
    forTheBenefitOf: z.string().optional(),
    foreignEntity: z.boolean().optional(),
    foreignFinancialInstitution: z.boolean().optional(),
    formationDate: z.nullable(z.lazy(() => exports.FormationDate$outboundSchema))
        .optional(),
    globalPersonId: z.string().optional(),
    institutionalCustomer: z.boolean().optional(),
    investigationId: z.string().optional(),
    largeTrader: z.nullable(z.lazy(() => exports.LegalEntityLargeTrader$outboundSchema))
        .optional(),
    legalAddress: z.nullable(z.lazy(() => exports.LegalAddress$outboundSchema))
        .optional(),
    legalEntityId: z.string().optional(),
    leiCode: z.string().optional(),
    name: z.string().optional(),
    operatingRegions: z.array(z.string()).optional(),
    registrationRegion: z.string().optional(),
    regulatedInvestmentCompany: z.boolean().optional(),
    relatedDocumentIds: z.array(z.string()).optional(),
    revocableTrust: z.boolean().optional(),
    taxId: z.string().optional(),
    taxIdLastFour: z.string().optional(),
    taxIdType: exports.LegalEntityTaxIdType$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => exports.LegalEntityTaxProfile$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accreditedInvestor: "accredited_investor",
        brokerDealer: "broker_dealer",
        businessIndustrialClassification: "business_industrial_classification",
        corporateStructure: "corporate_structure",
        correspondentId: "correspondent_id",
        doingBusinessAs: "doing_business_as",
        entityDueDiligence: "entity_due_diligence",
        entityName: "entity_name",
        entityType: "entity_type",
        exemptCustomerReason: "exempt_customer_reason",
        exemptVerifyingBeneficialOwners: "exempt_verifying_beneficial_owners",
        forTheBenefitOf: "for_the_benefit_of",
        foreignEntity: "foreign_entity",
        foreignFinancialInstitution: "foreign_financial_institution",
        formationDate: "formation_date",
        globalPersonId: "global_person_id",
        institutionalCustomer: "institutional_customer",
        investigationId: "investigation_id",
        largeTrader: "large_trader",
        legalAddress: "legal_address",
        legalEntityId: "legal_entity_id",
        leiCode: "lei_code",
        operatingRegions: "operating_regions",
        registrationRegion: "registration_region",
        regulatedInvestmentCompany: "regulated_investment_company",
        relatedDocumentIds: "related_document_ids",
        revocableTrust: "revocable_trust",
        taxId: "tax_id",
        taxIdLastFour: "tax_id_last_four",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntity$;
(function (LegalEntity$) {
    /** @deprecated use `LegalEntity$inboundSchema` instead. */
    LegalEntity$.inboundSchema = exports.LegalEntity$inboundSchema;
    /** @deprecated use `LegalEntity$outboundSchema` instead. */
    LegalEntity$.outboundSchema = exports.LegalEntity$outboundSchema;
})(LegalEntity$ || (exports.LegalEntity$ = LegalEntity$ = {}));
//# sourceMappingURL=legalentity.js.map