"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderPrice$inboundSchema = exports.LetterOfIntent$ = exports.LetterOfIntent$outboundSchema = exports.LetterOfIntent$inboundSchema = exports.PeriodStartDate$ = exports.PeriodStartDate$outboundSchema = exports.PeriodStartDate$inboundSchema = exports.OrderAmount$ = exports.OrderAmount$outboundSchema = exports.OrderAmount$inboundSchema = exports.OrderIdentifierType$ = exports.OrderIdentifierType$outboundSchema = exports.OrderIdentifierType$inboundSchema = exports.FilledQuantity$ = exports.FilledQuantity$outboundSchema = exports.FilledQuantity$inboundSchema = exports.CumulativeNotionalValue$ = exports.CumulativeNotionalValue$outboundSchema = exports.CumulativeNotionalValue$inboundSchema = exports.OrderCommission$ = exports.OrderCommission$outboundSchema = exports.OrderCommission$inboundSchema = exports.Value$ = exports.Value$outboundSchema = exports.Value$inboundSchema = exports.OrderCommissionType$ = exports.OrderCommissionType$outboundSchema = exports.OrderCommissionType$inboundSchema = exports.CancelRejectedReason$ = exports.CancelRejectedReason$outboundSchema = exports.CancelRejectedReason$inboundSchema = exports.OrderBrokerCapacity$ = exports.OrderBrokerCapacity$outboundSchema = exports.OrderBrokerCapacity$inboundSchema = exports.OrderAssetType$ = exports.OrderAssetType$outboundSchema = exports.OrderAssetType$inboundSchema = exports.OrderTimeInForce = exports.OrderStopPriceType = exports.OrderSpecialReportingInstructions = exports.OrderSide = exports.OrderOrderType = exports.OrderStatus = exports.OrderRejectedReason = exports.OrderLimitPriceType = exports.OrderIdentifierType = exports.OrderCommissionType = exports.CancelRejectedReason = exports.OrderBrokerCapacity = exports.OrderAssetType = void 0;
exports.OrderStopPriceType$ = exports.OrderStopPriceType$outboundSchema = exports.OrderStopPriceType$inboundSchema = exports.OrderStopPricePrice$ = exports.OrderStopPricePrice$outboundSchema = exports.OrderStopPricePrice$inboundSchema = exports.OrderSpecialReportingInstructions$ = exports.OrderSpecialReportingInstructions$outboundSchema = exports.OrderSpecialReportingInstructions$inboundSchema = exports.OrderSide$ = exports.OrderSide$outboundSchema = exports.OrderSide$inboundSchema = exports.RightsOfAccumulation$ = exports.RightsOfAccumulation$outboundSchema = exports.RightsOfAccumulation$inboundSchema = exports.OrderRightsOfAccumulationAmount$ = exports.OrderRightsOfAccumulationAmount$outboundSchema = exports.OrderRightsOfAccumulationAmount$inboundSchema = exports.OrderQuantity$ = exports.OrderQuantity$outboundSchema = exports.OrderQuantity$inboundSchema = exports.OrderPrevailingMarketPrice$ = exports.OrderPrevailingMarketPrice$outboundSchema = exports.OrderPrevailingMarketPrice$inboundSchema = exports.OrderOrderType$ = exports.OrderOrderType$outboundSchema = exports.OrderOrderType$inboundSchema = exports.OrderStatus$ = exports.OrderStatus$outboundSchema = exports.OrderStatus$inboundSchema = exports.OrderRejectedReason$ = exports.OrderRejectedReason$outboundSchema = exports.OrderRejectedReason$inboundSchema = exports.OrderDate$ = exports.OrderDate$outboundSchema = exports.OrderDate$inboundSchema = exports.NotionalValue$ = exports.NotionalValue$outboundSchema = exports.NotionalValue$inboundSchema = exports.MaxSellQuantity$ = exports.MaxSellQuantity$outboundSchema = exports.MaxSellQuantity$inboundSchema = exports.LimitPrice$ = exports.LimitPrice$outboundSchema = exports.LimitPrice$inboundSchema = exports.OrderLimitPriceType$ = exports.OrderLimitPriceType$outboundSchema = exports.OrderLimitPriceType$inboundSchema = exports.OrderPrice$ = exports.OrderPrice$outboundSchema = void 0;
exports.Order$ = exports.Order$outboundSchema = exports.Order$inboundSchema = exports.OrderTimeInForce$ = exports.OrderTimeInForce$outboundSchema = exports.OrderTimeInForce$inboundSchema = exports.StopPrice$ = exports.StopPrice$outboundSchema = exports.StopPrice$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const executedprice_js_1 = require("./executedprice.js");
const executions_js_1 = require("./executions.js");
const fee_js_1 = require("./fee.js");
/**
 * The type of the asset in this order, which must be one of the following:
 *
 * @remarks
 *  EQUITY, MUTUAL_FUND, and FIXED_INCOME.
 */
var OrderAssetType;
(function (OrderAssetType) {
    OrderAssetType["Equity"] = "EQUITY";
    OrderAssetType["FixedIncome"] = "FIXED_INCOME";
    OrderAssetType["MutualFund"] = "MUTUAL_FUND";
})(OrderAssetType || (exports.OrderAssetType = OrderAssetType = {}));
/**
 * Defaults to "AGENCY" if not specified. For Equities: Only "AGENCY" is allowed. For Mutual Funds: Only "AGENCY" is allowed. For Fixed Income: Either "AGENCY" or "PRINCIPAL" are allowed.
 */
var OrderBrokerCapacity;
(function (OrderBrokerCapacity) {
    OrderBrokerCapacity["BrokerCapacityUnspecified"] = "BROKER_CAPACITY_UNSPECIFIED";
    OrderBrokerCapacity["Agency"] = "AGENCY";
    OrderBrokerCapacity["Principal"] = "PRINCIPAL";
})(OrderBrokerCapacity || (exports.OrderBrokerCapacity = OrderBrokerCapacity = {}));
/**
 * Used to denote when a cancel request has been rejected.
 */
var CancelRejectedReason;
(function (CancelRejectedReason) {
    CancelRejectedReason["CancelRejectReasonUnspecified"] = "CANCEL_REJECT_REASON_UNSPECIFIED";
    CancelRejectedReason["TooLateToCancel"] = "TOO_LATE_TO_CANCEL";
    CancelRejectedReason["CancellationUnknownOrder"] = "CANCELLATION_UNKNOWN_ORDER";
    CancelRejectedReason["BrokerExchangeOption"] = "BROKER_EXCHANGE_OPTION";
    CancelRejectedReason["OrderAlreadyInPendingCancelOrPendingReplaceStatus"] = "ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS";
    CancelRejectedReason["Duplicate"] = "DUPLICATE";
    CancelRejectedReason["CancellationSystemError"] = "CANCELLATION_SYSTEM_ERROR";
    CancelRejectedReason["OrderAlreadyCanceled"] = "ORDER_ALREADY_CANCELED";
    CancelRejectedReason["CancellationMisconfiguredClient"] = "CANCELLATION_MISCONFIGURED_CLIENT";
})(CancelRejectedReason || (exports.CancelRejectedReason = CancelRejectedReason = {}));
/**
 * The type of commission value being specified. Only the type of "AMOUNT" is supported.
 */
var OrderCommissionType;
(function (OrderCommissionType) {
    OrderCommissionType["CommissionTypeUnspecified"] = "COMMISSION_TYPE_UNSPECIFIED";
    OrderCommissionType["Amount"] = "AMOUNT";
})(OrderCommissionType || (exports.OrderCommissionType = OrderCommissionType = {}));
/**
 * The identifier type of the asset being ordered. For Equities: only SYMBOL is supported For Mutual Funds: only SYMBOL and CUSIP are supported For Fixed Income: only CUSIP and ISIN are supported
 */
var OrderIdentifierType;
(function (OrderIdentifierType) {
    OrderIdentifierType["Symbol"] = "SYMBOL";
    OrderIdentifierType["Cusip"] = "CUSIP";
    OrderIdentifierType["Isin"] = "ISIN";
})(OrderIdentifierType || (exports.OrderIdentifierType = OrderIdentifierType = {}));
/**
 * The type of this price, which must be PRICE_PER_UNIT for equity orders, or PERCENTAGE_OF_PAR for fixed income orders.
 */
var OrderLimitPriceType;
(function (OrderLimitPriceType) {
    OrderLimitPriceType["LimitPriceTypeUnspecified"] = "LIMIT_PRICE_TYPE_UNSPECIFIED";
    OrderLimitPriceType["PricePerUnit"] = "PRICE_PER_UNIT";
    OrderLimitPriceType["PercentageOfPar"] = "PERCENTAGE_OF_PAR";
})(OrderLimitPriceType || (exports.OrderLimitPriceType = OrderLimitPriceType = {}));
/**
 * When an order has the REJECTED status, this will be populated with a system code describing the rejection.
 */
var OrderRejectedReason;
(function (OrderRejectedReason) {
    OrderRejectedReason["OrderRejectReasonUnspecified"] = "ORDER_REJECT_REASON_UNSPECIFIED";
    OrderRejectedReason["BrokerOption"] = "BROKER_OPTION";
    OrderRejectedReason["UnknownSecurity"] = "UNKNOWN_SECURITY";
    OrderRejectedReason["ExchangeClosed"] = "EXCHANGE_CLOSED";
    OrderRejectedReason["OrderExceedsLimit"] = "ORDER_EXCEEDS_LIMIT";
    OrderRejectedReason["TooLateToEnter"] = "TOO_LATE_TO_ENTER";
    OrderRejectedReason["UnknownOrder"] = "UNKNOWN_ORDER";
    OrderRejectedReason["DuplicateOrder"] = "DUPLICATE_ORDER";
    OrderRejectedReason["StaleOrder"] = "STALE_ORDER";
    OrderRejectedReason["BelowNotionalMinimum"] = "BELOW_NOTIONAL_MINIMUM";
    OrderRejectedReason["OrderDateUnavailable"] = "ORDER_DATE_UNAVAILABLE";
    OrderRejectedReason["AggressiveLimitPrice"] = "AGGRESSIVE_LIMIT_PRICE";
    OrderRejectedReason["AccountNotEntitled"] = "ACCOUNT_NOT_ENTITLED";
    OrderRejectedReason["SystemError"] = "SYSTEM_ERROR";
    OrderRejectedReason["BlockingCorporateAction"] = "BLOCKING_CORPORATE_ACTION";
    OrderRejectedReason["UnavailablePriceQuote"] = "UNAVAILABLE_PRICE_QUOTE";
    OrderRejectedReason["ExecutionMisconfiguredClient"] = "EXECUTION_MISCONFIGURED_CLIENT";
    OrderRejectedReason["NotionalQuantityNotAllowedForSecurity"] = "NOTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY";
    OrderRejectedReason["FractionalQuantityNotAllowedForSecurity"] = "FRACTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY";
    OrderRejectedReason["OnlyFractionalSellOrWholeOrdersAllowedForSecurity"] = "ONLY_FRACTIONAL_SELL_OR_WHOLE_ORDERS_ALLOWED_FOR_SECURITY";
    OrderRejectedReason["SymbolNotTradeable"] = "SYMBOL_NOT_TRADEABLE";
    OrderRejectedReason["AboveNotionalMaximum"] = "ABOVE_NOTIONAL_MAXIMUM";
    OrderRejectedReason["AboveShareMaximum"] = "ABOVE_SHARE_MAXIMUM";
    OrderRejectedReason["FailedBuyingPower"] = "FAILED_BUYING_POWER";
    OrderRejectedReason["InsufficientPosition"] = "INSUFFICIENT_POSITION";
    OrderRejectedReason["MaxSellQuantityRequired"] = "MAX_SELL_QUANTITY_REQUIRED";
    OrderRejectedReason["MaxSellQuantityProhibited"] = "MAX_SELL_QUANTITY_PROHIBITED";
    OrderRejectedReason["StopPriceExceedsMarketPrice"] = "STOP_PRICE_EXCEEDS_MARKET_PRICE";
    OrderRejectedReason["TradesDisabledForAssetType"] = "TRADES_DISABLED_FOR_ASSET_TYPE";
    OrderRejectedReason["CommissionNotAllowedForNonBrokerDealer"] = "COMMISSION_NOT_ALLOWED_FOR_NON_BROKER_DEALER";
    OrderRejectedReason["AssetNotSetUpToTrade"] = "ASSET_NOT_SET_UP_TO_TRADE";
    OrderRejectedReason["InvalidOrderQuantity"] = "INVALID_ORDER_QUANTITY";
    OrderRejectedReason["ClientReceivedTimeRequired"] = "CLIENT_RECEIVED_TIME_REQUIRED";
})(OrderRejectedReason || (exports.OrderRejectedReason = OrderRejectedReason = {}));
/**
 * The processing status of the order
 */
var OrderStatus;
(function (OrderStatus) {
    OrderStatus["OrderStatusUnspecified"] = "ORDER_STATUS_UNSPECIFIED";
    OrderStatus["PendingNew"] = "PENDING_NEW";
    OrderStatus["New"] = "NEW";
    OrderStatus["PendingQueued"] = "PENDING_QUEUED";
    OrderStatus["Queued"] = "QUEUED";
    OrderStatus["PartiallyFilled"] = "PARTIALLY_FILLED";
    OrderStatus["Filled"] = "FILLED";
    OrderStatus["PendingCancel"] = "PENDING_CANCEL";
    OrderStatus["Canceled"] = "CANCELED";
    OrderStatus["Rejected"] = "REJECTED";
})(OrderStatus || (exports.OrderStatus = OrderStatus = {}));
/**
 * The execution type of this order. For Equities: MARKET, LIMIT, or STOP are supported. For Mutual Funds: only MARKET is supported. For Fixed Income: only LIMIT is supported.
 */
var OrderOrderType;
(function (OrderOrderType) {
    OrderOrderType["OrderTypeUnspecified"] = "ORDER_TYPE_UNSPECIFIED";
    OrderOrderType["Limit"] = "LIMIT";
    OrderOrderType["Market"] = "MARKET";
    OrderOrderType["Stop"] = "STOP";
})(OrderOrderType || (exports.OrderOrderType = OrderOrderType = {}));
/**
 * The side of this order.
 */
var OrderSide;
(function (OrderSide) {
    OrderSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    OrderSide["Buy"] = "BUY";
    OrderSide["Sell"] = "SELL";
})(OrderSide || (exports.OrderSide = OrderSide = {}));
var OrderSpecialReportingInstructions;
(function (OrderSpecialReportingInstructions) {
    OrderSpecialReportingInstructions["SpecialReportingInstructionsUnspecified"] = "SPECIAL_REPORTING_INSTRUCTIONS_UNSPECIFIED";
    OrderSpecialReportingInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    OrderSpecialReportingInstructions["WithDividend"] = "WITH_DIVIDEND";
    OrderSpecialReportingInstructions["WithRights"] = "WITH_RIGHTS";
    OrderSpecialReportingInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    OrderSpecialReportingInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    OrderSpecialReportingInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    OrderSpecialReportingInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    OrderSpecialReportingInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    OrderSpecialReportingInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    OrderSpecialReportingInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    OrderSpecialReportingInstructions["Solicited"] = "SOLICITED";
    OrderSpecialReportingInstructions["Unsolicited"] = "UNSOLICITED";
    OrderSpecialReportingInstructions["XDividend"] = "X_DIVIDEND";
    OrderSpecialReportingInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    OrderSpecialReportingInstructions["AveragePrice"] = "AVERAGE_PRICE";
    OrderSpecialReportingInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    OrderSpecialReportingInstructions["InternetOrder"] = "INTERNET_ORDER";
    OrderSpecialReportingInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    OrderSpecialReportingInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    OrderSpecialReportingInstructions["RisklessPrincipal"] = "RISKLESS_PRINCIPAL";
    OrderSpecialReportingInstructions["ThirdMarket"] = "THIRD_MARKET";
    OrderSpecialReportingInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    OrderSpecialReportingInstructions["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(OrderSpecialReportingInstructions || (exports.OrderSpecialReportingInstructions = OrderSpecialReportingInstructions = {}));
/**
 * The type of this price, which must PRICE_PER_UNIT for equity orders. (Fixed income and mutual fund assets do not support stop orders.)
 */
var OrderStopPriceType;
(function (OrderStopPriceType) {
    OrderStopPriceType["StopPriceTypeUnspecified"] = "STOP_PRICE_TYPE_UNSPECIFIED";
    OrderStopPriceType["PricePerUnit"] = "PRICE_PER_UNIT";
})(OrderStopPriceType || (exports.OrderStopPriceType = OrderStopPriceType = {}));
/**
 * Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
 */
var OrderTimeInForce;
(function (OrderTimeInForce) {
    OrderTimeInForce["TimeInForceUnspecified"] = "TIME_IN_FORCE_UNSPECIFIED";
    OrderTimeInForce["Day"] = "DAY";
})(OrderTimeInForce || (exports.OrderTimeInForce = OrderTimeInForce = {}));
/** @internal */
exports.OrderAssetType$inboundSchema = z
    .union([
    z.nativeEnum(OrderAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderAssetType$outboundSchema = z.union([
    z.nativeEnum(OrderAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderAssetType$;
(function (OrderAssetType$) {
    /** @deprecated use `OrderAssetType$inboundSchema` instead. */
    OrderAssetType$.inboundSchema = exports.OrderAssetType$inboundSchema;
    /** @deprecated use `OrderAssetType$outboundSchema` instead. */
    OrderAssetType$.outboundSchema = exports.OrderAssetType$outboundSchema;
})(OrderAssetType$ || (exports.OrderAssetType$ = OrderAssetType$ = {}));
/** @internal */
exports.OrderBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(OrderBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(OrderBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderBrokerCapacity$;
(function (OrderBrokerCapacity$) {
    /** @deprecated use `OrderBrokerCapacity$inboundSchema` instead. */
    OrderBrokerCapacity$.inboundSchema = exports.OrderBrokerCapacity$inboundSchema;
    /** @deprecated use `OrderBrokerCapacity$outboundSchema` instead. */
    OrderBrokerCapacity$.outboundSchema = exports.OrderBrokerCapacity$outboundSchema;
})(OrderBrokerCapacity$ || (exports.OrderBrokerCapacity$ = OrderBrokerCapacity$ = {}));
/** @internal */
exports.CancelRejectedReason$inboundSchema = z
    .union([
    z.nativeEnum(CancelRejectedReason),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelRejectedReason$outboundSchema = z.union([
    z.nativeEnum(CancelRejectedReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelRejectedReason$;
(function (CancelRejectedReason$) {
    /** @deprecated use `CancelRejectedReason$inboundSchema` instead. */
    CancelRejectedReason$.inboundSchema = exports.CancelRejectedReason$inboundSchema;
    /** @deprecated use `CancelRejectedReason$outboundSchema` instead. */
    CancelRejectedReason$.outboundSchema = exports.CancelRejectedReason$outboundSchema;
})(CancelRejectedReason$ || (exports.CancelRejectedReason$ = CancelRejectedReason$ = {}));
/** @internal */
exports.OrderCommissionType$inboundSchema = z
    .union([
    z.nativeEnum(OrderCommissionType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderCommissionType$outboundSchema = z.union([
    z.nativeEnum(OrderCommissionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderCommissionType$;
(function (OrderCommissionType$) {
    /** @deprecated use `OrderCommissionType$inboundSchema` instead. */
    OrderCommissionType$.inboundSchema = exports.OrderCommissionType$inboundSchema;
    /** @deprecated use `OrderCommissionType$outboundSchema` instead. */
    OrderCommissionType$.outboundSchema = exports.OrderCommissionType$outboundSchema;
})(OrderCommissionType$ || (exports.OrderCommissionType$ = OrderCommissionType$ = {}));
/** @internal */
exports.Value$inboundSchema = z
    .object({
    value: z.string().optional(),
});
/** @internal */
exports.Value$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Value$;
(function (Value$) {
    /** @deprecated use `Value$inboundSchema` instead. */
    Value$.inboundSchema = exports.Value$inboundSchema;
    /** @deprecated use `Value$outboundSchema` instead. */
    Value$.outboundSchema = exports.Value$outboundSchema;
})(Value$ || (exports.Value$ = Value$ = {}));
/** @internal */
exports.OrderCommission$inboundSchema = z.object({
    type: exports.OrderCommissionType$inboundSchema.optional(),
    value: z.nullable(z.lazy(() => exports.Value$inboundSchema)).optional(),
});
/** @internal */
exports.OrderCommission$outboundSchema = z.object({
    type: exports.OrderCommissionType$outboundSchema.optional(),
    value: z.nullable(z.lazy(() => exports.Value$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderCommission$;
(function (OrderCommission$) {
    /** @deprecated use `OrderCommission$inboundSchema` instead. */
    OrderCommission$.inboundSchema = exports.OrderCommission$inboundSchema;
    /** @deprecated use `OrderCommission$outboundSchema` instead. */
    OrderCommission$.outboundSchema = exports.OrderCommission$outboundSchema;
})(OrderCommission$ || (exports.OrderCommission$ = OrderCommission$ = {}));
/** @internal */
exports.CumulativeNotionalValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CumulativeNotionalValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CumulativeNotionalValue$;
(function (CumulativeNotionalValue$) {
    /** @deprecated use `CumulativeNotionalValue$inboundSchema` instead. */
    CumulativeNotionalValue$.inboundSchema = exports.CumulativeNotionalValue$inboundSchema;
    /** @deprecated use `CumulativeNotionalValue$outboundSchema` instead. */
    CumulativeNotionalValue$.outboundSchema = exports.CumulativeNotionalValue$outboundSchema;
})(CumulativeNotionalValue$ || (exports.CumulativeNotionalValue$ = CumulativeNotionalValue$ = {}));
/** @internal */
exports.FilledQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.FilledQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FilledQuantity$;
(function (FilledQuantity$) {
    /** @deprecated use `FilledQuantity$inboundSchema` instead. */
    FilledQuantity$.inboundSchema = exports.FilledQuantity$inboundSchema;
    /** @deprecated use `FilledQuantity$outboundSchema` instead. */
    FilledQuantity$.outboundSchema = exports.FilledQuantity$outboundSchema;
})(FilledQuantity$ || (exports.FilledQuantity$ = FilledQuantity$ = {}));
/** @internal */
exports.OrderIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(OrderIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderIdentifierType$outboundSchema = z.union([
    z.nativeEnum(OrderIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderIdentifierType$;
(function (OrderIdentifierType$) {
    /** @deprecated use `OrderIdentifierType$inboundSchema` instead. */
    OrderIdentifierType$.inboundSchema = exports.OrderIdentifierType$inboundSchema;
    /** @deprecated use `OrderIdentifierType$outboundSchema` instead. */
    OrderIdentifierType$.outboundSchema = exports.OrderIdentifierType$outboundSchema;
})(OrderIdentifierType$ || (exports.OrderIdentifierType$ = OrderIdentifierType$ = {}));
/** @internal */
exports.OrderAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OrderAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderAmount$;
(function (OrderAmount$) {
    /** @deprecated use `OrderAmount$inboundSchema` instead. */
    OrderAmount$.inboundSchema = exports.OrderAmount$inboundSchema;
    /** @deprecated use `OrderAmount$outboundSchema` instead. */
    OrderAmount$.outboundSchema = exports.OrderAmount$outboundSchema;
})(OrderAmount$ || (exports.OrderAmount$ = OrderAmount$ = {}));
/** @internal */
exports.PeriodStartDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PeriodStartDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PeriodStartDate$;
(function (PeriodStartDate$) {
    /** @deprecated use `PeriodStartDate$inboundSchema` instead. */
    PeriodStartDate$.inboundSchema = exports.PeriodStartDate$inboundSchema;
    /** @deprecated use `PeriodStartDate$outboundSchema` instead. */
    PeriodStartDate$.outboundSchema = exports.PeriodStartDate$outboundSchema;
})(PeriodStartDate$ || (exports.PeriodStartDate$ = PeriodStartDate$ = {}));
/** @internal */
exports.LetterOfIntent$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.OrderAmount$inboundSchema)).optional(),
    period_start_date: z.nullable(z.lazy(() => exports.PeriodStartDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "period_start_date": "periodStartDate",
    });
});
/** @internal */
exports.LetterOfIntent$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.OrderAmount$outboundSchema)).optional(),
    periodStartDate: z.nullable(z.lazy(() => exports.PeriodStartDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        periodStartDate: "period_start_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LetterOfIntent$;
(function (LetterOfIntent$) {
    /** @deprecated use `LetterOfIntent$inboundSchema` instead. */
    LetterOfIntent$.inboundSchema = exports.LetterOfIntent$inboundSchema;
    /** @deprecated use `LetterOfIntent$outboundSchema` instead. */
    LetterOfIntent$.outboundSchema = exports.LetterOfIntent$outboundSchema;
})(LetterOfIntent$ || (exports.LetterOfIntent$ = LetterOfIntent$ = {}));
/** @internal */
exports.OrderPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OrderPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderPrice$;
(function (OrderPrice$) {
    /** @deprecated use `OrderPrice$inboundSchema` instead. */
    OrderPrice$.inboundSchema = exports.OrderPrice$inboundSchema;
    /** @deprecated use `OrderPrice$outboundSchema` instead. */
    OrderPrice$.outboundSchema = exports.OrderPrice$outboundSchema;
})(OrderPrice$ || (exports.OrderPrice$ = OrderPrice$ = {}));
/** @internal */
exports.OrderLimitPriceType$inboundSchema = z
    .union([
    z.nativeEnum(OrderLimitPriceType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderLimitPriceType$outboundSchema = z.union([
    z.nativeEnum(OrderLimitPriceType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderLimitPriceType$;
(function (OrderLimitPriceType$) {
    /** @deprecated use `OrderLimitPriceType$inboundSchema` instead. */
    OrderLimitPriceType$.inboundSchema = exports.OrderLimitPriceType$inboundSchema;
    /** @deprecated use `OrderLimitPriceType$outboundSchema` instead. */
    OrderLimitPriceType$.outboundSchema = exports.OrderLimitPriceType$outboundSchema;
})(OrderLimitPriceType$ || (exports.OrderLimitPriceType$ = OrderLimitPriceType$ = {}));
/** @internal */
exports.LimitPrice$inboundSchema = z.object({
    price: z.nullable(z.lazy(() => exports.OrderPrice$inboundSchema)).optional(),
    type: exports.OrderLimitPriceType$inboundSchema.optional(),
});
/** @internal */
exports.LimitPrice$outboundSchema = z.object({
    price: z.nullable(z.lazy(() => exports.OrderPrice$outboundSchema)).optional(),
    type: exports.OrderLimitPriceType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LimitPrice$;
(function (LimitPrice$) {
    /** @deprecated use `LimitPrice$inboundSchema` instead. */
    LimitPrice$.inboundSchema = exports.LimitPrice$inboundSchema;
    /** @deprecated use `LimitPrice$outboundSchema` instead. */
    LimitPrice$.outboundSchema = exports.LimitPrice$outboundSchema;
})(LimitPrice$ || (exports.LimitPrice$ = LimitPrice$ = {}));
/** @internal */
exports.MaxSellQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.MaxSellQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MaxSellQuantity$;
(function (MaxSellQuantity$) {
    /** @deprecated use `MaxSellQuantity$inboundSchema` instead. */
    MaxSellQuantity$.inboundSchema = exports.MaxSellQuantity$inboundSchema;
    /** @deprecated use `MaxSellQuantity$outboundSchema` instead. */
    MaxSellQuantity$.outboundSchema = exports.MaxSellQuantity$outboundSchema;
})(MaxSellQuantity$ || (exports.MaxSellQuantity$ = MaxSellQuantity$ = {}));
/** @internal */
exports.NotionalValue$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.NotionalValue$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NotionalValue$;
(function (NotionalValue$) {
    /** @deprecated use `NotionalValue$inboundSchema` instead. */
    NotionalValue$.inboundSchema = exports.NotionalValue$inboundSchema;
    /** @deprecated use `NotionalValue$outboundSchema` instead. */
    NotionalValue$.outboundSchema = exports.NotionalValue$outboundSchema;
})(NotionalValue$ || (exports.NotionalValue$ = NotionalValue$ = {}));
/** @internal */
exports.OrderDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.OrderDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderDate$;
(function (OrderDate$) {
    /** @deprecated use `OrderDate$inboundSchema` instead. */
    OrderDate$.inboundSchema = exports.OrderDate$inboundSchema;
    /** @deprecated use `OrderDate$outboundSchema` instead. */
    OrderDate$.outboundSchema = exports.OrderDate$outboundSchema;
})(OrderDate$ || (exports.OrderDate$ = OrderDate$ = {}));
/** @internal */
exports.OrderRejectedReason$inboundSchema = z
    .union([
    z.nativeEnum(OrderRejectedReason),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderRejectedReason$outboundSchema = z.union([
    z.nativeEnum(OrderRejectedReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderRejectedReason$;
(function (OrderRejectedReason$) {
    /** @deprecated use `OrderRejectedReason$inboundSchema` instead. */
    OrderRejectedReason$.inboundSchema = exports.OrderRejectedReason$inboundSchema;
    /** @deprecated use `OrderRejectedReason$outboundSchema` instead. */
    OrderRejectedReason$.outboundSchema = exports.OrderRejectedReason$outboundSchema;
})(OrderRejectedReason$ || (exports.OrderRejectedReason$ = OrderRejectedReason$ = {}));
/** @internal */
exports.OrderStatus$inboundSchema = z
    .union([
    z.nativeEnum(OrderStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderStatus$outboundSchema = z.union([
    z.nativeEnum(OrderStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderStatus$;
(function (OrderStatus$) {
    /** @deprecated use `OrderStatus$inboundSchema` instead. */
    OrderStatus$.inboundSchema = exports.OrderStatus$inboundSchema;
    /** @deprecated use `OrderStatus$outboundSchema` instead. */
    OrderStatus$.outboundSchema = exports.OrderStatus$outboundSchema;
})(OrderStatus$ || (exports.OrderStatus$ = OrderStatus$ = {}));
/** @internal */
exports.OrderOrderType$inboundSchema = z
    .union([
    z.nativeEnum(OrderOrderType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderOrderType$outboundSchema = z.union([
    z.nativeEnum(OrderOrderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderOrderType$;
(function (OrderOrderType$) {
    /** @deprecated use `OrderOrderType$inboundSchema` instead. */
    OrderOrderType$.inboundSchema = exports.OrderOrderType$inboundSchema;
    /** @deprecated use `OrderOrderType$outboundSchema` instead. */
    OrderOrderType$.outboundSchema = exports.OrderOrderType$outboundSchema;
})(OrderOrderType$ || (exports.OrderOrderType$ = OrderOrderType$ = {}));
/** @internal */
exports.OrderPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OrderPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderPrevailingMarketPrice$;
(function (OrderPrevailingMarketPrice$) {
    /** @deprecated use `OrderPrevailingMarketPrice$inboundSchema` instead. */
    OrderPrevailingMarketPrice$.inboundSchema = exports.OrderPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `OrderPrevailingMarketPrice$outboundSchema` instead. */
    OrderPrevailingMarketPrice$.outboundSchema = exports.OrderPrevailingMarketPrice$outboundSchema;
})(OrderPrevailingMarketPrice$ || (exports.OrderPrevailingMarketPrice$ = OrderPrevailingMarketPrice$ = {}));
/** @internal */
exports.OrderQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OrderQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderQuantity$;
(function (OrderQuantity$) {
    /** @deprecated use `OrderQuantity$inboundSchema` instead. */
    OrderQuantity$.inboundSchema = exports.OrderQuantity$inboundSchema;
    /** @deprecated use `OrderQuantity$outboundSchema` instead. */
    OrderQuantity$.outboundSchema = exports.OrderQuantity$outboundSchema;
})(OrderQuantity$ || (exports.OrderQuantity$ = OrderQuantity$ = {}));
/** @internal */
exports.OrderRightsOfAccumulationAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OrderRightsOfAccumulationAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderRightsOfAccumulationAmount$;
(function (OrderRightsOfAccumulationAmount$) {
    /** @deprecated use `OrderRightsOfAccumulationAmount$inboundSchema` instead. */
    OrderRightsOfAccumulationAmount$.inboundSchema = exports.OrderRightsOfAccumulationAmount$inboundSchema;
    /** @deprecated use `OrderRightsOfAccumulationAmount$outboundSchema` instead. */
    OrderRightsOfAccumulationAmount$.outboundSchema = exports.OrderRightsOfAccumulationAmount$outboundSchema;
})(OrderRightsOfAccumulationAmount$ || (exports.OrderRightsOfAccumulationAmount$ = OrderRightsOfAccumulationAmount$ = {}));
/** @internal */
exports.RightsOfAccumulation$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.OrderRightsOfAccumulationAmount$inboundSchema)).optional(),
});
/** @internal */
exports.RightsOfAccumulation$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.OrderRightsOfAccumulationAmount$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RightsOfAccumulation$;
(function (RightsOfAccumulation$) {
    /** @deprecated use `RightsOfAccumulation$inboundSchema` instead. */
    RightsOfAccumulation$.inboundSchema = exports.RightsOfAccumulation$inboundSchema;
    /** @deprecated use `RightsOfAccumulation$outboundSchema` instead. */
    RightsOfAccumulation$.outboundSchema = exports.RightsOfAccumulation$outboundSchema;
})(RightsOfAccumulation$ || (exports.RightsOfAccumulation$ = RightsOfAccumulation$ = {}));
/** @internal */
exports.OrderSide$inboundSchema = z
    .union([
    z.nativeEnum(OrderSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderSide$outboundSchema = z.union([
    z.nativeEnum(OrderSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderSide$;
(function (OrderSide$) {
    /** @deprecated use `OrderSide$inboundSchema` instead. */
    OrderSide$.inboundSchema = exports.OrderSide$inboundSchema;
    /** @deprecated use `OrderSide$outboundSchema` instead. */
    OrderSide$.outboundSchema = exports.OrderSide$outboundSchema;
})(OrderSide$ || (exports.OrderSide$ = OrderSide$ = {}));
/** @internal */
exports.OrderSpecialReportingInstructions$inboundSchema = z
    .union([
    z.nativeEnum(OrderSpecialReportingInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderSpecialReportingInstructions$outboundSchema = z.union([
    z.nativeEnum(OrderSpecialReportingInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderSpecialReportingInstructions$;
(function (OrderSpecialReportingInstructions$) {
    /** @deprecated use `OrderSpecialReportingInstructions$inboundSchema` instead. */
    OrderSpecialReportingInstructions$.inboundSchema = exports.OrderSpecialReportingInstructions$inboundSchema;
    /** @deprecated use `OrderSpecialReportingInstructions$outboundSchema` instead. */
    OrderSpecialReportingInstructions$.outboundSchema = exports.OrderSpecialReportingInstructions$outboundSchema;
})(OrderSpecialReportingInstructions$ || (exports.OrderSpecialReportingInstructions$ = OrderSpecialReportingInstructions$ = {}));
/** @internal */
exports.OrderStopPricePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OrderStopPricePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderStopPricePrice$;
(function (OrderStopPricePrice$) {
    /** @deprecated use `OrderStopPricePrice$inboundSchema` instead. */
    OrderStopPricePrice$.inboundSchema = exports.OrderStopPricePrice$inboundSchema;
    /** @deprecated use `OrderStopPricePrice$outboundSchema` instead. */
    OrderStopPricePrice$.outboundSchema = exports.OrderStopPricePrice$outboundSchema;
})(OrderStopPricePrice$ || (exports.OrderStopPricePrice$ = OrderStopPricePrice$ = {}));
/** @internal */
exports.OrderStopPriceType$inboundSchema = z
    .union([
    z.nativeEnum(OrderStopPriceType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderStopPriceType$outboundSchema = z.union([
    z.nativeEnum(OrderStopPriceType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderStopPriceType$;
(function (OrderStopPriceType$) {
    /** @deprecated use `OrderStopPriceType$inboundSchema` instead. */
    OrderStopPriceType$.inboundSchema = exports.OrderStopPriceType$inboundSchema;
    /** @deprecated use `OrderStopPriceType$outboundSchema` instead. */
    OrderStopPriceType$.outboundSchema = exports.OrderStopPriceType$outboundSchema;
})(OrderStopPriceType$ || (exports.OrderStopPriceType$ = OrderStopPriceType$ = {}));
/** @internal */
exports.StopPrice$inboundSchema = z.object({
    price: z.nullable(z.lazy(() => exports.OrderStopPricePrice$inboundSchema)).optional(),
    type: exports.OrderStopPriceType$inboundSchema.optional(),
});
/** @internal */
exports.StopPrice$outboundSchema = z.object({
    price: z.nullable(z.lazy(() => exports.OrderStopPricePrice$outboundSchema))
        .optional(),
    type: exports.OrderStopPriceType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StopPrice$;
(function (StopPrice$) {
    /** @deprecated use `StopPrice$inboundSchema` instead. */
    StopPrice$.inboundSchema = exports.StopPrice$inboundSchema;
    /** @deprecated use `StopPrice$outboundSchema` instead. */
    StopPrice$.outboundSchema = exports.StopPrice$outboundSchema;
})(StopPrice$ || (exports.StopPrice$ = StopPrice$ = {}));
/** @internal */
exports.OrderTimeInForce$inboundSchema = z
    .union([
    z.nativeEnum(OrderTimeInForce),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderTimeInForce$outboundSchema = z.union([
    z.nativeEnum(OrderTimeInForce),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderTimeInForce$;
(function (OrderTimeInForce$) {
    /** @deprecated use `OrderTimeInForce$inboundSchema` instead. */
    OrderTimeInForce$.inboundSchema = exports.OrderTimeInForce$inboundSchema;
    /** @deprecated use `OrderTimeInForce$outboundSchema` instead. */
    OrderTimeInForce$.outboundSchema = exports.OrderTimeInForce$outboundSchema;
})(OrderTimeInForce$ || (exports.OrderTimeInForce$ = OrderTimeInForce$ = {}));
/** @internal */
exports.Order$inboundSchema = z
    .object({
    account_id: z.string().optional(),
    asset_id: z.string().optional(),
    asset_type: exports.OrderAssetType$inboundSchema.optional(),
    average_prices: z.array(executedprice_js_1.ExecutedPrice$inboundSchema).optional(),
    broker_capacity: exports.OrderBrokerCapacity$inboundSchema.optional(),
    cancel_reason: z.string().optional(),
    cancel_rejected_reason: exports.CancelRejectedReason$inboundSchema.optional(),
    client_order_id: z.string().optional(),
    client_received_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    commission: z.nullable(z.lazy(() => exports.OrderCommission$inboundSchema))
        .optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    cumulative_notional_value: z.nullable(z.lazy(() => exports.CumulativeNotionalValue$inboundSchema)).optional(),
    currency_code: z.string().optional(),
    executions: z.array(executions_js_1.Executions$inboundSchema).optional(),
    fees: z.array(fee_js_1.Fee$inboundSchema).optional(),
    filled_quantity: z.nullable(z.lazy(() => exports.FilledQuantity$inboundSchema))
        .optional(),
    identifier: z.string().optional(),
    identifier_issuing_region_code: z.string().optional(),
    identifier_type: exports.OrderIdentifierType$inboundSchema.optional(),
    last_update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    letter_of_intent: z.nullable(z.lazy(() => exports.LetterOfIntent$inboundSchema))
        .optional(),
    limit_price: z.nullable(z.lazy(() => exports.LimitPrice$inboundSchema)).optional(),
    max_sell_quantity: z.nullable(z.lazy(() => exports.MaxSellQuantity$inboundSchema))
        .optional(),
    name: z.string().optional(),
    notional_value: z.nullable(z.lazy(() => exports.NotionalValue$inboundSchema))
        .optional(),
    order_date: z.nullable(z.lazy(() => exports.OrderDate$inboundSchema)).optional(),
    order_id: z.string().optional(),
    order_rejected_reason: exports.OrderRejectedReason$inboundSchema.optional(),
    order_status: exports.OrderStatus$inboundSchema.optional(),
    order_type: exports.OrderOrderType$inboundSchema.optional(),
    prevailing_market_price: z.nullable(z.lazy(() => exports.OrderPrevailingMarketPrice$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.OrderQuantity$inboundSchema)).optional(),
    rights_of_accumulation: z.nullable(z.lazy(() => exports.RightsOfAccumulation$inboundSchema)).optional(),
    side: exports.OrderSide$inboundSchema.optional(),
    special_reporting_instructions: z.array(exports.OrderSpecialReportingInstructions$inboundSchema).optional(),
    stop_price: z.nullable(z.lazy(() => exports.StopPrice$inboundSchema)).optional(),
    time_in_force: exports.OrderTimeInForce$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
        "asset_id": "assetId",
        "asset_type": "assetType",
        "average_prices": "averagePrices",
        "broker_capacity": "brokerCapacity",
        "cancel_reason": "cancelReason",
        "cancel_rejected_reason": "cancelRejectedReason",
        "client_order_id": "clientOrderId",
        "client_received_time": "clientReceivedTime",
        "create_time": "createTime",
        "cumulative_notional_value": "cumulativeNotionalValue",
        "currency_code": "currencyCode",
        "filled_quantity": "filledQuantity",
        "identifier_issuing_region_code": "identifierIssuingRegionCode",
        "identifier_type": "identifierType",
        "last_update_time": "lastUpdateTime",
        "letter_of_intent": "letterOfIntent",
        "limit_price": "limitPrice",
        "max_sell_quantity": "maxSellQuantity",
        "notional_value": "notionalValue",
        "order_date": "orderDate",
        "order_id": "orderId",
        "order_rejected_reason": "orderRejectedReason",
        "order_status": "orderStatus",
        "order_type": "orderType",
        "prevailing_market_price": "prevailingMarketPrice",
        "rights_of_accumulation": "rightsOfAccumulation",
        "special_reporting_instructions": "specialReportingInstructions",
        "stop_price": "stopPrice",
        "time_in_force": "timeInForce",
    });
});
/** @internal */
exports.Order$outboundSchema = z.object({
    accountId: z.string().optional(),
    assetId: z.string().optional(),
    assetType: exports.OrderAssetType$outboundSchema.optional(),
    averagePrices: z.array(executedprice_js_1.ExecutedPrice$outboundSchema).optional(),
    brokerCapacity: exports.OrderBrokerCapacity$outboundSchema.optional(),
    cancelReason: z.string().optional(),
    cancelRejectedReason: exports.CancelRejectedReason$outboundSchema.optional(),
    clientOrderId: z.string().optional(),
    clientReceivedTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    commission: z.nullable(z.lazy(() => exports.OrderCommission$outboundSchema))
        .optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    cumulativeNotionalValue: z.nullable(z.lazy(() => exports.CumulativeNotionalValue$outboundSchema)).optional(),
    currencyCode: z.string().optional(),
    executions: z.array(executions_js_1.Executions$outboundSchema).optional(),
    fees: z.array(fee_js_1.Fee$outboundSchema).optional(),
    filledQuantity: z.nullable(z.lazy(() => exports.FilledQuantity$outboundSchema))
        .optional(),
    identifier: z.string().optional(),
    identifierIssuingRegionCode: z.string().optional(),
    identifierType: exports.OrderIdentifierType$outboundSchema.optional(),
    lastUpdateTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    letterOfIntent: z.nullable(z.lazy(() => exports.LetterOfIntent$outboundSchema))
        .optional(),
    limitPrice: z.nullable(z.lazy(() => exports.LimitPrice$outboundSchema)).optional(),
    maxSellQuantity: z.nullable(z.lazy(() => exports.MaxSellQuantity$outboundSchema))
        .optional(),
    name: z.string().optional(),
    notionalValue: z.nullable(z.lazy(() => exports.NotionalValue$outboundSchema))
        .optional(),
    orderDate: z.nullable(z.lazy(() => exports.OrderDate$outboundSchema)).optional(),
    orderId: z.string().optional(),
    orderRejectedReason: exports.OrderRejectedReason$outboundSchema.optional(),
    orderStatus: exports.OrderStatus$outboundSchema.optional(),
    orderType: exports.OrderOrderType$outboundSchema.optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => exports.OrderPrevailingMarketPrice$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.OrderQuantity$outboundSchema)).optional(),
    rightsOfAccumulation: z.nullable(z.lazy(() => exports.RightsOfAccumulation$outboundSchema)).optional(),
    side: exports.OrderSide$outboundSchema.optional(),
    specialReportingInstructions: z.array(exports.OrderSpecialReportingInstructions$outboundSchema).optional(),
    stopPrice: z.nullable(z.lazy(() => exports.StopPrice$outboundSchema)).optional(),
    timeInForce: exports.OrderTimeInForce$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
        assetId: "asset_id",
        assetType: "asset_type",
        averagePrices: "average_prices",
        brokerCapacity: "broker_capacity",
        cancelReason: "cancel_reason",
        cancelRejectedReason: "cancel_rejected_reason",
        clientOrderId: "client_order_id",
        clientReceivedTime: "client_received_time",
        createTime: "create_time",
        cumulativeNotionalValue: "cumulative_notional_value",
        currencyCode: "currency_code",
        filledQuantity: "filled_quantity",
        identifierIssuingRegionCode: "identifier_issuing_region_code",
        identifierType: "identifier_type",
        lastUpdateTime: "last_update_time",
        letterOfIntent: "letter_of_intent",
        limitPrice: "limit_price",
        maxSellQuantity: "max_sell_quantity",
        notionalValue: "notional_value",
        orderDate: "order_date",
        orderId: "order_id",
        orderRejectedReason: "order_rejected_reason",
        orderStatus: "order_status",
        orderType: "order_type",
        prevailingMarketPrice: "prevailing_market_price",
        rightsOfAccumulation: "rights_of_accumulation",
        specialReportingInstructions: "special_reporting_instructions",
        stopPrice: "stop_price",
        timeInForce: "time_in_force",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Order$;
(function (Order$) {
    /** @deprecated use `Order$inboundSchema` instead. */
    Order$.inboundSchema = exports.Order$inboundSchema;
    /** @deprecated use `Order$outboundSchema` instead. */
    Order$.outboundSchema = exports.Order$outboundSchema;
})(Order$ || (exports.Order$ = Order$ = {}));
//# sourceMappingURL=order.js.map