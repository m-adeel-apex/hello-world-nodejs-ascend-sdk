"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionDeliverable$ = exports.OptionDeliverable$outboundSchema = exports.OptionDeliverable$inboundSchema = exports.SettlementStatus$ = exports.SettlementStatus$outboundSchema = exports.SettlementStatus$inboundSchema = exports.SettlementConvention$ = exports.SettlementConvention$outboundSchema = exports.SettlementConvention$inboundSchema = exports.OptionDeliverableQuantity$ = exports.OptionDeliverableQuantity$outboundSchema = exports.OptionDeliverableQuantity$inboundSchema = exports.CashType$ = exports.CashType$outboundSchema = exports.CashType$inboundSchema = exports.CashAmount$ = exports.CashAmount$outboundSchema = exports.CashAmount$inboundSchema = exports.AllocationPercentage$ = exports.AllocationPercentage$outboundSchema = exports.AllocationPercentage$inboundSchema = exports.SettlementStatus = exports.SettlementConvention = exports.CashType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The cash type of the deliverable
 */
var CashType;
(function (CashType) {
    CashType["CashTypeUnspecified"] = "CASH_TYPE_UNSPECIFIED";
    CashType["CashDifferential"] = "CASH_DIFFERENTIAL";
    CashType["CashFixed"] = "CASH_FIXED";
})(CashType || (exports.CashType = CashType = {}));
/**
 * Specifies the timeline for settling a transaction
 */
var SettlementConvention;
(function (SettlementConvention) {
    SettlementConvention["SettlementConventionUnspecified"] = "SETTLEMENT_CONVENTION_UNSPECIFIED";
    SettlementConvention["TPlus0"] = "T_PLUS_0";
    SettlementConvention["TPlus1"] = "T_PLUS_1";
})(SettlementConvention || (exports.SettlementConvention = SettlementConvention = {}));
/**
 * Indicates the current status of the settlement process for the deliverable asset(s) tied to an option, such as regular settlement or delayed.
 */
var SettlementStatus;
(function (SettlementStatus) {
    SettlementStatus["SettlementStatusUnspecified"] = "SETTLEMENT_STATUS_UNSPECIFIED";
    SettlementStatus["Regular"] = "REGULAR";
    SettlementStatus["Delayed"] = "DELAYED";
})(SettlementStatus || (exports.SettlementStatus = SettlementStatus = {}));
/** @internal */
exports.AllocationPercentage$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.AllocationPercentage$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AllocationPercentage$;
(function (AllocationPercentage$) {
    /** @deprecated use `AllocationPercentage$inboundSchema` instead. */
    AllocationPercentage$.inboundSchema = exports.AllocationPercentage$inboundSchema;
    /** @deprecated use `AllocationPercentage$outboundSchema` instead. */
    AllocationPercentage$.outboundSchema = exports.AllocationPercentage$outboundSchema;
})(AllocationPercentage$ || (exports.AllocationPercentage$ = AllocationPercentage$ = {}));
/** @internal */
exports.CashAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CashAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CashAmount$;
(function (CashAmount$) {
    /** @deprecated use `CashAmount$inboundSchema` instead. */
    CashAmount$.inboundSchema = exports.CashAmount$inboundSchema;
    /** @deprecated use `CashAmount$outboundSchema` instead. */
    CashAmount$.outboundSchema = exports.CashAmount$outboundSchema;
})(CashAmount$ || (exports.CashAmount$ = CashAmount$ = {}));
/** @internal */
exports.CashType$inboundSchema = z
    .union([
    z.nativeEnum(CashType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CashType$outboundSchema = z.union([
    z.nativeEnum(CashType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CashType$;
(function (CashType$) {
    /** @deprecated use `CashType$inboundSchema` instead. */
    CashType$.inboundSchema = exports.CashType$inboundSchema;
    /** @deprecated use `CashType$outboundSchema` instead. */
    CashType$.outboundSchema = exports.CashType$outboundSchema;
})(CashType$ || (exports.CashType$ = CashType$ = {}));
/** @internal */
exports.OptionDeliverableQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OptionDeliverableQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OptionDeliverableQuantity$;
(function (OptionDeliverableQuantity$) {
    /** @deprecated use `OptionDeliverableQuantity$inboundSchema` instead. */
    OptionDeliverableQuantity$.inboundSchema = exports.OptionDeliverableQuantity$inboundSchema;
    /** @deprecated use `OptionDeliverableQuantity$outboundSchema` instead. */
    OptionDeliverableQuantity$.outboundSchema = exports.OptionDeliverableQuantity$outboundSchema;
})(OptionDeliverableQuantity$ || (exports.OptionDeliverableQuantity$ = OptionDeliverableQuantity$ = {}));
/** @internal */
exports.SettlementConvention$inboundSchema = z
    .union([
    z.nativeEnum(SettlementConvention),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SettlementConvention$outboundSchema = z.union([
    z.nativeEnum(SettlementConvention),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SettlementConvention$;
(function (SettlementConvention$) {
    /** @deprecated use `SettlementConvention$inboundSchema` instead. */
    SettlementConvention$.inboundSchema = exports.SettlementConvention$inboundSchema;
    /** @deprecated use `SettlementConvention$outboundSchema` instead. */
    SettlementConvention$.outboundSchema = exports.SettlementConvention$outboundSchema;
})(SettlementConvention$ || (exports.SettlementConvention$ = SettlementConvention$ = {}));
/** @internal */
exports.SettlementStatus$inboundSchema = z
    .union([
    z.nativeEnum(SettlementStatus),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SettlementStatus$outboundSchema = z.union([
    z.nativeEnum(SettlementStatus),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SettlementStatus$;
(function (SettlementStatus$) {
    /** @deprecated use `SettlementStatus$inboundSchema` instead. */
    SettlementStatus$.inboundSchema = exports.SettlementStatus$inboundSchema;
    /** @deprecated use `SettlementStatus$outboundSchema` instead. */
    SettlementStatus$.outboundSchema = exports.SettlementStatus$outboundSchema;
})(SettlementStatus$ || (exports.SettlementStatus$ = SettlementStatus$ = {}));
/** @internal */
exports.OptionDeliverable$inboundSchema = z.object({
    allocation_percentage: z.nullable(z.lazy(() => exports.AllocationPercentage$inboundSchema)).optional(),
    asset_id: z.string().optional(),
    cash_amount: z.nullable(z.lazy(() => exports.CashAmount$inboundSchema)).optional(),
    cash_type: exports.CashType$inboundSchema.optional(),
    cusip: z.string().optional(),
    pending_cusip: z.string().optional(),
    quantity: z.nullable(z.lazy(() => exports.OptionDeliverableQuantity$inboundSchema))
        .optional(),
    settlement_convention: exports.SettlementConvention$inboundSchema.optional(),
    settlement_status: exports.SettlementStatus$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "allocation_percentage": "allocationPercentage",
        "asset_id": "assetId",
        "cash_amount": "cashAmount",
        "cash_type": "cashType",
        "pending_cusip": "pendingCusip",
        "settlement_convention": "settlementConvention",
        "settlement_status": "settlementStatus",
    });
});
/** @internal */
exports.OptionDeliverable$outboundSchema = z.object({
    allocationPercentage: z.nullable(z.lazy(() => exports.AllocationPercentage$outboundSchema)).optional(),
    assetId: z.string().optional(),
    cashAmount: z.nullable(z.lazy(() => exports.CashAmount$outboundSchema)).optional(),
    cashType: exports.CashType$outboundSchema.optional(),
    cusip: z.string().optional(),
    pendingCusip: z.string().optional(),
    quantity: z.nullable(z.lazy(() => exports.OptionDeliverableQuantity$outboundSchema))
        .optional(),
    settlementConvention: exports.SettlementConvention$outboundSchema.optional(),
    settlementStatus: exports.SettlementStatus$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        allocationPercentage: "allocation_percentage",
        assetId: "asset_id",
        cashAmount: "cash_amount",
        cashType: "cash_type",
        pendingCusip: "pending_cusip",
        settlementConvention: "settlement_convention",
        settlementStatus: "settlement_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OptionDeliverable$;
(function (OptionDeliverable$) {
    /** @deprecated use `OptionDeliverable$inboundSchema` instead. */
    OptionDeliverable$.inboundSchema = exports.OptionDeliverable$inboundSchema;
    /** @deprecated use `OptionDeliverable$outboundSchema` instead. */
    OptionDeliverable$.outboundSchema = exports.OptionDeliverable$outboundSchema;
})(OptionDeliverable$ || (exports.OptionDeliverable$ = OptionDeliverable$ = {}));
//# sourceMappingURL=optiondeliverable.js.map