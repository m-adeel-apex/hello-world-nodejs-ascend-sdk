"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Document$ = exports.Document$outboundSchema = exports.Document$inboundSchema = exports.InvestorDocument$ = exports.InvestorDocument$outboundSchema = exports.InvestorDocument$inboundSchema = exports.DocumentProcessDate$ = exports.DocumentProcessDate$outboundSchema = exports.DocumentProcessDate$inboundSchema = exports.DocumentInvestorDocumentDocumentType$ = exports.DocumentInvestorDocumentDocumentType$outboundSchema = exports.DocumentInvestorDocumentDocumentType$inboundSchema = exports.IdDocument$ = exports.IdDocument$outboundSchema = exports.IdDocument$inboundSchema = exports.DocumentUploadedDate$ = exports.DocumentUploadedDate$outboundSchema = exports.DocumentUploadedDate$inboundSchema = exports.DocumentIdDocumentDocumentType$ = exports.DocumentIdDocumentDocumentType$outboundSchema = exports.DocumentIdDocumentDocumentType$inboundSchema = exports.AccountDocument$ = exports.AccountDocument$outboundSchema = exports.AccountDocument$inboundSchema = exports.UploadedDate$ = exports.UploadedDate$outboundSchema = exports.UploadedDate$inboundSchema = exports.DocumentDocumentType$ = exports.DocumentDocumentType$outboundSchema = exports.DocumentDocumentType$inboundSchema = exports.DocumentInvestorDocumentDocumentType = exports.DocumentIdDocumentDocumentType = exports.DocumentDocumentType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * Describes the contents of a document and how it is used
 */
var DocumentDocumentType;
(function (DocumentDocumentType) {
    DocumentDocumentType["AccountDocumentTypeUnspecified"] = "ACCOUNT_DOCUMENT_TYPE_UNSPECIFIED";
    DocumentDocumentType["CertificateOfAppointment"] = "CERTIFICATE_OF_APPOINTMENT";
    DocumentDocumentType["FdicSweepProgramAgreement"] = "FDIC_SWEEP_PROGRAM_AGREEMENT";
    DocumentDocumentType["FpslMasterServicesLoanAgreement"] = "FPSL_MASTER_SERVICES_LOAN_AGREEMENT";
    DocumentDocumentType["TransferOnDeathBeneficiaryDesignation"] = "TRANSFER_ON_DEATH_BENEFICIARY_DESIGNATION";
    DocumentDocumentType["ChangeOfAddress"] = "CHANGE_OF_ADDRESS";
    DocumentDocumentType["NewAccountForm"] = "NEW_ACCOUNT_FORM";
    DocumentDocumentType["Letter3210"] = "LETTER_3210";
    DocumentDocumentType["IraApplForm"] = "IRA_APPL_FORM";
    DocumentDocumentType["RiaIraApplForm"] = "RIA_IRA_APPL_FORM";
    DocumentDocumentType["IraDepositForm"] = "IRA_DEPOSIT_FORM";
    DocumentDocumentType["RiaIraDepositForm"] = "RIA_IRA_DEPOSIT_FORM";
    DocumentDocumentType["IraDistForm"] = "IRA_DIST_FORM";
    DocumentDocumentType["RiaIraDistForm"] = "RIA_IRA_DIST_FORM";
    DocumentDocumentType["RothApplForm"] = "ROTH_APPL_FORM";
    DocumentDocumentType["RiaRothApplForm"] = "RIA_ROTH_APPL_FORM";
    DocumentDocumentType["RothDistForm"] = "ROTH_DIST_FORM";
    DocumentDocumentType["RiaRothDistForm"] = "RIA_ROTH_DIST_FORM";
    DocumentDocumentType["SimpleContTransm"] = "SIMPLE_CONT_TRANSM";
    DocumentDocumentType["EsaApplForm"] = "ESA_APPL_FORM";
    DocumentDocumentType["EsaWthdrStatement"] = "ESA_WTHDR_STATEMENT";
    DocumentDocumentType["DirConvForm"] = "DIR_CONV_FORM";
    DocumentDocumentType["IraBeneForm"] = "IRA_BENE_FORM";
    DocumentDocumentType["IraJrnlForm"] = "IRA_JRNL_FORM";
    DocumentDocumentType["SepEmplPlanDoc"] = "SEP_EMPL_PLAN_DOC";
    DocumentDocumentType["SimpleAdoptAgreement"] = "SIMPLE_ADOPT_AGREEMENT";
    DocumentDocumentType["SimpleApplForm"] = "SIMPLE_APPL_FORM";
    DocumentDocumentType["DeathCertification"] = "DEATH_CERTIFICATION";
    DocumentDocumentType["AchAgreement"] = "ACH_AGREEMENT";
    DocumentDocumentType["ApexSelectApplication"] = "APEX_SELECT_APPLICATION";
    DocumentDocumentType["AsaDirectDeposit"] = "ASA_DIRECT_DEPOSIT";
    DocumentDocumentType["BankingMisc"] = "BANKING_MISC";
    DocumentDocumentType["AccTransferForm"] = "ACC_TRANSFER_FORM";
    DocumentDocumentType["AddressVerificationNotice"] = "ADDRESS_VERIFICATION_NOTICE";
    DocumentDocumentType["AffidavitOfDomicile"] = "AFFIDAVIT_OF_DOMICILE";
    DocumentDocumentType["ApexSimpleDirectDeposit"] = "APEX_SIMPLE_DIRECT_DEPOSIT";
    DocumentDocumentType["TransferForm"] = "TRANSFER_FORM";
    DocumentDocumentType["JournalRequestForm"] = "JOURNAL_REQUEST_FORM";
    DocumentDocumentType["Check"] = "CHECK";
    DocumentDocumentType["CheckRequestForm"] = "CHECK_REQUEST_FORM";
    DocumentDocumentType["CorpAgreementCash"] = "CORP_AGREEMENT_CASH";
    DocumentDocumentType["CorpResolution"] = "CORP_RESOLUTION";
    DocumentDocumentType["CourtDocument"] = "COURT_DOCUMENT";
    DocumentDocumentType["CourtOrder"] = "COURT_ORDER";
    DocumentDocumentType["DepositSecuritiesRequestForm"] = "DEPOSIT_SECURITIES_REQUEST_FORM";
    DocumentDocumentType["DigitalSignature"] = "DIGITAL_SIGNATURE";
    DocumentDocumentType["DirectConversionRequest"] = "DIRECT_CONVERSION_REQUEST";
    DocumentDocumentType["DistributionForm"] = "DISTRIBUTION_FORM";
    DocumentDocumentType["DocumentIrs"] = "DOCUMENT_IRS";
    DocumentDocumentType["DomesticWire"] = "DOMESTIC_WIRE";
    DocumentDocumentType["DwacRequestForm"] = "DWAC_REQUEST_FORM";
    DocumentDocumentType["Dwre"] = "DWRE";
    DocumentDocumentType["EntityDueDiligenceQuestionnaire"] = "ENTITY_DUE_DILIGENCE_QUESTIONNAIRE";
    DocumentDocumentType["EntityUpdateForm"] = "ENTITY_UPDATE_FORM";
    DocumentDocumentType["EscheatForm"] = "ESCHEAT_FORM";
    DocumentDocumentType["EscheatmentDueDiligenceLetter"] = "ESCHEATMENT_DUE_DILIGENCE_LETTER";
    DocumentDocumentType["ESignature"] = "E_SIGNATURE";
    DocumentDocumentType["ForeignAccountDueDiligenceQuestionnaire"] = "FOREIGN_ACCOUNT_DUE_DILIGENCE_QUESTIONNAIRE";
    DocumentDocumentType["ForeignBankCertificationDisclosure"] = "FOREIGN_BANK_CERTIFICATION_DISCLOSURE";
    DocumentDocumentType["ForeignEntityDeclarationForm"] = "FOREIGN_ENTITY_DECLARATION_FORM";
    DocumentDocumentType["ForeignFinInstDueDiligenceQuestionnaire"] = "FOREIGN_FIN_INST_DUE_DILIGENCE_QUESTIONNAIRE";
    DocumentDocumentType["Form144"] = "FORM_144";
    DocumentDocumentType["FreeDeliveryForm"] = "FREE_DELIVERY_FORM";
    DocumentDocumentType["FullTradingAuthorization"] = "FULL_TRADING_AUTHORIZATION";
    DocumentDocumentType["InternationalWireRequestForm"] = "INTERNATIONAL_WIRE_REQUEST_FORM";
    DocumentDocumentType["IrrevocableStockBondPower"] = "IRREVOCABLE_STOCK_BOND_POWER";
    DocumentDocumentType["JointAccAgreementEntirety"] = "JOINT_ACC_AGREEMENT_ENTIRETY";
    DocumentDocumentType["JointAccAgreementRightsOfSurvivorship"] = "JOINT_ACC_AGREEMENT_RIGHTS_OF_SURVIVORSHIP";
    DocumentDocumentType["JointAccAgreementCommunityProperty"] = "JOINT_ACC_AGREEMENT_COMMUNITY_PROPERTY";
    DocumentDocumentType["JointAccAgreementTenantsInCommon"] = "JOINT_ACC_AGREEMENT_TENANTS_IN_COMMON";
    DocumentDocumentType["JointTefraW8"] = "JOINT_TEFRA_W8";
    DocumentDocumentType["LegalOpinion"] = "LEGAL_OPINION";
    DocumentDocumentType["LetterOfAuthority"] = "LETTER_OF_AUTHORITY";
    DocumentDocumentType["LettersOfTestamentaryCertAppointment"] = "LETTERS_OF_TESTAMENTARY_CERT_APPOINTMENT";
    DocumentDocumentType["LimitedLiabilityCompanyAgreement"] = "LIMITED_LIABILITY_COMPANY_AGREEMENT";
    DocumentDocumentType["LimitedPurposeMargin"] = "LIMITED_PURPOSE_MARGIN";
    DocumentDocumentType["MailAuthorization"] = "MAIL_AUTHORIZATION";
    DocumentDocumentType["Msla"] = "MSLA";
    DocumentDocumentType["MiscGeneral"] = "MISC_GENERAL";
    DocumentDocumentType["NewAccountApplicationEntity"] = "NEW_ACCOUNT_APPLICATION_ENTITY";
    DocumentDocumentType["NonCorporateAssociation"] = "NON_CORPORATE_ASSOCIATION";
    DocumentDocumentType["PartnershipAgreement"] = "PARTNERSHIP_AGREEMENT";
    DocumentDocumentType["PatternDayTraderForm"] = "PATTERN_DAY_TRADER_FORM";
    DocumentDocumentType["PowerOfAttorneyDurable"] = "POWER_OF_ATTORNEY_DURABLE";
    DocumentDocumentType["PowerOfAttorneyGeneral"] = "POWER_OF_ATTORNEY_GENERAL";
    DocumentDocumentType["RegisteredAdvisoryAuthorityForm"] = "REGISTERED_ADVISORY_AUTHORITY_FORM";
    DocumentDocumentType["Rmd"] = "RMD";
    DocumentDocumentType["RiskDisclosure"] = "RISK_DISCLOSURE";
    DocumentDocumentType["Rule145SellersLetter"] = "RULE_145_SELLERS_LETTER";
    DocumentDocumentType["Rule701Letter"] = "RULE_701_LETTER";
    DocumentDocumentType["SameNameLoa"] = "SAME_NAME_LOA";
    DocumentDocumentType["SecuritiesBasedLendingAgreement"] = "SECURITIES_BASED_LENDING_AGREEMENT";
    DocumentDocumentType["SepContributionAgreement"] = "SEP_CONTRIBUTION_AGREEMENT";
    DocumentDocumentType["SepEmployerPlanDocumentation"] = "SEP_EMPLOYER_PLAN_DOCUMENTATION";
    DocumentDocumentType["SignatureCard"] = "SIGNATURE_CARD";
    DocumentDocumentType["SimpleForm5304"] = "SIMPLE_FORM_5304";
    DocumentDocumentType["SimplifiedEmployeePension"] = "SIMPLIFIED_EMPLOYEE_PENSION";
    DocumentDocumentType["CertificateSoleProprietorship"] = "CERTIFICATE_SOLE_PROPRIETORSHIP";
    DocumentDocumentType["TransferOnDeath"] = "TRANSFER_ON_DEATH";
    DocumentDocumentType["TrustAgreement"] = "TRUST_AGREEMENT";
    DocumentDocumentType["TaxW8Ben"] = "TAX_W8_BEN";
    DocumentDocumentType["TaxW8BenJointAccountHolder"] = "TAX_W8_BEN_JOINT_ACCOUNT_HOLDER";
    DocumentDocumentType["TaxW8Eci"] = "TAX_W8_ECI";
    DocumentDocumentType["TaxW8Exp"] = "TAX_W8_EXP";
    DocumentDocumentType["TaxW8Imy"] = "TAX_W8_IMY";
    DocumentDocumentType["TaxW9"] = "TAX_W9";
    DocumentDocumentType["WillCopy"] = "WILL_COPY";
    DocumentDocumentType["WireRequestForm"] = "WIRE_REQUEST_FORM";
    DocumentDocumentType["WorthlessSecurities"] = "WORTHLESS_SECURITIES";
    DocumentDocumentType["ChangeOfAddressRequest"] = "CHANGE_OF_ADDRESS_REQUEST";
})(DocumentDocumentType || (exports.DocumentDocumentType = DocumentDocumentType = {}));
/**
 * Describes the contents of a document and how it is used
 */
var DocumentIdDocumentDocumentType;
(function (DocumentIdDocumentDocumentType) {
    DocumentIdDocumentDocumentType["IdDocumentTypeUnspecified"] = "ID_DOCUMENT_TYPE_UNSPECIFIED";
    DocumentIdDocumentDocumentType["BirthCertificate"] = "BIRTH_CERTIFICATE";
    DocumentIdDocumentDocumentType["CustomerIdentificationProcess"] = "CUSTOMER_IDENTIFICATION_PROCESS";
    DocumentIdDocumentDocumentType["DeathCertificate"] = "DEATH_CERTIFICATE";
    DocumentIdDocumentDocumentType["DrivingLicense"] = "DRIVING_LICENSE";
    DocumentIdDocumentDocumentType["EmployerConsentForm407Letter"] = "EMPLOYER_CONSENT_FORM_407_LETTER";
    DocumentIdDocumentDocumentType["MarriageCertificate"] = "MARRIAGE_CERTIFICATE";
    DocumentIdDocumentDocumentType["Passport"] = "PASSPORT";
    DocumentIdDocumentDocumentType["ProofOfTaxId"] = "PROOF_OF_TAX_ID";
    DocumentIdDocumentDocumentType["SocialSecurityDocument"] = "SOCIAL_SECURITY_DOCUMENT";
    DocumentIdDocumentDocumentType["ThirdPartyCipResults"] = "THIRD_PARTY_CIP_RESULTS";
    DocumentIdDocumentDocumentType["StateIdCard"] = "STATE_ID_CARD";
    DocumentIdDocumentDocumentType["NationalIdCard"] = "NATIONAL_ID_CARD";
    DocumentIdDocumentDocumentType["PermanentResidentVisa"] = "PERMANENT_RESIDENT_VISA";
    DocumentIdDocumentDocumentType["IrisItinLetter"] = "IRIS_ITIN_LETTER";
    DocumentIdDocumentDocumentType["UtilityBill"] = "UTILITY_BILL";
    DocumentIdDocumentDocumentType["MilitaryIdCard"] = "MILITARY_ID_CARD";
    DocumentIdDocumentDocumentType["MortgageStatement"] = "MORTGAGE_STATEMENT";
    DocumentIdDocumentDocumentType["LeaseAgreement"] = "LEASE_AGREEMENT";
    DocumentIdDocumentDocumentType["ExecutorCertification"] = "EXECUTOR_CERTIFICATION";
    DocumentIdDocumentDocumentType["TrusteeCertification"] = "TRUSTEE_CERTIFICATION";
    DocumentIdDocumentDocumentType["Selfie"] = "SELFIE";
    DocumentIdDocumentDocumentType["ArticlesOfOrganisation"] = "ARTICLES_OF_ORGANISATION";
    DocumentIdDocumentDocumentType["CertOfSoleOfficer"] = "CERT_OF_SOLE_OFFICER";
    DocumentIdDocumentDocumentType["CertificationCorrespondentAccounts"] = "CERTIFICATION_CORRESPONDENT_ACCOUNTS";
    DocumentIdDocumentDocumentType["CertificationForeignBanks"] = "CERTIFICATION_FOREIGN_BANKS";
    DocumentIdDocumentDocumentType["CharterArticlesOfIncorporation"] = "CHARTER_ARTICLES_OF_INCORPORATION";
    DocumentIdDocumentDocumentType["DivorceDecree"] = "DIVORCE_DECREE";
    DocumentIdDocumentDocumentType["ProofOfResidence"] = "PROOF_OF_RESIDENCE";
    DocumentIdDocumentDocumentType["BoReportingExemptionProof"] = "BO_REPORTING_EXEMPTION_PROOF";
    DocumentIdDocumentDocumentType["OperatingAgreement"] = "OPERATING_AGREEMENT";
    DocumentIdDocumentDocumentType["RegisterOfMembers"] = "REGISTER_OF_MEMBERS";
    DocumentIdDocumentDocumentType["BoardResolution"] = "BOARD_RESOLUTION";
    DocumentIdDocumentDocumentType["TrustDeedsAgreement"] = "TRUST_DEEDS_AGREEMENT";
    DocumentIdDocumentDocumentType["CorporateBylaws"] = "CORPORATE_BYLAWS";
    DocumentIdDocumentDocumentType["ShareholderAgreement"] = "SHAREHOLDER_AGREEMENT";
    DocumentIdDocumentDocumentType["CorporateRecords"] = "CORPORATE_RECORDS";
})(DocumentIdDocumentDocumentType || (exports.DocumentIdDocumentDocumentType = DocumentIdDocumentDocumentType = {}));
/**
 * Describes the contents of a document and how it is used
 */
var DocumentInvestorDocumentDocumentType;
(function (DocumentInvestorDocumentDocumentType) {
    DocumentInvestorDocumentDocumentType["InvestorDocumentTypeUnspecified"] = "INVESTOR_DOCUMENT_TYPE_UNSPECIFIED";
    DocumentInvestorDocumentDocumentType["ConfirmDaily"] = "CONFIRM_DAILY";
    DocumentInvestorDocumentDocumentType["ConfirmMonthly"] = "CONFIRM_MONTHLY";
    DocumentInvestorDocumentDocumentType["FormConsolidated1099"] = "FORM_CONSOLIDATED_1099";
    DocumentInvestorDocumentDocumentType["Form1042S"] = "FORM_1042_S";
    DocumentInvestorDocumentDocumentType["Form1099Q"] = "FORM_1099_Q";
    DocumentInvestorDocumentDocumentType["Form1099R"] = "FORM_1099_R";
    DocumentInvestorDocumentDocumentType["Form2439"] = "FORM_2439";
    DocumentInvestorDocumentDocumentType["Form4806A"] = "FORM_480_6A";
    DocumentInvestorDocumentDocumentType["Form4806B"] = "FORM_480_6B";
    DocumentInvestorDocumentDocumentType["Form5498"] = "FORM_5498";
    DocumentInvestorDocumentDocumentType["StatementMonthly"] = "STATEMENT_MONTHLY";
    DocumentInvestorDocumentDocumentType["StatementQuarterly"] = "STATEMENT_QUARTERLY";
    DocumentInvestorDocumentDocumentType["Form1099C"] = "FORM_1099_C";
    DocumentInvestorDocumentDocumentType["Form4806D"] = "FORM_480_6D";
    DocumentInvestorDocumentDocumentType["Form5498Esa"] = "FORM_5498_ESA";
})(DocumentInvestorDocumentDocumentType || (exports.DocumentInvestorDocumentDocumentType = DocumentInvestorDocumentDocumentType = {}));
/** @internal */
exports.DocumentDocumentType$inboundSchema = z
    .union([
    z.nativeEnum(DocumentDocumentType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.DocumentDocumentType$outboundSchema = z.union([
    z.nativeEnum(DocumentDocumentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DocumentDocumentType$;
(function (DocumentDocumentType$) {
    /** @deprecated use `DocumentDocumentType$inboundSchema` instead. */
    DocumentDocumentType$.inboundSchema = exports.DocumentDocumentType$inboundSchema;
    /** @deprecated use `DocumentDocumentType$outboundSchema` instead. */
    DocumentDocumentType$.outboundSchema = exports.DocumentDocumentType$outboundSchema;
})(DocumentDocumentType$ || (exports.DocumentDocumentType$ = DocumentDocumentType$ = {}));
/** @internal */
exports.UploadedDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.UploadedDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UploadedDate$;
(function (UploadedDate$) {
    /** @deprecated use `UploadedDate$inboundSchema` instead. */
    UploadedDate$.inboundSchema = exports.UploadedDate$inboundSchema;
    /** @deprecated use `UploadedDate$outboundSchema` instead. */
    UploadedDate$.outboundSchema = exports.UploadedDate$outboundSchema;
})(UploadedDate$ || (exports.UploadedDate$ = UploadedDate$ = {}));
/** @internal */
exports.AccountDocument$inboundSchema = z.object({
    account_id: z.string().optional(),
    document_type: exports.DocumentDocumentType$inboundSchema.optional(),
    uploaded_date: z.nullable(z.lazy(() => exports.UploadedDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
        "document_type": "documentType",
        "uploaded_date": "uploadedDate",
    });
});
/** @internal */
exports.AccountDocument$outboundSchema = z.object({
    accountId: z.string().optional(),
    documentType: exports.DocumentDocumentType$outboundSchema.optional(),
    uploadedDate: z.nullable(z.lazy(() => exports.UploadedDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
        documentType: "document_type",
        uploadedDate: "uploaded_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountDocument$;
(function (AccountDocument$) {
    /** @deprecated use `AccountDocument$inboundSchema` instead. */
    AccountDocument$.inboundSchema = exports.AccountDocument$inboundSchema;
    /** @deprecated use `AccountDocument$outboundSchema` instead. */
    AccountDocument$.outboundSchema = exports.AccountDocument$outboundSchema;
})(AccountDocument$ || (exports.AccountDocument$ = AccountDocument$ = {}));
/** @internal */
exports.DocumentIdDocumentDocumentType$inboundSchema = z
    .union([
    z.nativeEnum(DocumentIdDocumentDocumentType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.DocumentIdDocumentDocumentType$outboundSchema = z.union([
    z.nativeEnum(DocumentIdDocumentDocumentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DocumentIdDocumentDocumentType$;
(function (DocumentIdDocumentDocumentType$) {
    /** @deprecated use `DocumentIdDocumentDocumentType$inboundSchema` instead. */
    DocumentIdDocumentDocumentType$.inboundSchema = exports.DocumentIdDocumentDocumentType$inboundSchema;
    /** @deprecated use `DocumentIdDocumentDocumentType$outboundSchema` instead. */
    DocumentIdDocumentDocumentType$.outboundSchema = exports.DocumentIdDocumentDocumentType$outboundSchema;
})(DocumentIdDocumentDocumentType$ || (exports.DocumentIdDocumentDocumentType$ = DocumentIdDocumentDocumentType$ = {}));
/** @internal */
exports.DocumentUploadedDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.DocumentUploadedDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DocumentUploadedDate$;
(function (DocumentUploadedDate$) {
    /** @deprecated use `DocumentUploadedDate$inboundSchema` instead. */
    DocumentUploadedDate$.inboundSchema = exports.DocumentUploadedDate$inboundSchema;
    /** @deprecated use `DocumentUploadedDate$outboundSchema` instead. */
    DocumentUploadedDate$.outboundSchema = exports.DocumentUploadedDate$outboundSchema;
})(DocumentUploadedDate$ || (exports.DocumentUploadedDate$ = DocumentUploadedDate$ = {}));
/** @internal */
exports.IdDocument$inboundSchema = z.object({
    document_type: exports.DocumentIdDocumentDocumentType$inboundSchema.optional(),
    legal_natural_person_id: z.string().optional(),
    uploaded_date: z.nullable(z.lazy(() => exports.DocumentUploadedDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "document_type": "documentType",
        "legal_natural_person_id": "legalNaturalPersonId",
        "uploaded_date": "uploadedDate",
    });
});
/** @internal */
exports.IdDocument$outboundSchema = z.object({
    documentType: exports.DocumentIdDocumentDocumentType$outboundSchema.optional(),
    legalNaturalPersonId: z.string().optional(),
    uploadedDate: z.nullable(z.lazy(() => exports.DocumentUploadedDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        documentType: "document_type",
        legalNaturalPersonId: "legal_natural_person_id",
        uploadedDate: "uploaded_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IdDocument$;
(function (IdDocument$) {
    /** @deprecated use `IdDocument$inboundSchema` instead. */
    IdDocument$.inboundSchema = exports.IdDocument$inboundSchema;
    /** @deprecated use `IdDocument$outboundSchema` instead. */
    IdDocument$.outboundSchema = exports.IdDocument$outboundSchema;
})(IdDocument$ || (exports.IdDocument$ = IdDocument$ = {}));
/** @internal */
exports.DocumentInvestorDocumentDocumentType$inboundSchema = z
    .union([
    z.nativeEnum(DocumentInvestorDocumentDocumentType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.DocumentInvestorDocumentDocumentType$outboundSchema = z.union([
    z.nativeEnum(DocumentInvestorDocumentDocumentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DocumentInvestorDocumentDocumentType$;
(function (DocumentInvestorDocumentDocumentType$) {
    /** @deprecated use `DocumentInvestorDocumentDocumentType$inboundSchema` instead. */
    DocumentInvestorDocumentDocumentType$.inboundSchema = exports.DocumentInvestorDocumentDocumentType$inboundSchema;
    /** @deprecated use `DocumentInvestorDocumentDocumentType$outboundSchema` instead. */
    DocumentInvestorDocumentDocumentType$.outboundSchema = exports.DocumentInvestorDocumentDocumentType$outboundSchema;
})(DocumentInvestorDocumentDocumentType$ || (exports.DocumentInvestorDocumentDocumentType$ = DocumentInvestorDocumentDocumentType$ = {}));
/** @internal */
exports.DocumentProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.DocumentProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DocumentProcessDate$;
(function (DocumentProcessDate$) {
    /** @deprecated use `DocumentProcessDate$inboundSchema` instead. */
    DocumentProcessDate$.inboundSchema = exports.DocumentProcessDate$inboundSchema;
    /** @deprecated use `DocumentProcessDate$outboundSchema` instead. */
    DocumentProcessDate$.outboundSchema = exports.DocumentProcessDate$outboundSchema;
})(DocumentProcessDate$ || (exports.DocumentProcessDate$ = DocumentProcessDate$ = {}));
/** @internal */
exports.InvestorDocument$inboundSchema = z.object({
    account_id: z.string().optional(),
    document_type: exports.DocumentInvestorDocumentDocumentType$inboundSchema.optional(),
    process_date: z.nullable(z.lazy(() => exports.DocumentProcessDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
        "document_type": "documentType",
        "process_date": "processDate",
    });
});
/** @internal */
exports.InvestorDocument$outboundSchema = z.object({
    accountId: z.string().optional(),
    documentType: exports.DocumentInvestorDocumentDocumentType$outboundSchema.optional(),
    processDate: z.nullable(z.lazy(() => exports.DocumentProcessDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
        documentType: "document_type",
        processDate: "process_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestorDocument$;
(function (InvestorDocument$) {
    /** @deprecated use `InvestorDocument$inboundSchema` instead. */
    InvestorDocument$.inboundSchema = exports.InvestorDocument$inboundSchema;
    /** @deprecated use `InvestorDocument$outboundSchema` instead. */
    InvestorDocument$.outboundSchema = exports.InvestorDocument$outboundSchema;
})(InvestorDocument$ || (exports.InvestorDocument$ = InvestorDocument$ = {}));
/** @internal */
exports.Document$inboundSchema = z.object({
    account_document: z.nullable(z.lazy(() => exports.AccountDocument$inboundSchema))
        .optional(),
    correspondent_id: z.string().optional(),
    download_link: z.string().optional(),
    id_document: z.nullable(z.lazy(() => exports.IdDocument$inboundSchema)).optional(),
    investor_document: z.nullable(z.lazy(() => exports.InvestorDocument$inboundSchema))
        .optional(),
    name: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_document": "accountDocument",
        "correspondent_id": "correspondentId",
        "download_link": "downloadLink",
        "id_document": "idDocument",
        "investor_document": "investorDocument",
    });
});
/** @internal */
exports.Document$outboundSchema = z.object({
    accountDocument: z.nullable(z.lazy(() => exports.AccountDocument$outboundSchema))
        .optional(),
    correspondentId: z.string().optional(),
    downloadLink: z.string().optional(),
    idDocument: z.nullable(z.lazy(() => exports.IdDocument$outboundSchema)).optional(),
    investorDocument: z.nullable(z.lazy(() => exports.InvestorDocument$outboundSchema))
        .optional(),
    name: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountDocument: "account_document",
        correspondentId: "correspondent_id",
        downloadLink: "download_link",
        idDocument: "id_document",
        investorDocument: "investor_document",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Document$;
(function (Document$) {
    /** @deprecated use `Document$inboundSchema` instead. */
    Document$.inboundSchema = exports.Document$inboundSchema;
    /** @deprecated use `Document$outboundSchema` instead. */
    Document$.outboundSchema = exports.Document$outboundSchema;
})(Document$ || (exports.Document$ = Document$ = {}));
//# sourceMappingURL=document.js.map