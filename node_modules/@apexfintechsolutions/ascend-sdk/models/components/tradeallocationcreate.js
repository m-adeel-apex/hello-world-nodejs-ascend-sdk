"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeAllocationCreate$ = exports.TradeAllocationCreate$outboundSchema = exports.TradeAllocationCreate$inboundSchema = exports.TradeAllocationCreateWhenIssued$ = exports.TradeAllocationCreateWhenIssued$outboundSchema = exports.TradeAllocationCreateWhenIssued$inboundSchema = exports.ToSide$ = exports.ToSide$outboundSchema = exports.ToSide$inboundSchema = exports.TradeAllocationCreateSpecialInstructions$ = exports.TradeAllocationCreateSpecialInstructions$outboundSchema = exports.TradeAllocationCreateSpecialInstructions$inboundSchema = exports.TradeAllocationCreateSideModifier$ = exports.TradeAllocationCreateSideModifier$outboundSchema = exports.TradeAllocationCreateSideModifier$inboundSchema = exports.TradeAllocationCreateIdentifierType$ = exports.TradeAllocationCreateIdentifierType$outboundSchema = exports.TradeAllocationCreateIdentifierType$inboundSchema = exports.TradeAllocationCreateBrokerCapacity$ = exports.TradeAllocationCreateBrokerCapacity$outboundSchema = exports.TradeAllocationCreateBrokerCapacity$inboundSchema = exports.TradeAllocationCreateAssetType$ = exports.TradeAllocationCreateAssetType$outboundSchema = exports.TradeAllocationCreateAssetType$inboundSchema = exports.TradeAllocationCreateWhenIssued = exports.ToSide = exports.TradeAllocationCreateSpecialInstructions = exports.TradeAllocationCreateSideModifier = exports.TradeAllocationCreateIdentifierType = exports.TradeAllocationCreateBrokerCapacity = exports.TradeAllocationCreateAssetType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const bondyieldcreate_js_1 = require("./bondyieldcreate.js");
const datecreate_js_1 = require("./datecreate.js");
const decimalcreate_js_1 = require("./decimalcreate.js");
const feecreate_js_1 = require("./feecreate.js");
const lotcreate_js_1 = require("./lotcreate.js");
const priceadjustmentcreate_js_1 = require("./priceadjustmentcreate.js");
/**
 * Type of the asset being traded. Required for SYMBOL and CUSIP.
 */
var TradeAllocationCreateAssetType;
(function (TradeAllocationCreateAssetType) {
    TradeAllocationCreateAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    TradeAllocationCreateAssetType["Equity"] = "EQUITY";
    TradeAllocationCreateAssetType["FixedIncome"] = "FIXED_INCOME";
})(TradeAllocationCreateAssetType || (exports.TradeAllocationCreateAssetType = TradeAllocationCreateAssetType = {}));
/**
 * Broker capacity for the trade.
 */
var TradeAllocationCreateBrokerCapacity;
(function (TradeAllocationCreateBrokerCapacity) {
    TradeAllocationCreateBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    TradeAllocationCreateBrokerCapacity["Agency"] = "AGENCY";
    TradeAllocationCreateBrokerCapacity["Principal"] = "PRINCIPAL";
    TradeAllocationCreateBrokerCapacity["Mixed"] = "MIXED";
})(TradeAllocationCreateBrokerCapacity || (exports.TradeAllocationCreateBrokerCapacity = TradeAllocationCreateBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
var TradeAllocationCreateIdentifierType;
(function (TradeAllocationCreateIdentifierType) {
    TradeAllocationCreateIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    TradeAllocationCreateIdentifierType["AssetId"] = "ASSET_ID";
    TradeAllocationCreateIdentifierType["Symbol"] = "SYMBOL";
    TradeAllocationCreateIdentifierType["Cusip"] = "CUSIP";
    TradeAllocationCreateIdentifierType["Isin"] = "ISIN";
})(TradeAllocationCreateIdentifierType || (exports.TradeAllocationCreateIdentifierType = TradeAllocationCreateIdentifierType = {}));
/**
 * Side modifier for the trade allocation.
 */
var TradeAllocationCreateSideModifier;
(function (TradeAllocationCreateSideModifier) {
    TradeAllocationCreateSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    TradeAllocationCreateSideModifier["Short"] = "SHORT";
    TradeAllocationCreateSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    TradeAllocationCreateSideModifier["ShortCover"] = "SHORT_COVER";
    TradeAllocationCreateSideModifier["Open"] = "OPEN";
    TradeAllocationCreateSideModifier["Close"] = "CLOSE";
})(TradeAllocationCreateSideModifier || (exports.TradeAllocationCreateSideModifier = TradeAllocationCreateSideModifier = {}));
var TradeAllocationCreateSpecialInstructions;
(function (TradeAllocationCreateSpecialInstructions) {
    TradeAllocationCreateSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    TradeAllocationCreateSpecialInstructions["Rule144"] = "RULE_144";
    TradeAllocationCreateSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    TradeAllocationCreateSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    TradeAllocationCreateSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    TradeAllocationCreateSpecialInstructions["CoverShort"] = "COVER_SHORT";
    TradeAllocationCreateSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    TradeAllocationCreateSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    TradeAllocationCreateSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    TradeAllocationCreateSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    TradeAllocationCreateSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    TradeAllocationCreateSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    TradeAllocationCreateSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    TradeAllocationCreateSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    TradeAllocationCreateSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    TradeAllocationCreateSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    TradeAllocationCreateSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    TradeAllocationCreateSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    TradeAllocationCreateSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    TradeAllocationCreateSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    TradeAllocationCreateSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    TradeAllocationCreateSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    TradeAllocationCreateSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    TradeAllocationCreateSpecialInstructions["Solicited"] = "SOLICITED";
    TradeAllocationCreateSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    TradeAllocationCreateSpecialInstructions["XDividend"] = "X_DIVIDEND";
    TradeAllocationCreateSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    TradeAllocationCreateSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    TradeAllocationCreateSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    TradeAllocationCreateSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    TradeAllocationCreateSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    TradeAllocationCreateSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    TradeAllocationCreateSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    TradeAllocationCreateSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    TradeAllocationCreateSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    TradeAllocationCreateSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    TradeAllocationCreateSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    TradeAllocationCreateSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    TradeAllocationCreateSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    TradeAllocationCreateSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    TradeAllocationCreateSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    TradeAllocationCreateSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    TradeAllocationCreateSpecialInstructions["StockReward"] = "STOCK_REWARD";
    TradeAllocationCreateSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    TradeAllocationCreateSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    TradeAllocationCreateSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    TradeAllocationCreateSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(TradeAllocationCreateSpecialInstructions || (exports.TradeAllocationCreateSpecialInstructions = TradeAllocationCreateSpecialInstructions = {}));
/**
 * Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
 */
var ToSide;
(function (ToSide) {
    ToSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    ToSide["Buy"] = "BUY";
    ToSide["Sell"] = "SELL";
})(ToSide || (exports.ToSide = ToSide = {}));
/**
 * Denotes that this trade allocation was either when_issued or when_distributed.
 */
var TradeAllocationCreateWhenIssued;
(function (TradeAllocationCreateWhenIssued) {
    TradeAllocationCreateWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    TradeAllocationCreateWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    TradeAllocationCreateWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(TradeAllocationCreateWhenIssued || (exports.TradeAllocationCreateWhenIssued = TradeAllocationCreateWhenIssued = {}));
/** @internal */
exports.TradeAllocationCreateAssetType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationCreateAssetType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationCreateAssetType$;
(function (TradeAllocationCreateAssetType$) {
    /** @deprecated use `TradeAllocationCreateAssetType$inboundSchema` instead. */
    TradeAllocationCreateAssetType$.inboundSchema = exports.TradeAllocationCreateAssetType$inboundSchema;
    /** @deprecated use `TradeAllocationCreateAssetType$outboundSchema` instead. */
    TradeAllocationCreateAssetType$.outboundSchema = exports.TradeAllocationCreateAssetType$outboundSchema;
})(TradeAllocationCreateAssetType$ || (exports.TradeAllocationCreateAssetType$ = TradeAllocationCreateAssetType$ = {}));
/** @internal */
exports.TradeAllocationCreateBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationCreateBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationCreateBrokerCapacity$;
(function (TradeAllocationCreateBrokerCapacity$) {
    /** @deprecated use `TradeAllocationCreateBrokerCapacity$inboundSchema` instead. */
    TradeAllocationCreateBrokerCapacity$.inboundSchema = exports.TradeAllocationCreateBrokerCapacity$inboundSchema;
    /** @deprecated use `TradeAllocationCreateBrokerCapacity$outboundSchema` instead. */
    TradeAllocationCreateBrokerCapacity$.outboundSchema = exports.TradeAllocationCreateBrokerCapacity$outboundSchema;
})(TradeAllocationCreateBrokerCapacity$ || (exports.TradeAllocationCreateBrokerCapacity$ = TradeAllocationCreateBrokerCapacity$ = {}));
/** @internal */
exports.TradeAllocationCreateIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationCreateIdentifierType$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationCreateIdentifierType$;
(function (TradeAllocationCreateIdentifierType$) {
    /** @deprecated use `TradeAllocationCreateIdentifierType$inboundSchema` instead. */
    TradeAllocationCreateIdentifierType$.inboundSchema = exports.TradeAllocationCreateIdentifierType$inboundSchema;
    /** @deprecated use `TradeAllocationCreateIdentifierType$outboundSchema` instead. */
    TradeAllocationCreateIdentifierType$.outboundSchema = exports.TradeAllocationCreateIdentifierType$outboundSchema;
})(TradeAllocationCreateIdentifierType$ || (exports.TradeAllocationCreateIdentifierType$ = TradeAllocationCreateIdentifierType$ = {}));
/** @internal */
exports.TradeAllocationCreateSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateSideModifier),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationCreateSideModifier$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationCreateSideModifier$;
(function (TradeAllocationCreateSideModifier$) {
    /** @deprecated use `TradeAllocationCreateSideModifier$inboundSchema` instead. */
    TradeAllocationCreateSideModifier$.inboundSchema = exports.TradeAllocationCreateSideModifier$inboundSchema;
    /** @deprecated use `TradeAllocationCreateSideModifier$outboundSchema` instead. */
    TradeAllocationCreateSideModifier$.outboundSchema = exports.TradeAllocationCreateSideModifier$outboundSchema;
})(TradeAllocationCreateSideModifier$ || (exports.TradeAllocationCreateSideModifier$ = TradeAllocationCreateSideModifier$ = {}));
/** @internal */
exports.TradeAllocationCreateSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateSpecialInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationCreateSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationCreateSpecialInstructions$;
(function (TradeAllocationCreateSpecialInstructions$) {
    /** @deprecated use `TradeAllocationCreateSpecialInstructions$inboundSchema` instead. */
    TradeAllocationCreateSpecialInstructions$.inboundSchema = exports.TradeAllocationCreateSpecialInstructions$inboundSchema;
    /** @deprecated use `TradeAllocationCreateSpecialInstructions$outboundSchema` instead. */
    TradeAllocationCreateSpecialInstructions$.outboundSchema = exports.TradeAllocationCreateSpecialInstructions$outboundSchema;
})(TradeAllocationCreateSpecialInstructions$ || (exports.TradeAllocationCreateSpecialInstructions$ = TradeAllocationCreateSpecialInstructions$ = {}));
/** @internal */
exports.ToSide$inboundSchema = z
    .union([
    z.nativeEnum(ToSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ToSide$outboundSchema = z.union([
    z.nativeEnum(ToSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ToSide$;
(function (ToSide$) {
    /** @deprecated use `ToSide$inboundSchema` instead. */
    ToSide$.inboundSchema = exports.ToSide$inboundSchema;
    /** @deprecated use `ToSide$outboundSchema` instead. */
    ToSide$.outboundSchema = exports.ToSide$outboundSchema;
})(ToSide$ || (exports.ToSide$ = ToSide$ = {}));
/** @internal */
exports.TradeAllocationCreateWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(TradeAllocationCreateWhenIssued),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TradeAllocationCreateWhenIssued$outboundSchema = z.union([
    z.nativeEnum(TradeAllocationCreateWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationCreateWhenIssued$;
(function (TradeAllocationCreateWhenIssued$) {
    /** @deprecated use `TradeAllocationCreateWhenIssued$inboundSchema` instead. */
    TradeAllocationCreateWhenIssued$.inboundSchema = exports.TradeAllocationCreateWhenIssued$inboundSchema;
    /** @deprecated use `TradeAllocationCreateWhenIssued$outboundSchema` instead. */
    TradeAllocationCreateWhenIssued$.outboundSchema = exports.TradeAllocationCreateWhenIssued$outboundSchema;
})(TradeAllocationCreateWhenIssued$ || (exports.TradeAllocationCreateWhenIssued$ = TradeAllocationCreateWhenIssued$ = {}));
/** @internal */
exports.TradeAllocationCreate$inboundSchema = z.object({
    accrued_interest_amount: decimalcreate_js_1.DecimalCreate$inboundSchema.optional(),
    additional_instructions: z.string().optional(),
    asset_type: exports.TradeAllocationCreateAssetType$inboundSchema.optional(),
    bond_yield: z.array(bondyieldcreate_js_1.BondYieldCreate$inboundSchema).optional(),
    broker_capacity: exports.TradeAllocationCreateBrokerCapacity$inboundSchema,
    client_order_id: z.string().optional(),
    commission_amount: decimalcreate_js_1.DecimalCreate$inboundSchema.optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    fees: z.array(feecreate_js_1.FeeCreate$inboundSchema).optional(),
    from_account_id: z.string(),
    gross_amount: decimalcreate_js_1.DecimalCreate$inboundSchema.optional(),
    identifier: z.string(),
    identifier_type: exports.TradeAllocationCreateIdentifierType$inboundSchema,
    issuing_region_code: z.string().optional(),
    lot_matching_instructions: z.array(lotcreate_js_1.LotCreate$inboundSchema).optional(),
    memo: z.string().optional(),
    prevailing_market_price: decimalcreate_js_1.DecimalCreate$inboundSchema.optional(),
    price: decimalcreate_js_1.DecimalCreate$inboundSchema,
    price_adjustment: priceadjustmentcreate_js_1.PriceAdjustmentCreate$inboundSchema.optional(),
    quantity: decimalcreate_js_1.DecimalCreate$inboundSchema,
    settlement_date: datecreate_js_1.DateCreate$inboundSchema.optional(),
    side_modifier: exports.TradeAllocationCreateSideModifier$inboundSchema.optional(),
    source_application: z.string(),
    special_instructions: z.array(exports.TradeAllocationCreateSpecialInstructions$inboundSchema).optional(),
    to_account_id: z.string(),
    to_side: exports.ToSide$inboundSchema,
    when_issued: exports.TradeAllocationCreateWhenIssued$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "additional_instructions": "additionalInstructions",
        "asset_type": "assetType",
        "bond_yield": "bondYield",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "commission_amount": "commissionAmount",
        "execution_time": "executionTime",
        "from_account_id": "fromAccountId",
        "gross_amount": "grossAmount",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "lot_matching_instructions": "lotMatchingInstructions",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "to_account_id": "toAccountId",
        "to_side": "toSide",
        "when_issued": "whenIssued",
    });
});
/** @internal */
exports.TradeAllocationCreate$outboundSchema = z.object({
    accruedInterestAmount: decimalcreate_js_1.DecimalCreate$outboundSchema.optional(),
    additionalInstructions: z.string().optional(),
    assetType: exports.TradeAllocationCreateAssetType$outboundSchema.optional(),
    bondYield: z.array(bondyieldcreate_js_1.BondYieldCreate$outboundSchema).optional(),
    brokerCapacity: exports.TradeAllocationCreateBrokerCapacity$outboundSchema,
    clientOrderId: z.string().optional(),
    commissionAmount: decimalcreate_js_1.DecimalCreate$outboundSchema.optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString())),
    fees: z.array(feecreate_js_1.FeeCreate$outboundSchema).optional(),
    fromAccountId: z.string(),
    grossAmount: decimalcreate_js_1.DecimalCreate$outboundSchema.optional(),
    identifier: z.string(),
    identifierType: exports.TradeAllocationCreateIdentifierType$outboundSchema,
    issuingRegionCode: z.string().optional(),
    lotMatchingInstructions: z.array(lotcreate_js_1.LotCreate$outboundSchema).optional(),
    memo: z.string().optional(),
    prevailingMarketPrice: decimalcreate_js_1.DecimalCreate$outboundSchema.optional(),
    price: decimalcreate_js_1.DecimalCreate$outboundSchema,
    priceAdjustment: priceadjustmentcreate_js_1.PriceAdjustmentCreate$outboundSchema.optional(),
    quantity: decimalcreate_js_1.DecimalCreate$outboundSchema,
    settlementDate: datecreate_js_1.DateCreate$outboundSchema.optional(),
    sideModifier: exports.TradeAllocationCreateSideModifier$outboundSchema.optional(),
    sourceApplication: z.string(),
    specialInstructions: z.array(exports.TradeAllocationCreateSpecialInstructions$outboundSchema).optional(),
    toAccountId: z.string(),
    toSide: exports.ToSide$outboundSchema,
    whenIssued: exports.TradeAllocationCreateWhenIssued$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accruedInterestAmount: "accrued_interest_amount",
        additionalInstructions: "additional_instructions",
        assetType: "asset_type",
        bondYield: "bond_yield",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        commissionAmount: "commission_amount",
        executionTime: "execution_time",
        fromAccountId: "from_account_id",
        grossAmount: "gross_amount",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        lotMatchingInstructions: "lot_matching_instructions",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        toAccountId: "to_account_id",
        toSide: "to_side",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TradeAllocationCreate$;
(function (TradeAllocationCreate$) {
    /** @deprecated use `TradeAllocationCreate$inboundSchema` instead. */
    TradeAllocationCreate$.inboundSchema = exports.TradeAllocationCreate$inboundSchema;
    /** @deprecated use `TradeAllocationCreate$outboundSchema` instead. */
    TradeAllocationCreate$.outboundSchema = exports.TradeAllocationCreate$outboundSchema;
})(TradeAllocationCreate$ || (exports.TradeAllocationCreate$ = TradeAllocationCreate$ = {}));
//# sourceMappingURL=tradeallocationcreate.js.map