"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegalEntityUpdate$ = exports.LegalEntityUpdate$outboundSchema = exports.LegalEntityUpdate$inboundSchema = exports.LegalEntityUpdateTaxIdType$ = exports.LegalEntityUpdateTaxIdType$outboundSchema = exports.LegalEntityUpdateTaxIdType$inboundSchema = exports.LegalEntityUpdateExemptCustomerReason$ = exports.LegalEntityUpdateExemptCustomerReason$outboundSchema = exports.LegalEntityUpdateExemptCustomerReason$inboundSchema = exports.LegalEntityUpdateEntityType$ = exports.LegalEntityUpdateEntityType$outboundSchema = exports.LegalEntityUpdateEntityType$inboundSchema = exports.LegalEntityUpdateCorporateStructure$ = exports.LegalEntityUpdateCorporateStructure$outboundSchema = exports.LegalEntityUpdateCorporateStructure$inboundSchema = exports.LegalEntityUpdateBusinessIndustrialClassification$ = exports.LegalEntityUpdateBusinessIndustrialClassification$outboundSchema = exports.LegalEntityUpdateBusinessIndustrialClassification$inboundSchema = exports.LegalEntityUpdateTaxIdType = exports.LegalEntityUpdateExemptCustomerReason = exports.LegalEntityUpdateEntityType = exports.LegalEntityUpdateCorporateStructure = exports.LegalEntityUpdateBusinessIndustrialClassification = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const dateupdate_js_1 = require("./dateupdate.js");
const entityduediligenceupdate_js_1 = require("./entityduediligenceupdate.js");
const largetraderupdate_js_1 = require("./largetraderupdate.js");
const postaladdressupdate_js_1 = require("./postaladdressupdate.js");
const taxprofileupdate_js_1 = require("./taxprofileupdate.js");
var LegalEntityUpdateBusinessIndustrialClassification;
(function (LegalEntityUpdateBusinessIndustrialClassification) {
    LegalEntityUpdateBusinessIndustrialClassification["BusinessIndustrialClassificationUnspecified"] = "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED";
    LegalEntityUpdateBusinessIndustrialClassification["AgricultureForestryAndFishing"] = "AGRICULTURE_FORESTRY_AND_FISHING";
    LegalEntityUpdateBusinessIndustrialClassification["Mining"] = "MINING";
    LegalEntityUpdateBusinessIndustrialClassification["Construction"] = "CONSTRUCTION";
    LegalEntityUpdateBusinessIndustrialClassification["Manufacturing"] = "MANUFACTURING";
    LegalEntityUpdateBusinessIndustrialClassification["TransportationCommunicationsElectricGasAndSanitaryServices"] = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES";
    LegalEntityUpdateBusinessIndustrialClassification["WholesaleTrade"] = "WHOLESALE_TRADE";
    LegalEntityUpdateBusinessIndustrialClassification["RetailTrade"] = "RETAIL_TRADE";
    LegalEntityUpdateBusinessIndustrialClassification["FinanceInsuranceAndRealEstate"] = "FINANCE_INSURANCE_AND_REAL_ESTATE";
    LegalEntityUpdateBusinessIndustrialClassification["Services"] = "SERVICES";
    LegalEntityUpdateBusinessIndustrialClassification["PublicAdministration"] = "PUBLIC_ADMINISTRATION";
})(LegalEntityUpdateBusinessIndustrialClassification || (exports.LegalEntityUpdateBusinessIndustrialClassification = LegalEntityUpdateBusinessIndustrialClassification = {}));
/**
 * Corporate structure of the entity.
 */
var LegalEntityUpdateCorporateStructure;
(function (LegalEntityUpdateCorporateStructure) {
    LegalEntityUpdateCorporateStructure["EntityCorporateStructureUnspecified"] = "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED";
    LegalEntityUpdateCorporateStructure["CorporationCCorp"] = "CORPORATION_C_CORP";
    LegalEntityUpdateCorporateStructure["CorporationSCorp"] = "CORPORATION_S_CORP";
    LegalEntityUpdateCorporateStructure["CorporationBCorp"] = "CORPORATION_B_CORP";
    LegalEntityUpdateCorporateStructure["CorporationNonprofit"] = "CORPORATION_NONPROFIT";
})(LegalEntityUpdateCorporateStructure || (exports.LegalEntityUpdateCorporateStructure = LegalEntityUpdateCorporateStructure = {}));
/**
 * The entity type.
 */
var LegalEntityUpdateEntityType;
(function (LegalEntityUpdateEntityType) {
    LegalEntityUpdateEntityType["EntityTypeUnspecified"] = "ENTITY_TYPE_UNSPECIFIED";
    LegalEntityUpdateEntityType["Corporation"] = "CORPORATION";
    LegalEntityUpdateEntityType["LimitedLiabilityCompany"] = "LIMITED_LIABILITY_COMPANY";
    LegalEntityUpdateEntityType["Partnership"] = "PARTNERSHIP";
    LegalEntityUpdateEntityType["Trust"] = "TRUST";
    LegalEntityUpdateEntityType["Estate"] = "ESTATE";
})(LegalEntityUpdateEntityType || (exports.LegalEntityUpdateEntityType = LegalEntityUpdateEntityType = {}));
/**
 * The reason the customer is exempt from verifying beneficial owners, if applicable.
 */
var LegalEntityUpdateExemptCustomerReason;
(function (LegalEntityUpdateExemptCustomerReason) {
    LegalEntityUpdateExemptCustomerReason["ExemptReasonUnspecified"] = "EXEMPT_REASON_UNSPECIFIED";
    LegalEntityUpdateExemptCustomerReason["RegulatedFinancialInstitution"] = "REGULATED_FINANCIAL_INSTITUTION";
    LegalEntityUpdateExemptCustomerReason["DepartmentOrAgencyOfFederalStateOrSubdivision"] = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION";
    LegalEntityUpdateExemptCustomerReason["NonBankListedEntity"] = "NON_BANK_LISTED_ENTITY";
    LegalEntityUpdateExemptCustomerReason["Section12SecuritiesExchangeAct1934Or15D"] = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D";
    LegalEntityUpdateExemptCustomerReason["Section3InvestmentCompanyAct1940"] = "SECTION_3_INVESTMENT_COMPANY_ACT_1940";
    LegalEntityUpdateExemptCustomerReason["Section202AInvestmentAdvisorsAct1940"] = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940";
    LegalEntityUpdateExemptCustomerReason["Section3SecuritiesExchangeAct1934Section6Or17A"] = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A";
    LegalEntityUpdateExemptCustomerReason["AnyOtherSecuritiesExchangeAct1934"] = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934";
    LegalEntityUpdateExemptCustomerReason["CommodityFuturesTradingCommissionRegistered"] = "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED";
    LegalEntityUpdateExemptCustomerReason["PublicAccountingFirmSection102SarbanesOxley"] = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY";
    LegalEntityUpdateExemptCustomerReason["StateRegulatedInsuranceCompany"] = "STATE_REGULATED_INSURANCE_COMPANY";
})(LegalEntityUpdateExemptCustomerReason || (exports.LegalEntityUpdateExemptCustomerReason = LegalEntityUpdateExemptCustomerReason = {}));
/**
 * The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
 */
var LegalEntityUpdateTaxIdType;
(function (LegalEntityUpdateTaxIdType) {
    LegalEntityUpdateTaxIdType["TaxIdTypeUnspecified"] = "TAX_ID_TYPE_UNSPECIFIED";
    LegalEntityUpdateTaxIdType["TaxIdTypeSsn"] = "TAX_ID_TYPE_SSN";
    LegalEntityUpdateTaxIdType["TaxIdTypeItin"] = "TAX_ID_TYPE_ITIN";
    LegalEntityUpdateTaxIdType["TaxIdTypeEin"] = "TAX_ID_TYPE_EIN";
})(LegalEntityUpdateTaxIdType || (exports.LegalEntityUpdateTaxIdType = LegalEntityUpdateTaxIdType = {}));
/** @internal */
exports.LegalEntityUpdateBusinessIndustrialClassification$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityUpdateBusinessIndustrialClassification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityUpdateBusinessIndustrialClassification$outboundSchema = z.union([
    z.nativeEnum(LegalEntityUpdateBusinessIndustrialClassification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityUpdateBusinessIndustrialClassification$;
(function (LegalEntityUpdateBusinessIndustrialClassification$) {
    /** @deprecated use `LegalEntityUpdateBusinessIndustrialClassification$inboundSchema` instead. */
    LegalEntityUpdateBusinessIndustrialClassification$.inboundSchema = exports.LegalEntityUpdateBusinessIndustrialClassification$inboundSchema;
    /** @deprecated use `LegalEntityUpdateBusinessIndustrialClassification$outboundSchema` instead. */
    LegalEntityUpdateBusinessIndustrialClassification$.outboundSchema = exports.LegalEntityUpdateBusinessIndustrialClassification$outboundSchema;
})(LegalEntityUpdateBusinessIndustrialClassification$ || (exports.LegalEntityUpdateBusinessIndustrialClassification$ = LegalEntityUpdateBusinessIndustrialClassification$ = {}));
/** @internal */
exports.LegalEntityUpdateCorporateStructure$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityUpdateCorporateStructure),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityUpdateCorporateStructure$outboundSchema = z.union([
    z.nativeEnum(LegalEntityUpdateCorporateStructure),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityUpdateCorporateStructure$;
(function (LegalEntityUpdateCorporateStructure$) {
    /** @deprecated use `LegalEntityUpdateCorporateStructure$inboundSchema` instead. */
    LegalEntityUpdateCorporateStructure$.inboundSchema = exports.LegalEntityUpdateCorporateStructure$inboundSchema;
    /** @deprecated use `LegalEntityUpdateCorporateStructure$outboundSchema` instead. */
    LegalEntityUpdateCorporateStructure$.outboundSchema = exports.LegalEntityUpdateCorporateStructure$outboundSchema;
})(LegalEntityUpdateCorporateStructure$ || (exports.LegalEntityUpdateCorporateStructure$ = LegalEntityUpdateCorporateStructure$ = {}));
/** @internal */
exports.LegalEntityUpdateEntityType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityUpdateEntityType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityUpdateEntityType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityUpdateEntityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityUpdateEntityType$;
(function (LegalEntityUpdateEntityType$) {
    /** @deprecated use `LegalEntityUpdateEntityType$inboundSchema` instead. */
    LegalEntityUpdateEntityType$.inboundSchema = exports.LegalEntityUpdateEntityType$inboundSchema;
    /** @deprecated use `LegalEntityUpdateEntityType$outboundSchema` instead. */
    LegalEntityUpdateEntityType$.outboundSchema = exports.LegalEntityUpdateEntityType$outboundSchema;
})(LegalEntityUpdateEntityType$ || (exports.LegalEntityUpdateEntityType$ = LegalEntityUpdateEntityType$ = {}));
/** @internal */
exports.LegalEntityUpdateExemptCustomerReason$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityUpdateExemptCustomerReason),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityUpdateExemptCustomerReason$outboundSchema = z.union([
    z.nativeEnum(LegalEntityUpdateExemptCustomerReason),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityUpdateExemptCustomerReason$;
(function (LegalEntityUpdateExemptCustomerReason$) {
    /** @deprecated use `LegalEntityUpdateExemptCustomerReason$inboundSchema` instead. */
    LegalEntityUpdateExemptCustomerReason$.inboundSchema = exports.LegalEntityUpdateExemptCustomerReason$inboundSchema;
    /** @deprecated use `LegalEntityUpdateExemptCustomerReason$outboundSchema` instead. */
    LegalEntityUpdateExemptCustomerReason$.outboundSchema = exports.LegalEntityUpdateExemptCustomerReason$outboundSchema;
})(LegalEntityUpdateExemptCustomerReason$ || (exports.LegalEntityUpdateExemptCustomerReason$ = LegalEntityUpdateExemptCustomerReason$ = {}));
/** @internal */
exports.LegalEntityUpdateTaxIdType$inboundSchema = z
    .union([
    z.nativeEnum(LegalEntityUpdateTaxIdType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.LegalEntityUpdateTaxIdType$outboundSchema = z.union([
    z.nativeEnum(LegalEntityUpdateTaxIdType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityUpdateTaxIdType$;
(function (LegalEntityUpdateTaxIdType$) {
    /** @deprecated use `LegalEntityUpdateTaxIdType$inboundSchema` instead. */
    LegalEntityUpdateTaxIdType$.inboundSchema = exports.LegalEntityUpdateTaxIdType$inboundSchema;
    /** @deprecated use `LegalEntityUpdateTaxIdType$outboundSchema` instead. */
    LegalEntityUpdateTaxIdType$.outboundSchema = exports.LegalEntityUpdateTaxIdType$outboundSchema;
})(LegalEntityUpdateTaxIdType$ || (exports.LegalEntityUpdateTaxIdType$ = LegalEntityUpdateTaxIdType$ = {}));
/** @internal */
exports.LegalEntityUpdate$inboundSchema = z.object({
    accredited_investor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    broker_dealer: z.boolean().optional(),
    business_industrial_classification: exports.LegalEntityUpdateBusinessIndustrialClassification$inboundSchema.optional(),
    corporate_structure: exports.LegalEntityUpdateCorporateStructure$inboundSchema
        .optional(),
    correspondent_id: z.string().optional(),
    doing_business_as: z.array(z.string()).optional(),
    entity_due_diligence: entityduediligenceupdate_js_1.EntityDueDiligenceUpdate$inboundSchema.optional(),
    entity_name: z.string().optional(),
    entity_type: exports.LegalEntityUpdateEntityType$inboundSchema.optional(),
    exempt_customer_reason: exports.LegalEntityUpdateExemptCustomerReason$inboundSchema
        .optional(),
    exempt_verifying_beneficial_owners: z.boolean().optional(),
    for_the_benefit_of: z.string().optional(),
    foreign_financial_institution: z.boolean().optional(),
    formation_date: dateupdate_js_1.DateUpdate$inboundSchema.optional(),
    institutional_customer: z.boolean().optional(),
    large_trader: largetraderupdate_js_1.LargeTraderUpdate$inboundSchema.optional(),
    legal_address: postaladdressupdate_js_1.PostalAddressUpdate$inboundSchema.optional(),
    lei_code: z.string().optional(),
    operating_regions: z.array(z.string()).optional(),
    registration_region: z.string().optional(),
    regulated_investment_company: z.boolean().optional(),
    related_document_ids: z.array(z.string()).optional(),
    revocable_trust: z.boolean().optional(),
    subject_to_backup_withholding: z.boolean().optional(),
    tax_id: z.string().optional(),
    tax_id_type: exports.LegalEntityUpdateTaxIdType$inboundSchema.optional(),
    tax_profile: taxprofileupdate_js_1.TaxProfileUpdate$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accredited_investor": "accreditedInvestor",
        "broker_dealer": "brokerDealer",
        "business_industrial_classification": "businessIndustrialClassification",
        "corporate_structure": "corporateStructure",
        "correspondent_id": "correspondentId",
        "doing_business_as": "doingBusinessAs",
        "entity_due_diligence": "entityDueDiligence",
        "entity_name": "entityName",
        "entity_type": "entityType",
        "exempt_customer_reason": "exemptCustomerReason",
        "exempt_verifying_beneficial_owners": "exemptVerifyingBeneficialOwners",
        "for_the_benefit_of": "forTheBenefitOf",
        "foreign_financial_institution": "foreignFinancialInstitution",
        "formation_date": "formationDate",
        "institutional_customer": "institutionalCustomer",
        "large_trader": "largeTrader",
        "legal_address": "legalAddress",
        "lei_code": "leiCode",
        "operating_regions": "operatingRegions",
        "registration_region": "registrationRegion",
        "regulated_investment_company": "regulatedInvestmentCompany",
        "related_document_ids": "relatedDocumentIds",
        "revocable_trust": "revocableTrust",
        "subject_to_backup_withholding": "subjectToBackupWithholding",
        "tax_id": "taxId",
        "tax_id_type": "taxIdType",
        "tax_profile": "taxProfile",
    });
});
/** @internal */
exports.LegalEntityUpdate$outboundSchema = z.object({
    accreditedInvestor: z.boolean().optional(),
    adviser: z.boolean().optional(),
    brokerDealer: z.boolean().optional(),
    businessIndustrialClassification: exports.LegalEntityUpdateBusinessIndustrialClassification$outboundSchema.optional(),
    corporateStructure: exports.LegalEntityUpdateCorporateStructure$outboundSchema
        .optional(),
    correspondentId: z.string().optional(),
    doingBusinessAs: z.array(z.string()).optional(),
    entityDueDiligence: entityduediligenceupdate_js_1.EntityDueDiligenceUpdate$outboundSchema.optional(),
    entityName: z.string().optional(),
    entityType: exports.LegalEntityUpdateEntityType$outboundSchema.optional(),
    exemptCustomerReason: exports.LegalEntityUpdateExemptCustomerReason$outboundSchema
        .optional(),
    exemptVerifyingBeneficialOwners: z.boolean().optional(),
    forTheBenefitOf: z.string().optional(),
    foreignFinancialInstitution: z.boolean().optional(),
    formationDate: dateupdate_js_1.DateUpdate$outboundSchema.optional(),
    institutionalCustomer: z.boolean().optional(),
    largeTrader: largetraderupdate_js_1.LargeTraderUpdate$outboundSchema.optional(),
    legalAddress: postaladdressupdate_js_1.PostalAddressUpdate$outboundSchema.optional(),
    leiCode: z.string().optional(),
    operatingRegions: z.array(z.string()).optional(),
    registrationRegion: z.string().optional(),
    regulatedInvestmentCompany: z.boolean().optional(),
    relatedDocumentIds: z.array(z.string()).optional(),
    revocableTrust: z.boolean().optional(),
    subjectToBackupWithholding: z.boolean().optional(),
    taxId: z.string().optional(),
    taxIdType: exports.LegalEntityUpdateTaxIdType$outboundSchema.optional(),
    taxProfile: taxprofileupdate_js_1.TaxProfileUpdate$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accreditedInvestor: "accredited_investor",
        brokerDealer: "broker_dealer",
        businessIndustrialClassification: "business_industrial_classification",
        corporateStructure: "corporate_structure",
        correspondentId: "correspondent_id",
        doingBusinessAs: "doing_business_as",
        entityDueDiligence: "entity_due_diligence",
        entityName: "entity_name",
        entityType: "entity_type",
        exemptCustomerReason: "exempt_customer_reason",
        exemptVerifyingBeneficialOwners: "exempt_verifying_beneficial_owners",
        forTheBenefitOf: "for_the_benefit_of",
        foreignFinancialInstitution: "foreign_financial_institution",
        formationDate: "formation_date",
        institutionalCustomer: "institutional_customer",
        largeTrader: "large_trader",
        legalAddress: "legal_address",
        leiCode: "lei_code",
        operatingRegions: "operating_regions",
        registrationRegion: "registration_region",
        regulatedInvestmentCompany: "regulated_investment_company",
        relatedDocumentIds: "related_document_ids",
        revocableTrust: "revocable_trust",
        subjectToBackupWithholding: "subject_to_backup_withholding",
        taxId: "tax_id",
        taxIdType: "tax_id_type",
        taxProfile: "tax_profile",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LegalEntityUpdate$;
(function (LegalEntityUpdate$) {
    /** @deprecated use `LegalEntityUpdate$inboundSchema` instead. */
    LegalEntityUpdate$.inboundSchema = exports.LegalEntityUpdate$inboundSchema;
    /** @deprecated use `LegalEntityUpdate$outboundSchema` instead. */
    LegalEntityUpdate$.outboundSchema = exports.LegalEntityUpdate$outboundSchema;
})(LegalEntityUpdate$ || (exports.LegalEntityUpdate$ = LegalEntityUpdate$ = {}));
//# sourceMappingURL=legalentityupdate.js.map