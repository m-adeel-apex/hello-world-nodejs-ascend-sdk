"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalculateCashBalanceResponse$ = exports.CalculateCashBalanceResponse$outboundSchema = exports.CalculateCashBalanceResponse$inboundSchema = exports.WithheldDepositThresholdAmount$ = exports.WithheldDepositThresholdAmount$outboundSchema = exports.WithheldDepositThresholdAmount$inboundSchema = exports.UnadjustedAvailableCashToWithdrawAmount$ = exports.UnadjustedAvailableCashToWithdrawAmount$outboundSchema = exports.UnadjustedAvailableCashToWithdrawAmount$inboundSchema = exports.PendingDebitInterestAmount$ = exports.PendingDebitInterestAmount$outboundSchema = exports.PendingDebitInterestAmount$inboundSchema = exports.PendingDebitDividendsAmount$ = exports.PendingDebitDividendsAmount$outboundSchema = exports.PendingDebitDividendsAmount$inboundSchema = exports.OpenLiquidityAmount$ = exports.OpenLiquidityAmount$outboundSchema = exports.OpenLiquidityAmount$inboundSchema = exports.OpenBalanceAmount$ = exports.OpenBalanceAmount$outboundSchema = exports.OpenBalanceAmount$inboundSchema = exports.FullyPaidUnsettledFundsAmount$ = exports.FullyPaidUnsettledFundsAmount$outboundSchema = exports.FullyPaidUnsettledFundsAmount$inboundSchema = exports.AvailableLiquidityAmount$ = exports.AvailableLiquidityAmount$outboundSchema = exports.AvailableLiquidityAmount$inboundSchema = exports.AvailableCashToWithdrawAmount$ = exports.AvailableCashToWithdrawAmount$outboundSchema = exports.AvailableCashToWithdrawAmount$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const calculatecashbalanceresponseopenordersummary_js_1 = require("./calculatecashbalanceresponseopenordersummary.js");
const calculatecashbalanceresponsetradesummary_js_1 = require("./calculatecashbalanceresponsetradesummary.js");
const calculatecashbalanceresponsetransfersummary_js_1 = require("./calculatecashbalanceresponsetransfersummary.js");
/** @internal */
exports.AvailableCashToWithdrawAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.AvailableCashToWithdrawAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AvailableCashToWithdrawAmount$;
(function (AvailableCashToWithdrawAmount$) {
    /** @deprecated use `AvailableCashToWithdrawAmount$inboundSchema` instead. */
    AvailableCashToWithdrawAmount$.inboundSchema = exports.AvailableCashToWithdrawAmount$inboundSchema;
    /** @deprecated use `AvailableCashToWithdrawAmount$outboundSchema` instead. */
    AvailableCashToWithdrawAmount$.outboundSchema = exports.AvailableCashToWithdrawAmount$outboundSchema;
})(AvailableCashToWithdrawAmount$ || (exports.AvailableCashToWithdrawAmount$ = AvailableCashToWithdrawAmount$ = {}));
/** @internal */
exports.AvailableLiquidityAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.AvailableLiquidityAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AvailableLiquidityAmount$;
(function (AvailableLiquidityAmount$) {
    /** @deprecated use `AvailableLiquidityAmount$inboundSchema` instead. */
    AvailableLiquidityAmount$.inboundSchema = exports.AvailableLiquidityAmount$inboundSchema;
    /** @deprecated use `AvailableLiquidityAmount$outboundSchema` instead. */
    AvailableLiquidityAmount$.outboundSchema = exports.AvailableLiquidityAmount$outboundSchema;
})(AvailableLiquidityAmount$ || (exports.AvailableLiquidityAmount$ = AvailableLiquidityAmount$ = {}));
/** @internal */
exports.FullyPaidUnsettledFundsAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.FullyPaidUnsettledFundsAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FullyPaidUnsettledFundsAmount$;
(function (FullyPaidUnsettledFundsAmount$) {
    /** @deprecated use `FullyPaidUnsettledFundsAmount$inboundSchema` instead. */
    FullyPaidUnsettledFundsAmount$.inboundSchema = exports.FullyPaidUnsettledFundsAmount$inboundSchema;
    /** @deprecated use `FullyPaidUnsettledFundsAmount$outboundSchema` instead. */
    FullyPaidUnsettledFundsAmount$.outboundSchema = exports.FullyPaidUnsettledFundsAmount$outboundSchema;
})(FullyPaidUnsettledFundsAmount$ || (exports.FullyPaidUnsettledFundsAmount$ = FullyPaidUnsettledFundsAmount$ = {}));
/** @internal */
exports.OpenBalanceAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OpenBalanceAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OpenBalanceAmount$;
(function (OpenBalanceAmount$) {
    /** @deprecated use `OpenBalanceAmount$inboundSchema` instead. */
    OpenBalanceAmount$.inboundSchema = exports.OpenBalanceAmount$inboundSchema;
    /** @deprecated use `OpenBalanceAmount$outboundSchema` instead. */
    OpenBalanceAmount$.outboundSchema = exports.OpenBalanceAmount$outboundSchema;
})(OpenBalanceAmount$ || (exports.OpenBalanceAmount$ = OpenBalanceAmount$ = {}));
/** @internal */
exports.OpenLiquidityAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.OpenLiquidityAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OpenLiquidityAmount$;
(function (OpenLiquidityAmount$) {
    /** @deprecated use `OpenLiquidityAmount$inboundSchema` instead. */
    OpenLiquidityAmount$.inboundSchema = exports.OpenLiquidityAmount$inboundSchema;
    /** @deprecated use `OpenLiquidityAmount$outboundSchema` instead. */
    OpenLiquidityAmount$.outboundSchema = exports.OpenLiquidityAmount$outboundSchema;
})(OpenLiquidityAmount$ || (exports.OpenLiquidityAmount$ = OpenLiquidityAmount$ = {}));
/** @internal */
exports.PendingDebitDividendsAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.PendingDebitDividendsAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PendingDebitDividendsAmount$;
(function (PendingDebitDividendsAmount$) {
    /** @deprecated use `PendingDebitDividendsAmount$inboundSchema` instead. */
    PendingDebitDividendsAmount$.inboundSchema = exports.PendingDebitDividendsAmount$inboundSchema;
    /** @deprecated use `PendingDebitDividendsAmount$outboundSchema` instead. */
    PendingDebitDividendsAmount$.outboundSchema = exports.PendingDebitDividendsAmount$outboundSchema;
})(PendingDebitDividendsAmount$ || (exports.PendingDebitDividendsAmount$ = PendingDebitDividendsAmount$ = {}));
/** @internal */
exports.PendingDebitInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.PendingDebitInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PendingDebitInterestAmount$;
(function (PendingDebitInterestAmount$) {
    /** @deprecated use `PendingDebitInterestAmount$inboundSchema` instead. */
    PendingDebitInterestAmount$.inboundSchema = exports.PendingDebitInterestAmount$inboundSchema;
    /** @deprecated use `PendingDebitInterestAmount$outboundSchema` instead. */
    PendingDebitInterestAmount$.outboundSchema = exports.PendingDebitInterestAmount$outboundSchema;
})(PendingDebitInterestAmount$ || (exports.PendingDebitInterestAmount$ = PendingDebitInterestAmount$ = {}));
/** @internal */
exports.UnadjustedAvailableCashToWithdrawAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.UnadjustedAvailableCashToWithdrawAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UnadjustedAvailableCashToWithdrawAmount$;
(function (UnadjustedAvailableCashToWithdrawAmount$) {
    /** @deprecated use `UnadjustedAvailableCashToWithdrawAmount$inboundSchema` instead. */
    UnadjustedAvailableCashToWithdrawAmount$.inboundSchema = exports.UnadjustedAvailableCashToWithdrawAmount$inboundSchema;
    /** @deprecated use `UnadjustedAvailableCashToWithdrawAmount$outboundSchema` instead. */
    UnadjustedAvailableCashToWithdrawAmount$.outboundSchema = exports.UnadjustedAvailableCashToWithdrawAmount$outboundSchema;
})(UnadjustedAvailableCashToWithdrawAmount$ || (exports.UnadjustedAvailableCashToWithdrawAmount$ = UnadjustedAvailableCashToWithdrawAmount$ = {}));
/** @internal */
exports.WithheldDepositThresholdAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.WithheldDepositThresholdAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithheldDepositThresholdAmount$;
(function (WithheldDepositThresholdAmount$) {
    /** @deprecated use `WithheldDepositThresholdAmount$inboundSchema` instead. */
    WithheldDepositThresholdAmount$.inboundSchema = exports.WithheldDepositThresholdAmount$inboundSchema;
    /** @deprecated use `WithheldDepositThresholdAmount$outboundSchema` instead. */
    WithheldDepositThresholdAmount$.outboundSchema = exports.WithheldDepositThresholdAmount$outboundSchema;
})(WithheldDepositThresholdAmount$ || (exports.WithheldDepositThresholdAmount$ = WithheldDepositThresholdAmount$ = {}));
/** @internal */
exports.CalculateCashBalanceResponse$inboundSchema = z.object({
    account: z.string().optional(),
    available_cash_to_withdraw_amount: z.nullable(z.lazy(() => exports.AvailableCashToWithdrawAmount$inboundSchema)).optional(),
    available_liquidity_amount: z.nullable(z.lazy(() => exports.AvailableLiquidityAmount$inboundSchema)).optional(),
    fully_paid_unsettled_funds_amount: z.nullable(z.lazy(() => exports.FullyPaidUnsettledFundsAmount$inboundSchema)).optional(),
    include_fully_paid_unsettled_funds: z.boolean().optional(),
    intraday_buy_trades: z.array(calculatecashbalanceresponsetradesummary_js_1.CalculateCashBalanceResponseTradeSummary$inboundSchema).optional(),
    intraday_deposits: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
    intraday_returns: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
    intraday_withdrawals: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
    open_balance_amount: z.nullable(z.lazy(() => exports.OpenBalanceAmount$inboundSchema))
        .optional(),
    open_buy_orders: z.array(calculatecashbalanceresponseopenordersummary_js_1.CalculateCashBalanceResponseOpenOrderSummary$inboundSchema).optional(),
    open_liquidity_amount: z.nullable(z.lazy(() => exports.OpenLiquidityAmount$inboundSchema)).optional(),
    pending_debit_dividends_amount: z.nullable(z.lazy(() => exports.PendingDebitDividendsAmount$inboundSchema)).optional(),
    pending_debit_interest_amount: z.nullable(z.lazy(() => exports.PendingDebitInterestAmount$inboundSchema)).optional(),
    pending_withdrawals: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
    unadjusted_available_cash_to_withdraw_amount: z.nullable(z.lazy(() => exports.UnadjustedAvailableCashToWithdrawAmount$inboundSchema)).optional(),
    withheld_deposit_threshold_amount: z.nullable(z.lazy(() => exports.WithheldDepositThresholdAmount$inboundSchema)).optional(),
    withheld_deposits: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "available_cash_to_withdraw_amount": "availableCashToWithdrawAmount",
        "available_liquidity_amount": "availableLiquidityAmount",
        "fully_paid_unsettled_funds_amount": "fullyPaidUnsettledFundsAmount",
        "include_fully_paid_unsettled_funds": "includeFullyPaidUnsettledFunds",
        "intraday_buy_trades": "intradayBuyTrades",
        "intraday_deposits": "intradayDeposits",
        "intraday_returns": "intradayReturns",
        "intraday_withdrawals": "intradayWithdrawals",
        "open_balance_amount": "openBalanceAmount",
        "open_buy_orders": "openBuyOrders",
        "open_liquidity_amount": "openLiquidityAmount",
        "pending_debit_dividends_amount": "pendingDebitDividendsAmount",
        "pending_debit_interest_amount": "pendingDebitInterestAmount",
        "pending_withdrawals": "pendingWithdrawals",
        "unadjusted_available_cash_to_withdraw_amount": "unadjustedAvailableCashToWithdrawAmount",
        "withheld_deposit_threshold_amount": "withheldDepositThresholdAmount",
        "withheld_deposits": "withheldDeposits",
    });
});
/** @internal */
exports.CalculateCashBalanceResponse$outboundSchema = z.object({
    account: z.string().optional(),
    availableCashToWithdrawAmount: z.nullable(z.lazy(() => exports.AvailableCashToWithdrawAmount$outboundSchema)).optional(),
    availableLiquidityAmount: z.nullable(z.lazy(() => exports.AvailableLiquidityAmount$outboundSchema)).optional(),
    fullyPaidUnsettledFundsAmount: z.nullable(z.lazy(() => exports.FullyPaidUnsettledFundsAmount$outboundSchema)).optional(),
    includeFullyPaidUnsettledFunds: z.boolean().optional(),
    intradayBuyTrades: z.array(calculatecashbalanceresponsetradesummary_js_1.CalculateCashBalanceResponseTradeSummary$outboundSchema).optional(),
    intradayDeposits: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
    intradayReturns: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
    intradayWithdrawals: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
    openBalanceAmount: z.nullable(z.lazy(() => exports.OpenBalanceAmount$outboundSchema))
        .optional(),
    openBuyOrders: z.array(calculatecashbalanceresponseopenordersummary_js_1.CalculateCashBalanceResponseOpenOrderSummary$outboundSchema).optional(),
    openLiquidityAmount: z.nullable(z.lazy(() => exports.OpenLiquidityAmount$outboundSchema)).optional(),
    pendingDebitDividendsAmount: z.nullable(z.lazy(() => exports.PendingDebitDividendsAmount$outboundSchema)).optional(),
    pendingDebitInterestAmount: z.nullable(z.lazy(() => exports.PendingDebitInterestAmount$outboundSchema)).optional(),
    pendingWithdrawals: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
    unadjustedAvailableCashToWithdrawAmount: z.nullable(z.lazy(() => exports.UnadjustedAvailableCashToWithdrawAmount$outboundSchema)).optional(),
    withheldDepositThresholdAmount: z.nullable(z.lazy(() => exports.WithheldDepositThresholdAmount$outboundSchema)).optional(),
    withheldDeposits: z.array(calculatecashbalanceresponsetransfersummary_js_1.CalculateCashBalanceResponseTransferSummary$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        availableCashToWithdrawAmount: "available_cash_to_withdraw_amount",
        availableLiquidityAmount: "available_liquidity_amount",
        fullyPaidUnsettledFundsAmount: "fully_paid_unsettled_funds_amount",
        includeFullyPaidUnsettledFunds: "include_fully_paid_unsettled_funds",
        intradayBuyTrades: "intraday_buy_trades",
        intradayDeposits: "intraday_deposits",
        intradayReturns: "intraday_returns",
        intradayWithdrawals: "intraday_withdrawals",
        openBalanceAmount: "open_balance_amount",
        openBuyOrders: "open_buy_orders",
        openLiquidityAmount: "open_liquidity_amount",
        pendingDebitDividendsAmount: "pending_debit_dividends_amount",
        pendingDebitInterestAmount: "pending_debit_interest_amount",
        pendingWithdrawals: "pending_withdrawals",
        unadjustedAvailableCashToWithdrawAmount: "unadjusted_available_cash_to_withdraw_amount",
        withheldDepositThresholdAmount: "withheld_deposit_threshold_amount",
        withheldDeposits: "withheld_deposits",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CalculateCashBalanceResponse$;
(function (CalculateCashBalanceResponse$) {
    /** @deprecated use `CalculateCashBalanceResponse$inboundSchema` instead. */
    CalculateCashBalanceResponse$.inboundSchema = exports.CalculateCashBalanceResponse$inboundSchema;
    /** @deprecated use `CalculateCashBalanceResponse$outboundSchema` instead. */
    CalculateCashBalanceResponse$.outboundSchema = exports.CalculateCashBalanceResponse$outboundSchema;
})(CalculateCashBalanceResponse$ || (exports.CalculateCashBalanceResponse$ = CalculateCashBalanceResponse$ = {}));
//# sourceMappingURL=calculatecashbalanceresponse.js.map