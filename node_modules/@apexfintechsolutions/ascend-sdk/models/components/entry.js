"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Method$outboundSchema = exports.Method$inboundSchema = exports.Action$ = exports.Action$outboundSchema = exports.Action$inboundSchema = exports.AccountMemo$ = exports.AccountMemo$outboundSchema = exports.AccountMemo$inboundSchema = exports.AcatsPendingOut$ = exports.AcatsPendingOut$outboundSchema = exports.AcatsPendingOut$inboundSchema = exports.EntryWithholdingType = exports.EntryWithholdingState = exports.Review = exports.EntryWithdrawalType = exports.RetirementType = exports.DistributionType = exports.EntryType = exports.EntryTransferType = exports.EntryPriceAdjustmentType = exports.EntryBrokerCapacity = exports.EntrySweepType = exports.EntrySweepAction = exports.EntryState = exports.EntrySideModifier = exports.EntrySide = exports.EntryReverseStockSplitAction = exports.EntryRedemptionPartialAction = exports.EntryRedemptionFullSubtype = exports.EntryRedemptionFullAction = exports.EntryNameChangeAction = exports.EntryMergerType = exports.EntryMergerAction = exports.EntrySubtype = exports.EntryLiquidationAction = exports.InterestType = exports.EntryFpslAction = exports.EntryFlipPriceAdjustmentType = exports.EntryFlipBrokerCapacity = exports.EntryFeeType = exports.EntryExchangeType = exports.EntryAction = exports.EntryDepositType = exports.ContributionType = exports.CreditType = exports.EntryConversionType = exports.Subtype = exports.Method = exports.Action = exports.AccountMemo = void 0;
exports.EntryCashDividendQuantity$inboundSchema = exports.EntryPaymentDate$ = exports.EntryPaymentDate$outboundSchema = exports.EntryPaymentDate$inboundSchema = exports.EntryFree$ = exports.EntryFree$outboundSchema = exports.EntryFree$inboundSchema = exports.EntryFpsl$ = exports.EntryFpsl$outboundSchema = exports.EntryFpsl$inboundSchema = exports.EntryCashDividendCorporateActionGeneralInformation$ = exports.EntryCashDividendCorporateActionGeneralInformation$outboundSchema = exports.EntryCashDividendCorporateActionGeneralInformation$inboundSchema = exports.EntryCashRate$ = exports.EntryCashRate$outboundSchema = exports.EntryCashRate$inboundSchema = exports.CapitalGains$ = exports.CapitalGains$outboundSchema = exports.CapitalGains$inboundSchema = exports.RecordDate$ = exports.RecordDate$outboundSchema = exports.RecordDate$inboundSchema = exports.EntryCapitalGainsQuantity$ = exports.EntryCapitalGainsQuantity$outboundSchema = exports.EntryCapitalGainsQuantity$inboundSchema = exports.PaymentDate$ = exports.PaymentDate$outboundSchema = exports.PaymentDate$inboundSchema = exports.EntryCorporateActionGeneralInformation$ = exports.EntryCorporateActionGeneralInformation$outboundSchema = exports.EntryCorporateActionGeneralInformation$inboundSchema = exports.CashRate$ = exports.CashRate$outboundSchema = exports.CashRate$inboundSchema = exports.ActivityDate$ = exports.ActivityDate$outboundSchema = exports.ActivityDate$inboundSchema = exports.Acquisition$ = exports.Acquisition$outboundSchema = exports.Acquisition$inboundSchema = exports.CorporateActionGeneralInformation$ = exports.CorporateActionGeneralInformation$outboundSchema = exports.CorporateActionGeneralInformation$inboundSchema = exports.EntryAccruedInterest$ = exports.EntryAccruedInterest$outboundSchema = exports.EntryAccruedInterest$inboundSchema = exports.AccountTransfer$ = exports.AccountTransfer$outboundSchema = exports.AccountTransfer$inboundSchema = exports.Method$ = void 0;
exports.ContributionType$ = exports.ContributionType$outboundSchema = exports.ContributionType$inboundSchema = exports.Delivery$ = exports.Delivery$outboundSchema = exports.Delivery$inboundSchema = exports.EntryDeliveryCorporateActionGeneralInformation$ = exports.EntryDeliveryCorporateActionGeneralInformation$outboundSchema = exports.EntryDeliveryCorporateActionGeneralInformation$inboundSchema = exports.Credit$ = exports.Credit$outboundSchema = exports.Credit$inboundSchema = exports.CreditType$ = exports.CreditType$outboundSchema = exports.CreditType$inboundSchema = exports.CorporateActionMemoAdjustment$ = exports.CorporateActionMemoAdjustment$outboundSchema = exports.CorporateActionMemoAdjustment$inboundSchema = exports.Conversion$ = exports.Conversion$outboundSchema = exports.Conversion$inboundSchema = exports.EntryConversionType$ = exports.EntryConversionType$outboundSchema = exports.EntryConversionType$inboundSchema = exports.StockRate$ = exports.StockRate$outboundSchema = exports.StockRate$inboundSchema = exports.EntryConversionCorporateActionGeneralInformation$ = exports.EntryConversionCorporateActionGeneralInformation$outboundSchema = exports.EntryConversionCorporateActionGeneralInformation$inboundSchema = exports.EntryConversionCashRate$ = exports.EntryConversionCashRate$outboundSchema = exports.EntryConversionCashRate$inboundSchema = exports.EntryCommission$ = exports.EntryCommission$outboundSchema = exports.EntryCommission$inboundSchema = exports.CashDividend$ = exports.CashDividend$outboundSchema = exports.CashDividend$inboundSchema = exports.Subtype$ = exports.Subtype$outboundSchema = exports.Subtype$inboundSchema = exports.EntryCashDividendSettled$ = exports.EntryCashDividendSettled$outboundSchema = exports.EntryCashDividendSettled$inboundSchema = exports.EntryRecordDate$ = exports.EntryRecordDate$outboundSchema = exports.EntryRecordDate$inboundSchema = exports.EntryCashDividendQuantity$ = exports.EntryCashDividendQuantity$outboundSchema = void 0;
exports.EntryFlipPriceAdjustmentRecord$outboundSchema = exports.EntryFlipPriceAdjustmentRecord$inboundSchema = exports.EntryFlipPriceAdjustmentType$ = exports.EntryFlipPriceAdjustmentType$outboundSchema = exports.EntryFlipPriceAdjustmentType$inboundSchema = exports.EntryFlipPriceAdjustmentPercent$ = exports.EntryFlipPriceAdjustmentPercent$outboundSchema = exports.EntryFlipPriceAdjustmentPercent$inboundSchema = exports.EntryFlipPriceAdjustmentAmount$ = exports.EntryFlipPriceAdjustmentAmount$outboundSchema = exports.EntryFlipPriceAdjustmentAmount$inboundSchema = exports.EntryFlipPrevailingMarketPrice$ = exports.EntryFlipPrevailingMarketPrice$outboundSchema = exports.EntryFlipPrevailingMarketPrice$inboundSchema = exports.EntryFlipBrokerCapacity$ = exports.EntryFlipBrokerCapacity$outboundSchema = exports.EntryFlipBrokerCapacity$inboundSchema = exports.EntryFee$ = exports.EntryFee$outboundSchema = exports.EntryFee$inboundSchema = exports.EntryFeeType$ = exports.EntryFeeType$outboundSchema = exports.EntryFeeType$inboundSchema = exports.Exchange$ = exports.Exchange$outboundSchema = exports.Exchange$inboundSchema = exports.EntryExchangeType$ = exports.EntryExchangeType$outboundSchema = exports.EntryExchangeType$inboundSchema = exports.EntryStockRate$ = exports.EntryStockRate$outboundSchema = exports.EntryStockRate$inboundSchema = exports.EntryExchangeCorporateActionGeneralInformation$ = exports.EntryExchangeCorporateActionGeneralInformation$outboundSchema = exports.EntryExchangeCorporateActionGeneralInformation$inboundSchema = exports.EntryExchangeCashRate$ = exports.EntryExchangeCashRate$outboundSchema = exports.EntryExchangeCashRate$inboundSchema = exports.Drip$ = exports.Drip$outboundSchema = exports.Drip$inboundSchema = exports.EntryAction$ = exports.EntryAction$outboundSchema = exports.EntryAction$inboundSchema = exports.Deposit$ = exports.Deposit$outboundSchema = exports.Deposit$inboundSchema = exports.EntryDepositType$ = exports.EntryDepositType$outboundSchema = exports.EntryDepositType$inboundSchema = void 0;
exports.EntryLiquidationCashRate$inboundSchema = exports.EntryLiquidationAction$ = exports.EntryLiquidationAction$outboundSchema = exports.EntryLiquidationAction$inboundSchema = exports.InterestPayment$ = exports.InterestPayment$outboundSchema = exports.InterestPayment$inboundSchema = exports.EntrySettled$ = exports.EntrySettled$outboundSchema = exports.EntrySettled$inboundSchema = exports.EntryInterestPaymentRecordDate$ = exports.EntryInterestPaymentRecordDate$outboundSchema = exports.EntryInterestPaymentRecordDate$inboundSchema = exports.EntryInterestPaymentPaymentDate$ = exports.EntryInterestPaymentPaymentDate$outboundSchema = exports.EntryInterestPaymentPaymentDate$inboundSchema = exports.EntryInterestPaymentCorporateActionGeneralInformation$ = exports.EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema = exports.EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema = exports.EntryInterestPaymentCashRate$ = exports.EntryInterestPaymentCashRate$outboundSchema = exports.EntryInterestPaymentCashRate$inboundSchema = exports.Interest$ = exports.Interest$outboundSchema = exports.Interest$inboundSchema = exports.InterestType$ = exports.InterestType$outboundSchema = exports.InterestType$inboundSchema = exports.InterestAccrualStartDate$ = exports.InterestAccrualStartDate$outboundSchema = exports.InterestAccrualStartDate$inboundSchema = exports.InterestAccrualEndDate$ = exports.InterestAccrualEndDate$outboundSchema = exports.InterestAccrualEndDate$inboundSchema = exports.EntryGrossAmount$ = exports.EntryGrossAmount$outboundSchema = exports.EntryGrossAmount$inboundSchema = exports.Fpsl$ = exports.Fpsl$outboundSchema = exports.Fpsl$inboundSchema = exports.EntryFpslAction$ = exports.EntryFpslAction$outboundSchema = exports.EntryFpslAction$inboundSchema = exports.Flip$ = exports.Flip$outboundSchema = exports.Flip$inboundSchema = exports.Detail$ = exports.Detail$outboundSchema = exports.Detail$inboundSchema = exports.EntryFlipPriceAdjustmentRecord$ = void 0;
exports.EntryMergerCorporateActionGeneralInformation$ = exports.EntryMergerCorporateActionGeneralInformation$outboundSchema = exports.EntryMergerCorporateActionGeneralInformation$inboundSchema = exports.EntryMergerCashRate$ = exports.EntryMergerCashRate$outboundSchema = exports.EntryMergerCashRate$inboundSchema = exports.EntryMergerAction$ = exports.EntryMergerAction$outboundSchema = exports.EntryMergerAction$inboundSchema = exports.Maturity$ = exports.Maturity$outboundSchema = exports.Maturity$inboundSchema = exports.EntryMaturityQuantity$ = exports.EntryMaturityQuantity$outboundSchema = exports.EntryMaturityQuantity$inboundSchema = exports.EntryMaturityPaymentDate$ = exports.EntryMaturityPaymentDate$outboundSchema = exports.EntryMaturityPaymentDate$inboundSchema = exports.EntryMaturityCorporateActionGeneralInformation$ = exports.EntryMaturityCorporateActionGeneralInformation$outboundSchema = exports.EntryMaturityCorporateActionGeneralInformation$inboundSchema = exports.EntryMaturityCashRate$ = exports.EntryMaturityCashRate$outboundSchema = exports.EntryMaturityCashRate$inboundSchema = exports.Liquidation$ = exports.Liquidation$outboundSchema = exports.Liquidation$inboundSchema = exports.EntrySubtype$ = exports.EntrySubtype$outboundSchema = exports.EntrySubtype$inboundSchema = exports.EntryLiquidationSettled$ = exports.EntryLiquidationSettled$outboundSchema = exports.EntryLiquidationSettled$inboundSchema = exports.EntryLiquidationRecordDate$ = exports.EntryLiquidationRecordDate$outboundSchema = exports.EntryLiquidationRecordDate$inboundSchema = exports.EntryLiquidationQuantity$ = exports.EntryLiquidationQuantity$outboundSchema = exports.EntryLiquidationQuantity$inboundSchema = exports.EntryLiquidationPaymentDate$ = exports.EntryLiquidationPaymentDate$outboundSchema = exports.EntryLiquidationPaymentDate$inboundSchema = exports.EntryEffectiveDate$ = exports.EntryEffectiveDate$outboundSchema = exports.EntryEffectiveDate$inboundSchema = exports.EntryLiquidationCorporateActionGeneralInformation$ = exports.EntryLiquidationCorporateActionGeneralInformation$outboundSchema = exports.EntryLiquidationCorporateActionGeneralInformation$inboundSchema = exports.EntryLiquidationCashRate$ = exports.EntryLiquidationCashRate$outboundSchema = void 0;
exports.PaymentInKind$outboundSchema = exports.PaymentInKind$inboundSchema = exports.EntryPaymentInKindStockRate$ = exports.EntryPaymentInKindStockRate$outboundSchema = exports.EntryPaymentInKindStockRate$inboundSchema = exports.EntryPaymentInKindSettled$ = exports.EntryPaymentInKindSettled$outboundSchema = exports.EntryPaymentInKindSettled$inboundSchema = exports.EntryPaymentInKindRecordDate$ = exports.EntryPaymentInKindRecordDate$outboundSchema = exports.EntryPaymentInKindRecordDate$inboundSchema = exports.EntryPaymentInKindPaymentDate$ = exports.EntryPaymentInKindPaymentDate$outboundSchema = exports.EntryPaymentInKindPaymentDate$inboundSchema = exports.EntryPaymentInKindCorporateActionGeneralInformation$ = exports.EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema = exports.EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema = exports.OriginalProcessDate$ = exports.OriginalProcessDate$outboundSchema = exports.OriginalProcessDate$inboundSchema = exports.NameChange$ = exports.NameChange$outboundSchema = exports.NameChange$inboundSchema = exports.EntryNameChangeQuantity$ = exports.EntryNameChangeQuantity$outboundSchema = exports.EntryNameChangeQuantity$inboundSchema = exports.EntryNameChangeEffectiveDate$ = exports.EntryNameChangeEffectiveDate$outboundSchema = exports.EntryNameChangeEffectiveDate$inboundSchema = exports.EntryNameChangeCorporateActionGeneralInformation$ = exports.EntryNameChangeCorporateActionGeneralInformation$outboundSchema = exports.EntryNameChangeCorporateActionGeneralInformation$inboundSchema = exports.EntryNameChangeAction$ = exports.EntryNameChangeAction$outboundSchema = exports.EntryNameChangeAction$inboundSchema = exports.Merger$ = exports.Merger$outboundSchema = exports.Merger$inboundSchema = exports.EntryMergerType$ = exports.EntryMergerType$outboundSchema = exports.EntryMergerType$inboundSchema = exports.EntryMergerStockRate$ = exports.EntryMergerStockRate$outboundSchema = exports.EntryMergerStockRate$inboundSchema = exports.EntryMergerQuantity$ = exports.EntryMergerQuantity$outboundSchema = exports.EntryMergerQuantity$inboundSchema = exports.EntryMergerEffectiveDate$ = exports.EntryMergerEffectiveDate$outboundSchema = exports.EntryMergerEffectiveDate$inboundSchema = void 0;
exports.RedemptionPartial$inboundSchema = exports.EntryRedemptionPartialQuantity$ = exports.EntryRedemptionPartialQuantity$outboundSchema = exports.EntryRedemptionPartialQuantity$inboundSchema = exports.EntryRedemptionPartialPaymentDate$ = exports.EntryRedemptionPartialPaymentDate$outboundSchema = exports.EntryRedemptionPartialPaymentDate$inboundSchema = exports.EntryRedemptionPartialCorporateActionGeneralInformation$ = exports.EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema = exports.EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema = exports.EntryRedemptionPartialCashRate$ = exports.EntryRedemptionPartialCashRate$outboundSchema = exports.EntryRedemptionPartialCashRate$inboundSchema = exports.EntryRedemptionPartialAction$ = exports.EntryRedemptionPartialAction$outboundSchema = exports.EntryRedemptionPartialAction$inboundSchema = exports.RedemptionFull$ = exports.RedemptionFull$outboundSchema = exports.RedemptionFull$inboundSchema = exports.EntryRedemptionFullSubtype$ = exports.EntryRedemptionFullSubtype$outboundSchema = exports.EntryRedemptionFullSubtype$inboundSchema = exports.EntryRedemptionFullQuantity$ = exports.EntryRedemptionFullQuantity$outboundSchema = exports.EntryRedemptionFullQuantity$inboundSchema = exports.EntryRedemptionFullPaymentDate$ = exports.EntryRedemptionFullPaymentDate$outboundSchema = exports.EntryRedemptionFullPaymentDate$inboundSchema = exports.EntryRedemptionFullCorporateActionGeneralInformation$ = exports.EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema = exports.EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema = exports.EntryRedemptionFullCashRate$ = exports.EntryRedemptionFullCashRate$outboundSchema = exports.EntryRedemptionFullCashRate$inboundSchema = exports.EntryRedemptionFullAction$ = exports.EntryRedemptionFullAction$outboundSchema = exports.EntryRedemptionFullAction$inboundSchema = exports.Receive$ = exports.Receive$outboundSchema = exports.Receive$inboundSchema = exports.EntryQuantity$ = exports.EntryQuantity$outboundSchema = exports.EntryQuantity$inboundSchema = exports.EntryProcessDate$ = exports.EntryProcessDate$outboundSchema = exports.EntryProcessDate$inboundSchema = exports.EntryPrice$ = exports.EntryPrice$outboundSchema = exports.EntryPrice$inboundSchema = exports.PaymentInKind$ = void 0;
exports.RoundingAdjustment$ = exports.RoundingAdjustment$outboundSchema = exports.RoundingAdjustment$inboundSchema = exports.RightsSubscription$ = exports.RightsSubscription$outboundSchema = exports.RightsSubscription$inboundSchema = exports.EntryRightsSubscriptionCorporateActionGeneralInformation$ = exports.EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema = exports.EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema = exports.RightsDistribution$ = exports.RightsDistribution$outboundSchema = exports.RightsDistribution$inboundSchema = exports.EntryRightsDistributionSettled$ = exports.EntryRightsDistributionSettled$outboundSchema = exports.EntryRightsDistributionSettled$inboundSchema = exports.EntryRightsDistributionRecordDate$ = exports.EntryRightsDistributionRecordDate$outboundSchema = exports.EntryRightsDistributionRecordDate$inboundSchema = exports.EntryRightsDistributionPaymentDate$ = exports.EntryRightsDistributionPaymentDate$outboundSchema = exports.EntryRightsDistributionPaymentDate$inboundSchema = exports.EntryRightsDistributionCorporateActionGeneralInformation$ = exports.EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema = exports.EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema = exports.ReverseStockSplit$ = exports.ReverseStockSplit$outboundSchema = exports.ReverseStockSplit$inboundSchema = exports.EntryReverseStockSplitStockRate$ = exports.EntryReverseStockSplitStockRate$outboundSchema = exports.EntryReverseStockSplitStockRate$inboundSchema = exports.EntryReverseStockSplitQuantity$ = exports.EntryReverseStockSplitQuantity$outboundSchema = exports.EntryReverseStockSplitQuantity$inboundSchema = exports.FactorNumerator$ = exports.FactorNumerator$outboundSchema = exports.FactorNumerator$inboundSchema = exports.FactorDenominator$ = exports.FactorDenominator$outboundSchema = exports.FactorDenominator$inboundSchema = exports.EntryReverseStockSplitEffectiveDate$ = exports.EntryReverseStockSplitEffectiveDate$outboundSchema = exports.EntryReverseStockSplitEffectiveDate$inboundSchema = exports.EntryReverseStockSplitCorporateActionGeneralInformation$ = exports.EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema = exports.EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema = exports.EntryReverseStockSplitAction$ = exports.EntryReverseStockSplitAction$outboundSchema = exports.EntryReverseStockSplitAction$inboundSchema = exports.RedemptionPartial$ = exports.RedemptionPartial$outboundSchema = void 0;
exports.EntryStockDividendCorporateActionGeneralInformation$outboundSchema = exports.EntryStockDividendCorporateActionGeneralInformation$inboundSchema = exports.EntryState$ = exports.EntryState$outboundSchema = exports.EntryState$inboundSchema = exports.SpinOff$ = exports.SpinOff$outboundSchema = exports.SpinOff$inboundSchema = exports.EntrySpinOffRecordDate$ = exports.EntrySpinOffRecordDate$outboundSchema = exports.EntrySpinOffRecordDate$inboundSchema = exports.EntrySpinOffRate$ = exports.EntrySpinOffRate$outboundSchema = exports.EntrySpinOffRate$inboundSchema = exports.EntrySpinOffQuantity$ = exports.EntrySpinOffQuantity$outboundSchema = exports.EntrySpinOffQuantity$inboundSchema = exports.PayDate$ = exports.PayDate$outboundSchema = exports.PayDate$inboundSchema = exports.EntrySpinOffCorporateActionGeneralInformation$ = exports.EntrySpinOffCorporateActionGeneralInformation$outboundSchema = exports.EntrySpinOffCorporateActionGeneralInformation$inboundSchema = exports.EntrySideModifier$ = exports.EntrySideModifier$outboundSchema = exports.EntrySideModifier$inboundSchema = exports.EntrySide$ = exports.EntrySide$outboundSchema = exports.EntrySide$inboundSchema = exports.SettleDate$ = exports.SettleDate$outboundSchema = exports.SettleDate$inboundSchema = exports.SaleOfRights$ = exports.SaleOfRights$outboundSchema = exports.SaleOfRights$inboundSchema = exports.EntrySaleOfRightsSettled$ = exports.EntrySaleOfRightsSettled$outboundSchema = exports.EntrySaleOfRightsSettled$inboundSchema = exports.EntrySaleOfRightsRecordDate$ = exports.EntrySaleOfRightsRecordDate$outboundSchema = exports.EntrySaleOfRightsRecordDate$inboundSchema = exports.EntrySaleOfRightsPaymentDate$ = exports.EntrySaleOfRightsPaymentDate$outboundSchema = exports.EntrySaleOfRightsPaymentDate$inboundSchema = exports.EntrySaleOfRightsCorporateActionGeneralInformation$ = exports.EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema = exports.EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema = exports.EntrySaleOfRightsCashRate$ = exports.EntrySaleOfRightsCashRate$outboundSchema = exports.EntrySaleOfRightsCashRate$inboundSchema = void 0;
exports.EntryTenderOfferCorporateActionGeneralInformation$inboundSchema = exports.EntryTenderOfferCashRate$ = exports.EntryTenderOfferCashRate$outboundSchema = exports.EntryTenderOfferCashRate$inboundSchema = exports.Sweep$ = exports.Sweep$outboundSchema = exports.Sweep$inboundSchema = exports.EntrySweepType$ = exports.EntrySweepType$outboundSchema = exports.EntrySweepType$inboundSchema = exports.EntrySweepAction$ = exports.EntrySweepAction$outboundSchema = exports.EntrySweepAction$inboundSchema = exports.StockSplit$ = exports.StockSplit$outboundSchema = exports.StockSplit$inboundSchema = exports.EntryStockSplitRecordDate$ = exports.EntryStockSplitRecordDate$outboundSchema = exports.EntryStockSplitRecordDate$inboundSchema = exports.EntryStockSplitQuantity$ = exports.EntryStockSplitQuantity$outboundSchema = exports.EntryStockSplitQuantity$inboundSchema = exports.EntryStockSplitPayDate$ = exports.EntryStockSplitPayDate$outboundSchema = exports.EntryStockSplitPayDate$inboundSchema = exports.EntryFactorNumerator$ = exports.EntryFactorNumerator$outboundSchema = exports.EntryFactorNumerator$inboundSchema = exports.EntryFactorDenominator$ = exports.EntryFactorDenominator$outboundSchema = exports.EntryFactorDenominator$inboundSchema = exports.EntryStockSplitCorporateActionGeneralInformation$ = exports.EntryStockSplitCorporateActionGeneralInformation$outboundSchema = exports.EntryStockSplitCorporateActionGeneralInformation$inboundSchema = exports.StockDividend$ = exports.StockDividend$outboundSchema = exports.StockDividend$inboundSchema = exports.EntryStockDividendRecordDate$ = exports.EntryStockDividendRecordDate$outboundSchema = exports.EntryStockDividendRecordDate$inboundSchema = exports.EntryRate$ = exports.EntryRate$outboundSchema = exports.EntryRate$inboundSchema = exports.EntryStockDividendQuantity$ = exports.EntryStockDividendQuantity$outboundSchema = exports.EntryStockDividendQuantity$inboundSchema = exports.EntryPayDate$ = exports.EntryPayDate$outboundSchema = exports.EntryPayDate$inboundSchema = exports.EntryStockDividendCorporateActionGeneralInformation$ = void 0;
exports.WarrantExercise$ = exports.WarrantExercise$outboundSchema = exports.WarrantExercise$inboundSchema = exports.EntryWarrantExerciseCorporateActionGeneralInformation$ = exports.EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema = exports.EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema = exports.UnitSplit$ = exports.UnitSplit$outboundSchema = exports.UnitSplit$inboundSchema = exports.EntryUnitSplitStockRate$ = exports.EntryUnitSplitStockRate$outboundSchema = exports.EntryUnitSplitStockRate$inboundSchema = exports.EntryUnitSplitCorporateActionGeneralInformation$ = exports.EntryUnitSplitCorporateActionGeneralInformation$outboundSchema = exports.EntryUnitSplitCorporateActionGeneralInformation$inboundSchema = exports.EntryType$ = exports.EntryType$outboundSchema = exports.EntryType$inboundSchema = exports.Transfer$ = exports.Transfer$outboundSchema = exports.Transfer$inboundSchema = exports.EntryTransferType$ = exports.EntryTransferType$outboundSchema = exports.EntryTransferType$inboundSchema = exports.EntryTrade$ = exports.EntryTrade$outboundSchema = exports.EntryTrade$inboundSchema = exports.EntryPriceAdjustmentRecord$ = exports.EntryPriceAdjustmentRecord$outboundSchema = exports.EntryPriceAdjustmentRecord$inboundSchema = exports.EntryPriceAdjustmentType$ = exports.EntryPriceAdjustmentType$outboundSchema = exports.EntryPriceAdjustmentType$inboundSchema = exports.EntryPriceAdjustmentPercent$ = exports.EntryPriceAdjustmentPercent$outboundSchema = exports.EntryPriceAdjustmentPercent$inboundSchema = exports.EntryPriceAdjustmentAmount$ = exports.EntryPriceAdjustmentAmount$outboundSchema = exports.EntryPriceAdjustmentAmount$inboundSchema = exports.EntryPrevailingMarketPrice$ = exports.EntryPrevailingMarketPrice$outboundSchema = exports.EntryPrevailingMarketPrice$inboundSchema = exports.EntryBrokerCapacity$ = exports.EntryBrokerCapacity$outboundSchema = exports.EntryBrokerCapacity$inboundSchema = exports.TenderOffer$ = exports.TenderOffer$outboundSchema = exports.TenderOffer$inboundSchema = exports.EntryTenderOfferCorporateActionGeneralInformation$ = exports.EntryTenderOfferCorporateActionGeneralInformation$outboundSchema = void 0;
exports.Entry$ = exports.Entry$outboundSchema = exports.Entry$inboundSchema = exports.Worthless$ = exports.Worthless$outboundSchema = exports.Worthless$inboundSchema = exports.EntryWorthlessPaymentDate$ = exports.EntryWorthlessPaymentDate$outboundSchema = exports.EntryWorthlessPaymentDate$inboundSchema = exports.EntryWorthlessEffectiveDate$ = exports.EntryWorthlessEffectiveDate$outboundSchema = exports.EntryWorthlessEffectiveDate$inboundSchema = exports.EntryWorthlessCorporateActionGeneralInformation$ = exports.EntryWorthlessCorporateActionGeneralInformation$outboundSchema = exports.EntryWorthlessCorporateActionGeneralInformation$inboundSchema = exports.EntryWithholding$ = exports.EntryWithholding$outboundSchema = exports.EntryWithholding$inboundSchema = exports.EntryWithholdingType$ = exports.EntryWithholdingType$outboundSchema = exports.EntryWithholdingType$inboundSchema = exports.EntryWithholdingState$ = exports.EntryWithholdingState$outboundSchema = exports.EntryWithholdingState$inboundSchema = exports.EntryWithholdingRate$ = exports.EntryWithholdingRate$outboundSchema = exports.EntryWithholdingRate$inboundSchema = exports.WithdrawalPendingReview$ = exports.WithdrawalPendingReview$outboundSchema = exports.WithdrawalPendingReview$inboundSchema = exports.Review$ = exports.Review$outboundSchema = exports.Review$inboundSchema = exports.Withdrawal$ = exports.Withdrawal$outboundSchema = exports.Withdrawal$inboundSchema = exports.EntryWithdrawalType$ = exports.EntryWithdrawalType$outboundSchema = exports.EntryWithdrawalType$inboundSchema = exports.RetirementType$ = exports.RetirementType$outboundSchema = exports.RetirementType$inboundSchema = exports.DistributionType$ = exports.DistributionType$outboundSchema = exports.DistributionType$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const lot_js_1 = require("./lot.js");
const yieldrecord_js_1 = require("./yieldrecord.js");
/**
 * Indicates the memo location impacted by an entry
 */
var AccountMemo;
(function (AccountMemo) {
    AccountMemo["MemoTypeUnspecified"] = "MEMO_TYPE_UNSPECIFIED";
    AccountMemo["FullyPaidStockLoan"] = "FULLY_PAID_STOCK_LOAN";
    AccountMemo["Free"] = "FREE";
    AccountMemo["PendingOutgoingAcat"] = "PENDING_OUTGOING_ACAT";
    AccountMemo["PendingDrip"] = "PENDING_DRIP";
    AccountMemo["PendingWithdrawal"] = "PENDING_WITHDRAWAL";
})(AccountMemo || (exports.AccountMemo = AccountMemo = {}));
/**
 * Indicates whether the account transfer is incoming or outgoing
 */
var Action;
(function (Action) {
    Action["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    Action["Incoming"] = "INCOMING";
    Action["Outgoing"] = "OUTGOING";
    Action["CashInLieu"] = "CASH_IN_LIEU";
})(Action || (exports.Action = Action = {}));
/**
 * the method used for the account transfer
 */
var Method;
(function (Method) {
    Method["AccountTransferMethodUnspecified"] = "ACCOUNT_TRANSFER_METHOD_UNSPECIFIED";
    Method["Acats"] = "ACATS";
    Method["Internal"] = "INTERNAL";
    Method["Manual"] = "MANUAL";
})(Method || (exports.Method = Method = {}));
/**
 * Corresponds to the subtype of corporaction type
 */
var Subtype;
(function (Subtype) {
    Subtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    Subtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    Subtype["ApproximateRate"] = "APPROXIMATE_RATE";
    Subtype["DividendArrears"] = "DIVIDEND_ARREARS";
    Subtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    Subtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    Subtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    Subtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    Subtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    Subtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    Subtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    Subtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    Subtype["GrossRate"] = "GROSS_RATE";
    Subtype["InitialDividend"] = "INITIAL_DIVIDEND";
    Subtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    Subtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    Subtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    Subtype["Liquidation"] = "LIQUIDATION";
    Subtype["NetRate"] = "NET_RATE";
    Subtype["Other"] = "OTHER";
    Subtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    Subtype["RegularDividend"] = "REGULAR_DIVIDEND";
    Subtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    Subtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    Subtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    Subtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    Subtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    Subtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    Subtype["Partial"] = "PARTIAL";
    Subtype["Full"] = "FULL";
    Subtype["Maturity"] = "MATURITY";
    Subtype["Termination"] = "TERMINATION";
    Subtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
})(Subtype || (exports.Subtype = Subtype = {}));
/**
 * Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
 */
var EntryConversionType;
(function (EntryConversionType) {
    EntryConversionType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    EntryConversionType["Cash"] = "CASH";
    EntryConversionType["Stock"] = "STOCK";
    EntryConversionType["CashAndStock"] = "CASH_AND_STOCK";
})(EntryConversionType || (exports.EntryConversionType = EntryConversionType = {}));
/**
 * Provides more details on the type of credit
 */
var CreditType;
(function (CreditType) {
    CreditType["CreditTypeUnspecified"] = "CREDIT_TYPE_UNSPECIFIED";
    CreditType["FullyPaidStockLoan"] = "FULLY_PAID_STOCK_LOAN";
    CreditType["WriteOff"] = "WRITE_OFF";
    CreditType["Reimbursement"] = "REIMBURSEMENT";
    CreditType["Promotional"] = "PROMOTIONAL";
    CreditType["FdicInsuredDepositProgram"] = "FDIC_INSURED_DEPOSIT_PROGRAM";
    CreditType["AccountTransferAdjustment"] = "ACCOUNT_TRANSFER_ADJUSTMENT";
})(CreditType || (exports.CreditType = CreditType = {}));
/**
 * Provides detail on the contribution reason if the deposit is made to a retirement account
 */
var ContributionType;
(function (ContributionType) {
    ContributionType["ContributionTypeUnspecified"] = "CONTRIBUTION_TYPE_UNSPECIFIED";
    ContributionType["Regular"] = "REGULAR";
    ContributionType["Employee"] = "EMPLOYEE";
    ContributionType["Employer"] = "EMPLOYER";
    ContributionType["Recharacterization"] = "RECHARACTERIZATION";
    ContributionType["Rollover60Day"] = "ROLLOVER_60_DAY";
    ContributionType["RolloverDirect"] = "ROLLOVER_DIRECT";
    ContributionType["Transfer"] = "TRANSFER";
    ContributionType["TrusteeFee"] = "TRUSTEE_FEE";
    ContributionType["Conversion"] = "CONVERSION";
    ContributionType["Repayment"] = "REPAYMENT";
    ContributionType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(ContributionType || (exports.ContributionType = ContributionType = {}));
/**
 * The mechanism by which funds were deposited
 */
var EntryDepositType;
(function (EntryDepositType) {
    EntryDepositType["ExternalMovementTypeUnspecified"] = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED";
    EntryDepositType["Ach"] = "ACH";
    EntryDepositType["Check"] = "CHECK";
    EntryDepositType["Wire"] = "WIRE";
    EntryDepositType["Paypal"] = "PAYPAL";
    EntryDepositType["Rtp"] = "RTP";
    EntryDepositType["Ict"] = "ICT";
    EntryDepositType["Journal"] = "JOURNAL";
})(EntryDepositType || (exports.EntryDepositType = EntryDepositType = {}));
/**
 * Indicates whether the drip memo activity is reserving cash (DRIP_PENDING) or removing the reservation after a successful reinvestment trade
 */
var EntryAction;
(function (EntryAction) {
    EntryAction["DripActionUnspecified"] = "DRIP_ACTION_UNSPECIFIED";
    EntryAction["DripPending"] = "DRIP_PENDING";
    EntryAction["DripComplete"] = "DRIP_COMPLETE";
})(EntryAction || (exports.EntryAction = EntryAction = {}));
/**
 * Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
 */
var EntryExchangeType;
(function (EntryExchangeType) {
    EntryExchangeType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    EntryExchangeType["Cash"] = "CASH";
    EntryExchangeType["Stock"] = "STOCK";
    EntryExchangeType["CashAndStock"] = "CASH_AND_STOCK";
})(EntryExchangeType || (exports.EntryExchangeType = EntryExchangeType = {}));
/**
 * Enum providing additional information about the type of fee being charged
 */
var EntryFeeType;
(function (EntryFeeType) {
    EntryFeeType["FeeTypeUnspecified"] = "FEE_TYPE_UNSPECIFIED";
    EntryFeeType["ClientClearing"] = "CLIENT_CLEARING";
    EntryFeeType["Liquidity"] = "LIQUIDITY";
    EntryFeeType["GeneralPurpose"] = "GENERAL_PURPOSE";
    EntryFeeType["Commission"] = "COMMISSION";
    EntryFeeType["Orf"] = "ORF";
    EntryFeeType["Taf"] = "TAF";
    EntryFeeType["Sec"] = "SEC";
    EntryFeeType["AccountClosing"] = "ACCOUNT_CLOSING";
    EntryFeeType["AccountIra"] = "ACCOUNT_IRA";
    EntryFeeType["AchReturn"] = "ACH_RETURN";
    EntryFeeType["Advisory"] = "ADVISORY";
    EntryFeeType["CheckFee"] = "CHECK_FEE";
    EntryFeeType["Exchange"] = "EXCHANGE";
    EntryFeeType["Management"] = "MANAGEMENT";
    EntryFeeType["Overnight"] = "OVERNIGHT";
    EntryFeeType["Platform"] = "PLATFORM";
    EntryFeeType["Statement"] = "STATEMENT";
    EntryFeeType["StopPayment"] = "STOP_PAYMENT";
    EntryFeeType["WireFee"] = "WIRE_FEE";
    EntryFeeType["Inactivity"] = "INACTIVITY";
    EntryFeeType["AmaService"] = "AMA_SERVICE";
    EntryFeeType["NoticeOfChange"] = "NOTICE_OF_CHANGE";
    EntryFeeType["AccountTransfer"] = "ACCOUNT_TRANSFER";
    EntryFeeType["AgencyProcessing"] = "AGENCY_PROCESSING";
    EntryFeeType["RtpFee"] = "RTP_FEE";
    EntryFeeType["DomesticWireDepositFee"] = "DOMESTIC_WIRE_DEPOSIT_FEE";
    EntryFeeType["DomesticWireWithdrawalFee"] = "DOMESTIC_WIRE_WITHDRAWAL_FEE";
    EntryFeeType["InternationalWireDepositFee"] = "INTERNATIONAL_WIRE_DEPOSIT_FEE";
    EntryFeeType["InternationalWireWithdrawalFee"] = "INTERNATIONAL_WIRE_WITHDRAWAL_FEE";
    EntryFeeType["BrokerFee"] = "BROKER_FEE";
})(EntryFeeType || (exports.EntryFeeType = EntryFeeType = {}));
/**
 * Used to calculate broadridge blotter code
 */
var EntryFlipBrokerCapacity;
(function (EntryFlipBrokerCapacity) {
    EntryFlipBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    EntryFlipBrokerCapacity["Agency"] = "AGENCY";
    EntryFlipBrokerCapacity["Principal"] = "PRINCIPAL";
    EntryFlipBrokerCapacity["Mixed"] = "MIXED";
})(EntryFlipBrokerCapacity || (exports.EntryFlipBrokerCapacity = EntryFlipBrokerCapacity = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
var EntryFlipPriceAdjustmentType;
(function (EntryFlipPriceAdjustmentType) {
    EntryFlipPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    EntryFlipPriceAdjustmentType["Markup"] = "MARKUP";
    EntryFlipPriceAdjustmentType["Markdown"] = "MARKDOWN";
    EntryFlipPriceAdjustmentType["SalesLoad"] = "SALES_LOAD";
})(EntryFlipPriceAdjustmentType || (exports.EntryFlipPriceAdjustmentType = EntryFlipPriceAdjustmentType = {}));
/**
 * Indicates whether shares are being allocated or deallocated
 */
var EntryFpslAction;
(function (EntryFpslAction) {
    EntryFpslAction["FpslActionUnspecified"] = "FPSL_ACTION_UNSPECIFIED";
    EntryFpslAction["Allocate"] = "ALLOCATE";
    EntryFpslAction["Deallocate"] = "DEALLOCATE";
})(EntryFpslAction || (exports.EntryFpslAction = EntryFpslAction = {}));
var InterestType;
(function (InterestType) {
    InterestType["InterestTypeUnspecified"] = "INTEREST_TYPE_UNSPECIFIED";
    InterestType["Credit"] = "CREDIT";
    InterestType["Debit"] = "DEBIT";
})(InterestType || (exports.InterestType = InterestType = {}));
/**
 * Corresponds to whether the entry is incoming outgoing
 */
var EntryLiquidationAction;
(function (EntryLiquidationAction) {
    EntryLiquidationAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryLiquidationAction["Incoming"] = "INCOMING";
    EntryLiquidationAction["Outgoing"] = "OUTGOING";
    EntryLiquidationAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryLiquidationAction || (exports.EntryLiquidationAction = EntryLiquidationAction = {}));
/**
 * Corresponds to the subtype of corporaction type
 */
var EntrySubtype;
(function (EntrySubtype) {
    EntrySubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    EntrySubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    EntrySubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    EntrySubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    EntrySubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    EntrySubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    EntrySubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    EntrySubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    EntrySubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    EntrySubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    EntrySubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    EntrySubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    EntrySubtype["GrossRate"] = "GROSS_RATE";
    EntrySubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    EntrySubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    EntrySubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    EntrySubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    EntrySubtype["Liquidation"] = "LIQUIDATION";
    EntrySubtype["NetRate"] = "NET_RATE";
    EntrySubtype["Other"] = "OTHER";
    EntrySubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    EntrySubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    EntrySubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    EntrySubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    EntrySubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    EntrySubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    EntrySubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    EntrySubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    EntrySubtype["Partial"] = "PARTIAL";
    EntrySubtype["Full"] = "FULL";
    EntrySubtype["Maturity"] = "MATURITY";
    EntrySubtype["Termination"] = "TERMINATION";
    EntrySubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
})(EntrySubtype || (exports.EntrySubtype = EntrySubtype = {}));
/**
 * Corresponds to whether the entry is incoming outgoing
 */
var EntryMergerAction;
(function (EntryMergerAction) {
    EntryMergerAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryMergerAction["Incoming"] = "INCOMING";
    EntryMergerAction["Outgoing"] = "OUTGOING";
    EntryMergerAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryMergerAction || (exports.EntryMergerAction = EntryMergerAction = {}));
/**
 * Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
 */
var EntryMergerType;
(function (EntryMergerType) {
    EntryMergerType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    EntryMergerType["Cash"] = "CASH";
    EntryMergerType["Stock"] = "STOCK";
    EntryMergerType["CashAndStock"] = "CASH_AND_STOCK";
})(EntryMergerType || (exports.EntryMergerType = EntryMergerType = {}));
/**
 * Corresponds to whether the entry is incoming outgoing
 */
var EntryNameChangeAction;
(function (EntryNameChangeAction) {
    EntryNameChangeAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryNameChangeAction["Incoming"] = "INCOMING";
    EntryNameChangeAction["Outgoing"] = "OUTGOING";
    EntryNameChangeAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryNameChangeAction || (exports.EntryNameChangeAction = EntryNameChangeAction = {}));
/**
 * Corresponds to whether the entry is incoming outgoing
 */
var EntryRedemptionFullAction;
(function (EntryRedemptionFullAction) {
    EntryRedemptionFullAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryRedemptionFullAction["Incoming"] = "INCOMING";
    EntryRedemptionFullAction["Outgoing"] = "OUTGOING";
    EntryRedemptionFullAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryRedemptionFullAction || (exports.EntryRedemptionFullAction = EntryRedemptionFullAction = {}));
/**
 * Corresponds to the subtype of corporaction type
 */
var EntryRedemptionFullSubtype;
(function (EntryRedemptionFullSubtype) {
    EntryRedemptionFullSubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    EntryRedemptionFullSubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    EntryRedemptionFullSubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    EntryRedemptionFullSubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    EntryRedemptionFullSubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    EntryRedemptionFullSubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    EntryRedemptionFullSubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    EntryRedemptionFullSubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    EntryRedemptionFullSubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    EntryRedemptionFullSubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    EntryRedemptionFullSubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    EntryRedemptionFullSubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    EntryRedemptionFullSubtype["GrossRate"] = "GROSS_RATE";
    EntryRedemptionFullSubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    EntryRedemptionFullSubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    EntryRedemptionFullSubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    EntryRedemptionFullSubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    EntryRedemptionFullSubtype["Liquidation"] = "LIQUIDATION";
    EntryRedemptionFullSubtype["NetRate"] = "NET_RATE";
    EntryRedemptionFullSubtype["Other"] = "OTHER";
    EntryRedemptionFullSubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    EntryRedemptionFullSubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    EntryRedemptionFullSubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    EntryRedemptionFullSubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    EntryRedemptionFullSubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    EntryRedemptionFullSubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    EntryRedemptionFullSubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    EntryRedemptionFullSubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    EntryRedemptionFullSubtype["Partial"] = "PARTIAL";
    EntryRedemptionFullSubtype["Full"] = "FULL";
    EntryRedemptionFullSubtype["Maturity"] = "MATURITY";
    EntryRedemptionFullSubtype["Termination"] = "TERMINATION";
    EntryRedemptionFullSubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
})(EntryRedemptionFullSubtype || (exports.EntryRedemptionFullSubtype = EntryRedemptionFullSubtype = {}));
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
var EntryRedemptionPartialAction;
(function (EntryRedemptionPartialAction) {
    EntryRedemptionPartialAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryRedemptionPartialAction["Incoming"] = "INCOMING";
    EntryRedemptionPartialAction["Outgoing"] = "OUTGOING";
    EntryRedemptionPartialAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryRedemptionPartialAction || (exports.EntryRedemptionPartialAction = EntryRedemptionPartialAction = {}));
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
var EntryReverseStockSplitAction;
(function (EntryReverseStockSplitAction) {
    EntryReverseStockSplitAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    EntryReverseStockSplitAction["Incoming"] = "INCOMING";
    EntryReverseStockSplitAction["Outgoing"] = "OUTGOING";
    EntryReverseStockSplitAction["CashInLieu"] = "CASH_IN_LIEU";
})(EntryReverseStockSplitAction || (exports.EntryReverseStockSplitAction = EntryReverseStockSplitAction = {}));
/**
 * Denotes whether the trade is a buy or sell
 */
var EntrySide;
(function (EntrySide) {
    EntrySide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    EntrySide["Buy"] = "BUY";
    EntrySide["Sell"] = "SELL";
})(EntrySide || (exports.EntrySide = EntrySide = {}));
/**
 * Additional information about a trade Should be populated if possible for trades; the side modifier for the trade
 */
var EntrySideModifier;
(function (EntrySideModifier) {
    EntrySideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    EntrySideModifier["Short"] = "SHORT";
    EntrySideModifier["ShortExempt"] = "SHORT_EXEMPT";
    EntrySideModifier["ShortCover"] = "SHORT_COVER";
    EntrySideModifier["Open"] = "OPEN";
    EntrySideModifier["Close"] = "CLOSE";
})(EntrySideModifier || (exports.EntrySideModifier = EntrySideModifier = {}));
/**
 * Set to be NEW for BookEntries, other statuses will be assigned via ModifyActivities; the state of the entry
 */
var EntryState;
(function (EntryState) {
    EntryState["EntryStateUnspecified"] = "ENTRY_STATE_UNSPECIFIED";
    EntryState["New"] = "NEW";
    EntryState["Reversal"] = "REVERSAL";
    EntryState["Correction"] = "CORRECTION";
})(EntryState || (exports.EntryState = EntryState = {}));
/**
 * Indicates purchase or redemption of the sweep asset
 */
var EntrySweepAction;
(function (EntrySweepAction) {
    EntrySweepAction["SweepActionUnspecified"] = "SWEEP_ACTION_UNSPECIFIED";
    EntrySweepAction["Purchase"] = "PURCHASE";
    EntrySweepAction["Redemption"] = "REDEMPTION";
})(EntrySweepAction || (exports.EntrySweepAction = EntrySweepAction = {}));
/**
 * Sweep program that cash is being swept to/ from
 */
var EntrySweepType;
(function (EntrySweepType) {
    EntrySweepType["SweepTypeUnspecified"] = "SWEEP_TYPE_UNSPECIFIED";
    EntrySweepType["Fdic"] = "FDIC";
    EntrySweepType["MoneyMarket"] = "MONEY_MARKET";
})(EntrySweepType || (exports.EntrySweepType = EntrySweepType = {}));
/**
 * Used to calculate broadridge blotter code
 */
var EntryBrokerCapacity;
(function (EntryBrokerCapacity) {
    EntryBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    EntryBrokerCapacity["Agency"] = "AGENCY";
    EntryBrokerCapacity["Principal"] = "PRINCIPAL";
    EntryBrokerCapacity["Mixed"] = "MIXED";
})(EntryBrokerCapacity || (exports.EntryBrokerCapacity = EntryBrokerCapacity = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
var EntryPriceAdjustmentType;
(function (EntryPriceAdjustmentType) {
    EntryPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    EntryPriceAdjustmentType["Markup"] = "MARKUP";
    EntryPriceAdjustmentType["Markdown"] = "MARKDOWN";
    EntryPriceAdjustmentType["SalesLoad"] = "SALES_LOAD";
})(EntryPriceAdjustmentType || (exports.EntryPriceAdjustmentType = EntryPriceAdjustmentType = {}));
/**
 * Provides more detail on the type of transfer
 */
var EntryTransferType;
(function (EntryTransferType) {
    EntryTransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    EntryTransferType["TransferConversion"] = "TRANSFER_CONVERSION";
    EntryTransferType["Deconversion"] = "DECONVERSION";
    EntryTransferType["Migration"] = "MIGRATION";
    EntryTransferType["ManualAdjustment"] = "MANUAL_ADJUSTMENT";
    EntryTransferType["InternalConversion"] = "INTERNAL_CONVERSION";
})(EntryTransferType || (exports.EntryTransferType = EntryTransferType = {}));
/**
 * The Type of the entry; determines the set of mandatory fields as well as informing downstream processes how to handle this record
 */
var EntryType;
(function (EntryType) {
    EntryType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    EntryType["Trade"] = "TRADE";
    EntryType["Movement"] = "MOVEMENT";
    EntryType["Memo"] = "MEMO";
    EntryType["CorporateAction"] = "CORPORATE_ACTION";
})(EntryType || (exports.EntryType = EntryType = {}));
/**
 * Provides information on the reason for the distribution from a retirement account
 */
var DistributionType;
(function (DistributionType) {
    DistributionType["DistributionTypeUnspecified"] = "DISTRIBUTION_TYPE_UNSPECIFIED";
    DistributionType["Premature"] = "PREMATURE";
    DistributionType["Disability"] = "DISABILITY";
    DistributionType["Death"] = "DEATH";
    DistributionType["Normal"] = "NORMAL";
    DistributionType["Sosepp"] = "SOSEPP";
    DistributionType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    DistributionType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    DistributionType["DistTransfer"] = "DIST_TRANSFER";
    DistributionType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    DistributionType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    DistributionType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    DistributionType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    DistributionType["DistConversion"] = "DIST_CONVERSION";
    DistributionType["ManagementFee"] = "MANAGEMENT_FEE";
    DistributionType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    DistributionType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    DistributionType["PlanLoan401K"] = "PLAN_LOAN_401K";
    DistributionType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    DistributionType["Revocation"] = "REVOCATION";
    DistributionType["NonReportable"] = "NON_REPORTABLE";
})(DistributionType || (exports.DistributionType = DistributionType = {}));
/**
 * Used for descriptive purposes only. Indicates the type of retirement account
 */
var RetirementType;
(function (RetirementType) {
    RetirementType["RetirementTypeUnspecified"] = "RETIREMENT_TYPE_UNSPECIFIED";
    RetirementType["Ira"] = "IRA";
    RetirementType["Sep"] = "SEP";
    RetirementType["Simple"] = "SIMPLE";
    RetirementType["Keogh"] = "KEOGH";
    RetirementType["Roth"] = "ROTH";
    RetirementType["Qp"] = "QP";
    RetirementType["RolloverIra"] = "ROLLOVER_IRA";
})(RetirementType || (exports.RetirementType = RetirementType = {}));
/**
 * Provides information on the method through which a deposit/ withdrawal was initiated
 */
var EntryWithdrawalType;
(function (EntryWithdrawalType) {
    EntryWithdrawalType["ExternalMovementTypeUnspecified"] = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED";
    EntryWithdrawalType["Ach"] = "ACH";
    EntryWithdrawalType["Check"] = "CHECK";
    EntryWithdrawalType["Wire"] = "WIRE";
    EntryWithdrawalType["Paypal"] = "PAYPAL";
    EntryWithdrawalType["Rtp"] = "RTP";
    EntryWithdrawalType["Ict"] = "ICT";
    EntryWithdrawalType["Journal"] = "JOURNAL";
})(EntryWithdrawalType || (exports.EntryWithdrawalType = EntryWithdrawalType = {}));
/**
 * Indicates the state of the withdrawal review
 */
var Review;
(function (Review) {
    Review["ReviewStateUnspecified"] = "REVIEW_STATE_UNSPECIFIED";
    Review["ReviewStatePending"] = "REVIEW_STATE_PENDING";
    Review["ReviewStateComplete"] = "REVIEW_STATE_COMPLETE";
})(Review || (exports.Review = Review = {}));
var EntryWithholdingState;
(function (EntryWithholdingState) {
    EntryWithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    EntryWithholdingState["Ca"] = "CA";
    EntryWithholdingState["Me"] = "ME";
    EntryWithholdingState["Vt"] = "VT";
    EntryWithholdingState["Al"] = "AL";
    EntryWithholdingState["Ak"] = "AK";
    EntryWithholdingState["Az"] = "AZ";
    EntryWithholdingState["Ar"] = "AR";
    EntryWithholdingState["Co"] = "CO";
    EntryWithholdingState["Ct"] = "CT";
    EntryWithholdingState["De"] = "DE";
    EntryWithholdingState["Fl"] = "FL";
    EntryWithholdingState["Ga"] = "GA";
    EntryWithholdingState["Hi"] = "HI";
    EntryWithholdingState["Id"] = "ID";
    EntryWithholdingState["Il"] = "IL";
    EntryWithholdingState["In"] = "IN";
    EntryWithholdingState["Ia"] = "IA";
    EntryWithholdingState["Ks"] = "KS";
    EntryWithholdingState["Ky"] = "KY";
    EntryWithholdingState["La"] = "LA";
    EntryWithholdingState["Md"] = "MD";
    EntryWithholdingState["Ma"] = "MA";
    EntryWithholdingState["Mi"] = "MI";
    EntryWithholdingState["Mn"] = "MN";
    EntryWithholdingState["Ms"] = "MS";
    EntryWithholdingState["Mo"] = "MO";
    EntryWithholdingState["Mt"] = "MT";
    EntryWithholdingState["Ne"] = "NE";
    EntryWithholdingState["Nv"] = "NV";
    EntryWithholdingState["Nh"] = "NH";
    EntryWithholdingState["Nj"] = "NJ";
    EntryWithholdingState["Nm"] = "NM";
    EntryWithholdingState["Ny"] = "NY";
    EntryWithholdingState["Nc"] = "NC";
    EntryWithholdingState["Nd"] = "ND";
    EntryWithholdingState["Oh"] = "OH";
    EntryWithholdingState["Ok"] = "OK";
    EntryWithholdingState["Or"] = "OR";
    EntryWithholdingState["Pa"] = "PA";
    EntryWithholdingState["Ri"] = "RI";
    EntryWithholdingState["Sc"] = "SC";
    EntryWithholdingState["Sd"] = "SD";
    EntryWithholdingState["Tn"] = "TN";
    EntryWithholdingState["Tx"] = "TX";
    EntryWithholdingState["Ut"] = "UT";
    EntryWithholdingState["Va"] = "VA";
    EntryWithholdingState["Wa"] = "WA";
    EntryWithholdingState["Wv"] = "WV";
    EntryWithholdingState["Wi"] = "WI";
    EntryWithholdingState["Wy"] = "WY";
})(EntryWithholdingState || (exports.EntryWithholdingState = EntryWithholdingState = {}));
/**
 * The type of withholding
 */
var EntryWithholdingType;
(function (EntryWithholdingType) {
    EntryWithholdingType["WithholdingTypeUnspecified"] = "WITHHOLDING_TYPE_UNSPECIFIED";
    EntryWithholdingType["Federal"] = "FEDERAL";
    EntryWithholdingType["State"] = "STATE";
    EntryWithholdingType["ForeignSecurity"] = "FOREIGN_SECURITY";
    EntryWithholdingType["FederalIra"] = "FEDERAL_IRA";
    EntryWithholdingType["StateIra"] = "STATE_IRA";
    EntryWithholdingType["NonResidentAlien"] = "NON_RESIDENT_ALIEN";
})(EntryWithholdingType || (exports.EntryWithholdingType = EntryWithholdingType = {}));
/** @internal */
exports.AcatsPendingOut$inboundSchema = z.object({
    acats_control_number: z.string().optional(),
    additional_instructions: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "acats_control_number": "acatsControlNumber",
        "additional_instructions": "additionalInstructions",
    });
});
/** @internal */
exports.AcatsPendingOut$outboundSchema = z.object({
    acatsControlNumber: z.string().optional(),
    additionalInstructions: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acatsControlNumber: "acats_control_number",
        additionalInstructions: "additional_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AcatsPendingOut$;
(function (AcatsPendingOut$) {
    /** @deprecated use `AcatsPendingOut$inboundSchema` instead. */
    AcatsPendingOut$.inboundSchema = exports.AcatsPendingOut$inboundSchema;
    /** @deprecated use `AcatsPendingOut$outboundSchema` instead. */
    AcatsPendingOut$.outboundSchema = exports.AcatsPendingOut$outboundSchema;
})(AcatsPendingOut$ || (exports.AcatsPendingOut$ = AcatsPendingOut$ = {}));
/** @internal */
exports.AccountMemo$inboundSchema = z
    .union([
    z.nativeEnum(AccountMemo),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountMemo$outboundSchema = z.union([
    z.nativeEnum(AccountMemo),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountMemo$;
(function (AccountMemo$) {
    /** @deprecated use `AccountMemo$inboundSchema` instead. */
    AccountMemo$.inboundSchema = exports.AccountMemo$inboundSchema;
    /** @deprecated use `AccountMemo$outboundSchema` instead. */
    AccountMemo$.outboundSchema = exports.AccountMemo$outboundSchema;
})(AccountMemo$ || (exports.AccountMemo$ = AccountMemo$ = {}));
/** @internal */
exports.Action$inboundSchema = z
    .union([
    z.nativeEnum(Action),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.Action$outboundSchema = z.union([
    z.nativeEnum(Action),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Action$;
(function (Action$) {
    /** @deprecated use `Action$inboundSchema` instead. */
    Action$.inboundSchema = exports.Action$inboundSchema;
    /** @deprecated use `Action$outboundSchema` instead. */
    Action$.outboundSchema = exports.Action$outboundSchema;
})(Action$ || (exports.Action$ = Action$ = {}));
/** @internal */
exports.Method$inboundSchema = z
    .union([
    z.nativeEnum(Method),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.Method$outboundSchema = z.union([
    z.nativeEnum(Method),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Method$;
(function (Method$) {
    /** @deprecated use `Method$inboundSchema` instead. */
    Method$.inboundSchema = exports.Method$inboundSchema;
    /** @deprecated use `Method$outboundSchema` instead. */
    Method$.outboundSchema = exports.Method$outboundSchema;
})(Method$ || (exports.Method$ = Method$ = {}));
/** @internal */
exports.AccountTransfer$inboundSchema = z.object({
    acats_asset_sequence_number: z.string().optional(),
    acats_control_number: z.string().optional(),
    action: exports.Action$inboundSchema.optional(),
    additional_instructions: z.string().optional(),
    contra_party_account_number: z.string().optional(),
    contra_party_id: z.string().optional(),
    institution: z.string().optional(),
    method: exports.Method$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "acats_asset_sequence_number": "acatsAssetSequenceNumber",
        "acats_control_number": "acatsControlNumber",
        "additional_instructions": "additionalInstructions",
        "contra_party_account_number": "contraPartyAccountNumber",
        "contra_party_id": "contraPartyId",
    });
});
/** @internal */
exports.AccountTransfer$outboundSchema = z.object({
    acatsAssetSequenceNumber: z.string().optional(),
    acatsControlNumber: z.string().optional(),
    action: exports.Action$outboundSchema.optional(),
    additionalInstructions: z.string().optional(),
    contraPartyAccountNumber: z.string().optional(),
    contraPartyId: z.string().optional(),
    institution: z.string().optional(),
    method: exports.Method$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acatsAssetSequenceNumber: "acats_asset_sequence_number",
        acatsControlNumber: "acats_control_number",
        additionalInstructions: "additional_instructions",
        contraPartyAccountNumber: "contra_party_account_number",
        contraPartyId: "contra_party_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountTransfer$;
(function (AccountTransfer$) {
    /** @deprecated use `AccountTransfer$inboundSchema` instead. */
    AccountTransfer$.inboundSchema = exports.AccountTransfer$inboundSchema;
    /** @deprecated use `AccountTransfer$outboundSchema` instead. */
    AccountTransfer$.outboundSchema = exports.AccountTransfer$outboundSchema;
})(AccountTransfer$ || (exports.AccountTransfer$ = AccountTransfer$ = {}));
/** @internal */
exports.EntryAccruedInterest$inboundSchema = z.object({});
/** @internal */
exports.EntryAccruedInterest$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryAccruedInterest$;
(function (EntryAccruedInterest$) {
    /** @deprecated use `EntryAccruedInterest$inboundSchema` instead. */
    EntryAccruedInterest$.inboundSchema = exports.EntryAccruedInterest$inboundSchema;
    /** @deprecated use `EntryAccruedInterest$outboundSchema` instead. */
    EntryAccruedInterest$.outboundSchema = exports.EntryAccruedInterest$outboundSchema;
})(EntryAccruedInterest$ || (exports.EntryAccruedInterest$ = EntryAccruedInterest$ = {}));
/** @internal */
exports.CorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.CorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CorporateActionGeneralInformation$;
(function (CorporateActionGeneralInformation$) {
    /** @deprecated use `CorporateActionGeneralInformation$inboundSchema` instead. */
    CorporateActionGeneralInformation$.inboundSchema = exports.CorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `CorporateActionGeneralInformation$outboundSchema` instead. */
    CorporateActionGeneralInformation$.outboundSchema = exports.CorporateActionGeneralInformation$outboundSchema;
})(CorporateActionGeneralInformation$ || (exports.CorporateActionGeneralInformation$ = CorporateActionGeneralInformation$ = {}));
/** @internal */
exports.Acquisition$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.CorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
exports.Acquisition$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.CorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Acquisition$;
(function (Acquisition$) {
    /** @deprecated use `Acquisition$inboundSchema` instead. */
    Acquisition$.inboundSchema = exports.Acquisition$inboundSchema;
    /** @deprecated use `Acquisition$outboundSchema` instead. */
    Acquisition$.outboundSchema = exports.Acquisition$outboundSchema;
})(Acquisition$ || (exports.Acquisition$ = Acquisition$ = {}));
/** @internal */
exports.ActivityDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityDate$;
(function (ActivityDate$) {
    /** @deprecated use `ActivityDate$inboundSchema` instead. */
    ActivityDate$.inboundSchema = exports.ActivityDate$inboundSchema;
    /** @deprecated use `ActivityDate$outboundSchema` instead. */
    ActivityDate$.outboundSchema = exports.ActivityDate$outboundSchema;
})(ActivityDate$ || (exports.ActivityDate$ = ActivityDate$ = {}));
/** @internal */
exports.CashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CashRate$;
(function (CashRate$) {
    /** @deprecated use `CashRate$inboundSchema` instead. */
    CashRate$.inboundSchema = exports.CashRate$inboundSchema;
    /** @deprecated use `CashRate$outboundSchema` instead. */
    CashRate$.outboundSchema = exports.CashRate$outboundSchema;
})(CashRate$ || (exports.CashRate$ = CashRate$ = {}));
/** @internal */
exports.EntryCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryCorporateActionGeneralInformation$;
(function (EntryCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryCorporateActionGeneralInformation$.inboundSchema = exports.EntryCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryCorporateActionGeneralInformation$.outboundSchema = exports.EntryCorporateActionGeneralInformation$outboundSchema;
})(EntryCorporateActionGeneralInformation$ || (exports.EntryCorporateActionGeneralInformation$ = EntryCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.PaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PaymentDate$;
(function (PaymentDate$) {
    /** @deprecated use `PaymentDate$inboundSchema` instead. */
    PaymentDate$.inboundSchema = exports.PaymentDate$inboundSchema;
    /** @deprecated use `PaymentDate$outboundSchema` instead. */
    PaymentDate$.outboundSchema = exports.PaymentDate$outboundSchema;
})(PaymentDate$ || (exports.PaymentDate$ = PaymentDate$ = {}));
/** @internal */
exports.EntryCapitalGainsQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryCapitalGainsQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryCapitalGainsQuantity$;
(function (EntryCapitalGainsQuantity$) {
    /** @deprecated use `EntryCapitalGainsQuantity$inboundSchema` instead. */
    EntryCapitalGainsQuantity$.inboundSchema = exports.EntryCapitalGainsQuantity$inboundSchema;
    /** @deprecated use `EntryCapitalGainsQuantity$outboundSchema` instead. */
    EntryCapitalGainsQuantity$.outboundSchema = exports.EntryCapitalGainsQuantity$outboundSchema;
})(EntryCapitalGainsQuantity$ || (exports.EntryCapitalGainsQuantity$ = EntryCapitalGainsQuantity$ = {}));
/** @internal */
exports.RecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.RecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RecordDate$;
(function (RecordDate$) {
    /** @deprecated use `RecordDate$inboundSchema` instead. */
    RecordDate$.inboundSchema = exports.RecordDate$inboundSchema;
    /** @deprecated use `RecordDate$outboundSchema` instead. */
    RecordDate$.outboundSchema = exports.RecordDate$outboundSchema;
})(RecordDate$ || (exports.RecordDate$ = RecordDate$ = {}));
/** @internal */
exports.CapitalGains$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.CashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryCorporateActionGeneralInformation$inboundSchema)).optional(),
    long_term_gain: z.boolean().optional(),
    payment_date: z.nullable(z.lazy(() => exports.PaymentDate$inboundSchema)).optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryCapitalGainsQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.RecordDate$inboundSchema)).optional(),
    reinvested: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "long_term_gain": "longTermGain",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.CapitalGains$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.CashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryCorporateActionGeneralInformation$outboundSchema)).optional(),
    longTermGain: z.boolean().optional(),
    paymentDate: z.nullable(z.lazy(() => exports.PaymentDate$outboundSchema)).optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryCapitalGainsQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => exports.RecordDate$outboundSchema)).optional(),
    reinvested: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        longTermGain: "long_term_gain",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CapitalGains$;
(function (CapitalGains$) {
    /** @deprecated use `CapitalGains$inboundSchema` instead. */
    CapitalGains$.inboundSchema = exports.CapitalGains$inboundSchema;
    /** @deprecated use `CapitalGains$outboundSchema` instead. */
    CapitalGains$.outboundSchema = exports.CapitalGains$outboundSchema;
})(CapitalGains$ || (exports.CapitalGains$ = CapitalGains$ = {}));
/** @internal */
exports.EntryCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryCashRate$;
(function (EntryCashRate$) {
    /** @deprecated use `EntryCashRate$inboundSchema` instead. */
    EntryCashRate$.inboundSchema = exports.EntryCashRate$inboundSchema;
    /** @deprecated use `EntryCashRate$outboundSchema` instead. */
    EntryCashRate$.outboundSchema = exports.EntryCashRate$outboundSchema;
})(EntryCashRate$ || (exports.EntryCashRate$ = EntryCashRate$ = {}));
/** @internal */
exports.EntryCashDividendCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryCashDividendCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryCashDividendCorporateActionGeneralInformation$;
(function (EntryCashDividendCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryCashDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryCashDividendCorporateActionGeneralInformation$.inboundSchema = exports.EntryCashDividendCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryCashDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryCashDividendCorporateActionGeneralInformation$.outboundSchema = exports.EntryCashDividendCorporateActionGeneralInformation$outboundSchema;
})(EntryCashDividendCorporateActionGeneralInformation$ || (exports.EntryCashDividendCorporateActionGeneralInformation$ = EntryCashDividendCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryFpsl$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryFpsl$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFpsl$;
(function (EntryFpsl$) {
    /** @deprecated use `EntryFpsl$inboundSchema` instead. */
    EntryFpsl$.inboundSchema = exports.EntryFpsl$inboundSchema;
    /** @deprecated use `EntryFpsl$outboundSchema` instead. */
    EntryFpsl$.outboundSchema = exports.EntryFpsl$outboundSchema;
})(EntryFpsl$ || (exports.EntryFpsl$ = EntryFpsl$ = {}));
/** @internal */
exports.EntryFree$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryFree$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFree$;
(function (EntryFree$) {
    /** @deprecated use `EntryFree$inboundSchema` instead. */
    EntryFree$.inboundSchema = exports.EntryFree$inboundSchema;
    /** @deprecated use `EntryFree$outboundSchema` instead. */
    EntryFree$.outboundSchema = exports.EntryFree$outboundSchema;
})(EntryFree$ || (exports.EntryFree$ = EntryFree$ = {}));
/** @internal */
exports.EntryPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPaymentDate$;
(function (EntryPaymentDate$) {
    /** @deprecated use `EntryPaymentDate$inboundSchema` instead. */
    EntryPaymentDate$.inboundSchema = exports.EntryPaymentDate$inboundSchema;
    /** @deprecated use `EntryPaymentDate$outboundSchema` instead. */
    EntryPaymentDate$.outboundSchema = exports.EntryPaymentDate$outboundSchema;
})(EntryPaymentDate$ || (exports.EntryPaymentDate$ = EntryPaymentDate$ = {}));
/** @internal */
exports.EntryCashDividendQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryCashDividendQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryCashDividendQuantity$;
(function (EntryCashDividendQuantity$) {
    /** @deprecated use `EntryCashDividendQuantity$inboundSchema` instead. */
    EntryCashDividendQuantity$.inboundSchema = exports.EntryCashDividendQuantity$inboundSchema;
    /** @deprecated use `EntryCashDividendQuantity$outboundSchema` instead. */
    EntryCashDividendQuantity$.outboundSchema = exports.EntryCashDividendQuantity$outboundSchema;
})(EntryCashDividendQuantity$ || (exports.EntryCashDividendQuantity$ = EntryCashDividendQuantity$ = {}));
/** @internal */
exports.EntryRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRecordDate$;
(function (EntryRecordDate$) {
    /** @deprecated use `EntryRecordDate$inboundSchema` instead. */
    EntryRecordDate$.inboundSchema = exports.EntryRecordDate$inboundSchema;
    /** @deprecated use `EntryRecordDate$outboundSchema` instead. */
    EntryRecordDate$.outboundSchema = exports.EntryRecordDate$outboundSchema;
})(EntryRecordDate$ || (exports.EntryRecordDate$ = EntryRecordDate$ = {}));
/** @internal */
exports.EntryCashDividendSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryCashDividendSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryCashDividendSettled$;
(function (EntryCashDividendSettled$) {
    /** @deprecated use `EntryCashDividendSettled$inboundSchema` instead. */
    EntryCashDividendSettled$.inboundSchema = exports.EntryCashDividendSettled$inboundSchema;
    /** @deprecated use `EntryCashDividendSettled$outboundSchema` instead. */
    EntryCashDividendSettled$.outboundSchema = exports.EntryCashDividendSettled$outboundSchema;
})(EntryCashDividendSettled$ || (exports.EntryCashDividendSettled$ = EntryCashDividendSettled$ = {}));
/** @internal */
exports.Subtype$inboundSchema = z
    .union([
    z.nativeEnum(Subtype),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.Subtype$outboundSchema = z.union([
    z.nativeEnum(Subtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Subtype$;
(function (Subtype$) {
    /** @deprecated use `Subtype$inboundSchema` instead. */
    Subtype$.inboundSchema = exports.Subtype$inboundSchema;
    /** @deprecated use `Subtype$outboundSchema` instead. */
    Subtype$.outboundSchema = exports.Subtype$outboundSchema;
})(Subtype$ || (exports.Subtype$ = Subtype$ = {}));
/** @internal */
exports.CashDividend$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.EntryCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryCashDividendCorporateActionGeneralInformation$inboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => exports.EntryFpsl$inboundSchema)).optional(),
    free: z.nullable(z.lazy(() => exports.EntryFree$inboundSchema)).optional(),
    long_term_gain: z.boolean().optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryPaymentDate$inboundSchema))
        .optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryCashDividendQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.EntryRecordDate$inboundSchema))
        .optional(),
    reinvested: z.boolean().optional(),
    settled: z.nullable(z.lazy(() => exports.EntryCashDividendSettled$inboundSchema))
        .optional(),
    substitute_payment: z.boolean().optional(),
    subtype: exports.Subtype$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "long_term_gain": "longTermGain",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
        "substitute_payment": "substitutePayment",
    });
});
/** @internal */
exports.CashDividend$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.EntryCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryCashDividendCorporateActionGeneralInformation$outboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => exports.EntryFpsl$outboundSchema)).optional(),
    free: z.nullable(z.lazy(() => exports.EntryFree$outboundSchema)).optional(),
    longTermGain: z.boolean().optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryPaymentDate$outboundSchema))
        .optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryCashDividendQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntryRecordDate$outboundSchema))
        .optional(),
    reinvested: z.boolean().optional(),
    settled: z.nullable(z.lazy(() => exports.EntryCashDividendSettled$outboundSchema))
        .optional(),
    substitutePayment: z.boolean().optional(),
    subtype: exports.Subtype$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        longTermGain: "long_term_gain",
        paymentDate: "payment_date",
        recordDate: "record_date",
        substitutePayment: "substitute_payment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CashDividend$;
(function (CashDividend$) {
    /** @deprecated use `CashDividend$inboundSchema` instead. */
    CashDividend$.inboundSchema = exports.CashDividend$inboundSchema;
    /** @deprecated use `CashDividend$outboundSchema` instead. */
    CashDividend$.outboundSchema = exports.CashDividend$outboundSchema;
})(CashDividend$ || (exports.CashDividend$ = CashDividend$ = {}));
/** @internal */
exports.EntryCommission$inboundSchema = z.object({});
/** @internal */
exports.EntryCommission$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryCommission$;
(function (EntryCommission$) {
    /** @deprecated use `EntryCommission$inboundSchema` instead. */
    EntryCommission$.inboundSchema = exports.EntryCommission$inboundSchema;
    /** @deprecated use `EntryCommission$outboundSchema` instead. */
    EntryCommission$.outboundSchema = exports.EntryCommission$outboundSchema;
})(EntryCommission$ || (exports.EntryCommission$ = EntryCommission$ = {}));
/** @internal */
exports.EntryConversionCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryConversionCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryConversionCashRate$;
(function (EntryConversionCashRate$) {
    /** @deprecated use `EntryConversionCashRate$inboundSchema` instead. */
    EntryConversionCashRate$.inboundSchema = exports.EntryConversionCashRate$inboundSchema;
    /** @deprecated use `EntryConversionCashRate$outboundSchema` instead. */
    EntryConversionCashRate$.outboundSchema = exports.EntryConversionCashRate$outboundSchema;
})(EntryConversionCashRate$ || (exports.EntryConversionCashRate$ = EntryConversionCashRate$ = {}));
/** @internal */
exports.EntryConversionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryConversionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryConversionCorporateActionGeneralInformation$;
(function (EntryConversionCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryConversionCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryConversionCorporateActionGeneralInformation$.inboundSchema = exports.EntryConversionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryConversionCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryConversionCorporateActionGeneralInformation$.outboundSchema = exports.EntryConversionCorporateActionGeneralInformation$outboundSchema;
})(EntryConversionCorporateActionGeneralInformation$ || (exports.EntryConversionCorporateActionGeneralInformation$ = EntryConversionCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.StockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.StockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StockRate$;
(function (StockRate$) {
    /** @deprecated use `StockRate$inboundSchema` instead. */
    StockRate$.inboundSchema = exports.StockRate$inboundSchema;
    /** @deprecated use `StockRate$outboundSchema` instead. */
    StockRate$.outboundSchema = exports.StockRate$outboundSchema;
})(StockRate$ || (exports.StockRate$ = StockRate$ = {}));
/** @internal */
exports.EntryConversionType$inboundSchema = z
    .union([
    z.nativeEnum(EntryConversionType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryConversionType$outboundSchema = z.union([
    z.nativeEnum(EntryConversionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryConversionType$;
(function (EntryConversionType$) {
    /** @deprecated use `EntryConversionType$inboundSchema` instead. */
    EntryConversionType$.inboundSchema = exports.EntryConversionType$inboundSchema;
    /** @deprecated use `EntryConversionType$outboundSchema` instead. */
    EntryConversionType$.outboundSchema = exports.EntryConversionType$outboundSchema;
})(EntryConversionType$ || (exports.EntryConversionType$ = EntryConversionType$ = {}));
/** @internal */
exports.Conversion$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.EntryConversionCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryConversionCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => exports.StockRate$inboundSchema)).optional(),
    type: exports.EntryConversionType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.Conversion$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.EntryConversionCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryConversionCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => exports.StockRate$outboundSchema)).optional(),
    type: exports.EntryConversionType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Conversion$;
(function (Conversion$) {
    /** @deprecated use `Conversion$inboundSchema` instead. */
    Conversion$.inboundSchema = exports.Conversion$inboundSchema;
    /** @deprecated use `Conversion$outboundSchema` instead. */
    Conversion$.outboundSchema = exports.Conversion$outboundSchema;
})(Conversion$ || (exports.Conversion$ = Conversion$ = {}));
/** @internal */
exports.CorporateActionMemoAdjustment$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    corporate_action_type: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "corporate_action_type": "corporateActionType",
    });
});
/** @internal */
exports.CorporateActionMemoAdjustment$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    corporateActionType: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        corporateActionType: "corporate_action_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CorporateActionMemoAdjustment$;
(function (CorporateActionMemoAdjustment$) {
    /** @deprecated use `CorporateActionMemoAdjustment$inboundSchema` instead. */
    CorporateActionMemoAdjustment$.inboundSchema = exports.CorporateActionMemoAdjustment$inboundSchema;
    /** @deprecated use `CorporateActionMemoAdjustment$outboundSchema` instead. */
    CorporateActionMemoAdjustment$.outboundSchema = exports.CorporateActionMemoAdjustment$outboundSchema;
})(CorporateActionMemoAdjustment$ || (exports.CorporateActionMemoAdjustment$ = CorporateActionMemoAdjustment$ = {}));
/** @internal */
exports.CreditType$inboundSchema = z
    .union([
    z.nativeEnum(CreditType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CreditType$outboundSchema = z.union([
    z.nativeEnum(CreditType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CreditType$;
(function (CreditType$) {
    /** @deprecated use `CreditType$inboundSchema` instead. */
    CreditType$.inboundSchema = exports.CreditType$inboundSchema;
    /** @deprecated use `CreditType$outboundSchema` instead. */
    CreditType$.outboundSchema = exports.CreditType$outboundSchema;
})(CreditType$ || (exports.CreditType$ = CreditType$ = {}));
/** @internal */
exports.Credit$inboundSchema = z
    .object({
    additional_instructions: z.string().optional(),
    credit_type: exports.CreditType$inboundSchema.optional(),
    taxable: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "credit_type": "creditType",
    });
});
/** @internal */
exports.Credit$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    creditType: exports.CreditType$outboundSchema.optional(),
    taxable: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        creditType: "credit_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Credit$;
(function (Credit$) {
    /** @deprecated use `Credit$inboundSchema` instead. */
    Credit$.inboundSchema = exports.Credit$inboundSchema;
    /** @deprecated use `Credit$outboundSchema` instead. */
    Credit$.outboundSchema = exports.Credit$outboundSchema;
})(Credit$ || (exports.Credit$ = Credit$ = {}));
/** @internal */
exports.EntryDeliveryCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryDeliveryCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryDeliveryCorporateActionGeneralInformation$;
(function (EntryDeliveryCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryDeliveryCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryDeliveryCorporateActionGeneralInformation$.inboundSchema = exports.EntryDeliveryCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryDeliveryCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryDeliveryCorporateActionGeneralInformation$.outboundSchema = exports.EntryDeliveryCorporateActionGeneralInformation$outboundSchema;
})(EntryDeliveryCorporateActionGeneralInformation$ || (exports.EntryDeliveryCorporateActionGeneralInformation$ = EntryDeliveryCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.Delivery$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryDeliveryCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
exports.Delivery$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryDeliveryCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Delivery$;
(function (Delivery$) {
    /** @deprecated use `Delivery$inboundSchema` instead. */
    Delivery$.inboundSchema = exports.Delivery$inboundSchema;
    /** @deprecated use `Delivery$outboundSchema` instead. */
    Delivery$.outboundSchema = exports.Delivery$outboundSchema;
})(Delivery$ || (exports.Delivery$ = Delivery$ = {}));
/** @internal */
exports.ContributionType$inboundSchema = z
    .union([
    z.nativeEnum(ContributionType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ContributionType$outboundSchema = z.union([
    z.nativeEnum(ContributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ContributionType$;
(function (ContributionType$) {
    /** @deprecated use `ContributionType$inboundSchema` instead. */
    ContributionType$.inboundSchema = exports.ContributionType$inboundSchema;
    /** @deprecated use `ContributionType$outboundSchema` instead. */
    ContributionType$.outboundSchema = exports.ContributionType$outboundSchema;
})(ContributionType$ || (exports.ContributionType$ = ContributionType$ = {}));
/** @internal */
exports.EntryDepositType$inboundSchema = z
    .union([
    z.nativeEnum(EntryDepositType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryDepositType$outboundSchema = z.union([
    z.nativeEnum(EntryDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryDepositType$;
(function (EntryDepositType$) {
    /** @deprecated use `EntryDepositType$inboundSchema` instead. */
    EntryDepositType$.inboundSchema = exports.EntryDepositType$inboundSchema;
    /** @deprecated use `EntryDepositType$outboundSchema` instead. */
    EntryDepositType$.outboundSchema = exports.EntryDepositType$outboundSchema;
})(EntryDepositType$ || (exports.EntryDepositType$ = EntryDepositType$ = {}));
/** @internal */
exports.Deposit$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    contribution_type: exports.ContributionType$inboundSchema.optional(),
    contribution_year: z.number().int().optional(),
    fed_reference_number: z.string().optional(),
    originating_account_number: z.string().optional(),
    type: exports.EntryDepositType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "contribution_type": "contributionType",
        "contribution_year": "contributionYear",
        "fed_reference_number": "fedReferenceNumber",
        "originating_account_number": "originatingAccountNumber",
    });
});
/** @internal */
exports.Deposit$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    contributionType: exports.ContributionType$outboundSchema.optional(),
    contributionYear: z.number().int().optional(),
    fedReferenceNumber: z.string().optional(),
    originatingAccountNumber: z.string().optional(),
    type: exports.EntryDepositType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        contributionType: "contribution_type",
        contributionYear: "contribution_year",
        fedReferenceNumber: "fed_reference_number",
        originatingAccountNumber: "originating_account_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Deposit$;
(function (Deposit$) {
    /** @deprecated use `Deposit$inboundSchema` instead. */
    Deposit$.inboundSchema = exports.Deposit$inboundSchema;
    /** @deprecated use `Deposit$outboundSchema` instead. */
    Deposit$.outboundSchema = exports.Deposit$outboundSchema;
})(Deposit$ || (exports.Deposit$ = Deposit$ = {}));
/** @internal */
exports.EntryAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryAction$outboundSchema = z.union([
    z.nativeEnum(EntryAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryAction$;
(function (EntryAction$) {
    /** @deprecated use `EntryAction$inboundSchema` instead. */
    EntryAction$.inboundSchema = exports.EntryAction$inboundSchema;
    /** @deprecated use `EntryAction$outboundSchema` instead. */
    EntryAction$.outboundSchema = exports.EntryAction$outboundSchema;
})(EntryAction$ || (exports.EntryAction$ = EntryAction$ = {}));
/** @internal */
exports.Drip$inboundSchema = z
    .object({
    action: exports.EntryAction$inboundSchema.optional(),
});
/** @internal */
exports.Drip$outboundSchema = z.object({
    action: exports.EntryAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Drip$;
(function (Drip$) {
    /** @deprecated use `Drip$inboundSchema` instead. */
    Drip$.inboundSchema = exports.Drip$inboundSchema;
    /** @deprecated use `Drip$outboundSchema` instead. */
    Drip$.outboundSchema = exports.Drip$outboundSchema;
})(Drip$ || (exports.Drip$ = Drip$ = {}));
/** @internal */
exports.EntryExchangeCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryExchangeCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryExchangeCashRate$;
(function (EntryExchangeCashRate$) {
    /** @deprecated use `EntryExchangeCashRate$inboundSchema` instead. */
    EntryExchangeCashRate$.inboundSchema = exports.EntryExchangeCashRate$inboundSchema;
    /** @deprecated use `EntryExchangeCashRate$outboundSchema` instead. */
    EntryExchangeCashRate$.outboundSchema = exports.EntryExchangeCashRate$outboundSchema;
})(EntryExchangeCashRate$ || (exports.EntryExchangeCashRate$ = EntryExchangeCashRate$ = {}));
/** @internal */
exports.EntryExchangeCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryExchangeCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryExchangeCorporateActionGeneralInformation$;
(function (EntryExchangeCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryExchangeCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryExchangeCorporateActionGeneralInformation$.inboundSchema = exports.EntryExchangeCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryExchangeCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryExchangeCorporateActionGeneralInformation$.outboundSchema = exports.EntryExchangeCorporateActionGeneralInformation$outboundSchema;
})(EntryExchangeCorporateActionGeneralInformation$ || (exports.EntryExchangeCorporateActionGeneralInformation$ = EntryExchangeCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryStockRate$;
(function (EntryStockRate$) {
    /** @deprecated use `EntryStockRate$inboundSchema` instead. */
    EntryStockRate$.inboundSchema = exports.EntryStockRate$inboundSchema;
    /** @deprecated use `EntryStockRate$outboundSchema` instead. */
    EntryStockRate$.outboundSchema = exports.EntryStockRate$outboundSchema;
})(EntryStockRate$ || (exports.EntryStockRate$ = EntryStockRate$ = {}));
/** @internal */
exports.EntryExchangeType$inboundSchema = z
    .union([
    z.nativeEnum(EntryExchangeType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryExchangeType$outboundSchema = z.union([
    z.nativeEnum(EntryExchangeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryExchangeType$;
(function (EntryExchangeType$) {
    /** @deprecated use `EntryExchangeType$inboundSchema` instead. */
    EntryExchangeType$.inboundSchema = exports.EntryExchangeType$inboundSchema;
    /** @deprecated use `EntryExchangeType$outboundSchema` instead. */
    EntryExchangeType$.outboundSchema = exports.EntryExchangeType$outboundSchema;
})(EntryExchangeType$ || (exports.EntryExchangeType$ = EntryExchangeType$ = {}));
/** @internal */
exports.Exchange$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.EntryExchangeCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryExchangeCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => exports.EntryStockRate$inboundSchema)).optional(),
    type: exports.EntryExchangeType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.Exchange$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.EntryExchangeCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryExchangeCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => exports.EntryStockRate$outboundSchema)).optional(),
    type: exports.EntryExchangeType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Exchange$;
(function (Exchange$) {
    /** @deprecated use `Exchange$inboundSchema` instead. */
    Exchange$.inboundSchema = exports.Exchange$inboundSchema;
    /** @deprecated use `Exchange$outboundSchema` instead. */
    Exchange$.outboundSchema = exports.Exchange$outboundSchema;
})(Exchange$ || (exports.Exchange$ = Exchange$ = {}));
/** @internal */
exports.EntryFeeType$inboundSchema = z
    .union([
    z.nativeEnum(EntryFeeType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryFeeType$outboundSchema = z.union([
    z.nativeEnum(EntryFeeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFeeType$;
(function (EntryFeeType$) {
    /** @deprecated use `EntryFeeType$inboundSchema` instead. */
    EntryFeeType$.inboundSchema = exports.EntryFeeType$inboundSchema;
    /** @deprecated use `EntryFeeType$outboundSchema` instead. */
    EntryFeeType$.outboundSchema = exports.EntryFeeType$outboundSchema;
})(EntryFeeType$ || (exports.EntryFeeType$ = EntryFeeType$ = {}));
/** @internal */
exports.EntryFee$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    type: exports.EntryFeeType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
    });
});
/** @internal */
exports.EntryFee$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    type: exports.EntryFeeType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFee$;
(function (EntryFee$) {
    /** @deprecated use `EntryFee$inboundSchema` instead. */
    EntryFee$.inboundSchema = exports.EntryFee$inboundSchema;
    /** @deprecated use `EntryFee$outboundSchema` instead. */
    EntryFee$.outboundSchema = exports.EntryFee$outboundSchema;
})(EntryFee$ || (exports.EntryFee$ = EntryFee$ = {}));
/** @internal */
exports.EntryFlipBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(EntryFlipBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryFlipBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(EntryFlipBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFlipBrokerCapacity$;
(function (EntryFlipBrokerCapacity$) {
    /** @deprecated use `EntryFlipBrokerCapacity$inboundSchema` instead. */
    EntryFlipBrokerCapacity$.inboundSchema = exports.EntryFlipBrokerCapacity$inboundSchema;
    /** @deprecated use `EntryFlipBrokerCapacity$outboundSchema` instead. */
    EntryFlipBrokerCapacity$.outboundSchema = exports.EntryFlipBrokerCapacity$outboundSchema;
})(EntryFlipBrokerCapacity$ || (exports.EntryFlipBrokerCapacity$ = EntryFlipBrokerCapacity$ = {}));
/** @internal */
exports.EntryFlipPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryFlipPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFlipPrevailingMarketPrice$;
(function (EntryFlipPrevailingMarketPrice$) {
    /** @deprecated use `EntryFlipPrevailingMarketPrice$inboundSchema` instead. */
    EntryFlipPrevailingMarketPrice$.inboundSchema = exports.EntryFlipPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `EntryFlipPrevailingMarketPrice$outboundSchema` instead. */
    EntryFlipPrevailingMarketPrice$.outboundSchema = exports.EntryFlipPrevailingMarketPrice$outboundSchema;
})(EntryFlipPrevailingMarketPrice$ || (exports.EntryFlipPrevailingMarketPrice$ = EntryFlipPrevailingMarketPrice$ = {}));
/** @internal */
exports.EntryFlipPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryFlipPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFlipPriceAdjustmentAmount$;
(function (EntryFlipPriceAdjustmentAmount$) {
    /** @deprecated use `EntryFlipPriceAdjustmentAmount$inboundSchema` instead. */
    EntryFlipPriceAdjustmentAmount$.inboundSchema = exports.EntryFlipPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `EntryFlipPriceAdjustmentAmount$outboundSchema` instead. */
    EntryFlipPriceAdjustmentAmount$.outboundSchema = exports.EntryFlipPriceAdjustmentAmount$outboundSchema;
})(EntryFlipPriceAdjustmentAmount$ || (exports.EntryFlipPriceAdjustmentAmount$ = EntryFlipPriceAdjustmentAmount$ = {}));
/** @internal */
exports.EntryFlipPriceAdjustmentPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryFlipPriceAdjustmentPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFlipPriceAdjustmentPercent$;
(function (EntryFlipPriceAdjustmentPercent$) {
    /** @deprecated use `EntryFlipPriceAdjustmentPercent$inboundSchema` instead. */
    EntryFlipPriceAdjustmentPercent$.inboundSchema = exports.EntryFlipPriceAdjustmentPercent$inboundSchema;
    /** @deprecated use `EntryFlipPriceAdjustmentPercent$outboundSchema` instead. */
    EntryFlipPriceAdjustmentPercent$.outboundSchema = exports.EntryFlipPriceAdjustmentPercent$outboundSchema;
})(EntryFlipPriceAdjustmentPercent$ || (exports.EntryFlipPriceAdjustmentPercent$ = EntryFlipPriceAdjustmentPercent$ = {}));
/** @internal */
exports.EntryFlipPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(EntryFlipPriceAdjustmentType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryFlipPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(EntryFlipPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFlipPriceAdjustmentType$;
(function (EntryFlipPriceAdjustmentType$) {
    /** @deprecated use `EntryFlipPriceAdjustmentType$inboundSchema` instead. */
    EntryFlipPriceAdjustmentType$.inboundSchema = exports.EntryFlipPriceAdjustmentType$inboundSchema;
    /** @deprecated use `EntryFlipPriceAdjustmentType$outboundSchema` instead. */
    EntryFlipPriceAdjustmentType$.outboundSchema = exports.EntryFlipPriceAdjustmentType$outboundSchema;
})(EntryFlipPriceAdjustmentType$ || (exports.EntryFlipPriceAdjustmentType$ = EntryFlipPriceAdjustmentType$ = {}));
/** @internal */
exports.EntryFlipPriceAdjustmentRecord$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => exports.EntryFlipPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_percent: z.nullable(z.lazy(() => exports.EntryFlipPriceAdjustmentPercent$inboundSchema)).optional(),
    price_adjustment_type: exports.EntryFlipPriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
exports.EntryFlipPriceAdjustmentRecord$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => exports.EntryFlipPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentPercent: z.nullable(z.lazy(() => exports.EntryFlipPriceAdjustmentPercent$outboundSchema)).optional(),
    priceAdjustmentType: exports.EntryFlipPriceAdjustmentType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentPercent: "price_adjustment_percent",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFlipPriceAdjustmentRecord$;
(function (EntryFlipPriceAdjustmentRecord$) {
    /** @deprecated use `EntryFlipPriceAdjustmentRecord$inboundSchema` instead. */
    EntryFlipPriceAdjustmentRecord$.inboundSchema = exports.EntryFlipPriceAdjustmentRecord$inboundSchema;
    /** @deprecated use `EntryFlipPriceAdjustmentRecord$outboundSchema` instead. */
    EntryFlipPriceAdjustmentRecord$.outboundSchema = exports.EntryFlipPriceAdjustmentRecord$outboundSchema;
})(EntryFlipPriceAdjustmentRecord$ || (exports.EntryFlipPriceAdjustmentRecord$ = EntryFlipPriceAdjustmentRecord$ = {}));
/** @internal */
exports.Detail$inboundSchema = z
    .object({
    additional_instructions: z.array(z.string()).optional(),
    alternate_order_id: z.string().optional(),
    booking_api_booking_execution_id: z.string().optional(),
    booking_api_trade_allocation_id: z.string().optional(),
    booking_api_trade_id: z.string().optional(),
    broker: z.string().optional(),
    broker_capacity: exports.EntryFlipBrokerCapacity$inboundSchema.optional(),
    client_memo: z.string().optional(),
    client_order_id: z.string().optional(),
    exchange: z.string().optional(),
    execution_id: z.string().optional(),
    execution_only: z.boolean().optional(),
    external_id: z.string().optional(),
    fund_confirmation_number: z.string().optional(),
    gateway_client_order_id: z.string().optional(),
    internal_error: z.boolean().optional(),
    is_writeoff: z.boolean().optional(),
    lots: z.array(lot_js_1.Lot$inboundSchema).optional(),
    market: z.string().optional(),
    order_id: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => exports.EntryFlipPrevailingMarketPrice$inboundSchema)).optional(),
    price_adjustment_record: z.nullable(z.lazy(() => exports.EntryFlipPriceAdjustmentRecord$inboundSchema)).optional(),
    route: z.string().optional(),
    special_instructions: z.array(z.string()).optional(),
    when_issued: z.boolean().optional(),
    yield_records: z.array(yieldrecord_js_1.YieldRecord$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "booking_api_booking_execution_id": "bookingApiBookingExecutionId",
        "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
        "booking_api_trade_id": "bookingApiTradeId",
        "broker_capacity": "brokerCapacity",
        "client_memo": "clientMemo",
        "client_order_id": "clientOrderId",
        "execution_id": "executionId",
        "execution_only": "executionOnly",
        "external_id": "externalId",
        "fund_confirmation_number": "fundConfirmationNumber",
        "gateway_client_order_id": "gatewayClientOrderId",
        "internal_error": "internalError",
        "is_writeoff": "isWriteoff",
        "order_id": "orderId",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment_record": "priceAdjustmentRecord",
        "special_instructions": "specialInstructions",
        "when_issued": "whenIssued",
        "yield_records": "yieldRecords",
    });
});
/** @internal */
exports.Detail$outboundSchema = z.object({
    additionalInstructions: z.array(z.string()).optional(),
    alternateOrderId: z.string().optional(),
    bookingApiBookingExecutionId: z.string().optional(),
    bookingApiTradeAllocationId: z.string().optional(),
    bookingApiTradeId: z.string().optional(),
    broker: z.string().optional(),
    brokerCapacity: exports.EntryFlipBrokerCapacity$outboundSchema.optional(),
    clientMemo: z.string().optional(),
    clientOrderId: z.string().optional(),
    exchange: z.string().optional(),
    executionId: z.string().optional(),
    executionOnly: z.boolean().optional(),
    externalId: z.string().optional(),
    fundConfirmationNumber: z.string().optional(),
    gatewayClientOrderId: z.string().optional(),
    internalError: z.boolean().optional(),
    isWriteoff: z.boolean().optional(),
    lots: z.array(lot_js_1.Lot$outboundSchema).optional(),
    market: z.string().optional(),
    orderId: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => exports.EntryFlipPrevailingMarketPrice$outboundSchema)).optional(),
    priceAdjustmentRecord: z.nullable(z.lazy(() => exports.EntryFlipPriceAdjustmentRecord$outboundSchema)).optional(),
    route: z.string().optional(),
    specialInstructions: z.array(z.string()).optional(),
    whenIssued: z.boolean().optional(),
    yieldRecords: z.array(yieldrecord_js_1.YieldRecord$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        bookingApiBookingExecutionId: "booking_api_booking_execution_id",
        bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
        bookingApiTradeId: "booking_api_trade_id",
        brokerCapacity: "broker_capacity",
        clientMemo: "client_memo",
        clientOrderId: "client_order_id",
        executionId: "execution_id",
        executionOnly: "execution_only",
        externalId: "external_id",
        fundConfirmationNumber: "fund_confirmation_number",
        gatewayClientOrderId: "gateway_client_order_id",
        internalError: "internal_error",
        isWriteoff: "is_writeoff",
        orderId: "order_id",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustmentRecord: "price_adjustment_record",
        specialInstructions: "special_instructions",
        whenIssued: "when_issued",
        yieldRecords: "yield_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Detail$;
(function (Detail$) {
    /** @deprecated use `Detail$inboundSchema` instead. */
    Detail$.inboundSchema = exports.Detail$inboundSchema;
    /** @deprecated use `Detail$outboundSchema` instead. */
    Detail$.outboundSchema = exports.Detail$outboundSchema;
})(Detail$ || (exports.Detail$ = Detail$ = {}));
/** @internal */
exports.Flip$inboundSchema = z
    .object({
    detail: z.nullable(z.lazy(() => exports.Detail$inboundSchema)).optional(),
});
/** @internal */
exports.Flip$outboundSchema = z.object({
    detail: z.nullable(z.lazy(() => exports.Detail$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Flip$;
(function (Flip$) {
    /** @deprecated use `Flip$inboundSchema` instead. */
    Flip$.inboundSchema = exports.Flip$inboundSchema;
    /** @deprecated use `Flip$outboundSchema` instead. */
    Flip$.outboundSchema = exports.Flip$outboundSchema;
})(Flip$ || (exports.Flip$ = Flip$ = {}));
/** @internal */
exports.EntryFpslAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryFpslAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryFpslAction$outboundSchema = z.union([
    z.nativeEnum(EntryFpslAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFpslAction$;
(function (EntryFpslAction$) {
    /** @deprecated use `EntryFpslAction$inboundSchema` instead. */
    EntryFpslAction$.inboundSchema = exports.EntryFpslAction$inboundSchema;
    /** @deprecated use `EntryFpslAction$outboundSchema` instead. */
    EntryFpslAction$.outboundSchema = exports.EntryFpslAction$outboundSchema;
})(EntryFpslAction$ || (exports.EntryFpslAction$ = EntryFpslAction$ = {}));
/** @internal */
exports.Fpsl$inboundSchema = z
    .object({
    action: exports.EntryFpslAction$inboundSchema.optional(),
});
/** @internal */
exports.Fpsl$outboundSchema = z.object({
    action: exports.EntryFpslAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Fpsl$;
(function (Fpsl$) {
    /** @deprecated use `Fpsl$inboundSchema` instead. */
    Fpsl$.inboundSchema = exports.Fpsl$inboundSchema;
    /** @deprecated use `Fpsl$outboundSchema` instead. */
    Fpsl$.outboundSchema = exports.Fpsl$outboundSchema;
})(Fpsl$ || (exports.Fpsl$ = Fpsl$ = {}));
/** @internal */
exports.EntryGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryGrossAmount$;
(function (EntryGrossAmount$) {
    /** @deprecated use `EntryGrossAmount$inboundSchema` instead. */
    EntryGrossAmount$.inboundSchema = exports.EntryGrossAmount$inboundSchema;
    /** @deprecated use `EntryGrossAmount$outboundSchema` instead. */
    EntryGrossAmount$.outboundSchema = exports.EntryGrossAmount$outboundSchema;
})(EntryGrossAmount$ || (exports.EntryGrossAmount$ = EntryGrossAmount$ = {}));
/** @internal */
exports.InterestAccrualEndDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.InterestAccrualEndDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InterestAccrualEndDate$;
(function (InterestAccrualEndDate$) {
    /** @deprecated use `InterestAccrualEndDate$inboundSchema` instead. */
    InterestAccrualEndDate$.inboundSchema = exports.InterestAccrualEndDate$inboundSchema;
    /** @deprecated use `InterestAccrualEndDate$outboundSchema` instead. */
    InterestAccrualEndDate$.outboundSchema = exports.InterestAccrualEndDate$outboundSchema;
})(InterestAccrualEndDate$ || (exports.InterestAccrualEndDate$ = InterestAccrualEndDate$ = {}));
/** @internal */
exports.InterestAccrualStartDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.InterestAccrualStartDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InterestAccrualStartDate$;
(function (InterestAccrualStartDate$) {
    /** @deprecated use `InterestAccrualStartDate$inboundSchema` instead. */
    InterestAccrualStartDate$.inboundSchema = exports.InterestAccrualStartDate$inboundSchema;
    /** @deprecated use `InterestAccrualStartDate$outboundSchema` instead. */
    InterestAccrualStartDate$.outboundSchema = exports.InterestAccrualStartDate$outboundSchema;
})(InterestAccrualStartDate$ || (exports.InterestAccrualStartDate$ = InterestAccrualStartDate$ = {}));
/** @internal */
exports.InterestType$inboundSchema = z
    .union([
    z.nativeEnum(InterestType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.InterestType$outboundSchema = z.union([
    z.nativeEnum(InterestType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InterestType$;
(function (InterestType$) {
    /** @deprecated use `InterestType$inboundSchema` instead. */
    InterestType$.inboundSchema = exports.InterestType$inboundSchema;
    /** @deprecated use `InterestType$outboundSchema` instead. */
    InterestType$.outboundSchema = exports.InterestType$outboundSchema;
})(InterestType$ || (exports.InterestType$ = InterestType$ = {}));
/** @internal */
exports.Interest$inboundSchema = z.object({
    interest_accrual_end_date: z.nullable(z.lazy(() => exports.InterestAccrualEndDate$inboundSchema)).optional(),
    interest_accrual_start_date: z.nullable(z.lazy(() => exports.InterestAccrualStartDate$inboundSchema)).optional(),
    interest_type: exports.InterestType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "interest_accrual_end_date": "interestAccrualEndDate",
        "interest_accrual_start_date": "interestAccrualStartDate",
        "interest_type": "interestType",
    });
});
/** @internal */
exports.Interest$outboundSchema = z.object({
    interestAccrualEndDate: z.nullable(z.lazy(() => exports.InterestAccrualEndDate$outboundSchema)).optional(),
    interestAccrualStartDate: z.nullable(z.lazy(() => exports.InterestAccrualStartDate$outboundSchema)).optional(),
    interestType: exports.InterestType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        interestAccrualEndDate: "interest_accrual_end_date",
        interestAccrualStartDate: "interest_accrual_start_date",
        interestType: "interest_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Interest$;
(function (Interest$) {
    /** @deprecated use `Interest$inboundSchema` instead. */
    Interest$.inboundSchema = exports.Interest$inboundSchema;
    /** @deprecated use `Interest$outboundSchema` instead. */
    Interest$.outboundSchema = exports.Interest$outboundSchema;
})(Interest$ || (exports.Interest$ = Interest$ = {}));
/** @internal */
exports.EntryInterestPaymentCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryInterestPaymentCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryInterestPaymentCashRate$;
(function (EntryInterestPaymentCashRate$) {
    /** @deprecated use `EntryInterestPaymentCashRate$inboundSchema` instead. */
    EntryInterestPaymentCashRate$.inboundSchema = exports.EntryInterestPaymentCashRate$inboundSchema;
    /** @deprecated use `EntryInterestPaymentCashRate$outboundSchema` instead. */
    EntryInterestPaymentCashRate$.outboundSchema = exports.EntryInterestPaymentCashRate$outboundSchema;
})(EntryInterestPaymentCashRate$ || (exports.EntryInterestPaymentCashRate$ = EntryInterestPaymentCashRate$ = {}));
/** @internal */
exports.EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryInterestPaymentCorporateActionGeneralInformation$;
(function (EntryInterestPaymentCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryInterestPaymentCorporateActionGeneralInformation$.inboundSchema = exports.EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryInterestPaymentCorporateActionGeneralInformation$.outboundSchema = exports.EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema;
})(EntryInterestPaymentCorporateActionGeneralInformation$ || (exports.EntryInterestPaymentCorporateActionGeneralInformation$ = EntryInterestPaymentCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryInterestPaymentPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryInterestPaymentPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryInterestPaymentPaymentDate$;
(function (EntryInterestPaymentPaymentDate$) {
    /** @deprecated use `EntryInterestPaymentPaymentDate$inboundSchema` instead. */
    EntryInterestPaymentPaymentDate$.inboundSchema = exports.EntryInterestPaymentPaymentDate$inboundSchema;
    /** @deprecated use `EntryInterestPaymentPaymentDate$outboundSchema` instead. */
    EntryInterestPaymentPaymentDate$.outboundSchema = exports.EntryInterestPaymentPaymentDate$outboundSchema;
})(EntryInterestPaymentPaymentDate$ || (exports.EntryInterestPaymentPaymentDate$ = EntryInterestPaymentPaymentDate$ = {}));
/** @internal */
exports.EntryInterestPaymentRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryInterestPaymentRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryInterestPaymentRecordDate$;
(function (EntryInterestPaymentRecordDate$) {
    /** @deprecated use `EntryInterestPaymentRecordDate$inboundSchema` instead. */
    EntryInterestPaymentRecordDate$.inboundSchema = exports.EntryInterestPaymentRecordDate$inboundSchema;
    /** @deprecated use `EntryInterestPaymentRecordDate$outboundSchema` instead. */
    EntryInterestPaymentRecordDate$.outboundSchema = exports.EntryInterestPaymentRecordDate$outboundSchema;
})(EntryInterestPaymentRecordDate$ || (exports.EntryInterestPaymentRecordDate$ = EntryInterestPaymentRecordDate$ = {}));
/** @internal */
exports.EntrySettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntrySettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySettled$;
(function (EntrySettled$) {
    /** @deprecated use `EntrySettled$inboundSchema` instead. */
    EntrySettled$.inboundSchema = exports.EntrySettled$inboundSchema;
    /** @deprecated use `EntrySettled$outboundSchema` instead. */
    EntrySettled$.outboundSchema = exports.EntrySettled$outboundSchema;
})(EntrySettled$ || (exports.EntrySettled$ = EntrySettled$ = {}));
/** @internal */
exports.InterestPayment$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.EntryInterestPaymentCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryInterestPaymentCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryInterestPaymentPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.EntryInterestPaymentRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntrySettled$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.InterestPayment$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.EntryInterestPaymentCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryInterestPaymentCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryInterestPaymentPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntryInterestPaymentRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntrySettled$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InterestPayment$;
(function (InterestPayment$) {
    /** @deprecated use `InterestPayment$inboundSchema` instead. */
    InterestPayment$.inboundSchema = exports.InterestPayment$inboundSchema;
    /** @deprecated use `InterestPayment$outboundSchema` instead. */
    InterestPayment$.outboundSchema = exports.InterestPayment$outboundSchema;
})(InterestPayment$ || (exports.InterestPayment$ = InterestPayment$ = {}));
/** @internal */
exports.EntryLiquidationAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryLiquidationAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryLiquidationAction$outboundSchema = z.union([
    z.nativeEnum(EntryLiquidationAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryLiquidationAction$;
(function (EntryLiquidationAction$) {
    /** @deprecated use `EntryLiquidationAction$inboundSchema` instead. */
    EntryLiquidationAction$.inboundSchema = exports.EntryLiquidationAction$inboundSchema;
    /** @deprecated use `EntryLiquidationAction$outboundSchema` instead. */
    EntryLiquidationAction$.outboundSchema = exports.EntryLiquidationAction$outboundSchema;
})(EntryLiquidationAction$ || (exports.EntryLiquidationAction$ = EntryLiquidationAction$ = {}));
/** @internal */
exports.EntryLiquidationCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryLiquidationCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryLiquidationCashRate$;
(function (EntryLiquidationCashRate$) {
    /** @deprecated use `EntryLiquidationCashRate$inboundSchema` instead. */
    EntryLiquidationCashRate$.inboundSchema = exports.EntryLiquidationCashRate$inboundSchema;
    /** @deprecated use `EntryLiquidationCashRate$outboundSchema` instead. */
    EntryLiquidationCashRate$.outboundSchema = exports.EntryLiquidationCashRate$outboundSchema;
})(EntryLiquidationCashRate$ || (exports.EntryLiquidationCashRate$ = EntryLiquidationCashRate$ = {}));
/** @internal */
exports.EntryLiquidationCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryLiquidationCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryLiquidationCorporateActionGeneralInformation$;
(function (EntryLiquidationCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryLiquidationCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryLiquidationCorporateActionGeneralInformation$.inboundSchema = exports.EntryLiquidationCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryLiquidationCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryLiquidationCorporateActionGeneralInformation$.outboundSchema = exports.EntryLiquidationCorporateActionGeneralInformation$outboundSchema;
})(EntryLiquidationCorporateActionGeneralInformation$ || (exports.EntryLiquidationCorporateActionGeneralInformation$ = EntryLiquidationCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryEffectiveDate$;
(function (EntryEffectiveDate$) {
    /** @deprecated use `EntryEffectiveDate$inboundSchema` instead. */
    EntryEffectiveDate$.inboundSchema = exports.EntryEffectiveDate$inboundSchema;
    /** @deprecated use `EntryEffectiveDate$outboundSchema` instead. */
    EntryEffectiveDate$.outboundSchema = exports.EntryEffectiveDate$outboundSchema;
})(EntryEffectiveDate$ || (exports.EntryEffectiveDate$ = EntryEffectiveDate$ = {}));
/** @internal */
exports.EntryLiquidationPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryLiquidationPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryLiquidationPaymentDate$;
(function (EntryLiquidationPaymentDate$) {
    /** @deprecated use `EntryLiquidationPaymentDate$inboundSchema` instead. */
    EntryLiquidationPaymentDate$.inboundSchema = exports.EntryLiquidationPaymentDate$inboundSchema;
    /** @deprecated use `EntryLiquidationPaymentDate$outboundSchema` instead. */
    EntryLiquidationPaymentDate$.outboundSchema = exports.EntryLiquidationPaymentDate$outboundSchema;
})(EntryLiquidationPaymentDate$ || (exports.EntryLiquidationPaymentDate$ = EntryLiquidationPaymentDate$ = {}));
/** @internal */
exports.EntryLiquidationQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryLiquidationQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryLiquidationQuantity$;
(function (EntryLiquidationQuantity$) {
    /** @deprecated use `EntryLiquidationQuantity$inboundSchema` instead. */
    EntryLiquidationQuantity$.inboundSchema = exports.EntryLiquidationQuantity$inboundSchema;
    /** @deprecated use `EntryLiquidationQuantity$outboundSchema` instead. */
    EntryLiquidationQuantity$.outboundSchema = exports.EntryLiquidationQuantity$outboundSchema;
})(EntryLiquidationQuantity$ || (exports.EntryLiquidationQuantity$ = EntryLiquidationQuantity$ = {}));
/** @internal */
exports.EntryLiquidationRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryLiquidationRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryLiquidationRecordDate$;
(function (EntryLiquidationRecordDate$) {
    /** @deprecated use `EntryLiquidationRecordDate$inboundSchema` instead. */
    EntryLiquidationRecordDate$.inboundSchema = exports.EntryLiquidationRecordDate$inboundSchema;
    /** @deprecated use `EntryLiquidationRecordDate$outboundSchema` instead. */
    EntryLiquidationRecordDate$.outboundSchema = exports.EntryLiquidationRecordDate$outboundSchema;
})(EntryLiquidationRecordDate$ || (exports.EntryLiquidationRecordDate$ = EntryLiquidationRecordDate$ = {}));
/** @internal */
exports.EntryLiquidationSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryLiquidationSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryLiquidationSettled$;
(function (EntryLiquidationSettled$) {
    /** @deprecated use `EntryLiquidationSettled$inboundSchema` instead. */
    EntryLiquidationSettled$.inboundSchema = exports.EntryLiquidationSettled$inboundSchema;
    /** @deprecated use `EntryLiquidationSettled$outboundSchema` instead. */
    EntryLiquidationSettled$.outboundSchema = exports.EntryLiquidationSettled$outboundSchema;
})(EntryLiquidationSettled$ || (exports.EntryLiquidationSettled$ = EntryLiquidationSettled$ = {}));
/** @internal */
exports.EntrySubtype$inboundSchema = z
    .union([
    z.nativeEnum(EntrySubtype),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntrySubtype$outboundSchema = z.union([
    z.nativeEnum(EntrySubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySubtype$;
(function (EntrySubtype$) {
    /** @deprecated use `EntrySubtype$inboundSchema` instead. */
    EntrySubtype$.inboundSchema = exports.EntrySubtype$inboundSchema;
    /** @deprecated use `EntrySubtype$outboundSchema` instead. */
    EntrySubtype$.outboundSchema = exports.EntrySubtype$outboundSchema;
})(EntrySubtype$ || (exports.EntrySubtype$ = EntrySubtype$ = {}));
/** @internal */
exports.Liquidation$inboundSchema = z.object({
    action: exports.EntryLiquidationAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.EntryLiquidationCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryLiquidationCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.EntryEffectiveDate$inboundSchema))
        .optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryLiquidationPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryLiquidationQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.EntryLiquidationRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntryLiquidationSettled$inboundSchema))
        .optional(),
    subtype: exports.EntrySubtype$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.Liquidation$outboundSchema = z.object({
    action: exports.EntryLiquidationAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.EntryLiquidationCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryLiquidationCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.EntryEffectiveDate$outboundSchema))
        .optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryLiquidationPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryLiquidationQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntryLiquidationRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntryLiquidationSettled$outboundSchema))
        .optional(),
    subtype: exports.EntrySubtype$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Liquidation$;
(function (Liquidation$) {
    /** @deprecated use `Liquidation$inboundSchema` instead. */
    Liquidation$.inboundSchema = exports.Liquidation$inboundSchema;
    /** @deprecated use `Liquidation$outboundSchema` instead. */
    Liquidation$.outboundSchema = exports.Liquidation$outboundSchema;
})(Liquidation$ || (exports.Liquidation$ = Liquidation$ = {}));
/** @internal */
exports.EntryMaturityCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryMaturityCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMaturityCashRate$;
(function (EntryMaturityCashRate$) {
    /** @deprecated use `EntryMaturityCashRate$inboundSchema` instead. */
    EntryMaturityCashRate$.inboundSchema = exports.EntryMaturityCashRate$inboundSchema;
    /** @deprecated use `EntryMaturityCashRate$outboundSchema` instead. */
    EntryMaturityCashRate$.outboundSchema = exports.EntryMaturityCashRate$outboundSchema;
})(EntryMaturityCashRate$ || (exports.EntryMaturityCashRate$ = EntryMaturityCashRate$ = {}));
/** @internal */
exports.EntryMaturityCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryMaturityCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMaturityCorporateActionGeneralInformation$;
(function (EntryMaturityCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryMaturityCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryMaturityCorporateActionGeneralInformation$.inboundSchema = exports.EntryMaturityCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryMaturityCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryMaturityCorporateActionGeneralInformation$.outboundSchema = exports.EntryMaturityCorporateActionGeneralInformation$outboundSchema;
})(EntryMaturityCorporateActionGeneralInformation$ || (exports.EntryMaturityCorporateActionGeneralInformation$ = EntryMaturityCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryMaturityPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryMaturityPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMaturityPaymentDate$;
(function (EntryMaturityPaymentDate$) {
    /** @deprecated use `EntryMaturityPaymentDate$inboundSchema` instead. */
    EntryMaturityPaymentDate$.inboundSchema = exports.EntryMaturityPaymentDate$inboundSchema;
    /** @deprecated use `EntryMaturityPaymentDate$outboundSchema` instead. */
    EntryMaturityPaymentDate$.outboundSchema = exports.EntryMaturityPaymentDate$outboundSchema;
})(EntryMaturityPaymentDate$ || (exports.EntryMaturityPaymentDate$ = EntryMaturityPaymentDate$ = {}));
/** @internal */
exports.EntryMaturityQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryMaturityQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMaturityQuantity$;
(function (EntryMaturityQuantity$) {
    /** @deprecated use `EntryMaturityQuantity$inboundSchema` instead. */
    EntryMaturityQuantity$.inboundSchema = exports.EntryMaturityQuantity$inboundSchema;
    /** @deprecated use `EntryMaturityQuantity$outboundSchema` instead. */
    EntryMaturityQuantity$.outboundSchema = exports.EntryMaturityQuantity$outboundSchema;
})(EntryMaturityQuantity$ || (exports.EntryMaturityQuantity$ = EntryMaturityQuantity$ = {}));
/** @internal */
exports.Maturity$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.EntryMaturityCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryMaturityCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryMaturityPaymentDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryMaturityQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
exports.Maturity$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.EntryMaturityCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryMaturityCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryMaturityPaymentDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryMaturityQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Maturity$;
(function (Maturity$) {
    /** @deprecated use `Maturity$inboundSchema` instead. */
    Maturity$.inboundSchema = exports.Maturity$inboundSchema;
    /** @deprecated use `Maturity$outboundSchema` instead. */
    Maturity$.outboundSchema = exports.Maturity$outboundSchema;
})(Maturity$ || (exports.Maturity$ = Maturity$ = {}));
/** @internal */
exports.EntryMergerAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryMergerAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryMergerAction$outboundSchema = z.union([
    z.nativeEnum(EntryMergerAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMergerAction$;
(function (EntryMergerAction$) {
    /** @deprecated use `EntryMergerAction$inboundSchema` instead. */
    EntryMergerAction$.inboundSchema = exports.EntryMergerAction$inboundSchema;
    /** @deprecated use `EntryMergerAction$outboundSchema` instead. */
    EntryMergerAction$.outboundSchema = exports.EntryMergerAction$outboundSchema;
})(EntryMergerAction$ || (exports.EntryMergerAction$ = EntryMergerAction$ = {}));
/** @internal */
exports.EntryMergerCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryMergerCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMergerCashRate$;
(function (EntryMergerCashRate$) {
    /** @deprecated use `EntryMergerCashRate$inboundSchema` instead. */
    EntryMergerCashRate$.inboundSchema = exports.EntryMergerCashRate$inboundSchema;
    /** @deprecated use `EntryMergerCashRate$outboundSchema` instead. */
    EntryMergerCashRate$.outboundSchema = exports.EntryMergerCashRate$outboundSchema;
})(EntryMergerCashRate$ || (exports.EntryMergerCashRate$ = EntryMergerCashRate$ = {}));
/** @internal */
exports.EntryMergerCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryMergerCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMergerCorporateActionGeneralInformation$;
(function (EntryMergerCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryMergerCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryMergerCorporateActionGeneralInformation$.inboundSchema = exports.EntryMergerCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryMergerCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryMergerCorporateActionGeneralInformation$.outboundSchema = exports.EntryMergerCorporateActionGeneralInformation$outboundSchema;
})(EntryMergerCorporateActionGeneralInformation$ || (exports.EntryMergerCorporateActionGeneralInformation$ = EntryMergerCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryMergerEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryMergerEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMergerEffectiveDate$;
(function (EntryMergerEffectiveDate$) {
    /** @deprecated use `EntryMergerEffectiveDate$inboundSchema` instead. */
    EntryMergerEffectiveDate$.inboundSchema = exports.EntryMergerEffectiveDate$inboundSchema;
    /** @deprecated use `EntryMergerEffectiveDate$outboundSchema` instead. */
    EntryMergerEffectiveDate$.outboundSchema = exports.EntryMergerEffectiveDate$outboundSchema;
})(EntryMergerEffectiveDate$ || (exports.EntryMergerEffectiveDate$ = EntryMergerEffectiveDate$ = {}));
/** @internal */
exports.EntryMergerQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryMergerQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMergerQuantity$;
(function (EntryMergerQuantity$) {
    /** @deprecated use `EntryMergerQuantity$inboundSchema` instead. */
    EntryMergerQuantity$.inboundSchema = exports.EntryMergerQuantity$inboundSchema;
    /** @deprecated use `EntryMergerQuantity$outboundSchema` instead. */
    EntryMergerQuantity$.outboundSchema = exports.EntryMergerQuantity$outboundSchema;
})(EntryMergerQuantity$ || (exports.EntryMergerQuantity$ = EntryMergerQuantity$ = {}));
/** @internal */
exports.EntryMergerStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryMergerStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMergerStockRate$;
(function (EntryMergerStockRate$) {
    /** @deprecated use `EntryMergerStockRate$inboundSchema` instead. */
    EntryMergerStockRate$.inboundSchema = exports.EntryMergerStockRate$inboundSchema;
    /** @deprecated use `EntryMergerStockRate$outboundSchema` instead. */
    EntryMergerStockRate$.outboundSchema = exports.EntryMergerStockRate$outboundSchema;
})(EntryMergerStockRate$ || (exports.EntryMergerStockRate$ = EntryMergerStockRate$ = {}));
/** @internal */
exports.EntryMergerType$inboundSchema = z
    .union([
    z.nativeEnum(EntryMergerType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryMergerType$outboundSchema = z.union([
    z.nativeEnum(EntryMergerType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryMergerType$;
(function (EntryMergerType$) {
    /** @deprecated use `EntryMergerType$inboundSchema` instead. */
    EntryMergerType$.inboundSchema = exports.EntryMergerType$inboundSchema;
    /** @deprecated use `EntryMergerType$outboundSchema` instead. */
    EntryMergerType$.outboundSchema = exports.EntryMergerType$outboundSchema;
})(EntryMergerType$ || (exports.EntryMergerType$ = EntryMergerType$ = {}));
/** @internal */
exports.Merger$inboundSchema = z
    .object({
    action: exports.EntryMergerAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.EntryMergerCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryMergerCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.EntryMergerEffectiveDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryMergerQuantity$inboundSchema))
        .optional(),
    stock_rate: z.nullable(z.lazy(() => exports.EntryMergerStockRate$inboundSchema))
        .optional(),
    type: exports.EntryMergerType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.Merger$outboundSchema = z.object({
    action: exports.EntryMergerAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.EntryMergerCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryMergerCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.EntryMergerEffectiveDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryMergerQuantity$outboundSchema))
        .optional(),
    stockRate: z.nullable(z.lazy(() => exports.EntryMergerStockRate$outboundSchema))
        .optional(),
    type: exports.EntryMergerType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Merger$;
(function (Merger$) {
    /** @deprecated use `Merger$inboundSchema` instead. */
    Merger$.inboundSchema = exports.Merger$inboundSchema;
    /** @deprecated use `Merger$outboundSchema` instead. */
    Merger$.outboundSchema = exports.Merger$outboundSchema;
})(Merger$ || (exports.Merger$ = Merger$ = {}));
/** @internal */
exports.EntryNameChangeAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryNameChangeAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryNameChangeAction$outboundSchema = z.union([
    z.nativeEnum(EntryNameChangeAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryNameChangeAction$;
(function (EntryNameChangeAction$) {
    /** @deprecated use `EntryNameChangeAction$inboundSchema` instead. */
    EntryNameChangeAction$.inboundSchema = exports.EntryNameChangeAction$inboundSchema;
    /** @deprecated use `EntryNameChangeAction$outboundSchema` instead. */
    EntryNameChangeAction$.outboundSchema = exports.EntryNameChangeAction$outboundSchema;
})(EntryNameChangeAction$ || (exports.EntryNameChangeAction$ = EntryNameChangeAction$ = {}));
/** @internal */
exports.EntryNameChangeCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryNameChangeCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryNameChangeCorporateActionGeneralInformation$;
(function (EntryNameChangeCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryNameChangeCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryNameChangeCorporateActionGeneralInformation$.inboundSchema = exports.EntryNameChangeCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryNameChangeCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryNameChangeCorporateActionGeneralInformation$.outboundSchema = exports.EntryNameChangeCorporateActionGeneralInformation$outboundSchema;
})(EntryNameChangeCorporateActionGeneralInformation$ || (exports.EntryNameChangeCorporateActionGeneralInformation$ = EntryNameChangeCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryNameChangeEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryNameChangeEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryNameChangeEffectiveDate$;
(function (EntryNameChangeEffectiveDate$) {
    /** @deprecated use `EntryNameChangeEffectiveDate$inboundSchema` instead. */
    EntryNameChangeEffectiveDate$.inboundSchema = exports.EntryNameChangeEffectiveDate$inboundSchema;
    /** @deprecated use `EntryNameChangeEffectiveDate$outboundSchema` instead. */
    EntryNameChangeEffectiveDate$.outboundSchema = exports.EntryNameChangeEffectiveDate$outboundSchema;
})(EntryNameChangeEffectiveDate$ || (exports.EntryNameChangeEffectiveDate$ = EntryNameChangeEffectiveDate$ = {}));
/** @internal */
exports.EntryNameChangeQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryNameChangeQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryNameChangeQuantity$;
(function (EntryNameChangeQuantity$) {
    /** @deprecated use `EntryNameChangeQuantity$inboundSchema` instead. */
    EntryNameChangeQuantity$.inboundSchema = exports.EntryNameChangeQuantity$inboundSchema;
    /** @deprecated use `EntryNameChangeQuantity$outboundSchema` instead. */
    EntryNameChangeQuantity$.outboundSchema = exports.EntryNameChangeQuantity$outboundSchema;
})(EntryNameChangeQuantity$ || (exports.EntryNameChangeQuantity$ = EntryNameChangeQuantity$ = {}));
/** @internal */
exports.NameChange$inboundSchema = z.object({
    action: exports.EntryNameChangeAction$inboundSchema.optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryNameChangeCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.EntryNameChangeEffectiveDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryNameChangeQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
    });
});
/** @internal */
exports.NameChange$outboundSchema = z.object({
    action: exports.EntryNameChangeAction$outboundSchema.optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryNameChangeCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.EntryNameChangeEffectiveDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryNameChangeQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NameChange$;
(function (NameChange$) {
    /** @deprecated use `NameChange$inboundSchema` instead. */
    NameChange$.inboundSchema = exports.NameChange$inboundSchema;
    /** @deprecated use `NameChange$outboundSchema` instead. */
    NameChange$.outboundSchema = exports.NameChange$outboundSchema;
})(NameChange$ || (exports.NameChange$ = NameChange$ = {}));
/** @internal */
exports.OriginalProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.OriginalProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OriginalProcessDate$;
(function (OriginalProcessDate$) {
    /** @deprecated use `OriginalProcessDate$inboundSchema` instead. */
    OriginalProcessDate$.inboundSchema = exports.OriginalProcessDate$inboundSchema;
    /** @deprecated use `OriginalProcessDate$outboundSchema` instead. */
    OriginalProcessDate$.outboundSchema = exports.OriginalProcessDate$outboundSchema;
})(OriginalProcessDate$ || (exports.OriginalProcessDate$ = OriginalProcessDate$ = {}));
/** @internal */
exports.EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPaymentInKindCorporateActionGeneralInformation$;
(function (EntryPaymentInKindCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryPaymentInKindCorporateActionGeneralInformation$.inboundSchema = exports.EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryPaymentInKindCorporateActionGeneralInformation$.outboundSchema = exports.EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema;
})(EntryPaymentInKindCorporateActionGeneralInformation$ || (exports.EntryPaymentInKindCorporateActionGeneralInformation$ = EntryPaymentInKindCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryPaymentInKindPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryPaymentInKindPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPaymentInKindPaymentDate$;
(function (EntryPaymentInKindPaymentDate$) {
    /** @deprecated use `EntryPaymentInKindPaymentDate$inboundSchema` instead. */
    EntryPaymentInKindPaymentDate$.inboundSchema = exports.EntryPaymentInKindPaymentDate$inboundSchema;
    /** @deprecated use `EntryPaymentInKindPaymentDate$outboundSchema` instead. */
    EntryPaymentInKindPaymentDate$.outboundSchema = exports.EntryPaymentInKindPaymentDate$outboundSchema;
})(EntryPaymentInKindPaymentDate$ || (exports.EntryPaymentInKindPaymentDate$ = EntryPaymentInKindPaymentDate$ = {}));
/** @internal */
exports.EntryPaymentInKindRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryPaymentInKindRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPaymentInKindRecordDate$;
(function (EntryPaymentInKindRecordDate$) {
    /** @deprecated use `EntryPaymentInKindRecordDate$inboundSchema` instead. */
    EntryPaymentInKindRecordDate$.inboundSchema = exports.EntryPaymentInKindRecordDate$inboundSchema;
    /** @deprecated use `EntryPaymentInKindRecordDate$outboundSchema` instead. */
    EntryPaymentInKindRecordDate$.outboundSchema = exports.EntryPaymentInKindRecordDate$outboundSchema;
})(EntryPaymentInKindRecordDate$ || (exports.EntryPaymentInKindRecordDate$ = EntryPaymentInKindRecordDate$ = {}));
/** @internal */
exports.EntryPaymentInKindSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryPaymentInKindSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPaymentInKindSettled$;
(function (EntryPaymentInKindSettled$) {
    /** @deprecated use `EntryPaymentInKindSettled$inboundSchema` instead. */
    EntryPaymentInKindSettled$.inboundSchema = exports.EntryPaymentInKindSettled$inboundSchema;
    /** @deprecated use `EntryPaymentInKindSettled$outboundSchema` instead. */
    EntryPaymentInKindSettled$.outboundSchema = exports.EntryPaymentInKindSettled$outboundSchema;
})(EntryPaymentInKindSettled$ || (exports.EntryPaymentInKindSettled$ = EntryPaymentInKindSettled$ = {}));
/** @internal */
exports.EntryPaymentInKindStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryPaymentInKindStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPaymentInKindStockRate$;
(function (EntryPaymentInKindStockRate$) {
    /** @deprecated use `EntryPaymentInKindStockRate$inboundSchema` instead. */
    EntryPaymentInKindStockRate$.inboundSchema = exports.EntryPaymentInKindStockRate$inboundSchema;
    /** @deprecated use `EntryPaymentInKindStockRate$outboundSchema` instead. */
    EntryPaymentInKindStockRate$.outboundSchema = exports.EntryPaymentInKindStockRate$outboundSchema;
})(EntryPaymentInKindStockRate$ || (exports.EntryPaymentInKindStockRate$ = EntryPaymentInKindStockRate$ = {}));
/** @internal */
exports.PaymentInKind$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryPaymentInKindCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryPaymentInKindPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.EntryPaymentInKindRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntryPaymentInKindSettled$inboundSchema))
        .optional(),
    stock_rate: z.nullable(z.lazy(() => exports.EntryPaymentInKindStockRate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.PaymentInKind$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryPaymentInKindCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryPaymentInKindPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntryPaymentInKindRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntryPaymentInKindSettled$outboundSchema))
        .optional(),
    stockRate: z.nullable(z.lazy(() => exports.EntryPaymentInKindStockRate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PaymentInKind$;
(function (PaymentInKind$) {
    /** @deprecated use `PaymentInKind$inboundSchema` instead. */
    PaymentInKind$.inboundSchema = exports.PaymentInKind$inboundSchema;
    /** @deprecated use `PaymentInKind$outboundSchema` instead. */
    PaymentInKind$.outboundSchema = exports.PaymentInKind$outboundSchema;
})(PaymentInKind$ || (exports.PaymentInKind$ = PaymentInKind$ = {}));
/** @internal */
exports.EntryPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPrice$;
(function (EntryPrice$) {
    /** @deprecated use `EntryPrice$inboundSchema` instead. */
    EntryPrice$.inboundSchema = exports.EntryPrice$inboundSchema;
    /** @deprecated use `EntryPrice$outboundSchema` instead. */
    EntryPrice$.outboundSchema = exports.EntryPrice$outboundSchema;
})(EntryPrice$ || (exports.EntryPrice$ = EntryPrice$ = {}));
/** @internal */
exports.EntryProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryProcessDate$;
(function (EntryProcessDate$) {
    /** @deprecated use `EntryProcessDate$inboundSchema` instead. */
    EntryProcessDate$.inboundSchema = exports.EntryProcessDate$inboundSchema;
    /** @deprecated use `EntryProcessDate$outboundSchema` instead. */
    EntryProcessDate$.outboundSchema = exports.EntryProcessDate$outboundSchema;
})(EntryProcessDate$ || (exports.EntryProcessDate$ = EntryProcessDate$ = {}));
/** @internal */
exports.EntryQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryQuantity$;
(function (EntryQuantity$) {
    /** @deprecated use `EntryQuantity$inboundSchema` instead. */
    EntryQuantity$.inboundSchema = exports.EntryQuantity$inboundSchema;
    /** @deprecated use `EntryQuantity$outboundSchema` instead. */
    EntryQuantity$.outboundSchema = exports.EntryQuantity$outboundSchema;
})(EntryQuantity$ || (exports.EntryQuantity$ = EntryQuantity$ = {}));
/** @internal */
exports.Receive$inboundSchema = z.object({});
/** @internal */
exports.Receive$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Receive$;
(function (Receive$) {
    /** @deprecated use `Receive$inboundSchema` instead. */
    Receive$.inboundSchema = exports.Receive$inboundSchema;
    /** @deprecated use `Receive$outboundSchema` instead. */
    Receive$.outboundSchema = exports.Receive$outboundSchema;
})(Receive$ || (exports.Receive$ = Receive$ = {}));
/** @internal */
exports.EntryRedemptionFullAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryRedemptionFullAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryRedemptionFullAction$outboundSchema = z.union([
    z.nativeEnum(EntryRedemptionFullAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionFullAction$;
(function (EntryRedemptionFullAction$) {
    /** @deprecated use `EntryRedemptionFullAction$inboundSchema` instead. */
    EntryRedemptionFullAction$.inboundSchema = exports.EntryRedemptionFullAction$inboundSchema;
    /** @deprecated use `EntryRedemptionFullAction$outboundSchema` instead. */
    EntryRedemptionFullAction$.outboundSchema = exports.EntryRedemptionFullAction$outboundSchema;
})(EntryRedemptionFullAction$ || (exports.EntryRedemptionFullAction$ = EntryRedemptionFullAction$ = {}));
/** @internal */
exports.EntryRedemptionFullCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryRedemptionFullCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionFullCashRate$;
(function (EntryRedemptionFullCashRate$) {
    /** @deprecated use `EntryRedemptionFullCashRate$inboundSchema` instead. */
    EntryRedemptionFullCashRate$.inboundSchema = exports.EntryRedemptionFullCashRate$inboundSchema;
    /** @deprecated use `EntryRedemptionFullCashRate$outboundSchema` instead. */
    EntryRedemptionFullCashRate$.outboundSchema = exports.EntryRedemptionFullCashRate$outboundSchema;
})(EntryRedemptionFullCashRate$ || (exports.EntryRedemptionFullCashRate$ = EntryRedemptionFullCashRate$ = {}));
/** @internal */
exports.EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionFullCorporateActionGeneralInformation$;
(function (EntryRedemptionFullCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryRedemptionFullCorporateActionGeneralInformation$.inboundSchema = exports.EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryRedemptionFullCorporateActionGeneralInformation$.outboundSchema = exports.EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema;
})(EntryRedemptionFullCorporateActionGeneralInformation$ || (exports.EntryRedemptionFullCorporateActionGeneralInformation$ = EntryRedemptionFullCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryRedemptionFullPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryRedemptionFullPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionFullPaymentDate$;
(function (EntryRedemptionFullPaymentDate$) {
    /** @deprecated use `EntryRedemptionFullPaymentDate$inboundSchema` instead. */
    EntryRedemptionFullPaymentDate$.inboundSchema = exports.EntryRedemptionFullPaymentDate$inboundSchema;
    /** @deprecated use `EntryRedemptionFullPaymentDate$outboundSchema` instead. */
    EntryRedemptionFullPaymentDate$.outboundSchema = exports.EntryRedemptionFullPaymentDate$outboundSchema;
})(EntryRedemptionFullPaymentDate$ || (exports.EntryRedemptionFullPaymentDate$ = EntryRedemptionFullPaymentDate$ = {}));
/** @internal */
exports.EntryRedemptionFullQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryRedemptionFullQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionFullQuantity$;
(function (EntryRedemptionFullQuantity$) {
    /** @deprecated use `EntryRedemptionFullQuantity$inboundSchema` instead. */
    EntryRedemptionFullQuantity$.inboundSchema = exports.EntryRedemptionFullQuantity$inboundSchema;
    /** @deprecated use `EntryRedemptionFullQuantity$outboundSchema` instead. */
    EntryRedemptionFullQuantity$.outboundSchema = exports.EntryRedemptionFullQuantity$outboundSchema;
})(EntryRedemptionFullQuantity$ || (exports.EntryRedemptionFullQuantity$ = EntryRedemptionFullQuantity$ = {}));
/** @internal */
exports.EntryRedemptionFullSubtype$inboundSchema = z
    .union([
    z.nativeEnum(EntryRedemptionFullSubtype),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryRedemptionFullSubtype$outboundSchema = z.union([
    z.nativeEnum(EntryRedemptionFullSubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionFullSubtype$;
(function (EntryRedemptionFullSubtype$) {
    /** @deprecated use `EntryRedemptionFullSubtype$inboundSchema` instead. */
    EntryRedemptionFullSubtype$.inboundSchema = exports.EntryRedemptionFullSubtype$inboundSchema;
    /** @deprecated use `EntryRedemptionFullSubtype$outboundSchema` instead. */
    EntryRedemptionFullSubtype$.outboundSchema = exports.EntryRedemptionFullSubtype$outboundSchema;
})(EntryRedemptionFullSubtype$ || (exports.EntryRedemptionFullSubtype$ = EntryRedemptionFullSubtype$ = {}));
/** @internal */
exports.RedemptionFull$inboundSchema = z.object({
    action: exports.EntryRedemptionFullAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.EntryRedemptionFullCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryRedemptionFullCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryRedemptionFullPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryRedemptionFullQuantity$inboundSchema))
        .optional(),
    subtype: exports.EntryRedemptionFullSubtype$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
exports.RedemptionFull$outboundSchema = z.object({
    action: exports.EntryRedemptionFullAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.EntryRedemptionFullCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryRedemptionFullCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryRedemptionFullPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryRedemptionFullQuantity$outboundSchema))
        .optional(),
    subtype: exports.EntryRedemptionFullSubtype$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RedemptionFull$;
(function (RedemptionFull$) {
    /** @deprecated use `RedemptionFull$inboundSchema` instead. */
    RedemptionFull$.inboundSchema = exports.RedemptionFull$inboundSchema;
    /** @deprecated use `RedemptionFull$outboundSchema` instead. */
    RedemptionFull$.outboundSchema = exports.RedemptionFull$outboundSchema;
})(RedemptionFull$ || (exports.RedemptionFull$ = RedemptionFull$ = {}));
/** @internal */
exports.EntryRedemptionPartialAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryRedemptionPartialAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryRedemptionPartialAction$outboundSchema = z.union([
    z.nativeEnum(EntryRedemptionPartialAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionPartialAction$;
(function (EntryRedemptionPartialAction$) {
    /** @deprecated use `EntryRedemptionPartialAction$inboundSchema` instead. */
    EntryRedemptionPartialAction$.inboundSchema = exports.EntryRedemptionPartialAction$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialAction$outboundSchema` instead. */
    EntryRedemptionPartialAction$.outboundSchema = exports.EntryRedemptionPartialAction$outboundSchema;
})(EntryRedemptionPartialAction$ || (exports.EntryRedemptionPartialAction$ = EntryRedemptionPartialAction$ = {}));
/** @internal */
exports.EntryRedemptionPartialCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryRedemptionPartialCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionPartialCashRate$;
(function (EntryRedemptionPartialCashRate$) {
    /** @deprecated use `EntryRedemptionPartialCashRate$inboundSchema` instead. */
    EntryRedemptionPartialCashRate$.inboundSchema = exports.EntryRedemptionPartialCashRate$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialCashRate$outboundSchema` instead. */
    EntryRedemptionPartialCashRate$.outboundSchema = exports.EntryRedemptionPartialCashRate$outboundSchema;
})(EntryRedemptionPartialCashRate$ || (exports.EntryRedemptionPartialCashRate$ = EntryRedemptionPartialCashRate$ = {}));
/** @internal */
exports.EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionPartialCorporateActionGeneralInformation$;
(function (EntryRedemptionPartialCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryRedemptionPartialCorporateActionGeneralInformation$.inboundSchema = exports.EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryRedemptionPartialCorporateActionGeneralInformation$.outboundSchema = exports.EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema;
})(EntryRedemptionPartialCorporateActionGeneralInformation$ || (exports.EntryRedemptionPartialCorporateActionGeneralInformation$ = EntryRedemptionPartialCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryRedemptionPartialPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryRedemptionPartialPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionPartialPaymentDate$;
(function (EntryRedemptionPartialPaymentDate$) {
    /** @deprecated use `EntryRedemptionPartialPaymentDate$inboundSchema` instead. */
    EntryRedemptionPartialPaymentDate$.inboundSchema = exports.EntryRedemptionPartialPaymentDate$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialPaymentDate$outboundSchema` instead. */
    EntryRedemptionPartialPaymentDate$.outboundSchema = exports.EntryRedemptionPartialPaymentDate$outboundSchema;
})(EntryRedemptionPartialPaymentDate$ || (exports.EntryRedemptionPartialPaymentDate$ = EntryRedemptionPartialPaymentDate$ = {}));
/** @internal */
exports.EntryRedemptionPartialQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryRedemptionPartialQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRedemptionPartialQuantity$;
(function (EntryRedemptionPartialQuantity$) {
    /** @deprecated use `EntryRedemptionPartialQuantity$inboundSchema` instead. */
    EntryRedemptionPartialQuantity$.inboundSchema = exports.EntryRedemptionPartialQuantity$inboundSchema;
    /** @deprecated use `EntryRedemptionPartialQuantity$outboundSchema` instead. */
    EntryRedemptionPartialQuantity$.outboundSchema = exports.EntryRedemptionPartialQuantity$outboundSchema;
})(EntryRedemptionPartialQuantity$ || (exports.EntryRedemptionPartialQuantity$ = EntryRedemptionPartialQuantity$ = {}));
/** @internal */
exports.RedemptionPartial$inboundSchema = z.object({
    action: exports.EntryRedemptionPartialAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.EntryRedemptionPartialCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryRedemptionPartialCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryRedemptionPartialPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryRedemptionPartialQuantity$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
exports.RedemptionPartial$outboundSchema = z.object({
    action: exports.EntryRedemptionPartialAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.EntryRedemptionPartialCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryRedemptionPartialCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryRedemptionPartialPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryRedemptionPartialQuantity$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RedemptionPartial$;
(function (RedemptionPartial$) {
    /** @deprecated use `RedemptionPartial$inboundSchema` instead. */
    RedemptionPartial$.inboundSchema = exports.RedemptionPartial$inboundSchema;
    /** @deprecated use `RedemptionPartial$outboundSchema` instead. */
    RedemptionPartial$.outboundSchema = exports.RedemptionPartial$outboundSchema;
})(RedemptionPartial$ || (exports.RedemptionPartial$ = RedemptionPartial$ = {}));
/** @internal */
exports.EntryReverseStockSplitAction$inboundSchema = z
    .union([
    z.nativeEnum(EntryReverseStockSplitAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryReverseStockSplitAction$outboundSchema = z.union([
    z.nativeEnum(EntryReverseStockSplitAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryReverseStockSplitAction$;
(function (EntryReverseStockSplitAction$) {
    /** @deprecated use `EntryReverseStockSplitAction$inboundSchema` instead. */
    EntryReverseStockSplitAction$.inboundSchema = exports.EntryReverseStockSplitAction$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitAction$outboundSchema` instead. */
    EntryReverseStockSplitAction$.outboundSchema = exports.EntryReverseStockSplitAction$outboundSchema;
})(EntryReverseStockSplitAction$ || (exports.EntryReverseStockSplitAction$ = EntryReverseStockSplitAction$ = {}));
/** @internal */
exports.EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryReverseStockSplitCorporateActionGeneralInformation$;
(function (EntryReverseStockSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryReverseStockSplitCorporateActionGeneralInformation$.inboundSchema = exports.EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryReverseStockSplitCorporateActionGeneralInformation$.outboundSchema = exports.EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema;
})(EntryReverseStockSplitCorporateActionGeneralInformation$ || (exports.EntryReverseStockSplitCorporateActionGeneralInformation$ = EntryReverseStockSplitCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryReverseStockSplitEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryReverseStockSplitEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryReverseStockSplitEffectiveDate$;
(function (EntryReverseStockSplitEffectiveDate$) {
    /** @deprecated use `EntryReverseStockSplitEffectiveDate$inboundSchema` instead. */
    EntryReverseStockSplitEffectiveDate$.inboundSchema = exports.EntryReverseStockSplitEffectiveDate$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitEffectiveDate$outboundSchema` instead. */
    EntryReverseStockSplitEffectiveDate$.outboundSchema = exports.EntryReverseStockSplitEffectiveDate$outboundSchema;
})(EntryReverseStockSplitEffectiveDate$ || (exports.EntryReverseStockSplitEffectiveDate$ = EntryReverseStockSplitEffectiveDate$ = {}));
/** @internal */
exports.FactorDenominator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.FactorDenominator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FactorDenominator$;
(function (FactorDenominator$) {
    /** @deprecated use `FactorDenominator$inboundSchema` instead. */
    FactorDenominator$.inboundSchema = exports.FactorDenominator$inboundSchema;
    /** @deprecated use `FactorDenominator$outboundSchema` instead. */
    FactorDenominator$.outboundSchema = exports.FactorDenominator$outboundSchema;
})(FactorDenominator$ || (exports.FactorDenominator$ = FactorDenominator$ = {}));
/** @internal */
exports.FactorNumerator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.FactorNumerator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FactorNumerator$;
(function (FactorNumerator$) {
    /** @deprecated use `FactorNumerator$inboundSchema` instead. */
    FactorNumerator$.inboundSchema = exports.FactorNumerator$inboundSchema;
    /** @deprecated use `FactorNumerator$outboundSchema` instead. */
    FactorNumerator$.outboundSchema = exports.FactorNumerator$outboundSchema;
})(FactorNumerator$ || (exports.FactorNumerator$ = FactorNumerator$ = {}));
/** @internal */
exports.EntryReverseStockSplitQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryReverseStockSplitQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryReverseStockSplitQuantity$;
(function (EntryReverseStockSplitQuantity$) {
    /** @deprecated use `EntryReverseStockSplitQuantity$inboundSchema` instead. */
    EntryReverseStockSplitQuantity$.inboundSchema = exports.EntryReverseStockSplitQuantity$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitQuantity$outboundSchema` instead. */
    EntryReverseStockSplitQuantity$.outboundSchema = exports.EntryReverseStockSplitQuantity$outboundSchema;
})(EntryReverseStockSplitQuantity$ || (exports.EntryReverseStockSplitQuantity$ = EntryReverseStockSplitQuantity$ = {}));
/** @internal */
exports.EntryReverseStockSplitStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryReverseStockSplitStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryReverseStockSplitStockRate$;
(function (EntryReverseStockSplitStockRate$) {
    /** @deprecated use `EntryReverseStockSplitStockRate$inboundSchema` instead. */
    EntryReverseStockSplitStockRate$.inboundSchema = exports.EntryReverseStockSplitStockRate$inboundSchema;
    /** @deprecated use `EntryReverseStockSplitStockRate$outboundSchema` instead. */
    EntryReverseStockSplitStockRate$.outboundSchema = exports.EntryReverseStockSplitStockRate$outboundSchema;
})(EntryReverseStockSplitStockRate$ || (exports.EntryReverseStockSplitStockRate$ = EntryReverseStockSplitStockRate$ = {}));
/** @internal */
exports.ReverseStockSplit$inboundSchema = z.object({
    action: exports.EntryReverseStockSplitAction$inboundSchema.optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryReverseStockSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.EntryReverseStockSplitEffectiveDate$inboundSchema)).optional(),
    factor_denominator: z.nullable(z.lazy(() => exports.FactorDenominator$inboundSchema))
        .optional(),
    factor_numerator: z.nullable(z.lazy(() => exports.FactorNumerator$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryReverseStockSplitQuantity$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => exports.EntryReverseStockSplitStockRate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "factor_denominator": "factorDenominator",
        "factor_numerator": "factorNumerator",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.ReverseStockSplit$outboundSchema = z.object({
    action: exports.EntryReverseStockSplitAction$outboundSchema.optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryReverseStockSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.EntryReverseStockSplitEffectiveDate$outboundSchema)).optional(),
    factorDenominator: z.nullable(z.lazy(() => exports.FactorDenominator$outboundSchema))
        .optional(),
    factorNumerator: z.nullable(z.lazy(() => exports.FactorNumerator$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryReverseStockSplitQuantity$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => exports.EntryReverseStockSplitStockRate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        factorDenominator: "factor_denominator",
        factorNumerator: "factor_numerator",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ReverseStockSplit$;
(function (ReverseStockSplit$) {
    /** @deprecated use `ReverseStockSplit$inboundSchema` instead. */
    ReverseStockSplit$.inboundSchema = exports.ReverseStockSplit$inboundSchema;
    /** @deprecated use `ReverseStockSplit$outboundSchema` instead. */
    ReverseStockSplit$.outboundSchema = exports.ReverseStockSplit$outboundSchema;
})(ReverseStockSplit$ || (exports.ReverseStockSplit$ = ReverseStockSplit$ = {}));
/** @internal */
exports.EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRightsDistributionCorporateActionGeneralInformation$;
(function (EntryRightsDistributionCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryRightsDistributionCorporateActionGeneralInformation$.inboundSchema = exports.EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryRightsDistributionCorporateActionGeneralInformation$.outboundSchema = exports.EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema;
})(EntryRightsDistributionCorporateActionGeneralInformation$ || (exports.EntryRightsDistributionCorporateActionGeneralInformation$ = EntryRightsDistributionCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryRightsDistributionPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryRightsDistributionPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRightsDistributionPaymentDate$;
(function (EntryRightsDistributionPaymentDate$) {
    /** @deprecated use `EntryRightsDistributionPaymentDate$inboundSchema` instead. */
    EntryRightsDistributionPaymentDate$.inboundSchema = exports.EntryRightsDistributionPaymentDate$inboundSchema;
    /** @deprecated use `EntryRightsDistributionPaymentDate$outboundSchema` instead. */
    EntryRightsDistributionPaymentDate$.outboundSchema = exports.EntryRightsDistributionPaymentDate$outboundSchema;
})(EntryRightsDistributionPaymentDate$ || (exports.EntryRightsDistributionPaymentDate$ = EntryRightsDistributionPaymentDate$ = {}));
/** @internal */
exports.EntryRightsDistributionRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryRightsDistributionRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRightsDistributionRecordDate$;
(function (EntryRightsDistributionRecordDate$) {
    /** @deprecated use `EntryRightsDistributionRecordDate$inboundSchema` instead. */
    EntryRightsDistributionRecordDate$.inboundSchema = exports.EntryRightsDistributionRecordDate$inboundSchema;
    /** @deprecated use `EntryRightsDistributionRecordDate$outboundSchema` instead. */
    EntryRightsDistributionRecordDate$.outboundSchema = exports.EntryRightsDistributionRecordDate$outboundSchema;
})(EntryRightsDistributionRecordDate$ || (exports.EntryRightsDistributionRecordDate$ = EntryRightsDistributionRecordDate$ = {}));
/** @internal */
exports.EntryRightsDistributionSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryRightsDistributionSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRightsDistributionSettled$;
(function (EntryRightsDistributionSettled$) {
    /** @deprecated use `EntryRightsDistributionSettled$inboundSchema` instead. */
    EntryRightsDistributionSettled$.inboundSchema = exports.EntryRightsDistributionSettled$inboundSchema;
    /** @deprecated use `EntryRightsDistributionSettled$outboundSchema` instead. */
    EntryRightsDistributionSettled$.outboundSchema = exports.EntryRightsDistributionSettled$outboundSchema;
})(EntryRightsDistributionSettled$ || (exports.EntryRightsDistributionSettled$ = EntryRightsDistributionSettled$ = {}));
/** @internal */
exports.RightsDistribution$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryRightsDistributionCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryRightsDistributionPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.EntryRightsDistributionRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntryRightsDistributionSettled$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.RightsDistribution$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryRightsDistributionCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryRightsDistributionPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntryRightsDistributionRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntryRightsDistributionSettled$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RightsDistribution$;
(function (RightsDistribution$) {
    /** @deprecated use `RightsDistribution$inboundSchema` instead. */
    RightsDistribution$.inboundSchema = exports.RightsDistribution$inboundSchema;
    /** @deprecated use `RightsDistribution$outboundSchema` instead. */
    RightsDistribution$.outboundSchema = exports.RightsDistribution$outboundSchema;
})(RightsDistribution$ || (exports.RightsDistribution$ = RightsDistribution$ = {}));
/** @internal */
exports.EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRightsSubscriptionCorporateActionGeneralInformation$;
(function (EntryRightsSubscriptionCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryRightsSubscriptionCorporateActionGeneralInformation$.inboundSchema = exports.EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryRightsSubscriptionCorporateActionGeneralInformation$.outboundSchema = exports.EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema;
})(EntryRightsSubscriptionCorporateActionGeneralInformation$ || (exports.EntryRightsSubscriptionCorporateActionGeneralInformation$ = EntryRightsSubscriptionCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.RightsSubscription$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryRightsSubscriptionCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
exports.RightsSubscription$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryRightsSubscriptionCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RightsSubscription$;
(function (RightsSubscription$) {
    /** @deprecated use `RightsSubscription$inboundSchema` instead. */
    RightsSubscription$.inboundSchema = exports.RightsSubscription$inboundSchema;
    /** @deprecated use `RightsSubscription$outboundSchema` instead. */
    RightsSubscription$.outboundSchema = exports.RightsSubscription$outboundSchema;
})(RightsSubscription$ || (exports.RightsSubscription$ = RightsSubscription$ = {}));
/** @internal */
exports.RoundingAdjustment$inboundSchema = z.object({
    rounding_reason: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "rounding_reason": "roundingReason",
    });
});
/** @internal */
exports.RoundingAdjustment$outboundSchema = z.object({
    roundingReason: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        roundingReason: "rounding_reason",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RoundingAdjustment$;
(function (RoundingAdjustment$) {
    /** @deprecated use `RoundingAdjustment$inboundSchema` instead. */
    RoundingAdjustment$.inboundSchema = exports.RoundingAdjustment$inboundSchema;
    /** @deprecated use `RoundingAdjustment$outboundSchema` instead. */
    RoundingAdjustment$.outboundSchema = exports.RoundingAdjustment$outboundSchema;
})(RoundingAdjustment$ || (exports.RoundingAdjustment$ = RoundingAdjustment$ = {}));
/** @internal */
exports.EntrySaleOfRightsCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntrySaleOfRightsCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySaleOfRightsCashRate$;
(function (EntrySaleOfRightsCashRate$) {
    /** @deprecated use `EntrySaleOfRightsCashRate$inboundSchema` instead. */
    EntrySaleOfRightsCashRate$.inboundSchema = exports.EntrySaleOfRightsCashRate$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsCashRate$outboundSchema` instead. */
    EntrySaleOfRightsCashRate$.outboundSchema = exports.EntrySaleOfRightsCashRate$outboundSchema;
})(EntrySaleOfRightsCashRate$ || (exports.EntrySaleOfRightsCashRate$ = EntrySaleOfRightsCashRate$ = {}));
/** @internal */
exports.EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySaleOfRightsCorporateActionGeneralInformation$;
(function (EntrySaleOfRightsCorporateActionGeneralInformation$) {
    /** @deprecated use `EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema` instead. */
    EntrySaleOfRightsCorporateActionGeneralInformation$.inboundSchema = exports.EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema` instead. */
    EntrySaleOfRightsCorporateActionGeneralInformation$.outboundSchema = exports.EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema;
})(EntrySaleOfRightsCorporateActionGeneralInformation$ || (exports.EntrySaleOfRightsCorporateActionGeneralInformation$ = EntrySaleOfRightsCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntrySaleOfRightsPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntrySaleOfRightsPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySaleOfRightsPaymentDate$;
(function (EntrySaleOfRightsPaymentDate$) {
    /** @deprecated use `EntrySaleOfRightsPaymentDate$inboundSchema` instead. */
    EntrySaleOfRightsPaymentDate$.inboundSchema = exports.EntrySaleOfRightsPaymentDate$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsPaymentDate$outboundSchema` instead. */
    EntrySaleOfRightsPaymentDate$.outboundSchema = exports.EntrySaleOfRightsPaymentDate$outboundSchema;
})(EntrySaleOfRightsPaymentDate$ || (exports.EntrySaleOfRightsPaymentDate$ = EntrySaleOfRightsPaymentDate$ = {}));
/** @internal */
exports.EntrySaleOfRightsRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntrySaleOfRightsRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySaleOfRightsRecordDate$;
(function (EntrySaleOfRightsRecordDate$) {
    /** @deprecated use `EntrySaleOfRightsRecordDate$inboundSchema` instead. */
    EntrySaleOfRightsRecordDate$.inboundSchema = exports.EntrySaleOfRightsRecordDate$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsRecordDate$outboundSchema` instead. */
    EntrySaleOfRightsRecordDate$.outboundSchema = exports.EntrySaleOfRightsRecordDate$outboundSchema;
})(EntrySaleOfRightsRecordDate$ || (exports.EntrySaleOfRightsRecordDate$ = EntrySaleOfRightsRecordDate$ = {}));
/** @internal */
exports.EntrySaleOfRightsSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntrySaleOfRightsSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySaleOfRightsSettled$;
(function (EntrySaleOfRightsSettled$) {
    /** @deprecated use `EntrySaleOfRightsSettled$inboundSchema` instead. */
    EntrySaleOfRightsSettled$.inboundSchema = exports.EntrySaleOfRightsSettled$inboundSchema;
    /** @deprecated use `EntrySaleOfRightsSettled$outboundSchema` instead. */
    EntrySaleOfRightsSettled$.outboundSchema = exports.EntrySaleOfRightsSettled$outboundSchema;
})(EntrySaleOfRightsSettled$ || (exports.EntrySaleOfRightsSettled$ = EntrySaleOfRightsSettled$ = {}));
/** @internal */
exports.SaleOfRights$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.EntrySaleOfRightsCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntrySaleOfRightsCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntrySaleOfRightsPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.EntrySaleOfRightsRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntrySaleOfRightsSettled$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.SaleOfRights$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.EntrySaleOfRightsCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntrySaleOfRightsCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntrySaleOfRightsPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntrySaleOfRightsRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.EntrySaleOfRightsSettled$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SaleOfRights$;
(function (SaleOfRights$) {
    /** @deprecated use `SaleOfRights$inboundSchema` instead. */
    SaleOfRights$.inboundSchema = exports.SaleOfRights$inboundSchema;
    /** @deprecated use `SaleOfRights$outboundSchema` instead. */
    SaleOfRights$.outboundSchema = exports.SaleOfRights$outboundSchema;
})(SaleOfRights$ || (exports.SaleOfRights$ = SaleOfRights$ = {}));
/** @internal */
exports.SettleDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.SettleDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SettleDate$;
(function (SettleDate$) {
    /** @deprecated use `SettleDate$inboundSchema` instead. */
    SettleDate$.inboundSchema = exports.SettleDate$inboundSchema;
    /** @deprecated use `SettleDate$outboundSchema` instead. */
    SettleDate$.outboundSchema = exports.SettleDate$outboundSchema;
})(SettleDate$ || (exports.SettleDate$ = SettleDate$ = {}));
/** @internal */
exports.EntrySide$inboundSchema = z
    .union([
    z.nativeEnum(EntrySide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntrySide$outboundSchema = z.union([
    z.nativeEnum(EntrySide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySide$;
(function (EntrySide$) {
    /** @deprecated use `EntrySide$inboundSchema` instead. */
    EntrySide$.inboundSchema = exports.EntrySide$inboundSchema;
    /** @deprecated use `EntrySide$outboundSchema` instead. */
    EntrySide$.outboundSchema = exports.EntrySide$outboundSchema;
})(EntrySide$ || (exports.EntrySide$ = EntrySide$ = {}));
/** @internal */
exports.EntrySideModifier$inboundSchema = z
    .union([
    z.nativeEnum(EntrySideModifier),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntrySideModifier$outboundSchema = z.union([
    z.nativeEnum(EntrySideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySideModifier$;
(function (EntrySideModifier$) {
    /** @deprecated use `EntrySideModifier$inboundSchema` instead. */
    EntrySideModifier$.inboundSchema = exports.EntrySideModifier$inboundSchema;
    /** @deprecated use `EntrySideModifier$outboundSchema` instead. */
    EntrySideModifier$.outboundSchema = exports.EntrySideModifier$outboundSchema;
})(EntrySideModifier$ || (exports.EntrySideModifier$ = EntrySideModifier$ = {}));
/** @internal */
exports.EntrySpinOffCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntrySpinOffCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySpinOffCorporateActionGeneralInformation$;
(function (EntrySpinOffCorporateActionGeneralInformation$) {
    /** @deprecated use `EntrySpinOffCorporateActionGeneralInformation$inboundSchema` instead. */
    EntrySpinOffCorporateActionGeneralInformation$.inboundSchema = exports.EntrySpinOffCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntrySpinOffCorporateActionGeneralInformation$outboundSchema` instead. */
    EntrySpinOffCorporateActionGeneralInformation$.outboundSchema = exports.EntrySpinOffCorporateActionGeneralInformation$outboundSchema;
})(EntrySpinOffCorporateActionGeneralInformation$ || (exports.EntrySpinOffCorporateActionGeneralInformation$ = EntrySpinOffCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.PayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PayDate$;
(function (PayDate$) {
    /** @deprecated use `PayDate$inboundSchema` instead. */
    PayDate$.inboundSchema = exports.PayDate$inboundSchema;
    /** @deprecated use `PayDate$outboundSchema` instead. */
    PayDate$.outboundSchema = exports.PayDate$outboundSchema;
})(PayDate$ || (exports.PayDate$ = PayDate$ = {}));
/** @internal */
exports.EntrySpinOffQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntrySpinOffQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySpinOffQuantity$;
(function (EntrySpinOffQuantity$) {
    /** @deprecated use `EntrySpinOffQuantity$inboundSchema` instead. */
    EntrySpinOffQuantity$.inboundSchema = exports.EntrySpinOffQuantity$inboundSchema;
    /** @deprecated use `EntrySpinOffQuantity$outboundSchema` instead. */
    EntrySpinOffQuantity$.outboundSchema = exports.EntrySpinOffQuantity$outboundSchema;
})(EntrySpinOffQuantity$ || (exports.EntrySpinOffQuantity$ = EntrySpinOffQuantity$ = {}));
/** @internal */
exports.EntrySpinOffRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntrySpinOffRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySpinOffRate$;
(function (EntrySpinOffRate$) {
    /** @deprecated use `EntrySpinOffRate$inboundSchema` instead. */
    EntrySpinOffRate$.inboundSchema = exports.EntrySpinOffRate$inboundSchema;
    /** @deprecated use `EntrySpinOffRate$outboundSchema` instead. */
    EntrySpinOffRate$.outboundSchema = exports.EntrySpinOffRate$outboundSchema;
})(EntrySpinOffRate$ || (exports.EntrySpinOffRate$ = EntrySpinOffRate$ = {}));
/** @internal */
exports.EntrySpinOffRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntrySpinOffRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySpinOffRecordDate$;
(function (EntrySpinOffRecordDate$) {
    /** @deprecated use `EntrySpinOffRecordDate$inboundSchema` instead. */
    EntrySpinOffRecordDate$.inboundSchema = exports.EntrySpinOffRecordDate$inboundSchema;
    /** @deprecated use `EntrySpinOffRecordDate$outboundSchema` instead. */
    EntrySpinOffRecordDate$.outboundSchema = exports.EntrySpinOffRecordDate$outboundSchema;
})(EntrySpinOffRecordDate$ || (exports.EntrySpinOffRecordDate$ = EntrySpinOffRecordDate$ = {}));
/** @internal */
exports.SpinOff$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntrySpinOffCorporateActionGeneralInformation$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => exports.PayDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntrySpinOffQuantity$inboundSchema))
        .optional(),
    rate: z.nullable(z.lazy(() => exports.EntrySpinOffRate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.EntrySpinOffRecordDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.SpinOff$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntrySpinOffCorporateActionGeneralInformation$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => exports.PayDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntrySpinOffQuantity$outboundSchema))
        .optional(),
    rate: z.nullable(z.lazy(() => exports.EntrySpinOffRate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntrySpinOffRecordDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SpinOff$;
(function (SpinOff$) {
    /** @deprecated use `SpinOff$inboundSchema` instead. */
    SpinOff$.inboundSchema = exports.SpinOff$inboundSchema;
    /** @deprecated use `SpinOff$outboundSchema` instead. */
    SpinOff$.outboundSchema = exports.SpinOff$outboundSchema;
})(SpinOff$ || (exports.SpinOff$ = SpinOff$ = {}));
/** @internal */
exports.EntryState$inboundSchema = z
    .union([
    z.nativeEnum(EntryState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryState$outboundSchema = z.union([
    z.nativeEnum(EntryState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryState$;
(function (EntryState$) {
    /** @deprecated use `EntryState$inboundSchema` instead. */
    EntryState$.inboundSchema = exports.EntryState$inboundSchema;
    /** @deprecated use `EntryState$outboundSchema` instead. */
    EntryState$.outboundSchema = exports.EntryState$outboundSchema;
})(EntryState$ || (exports.EntryState$ = EntryState$ = {}));
/** @internal */
exports.EntryStockDividendCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryStockDividendCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryStockDividendCorporateActionGeneralInformation$;
(function (EntryStockDividendCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryStockDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryStockDividendCorporateActionGeneralInformation$.inboundSchema = exports.EntryStockDividendCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryStockDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryStockDividendCorporateActionGeneralInformation$.outboundSchema = exports.EntryStockDividendCorporateActionGeneralInformation$outboundSchema;
})(EntryStockDividendCorporateActionGeneralInformation$ || (exports.EntryStockDividendCorporateActionGeneralInformation$ = EntryStockDividendCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPayDate$;
(function (EntryPayDate$) {
    /** @deprecated use `EntryPayDate$inboundSchema` instead. */
    EntryPayDate$.inboundSchema = exports.EntryPayDate$inboundSchema;
    /** @deprecated use `EntryPayDate$outboundSchema` instead. */
    EntryPayDate$.outboundSchema = exports.EntryPayDate$outboundSchema;
})(EntryPayDate$ || (exports.EntryPayDate$ = EntryPayDate$ = {}));
/** @internal */
exports.EntryStockDividendQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryStockDividendQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryStockDividendQuantity$;
(function (EntryStockDividendQuantity$) {
    /** @deprecated use `EntryStockDividendQuantity$inboundSchema` instead. */
    EntryStockDividendQuantity$.inboundSchema = exports.EntryStockDividendQuantity$inboundSchema;
    /** @deprecated use `EntryStockDividendQuantity$outboundSchema` instead. */
    EntryStockDividendQuantity$.outboundSchema = exports.EntryStockDividendQuantity$outboundSchema;
})(EntryStockDividendQuantity$ || (exports.EntryStockDividendQuantity$ = EntryStockDividendQuantity$ = {}));
/** @internal */
exports.EntryRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryRate$;
(function (EntryRate$) {
    /** @deprecated use `EntryRate$inboundSchema` instead. */
    EntryRate$.inboundSchema = exports.EntryRate$inboundSchema;
    /** @deprecated use `EntryRate$outboundSchema` instead. */
    EntryRate$.outboundSchema = exports.EntryRate$outboundSchema;
})(EntryRate$ || (exports.EntryRate$ = EntryRate$ = {}));
/** @internal */
exports.EntryStockDividendRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryStockDividendRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryStockDividendRecordDate$;
(function (EntryStockDividendRecordDate$) {
    /** @deprecated use `EntryStockDividendRecordDate$inboundSchema` instead. */
    EntryStockDividendRecordDate$.inboundSchema = exports.EntryStockDividendRecordDate$inboundSchema;
    /** @deprecated use `EntryStockDividendRecordDate$outboundSchema` instead. */
    EntryStockDividendRecordDate$.outboundSchema = exports.EntryStockDividendRecordDate$outboundSchema;
})(EntryStockDividendRecordDate$ || (exports.EntryStockDividendRecordDate$ = EntryStockDividendRecordDate$ = {}));
/** @internal */
exports.StockDividend$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryStockDividendCorporateActionGeneralInformation$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => exports.EntryPayDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryStockDividendQuantity$inboundSchema))
        .optional(),
    rate: z.nullable(z.lazy(() => exports.EntryRate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.EntryStockDividendRecordDate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.StockDividend$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryStockDividendCorporateActionGeneralInformation$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => exports.EntryPayDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryStockDividendQuantity$outboundSchema))
        .optional(),
    rate: z.nullable(z.lazy(() => exports.EntryRate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntryStockDividendRecordDate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StockDividend$;
(function (StockDividend$) {
    /** @deprecated use `StockDividend$inboundSchema` instead. */
    StockDividend$.inboundSchema = exports.StockDividend$inboundSchema;
    /** @deprecated use `StockDividend$outboundSchema` instead. */
    StockDividend$.outboundSchema = exports.StockDividend$outboundSchema;
})(StockDividend$ || (exports.StockDividend$ = StockDividend$ = {}));
/** @internal */
exports.EntryStockSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryStockSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryStockSplitCorporateActionGeneralInformation$;
(function (EntryStockSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryStockSplitCorporateActionGeneralInformation$.inboundSchema = exports.EntryStockSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryStockSplitCorporateActionGeneralInformation$.outboundSchema = exports.EntryStockSplitCorporateActionGeneralInformation$outboundSchema;
})(EntryStockSplitCorporateActionGeneralInformation$ || (exports.EntryStockSplitCorporateActionGeneralInformation$ = EntryStockSplitCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryFactorDenominator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryFactorDenominator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFactorDenominator$;
(function (EntryFactorDenominator$) {
    /** @deprecated use `EntryFactorDenominator$inboundSchema` instead. */
    EntryFactorDenominator$.inboundSchema = exports.EntryFactorDenominator$inboundSchema;
    /** @deprecated use `EntryFactorDenominator$outboundSchema` instead. */
    EntryFactorDenominator$.outboundSchema = exports.EntryFactorDenominator$outboundSchema;
})(EntryFactorDenominator$ || (exports.EntryFactorDenominator$ = EntryFactorDenominator$ = {}));
/** @internal */
exports.EntryFactorNumerator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryFactorNumerator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryFactorNumerator$;
(function (EntryFactorNumerator$) {
    /** @deprecated use `EntryFactorNumerator$inboundSchema` instead. */
    EntryFactorNumerator$.inboundSchema = exports.EntryFactorNumerator$inboundSchema;
    /** @deprecated use `EntryFactorNumerator$outboundSchema` instead. */
    EntryFactorNumerator$.outboundSchema = exports.EntryFactorNumerator$outboundSchema;
})(EntryFactorNumerator$ || (exports.EntryFactorNumerator$ = EntryFactorNumerator$ = {}));
/** @internal */
exports.EntryStockSplitPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryStockSplitPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryStockSplitPayDate$;
(function (EntryStockSplitPayDate$) {
    /** @deprecated use `EntryStockSplitPayDate$inboundSchema` instead. */
    EntryStockSplitPayDate$.inboundSchema = exports.EntryStockSplitPayDate$inboundSchema;
    /** @deprecated use `EntryStockSplitPayDate$outboundSchema` instead. */
    EntryStockSplitPayDate$.outboundSchema = exports.EntryStockSplitPayDate$outboundSchema;
})(EntryStockSplitPayDate$ || (exports.EntryStockSplitPayDate$ = EntryStockSplitPayDate$ = {}));
/** @internal */
exports.EntryStockSplitQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryStockSplitQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryStockSplitQuantity$;
(function (EntryStockSplitQuantity$) {
    /** @deprecated use `EntryStockSplitQuantity$inboundSchema` instead. */
    EntryStockSplitQuantity$.inboundSchema = exports.EntryStockSplitQuantity$inboundSchema;
    /** @deprecated use `EntryStockSplitQuantity$outboundSchema` instead. */
    EntryStockSplitQuantity$.outboundSchema = exports.EntryStockSplitQuantity$outboundSchema;
})(EntryStockSplitQuantity$ || (exports.EntryStockSplitQuantity$ = EntryStockSplitQuantity$ = {}));
/** @internal */
exports.EntryStockSplitRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryStockSplitRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryStockSplitRecordDate$;
(function (EntryStockSplitRecordDate$) {
    /** @deprecated use `EntryStockSplitRecordDate$inboundSchema` instead. */
    EntryStockSplitRecordDate$.inboundSchema = exports.EntryStockSplitRecordDate$inboundSchema;
    /** @deprecated use `EntryStockSplitRecordDate$outboundSchema` instead. */
    EntryStockSplitRecordDate$.outboundSchema = exports.EntryStockSplitRecordDate$outboundSchema;
})(EntryStockSplitRecordDate$ || (exports.EntryStockSplitRecordDate$ = EntryStockSplitRecordDate$ = {}));
/** @internal */
exports.StockSplit$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryStockSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    factor_denominator: z.nullable(z.lazy(() => exports.EntryFactorDenominator$inboundSchema)).optional(),
    factor_numerator: z.nullable(z.lazy(() => exports.EntryFactorNumerator$inboundSchema))
        .optional(),
    pay_date: z.nullable(z.lazy(() => exports.EntryStockSplitPayDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryStockSplitQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.EntryStockSplitRecordDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "factor_denominator": "factorDenominator",
        "factor_numerator": "factorNumerator",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.StockSplit$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryStockSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    factorDenominator: z.nullable(z.lazy(() => exports.EntryFactorDenominator$outboundSchema)).optional(),
    factorNumerator: z.nullable(z.lazy(() => exports.EntryFactorNumerator$outboundSchema))
        .optional(),
    payDate: z.nullable(z.lazy(() => exports.EntryStockSplitPayDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryStockSplitQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => exports.EntryStockSplitRecordDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        factorDenominator: "factor_denominator",
        factorNumerator: "factor_numerator",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var StockSplit$;
(function (StockSplit$) {
    /** @deprecated use `StockSplit$inboundSchema` instead. */
    StockSplit$.inboundSchema = exports.StockSplit$inboundSchema;
    /** @deprecated use `StockSplit$outboundSchema` instead. */
    StockSplit$.outboundSchema = exports.StockSplit$outboundSchema;
})(StockSplit$ || (exports.StockSplit$ = StockSplit$ = {}));
/** @internal */
exports.EntrySweepAction$inboundSchema = z
    .union([
    z.nativeEnum(EntrySweepAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntrySweepAction$outboundSchema = z.union([
    z.nativeEnum(EntrySweepAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySweepAction$;
(function (EntrySweepAction$) {
    /** @deprecated use `EntrySweepAction$inboundSchema` instead. */
    EntrySweepAction$.inboundSchema = exports.EntrySweepAction$inboundSchema;
    /** @deprecated use `EntrySweepAction$outboundSchema` instead. */
    EntrySweepAction$.outboundSchema = exports.EntrySweepAction$outboundSchema;
})(EntrySweepAction$ || (exports.EntrySweepAction$ = EntrySweepAction$ = {}));
/** @internal */
exports.EntrySweepType$inboundSchema = z
    .union([
    z.nativeEnum(EntrySweepType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntrySweepType$outboundSchema = z.union([
    z.nativeEnum(EntrySweepType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntrySweepType$;
(function (EntrySweepType$) {
    /** @deprecated use `EntrySweepType$inboundSchema` instead. */
    EntrySweepType$.inboundSchema = exports.EntrySweepType$inboundSchema;
    /** @deprecated use `EntrySweepType$outboundSchema` instead. */
    EntrySweepType$.outboundSchema = exports.EntrySweepType$outboundSchema;
})(EntrySweepType$ || (exports.EntrySweepType$ = EntrySweepType$ = {}));
/** @internal */
exports.Sweep$inboundSchema = z
    .object({
    action: exports.EntrySweepAction$inboundSchema.optional(),
    eod_redemption: z.boolean().optional(),
    type: exports.EntrySweepType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "eod_redemption": "eodRedemption",
    });
});
/** @internal */
exports.Sweep$outboundSchema = z.object({
    action: exports.EntrySweepAction$outboundSchema.optional(),
    eodRedemption: z.boolean().optional(),
    type: exports.EntrySweepType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        eodRedemption: "eod_redemption",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Sweep$;
(function (Sweep$) {
    /** @deprecated use `Sweep$inboundSchema` instead. */
    Sweep$.inboundSchema = exports.Sweep$inboundSchema;
    /** @deprecated use `Sweep$outboundSchema` instead. */
    Sweep$.outboundSchema = exports.Sweep$outboundSchema;
})(Sweep$ || (exports.Sweep$ = Sweep$ = {}));
/** @internal */
exports.EntryTenderOfferCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryTenderOfferCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryTenderOfferCashRate$;
(function (EntryTenderOfferCashRate$) {
    /** @deprecated use `EntryTenderOfferCashRate$inboundSchema` instead. */
    EntryTenderOfferCashRate$.inboundSchema = exports.EntryTenderOfferCashRate$inboundSchema;
    /** @deprecated use `EntryTenderOfferCashRate$outboundSchema` instead. */
    EntryTenderOfferCashRate$.outboundSchema = exports.EntryTenderOfferCashRate$outboundSchema;
})(EntryTenderOfferCashRate$ || (exports.EntryTenderOfferCashRate$ = EntryTenderOfferCashRate$ = {}));
/** @internal */
exports.EntryTenderOfferCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryTenderOfferCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryTenderOfferCorporateActionGeneralInformation$;
(function (EntryTenderOfferCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryTenderOfferCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryTenderOfferCorporateActionGeneralInformation$.inboundSchema = exports.EntryTenderOfferCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryTenderOfferCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryTenderOfferCorporateActionGeneralInformation$.outboundSchema = exports.EntryTenderOfferCorporateActionGeneralInformation$outboundSchema;
})(EntryTenderOfferCorporateActionGeneralInformation$ || (exports.EntryTenderOfferCorporateActionGeneralInformation$ = EntryTenderOfferCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.TenderOffer$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.EntryTenderOfferCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryTenderOfferCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
exports.TenderOffer$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.EntryTenderOfferCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryTenderOfferCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TenderOffer$;
(function (TenderOffer$) {
    /** @deprecated use `TenderOffer$inboundSchema` instead. */
    TenderOffer$.inboundSchema = exports.TenderOffer$inboundSchema;
    /** @deprecated use `TenderOffer$outboundSchema` instead. */
    TenderOffer$.outboundSchema = exports.TenderOffer$outboundSchema;
})(TenderOffer$ || (exports.TenderOffer$ = TenderOffer$ = {}));
/** @internal */
exports.EntryBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(EntryBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(EntryBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryBrokerCapacity$;
(function (EntryBrokerCapacity$) {
    /** @deprecated use `EntryBrokerCapacity$inboundSchema` instead. */
    EntryBrokerCapacity$.inboundSchema = exports.EntryBrokerCapacity$inboundSchema;
    /** @deprecated use `EntryBrokerCapacity$outboundSchema` instead. */
    EntryBrokerCapacity$.outboundSchema = exports.EntryBrokerCapacity$outboundSchema;
})(EntryBrokerCapacity$ || (exports.EntryBrokerCapacity$ = EntryBrokerCapacity$ = {}));
/** @internal */
exports.EntryPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPrevailingMarketPrice$;
(function (EntryPrevailingMarketPrice$) {
    /** @deprecated use `EntryPrevailingMarketPrice$inboundSchema` instead. */
    EntryPrevailingMarketPrice$.inboundSchema = exports.EntryPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `EntryPrevailingMarketPrice$outboundSchema` instead. */
    EntryPrevailingMarketPrice$.outboundSchema = exports.EntryPrevailingMarketPrice$outboundSchema;
})(EntryPrevailingMarketPrice$ || (exports.EntryPrevailingMarketPrice$ = EntryPrevailingMarketPrice$ = {}));
/** @internal */
exports.EntryPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPriceAdjustmentAmount$;
(function (EntryPriceAdjustmentAmount$) {
    /** @deprecated use `EntryPriceAdjustmentAmount$inboundSchema` instead. */
    EntryPriceAdjustmentAmount$.inboundSchema = exports.EntryPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `EntryPriceAdjustmentAmount$outboundSchema` instead. */
    EntryPriceAdjustmentAmount$.outboundSchema = exports.EntryPriceAdjustmentAmount$outboundSchema;
})(EntryPriceAdjustmentAmount$ || (exports.EntryPriceAdjustmentAmount$ = EntryPriceAdjustmentAmount$ = {}));
/** @internal */
exports.EntryPriceAdjustmentPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryPriceAdjustmentPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPriceAdjustmentPercent$;
(function (EntryPriceAdjustmentPercent$) {
    /** @deprecated use `EntryPriceAdjustmentPercent$inboundSchema` instead. */
    EntryPriceAdjustmentPercent$.inboundSchema = exports.EntryPriceAdjustmentPercent$inboundSchema;
    /** @deprecated use `EntryPriceAdjustmentPercent$outboundSchema` instead. */
    EntryPriceAdjustmentPercent$.outboundSchema = exports.EntryPriceAdjustmentPercent$outboundSchema;
})(EntryPriceAdjustmentPercent$ || (exports.EntryPriceAdjustmentPercent$ = EntryPriceAdjustmentPercent$ = {}));
/** @internal */
exports.EntryPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(EntryPriceAdjustmentType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(EntryPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPriceAdjustmentType$;
(function (EntryPriceAdjustmentType$) {
    /** @deprecated use `EntryPriceAdjustmentType$inboundSchema` instead. */
    EntryPriceAdjustmentType$.inboundSchema = exports.EntryPriceAdjustmentType$inboundSchema;
    /** @deprecated use `EntryPriceAdjustmentType$outboundSchema` instead. */
    EntryPriceAdjustmentType$.outboundSchema = exports.EntryPriceAdjustmentType$outboundSchema;
})(EntryPriceAdjustmentType$ || (exports.EntryPriceAdjustmentType$ = EntryPriceAdjustmentType$ = {}));
/** @internal */
exports.EntryPriceAdjustmentRecord$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => exports.EntryPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_percent: z.nullable(z.lazy(() => exports.EntryPriceAdjustmentPercent$inboundSchema)).optional(),
    price_adjustment_type: exports.EntryPriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
exports.EntryPriceAdjustmentRecord$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => exports.EntryPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentPercent: z.nullable(z.lazy(() => exports.EntryPriceAdjustmentPercent$outboundSchema)).optional(),
    priceAdjustmentType: exports.EntryPriceAdjustmentType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentPercent: "price_adjustment_percent",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryPriceAdjustmentRecord$;
(function (EntryPriceAdjustmentRecord$) {
    /** @deprecated use `EntryPriceAdjustmentRecord$inboundSchema` instead. */
    EntryPriceAdjustmentRecord$.inboundSchema = exports.EntryPriceAdjustmentRecord$inboundSchema;
    /** @deprecated use `EntryPriceAdjustmentRecord$outboundSchema` instead. */
    EntryPriceAdjustmentRecord$.outboundSchema = exports.EntryPriceAdjustmentRecord$outboundSchema;
})(EntryPriceAdjustmentRecord$ || (exports.EntryPriceAdjustmentRecord$ = EntryPriceAdjustmentRecord$ = {}));
/** @internal */
exports.EntryTrade$inboundSchema = z.object({
    additional_instructions: z.array(z.string()).optional(),
    alternate_order_id: z.string().optional(),
    booking_api_booking_execution_id: z.string().optional(),
    booking_api_trade_allocation_id: z.string().optional(),
    booking_api_trade_id: z.string().optional(),
    broker: z.string().optional(),
    broker_capacity: exports.EntryBrokerCapacity$inboundSchema.optional(),
    client_memo: z.string().optional(),
    client_order_id: z.string().optional(),
    exchange: z.string().optional(),
    execution_id: z.string().optional(),
    execution_only: z.boolean().optional(),
    external_id: z.string().optional(),
    fund_confirmation_number: z.string().optional(),
    gateway_client_order_id: z.string().optional(),
    internal_error: z.boolean().optional(),
    is_writeoff: z.boolean().optional(),
    lots: z.array(lot_js_1.Lot$inboundSchema).optional(),
    market: z.string().optional(),
    order_id: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => exports.EntryPrevailingMarketPrice$inboundSchema)).optional(),
    price_adjustment_record: z.nullable(z.lazy(() => exports.EntryPriceAdjustmentRecord$inboundSchema)).optional(),
    route: z.string().optional(),
    special_instructions: z.array(z.string()).optional(),
    when_issued: z.boolean().optional(),
    yield_records: z.array(yieldrecord_js_1.YieldRecord$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "booking_api_booking_execution_id": "bookingApiBookingExecutionId",
        "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
        "booking_api_trade_id": "bookingApiTradeId",
        "broker_capacity": "brokerCapacity",
        "client_memo": "clientMemo",
        "client_order_id": "clientOrderId",
        "execution_id": "executionId",
        "execution_only": "executionOnly",
        "external_id": "externalId",
        "fund_confirmation_number": "fundConfirmationNumber",
        "gateway_client_order_id": "gatewayClientOrderId",
        "internal_error": "internalError",
        "is_writeoff": "isWriteoff",
        "order_id": "orderId",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment_record": "priceAdjustmentRecord",
        "special_instructions": "specialInstructions",
        "when_issued": "whenIssued",
        "yield_records": "yieldRecords",
    });
});
/** @internal */
exports.EntryTrade$outboundSchema = z.object({
    additionalInstructions: z.array(z.string()).optional(),
    alternateOrderId: z.string().optional(),
    bookingApiBookingExecutionId: z.string().optional(),
    bookingApiTradeAllocationId: z.string().optional(),
    bookingApiTradeId: z.string().optional(),
    broker: z.string().optional(),
    brokerCapacity: exports.EntryBrokerCapacity$outboundSchema.optional(),
    clientMemo: z.string().optional(),
    clientOrderId: z.string().optional(),
    exchange: z.string().optional(),
    executionId: z.string().optional(),
    executionOnly: z.boolean().optional(),
    externalId: z.string().optional(),
    fundConfirmationNumber: z.string().optional(),
    gatewayClientOrderId: z.string().optional(),
    internalError: z.boolean().optional(),
    isWriteoff: z.boolean().optional(),
    lots: z.array(lot_js_1.Lot$outboundSchema).optional(),
    market: z.string().optional(),
    orderId: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => exports.EntryPrevailingMarketPrice$outboundSchema)).optional(),
    priceAdjustmentRecord: z.nullable(z.lazy(() => exports.EntryPriceAdjustmentRecord$outboundSchema)).optional(),
    route: z.string().optional(),
    specialInstructions: z.array(z.string()).optional(),
    whenIssued: z.boolean().optional(),
    yieldRecords: z.array(yieldrecord_js_1.YieldRecord$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        bookingApiBookingExecutionId: "booking_api_booking_execution_id",
        bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
        bookingApiTradeId: "booking_api_trade_id",
        brokerCapacity: "broker_capacity",
        clientMemo: "client_memo",
        clientOrderId: "client_order_id",
        executionId: "execution_id",
        executionOnly: "execution_only",
        externalId: "external_id",
        fundConfirmationNumber: "fund_confirmation_number",
        gatewayClientOrderId: "gateway_client_order_id",
        internalError: "internal_error",
        isWriteoff: "is_writeoff",
        orderId: "order_id",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustmentRecord: "price_adjustment_record",
        specialInstructions: "special_instructions",
        whenIssued: "when_issued",
        yieldRecords: "yield_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryTrade$;
(function (EntryTrade$) {
    /** @deprecated use `EntryTrade$inboundSchema` instead. */
    EntryTrade$.inboundSchema = exports.EntryTrade$inboundSchema;
    /** @deprecated use `EntryTrade$outboundSchema` instead. */
    EntryTrade$.outboundSchema = exports.EntryTrade$outboundSchema;
})(EntryTrade$ || (exports.EntryTrade$ = EntryTrade$ = {}));
/** @internal */
exports.EntryTransferType$inboundSchema = z
    .union([
    z.nativeEnum(EntryTransferType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryTransferType$outboundSchema = z.union([
    z.nativeEnum(EntryTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryTransferType$;
(function (EntryTransferType$) {
    /** @deprecated use `EntryTransferType$inboundSchema` instead. */
    EntryTransferType$.inboundSchema = exports.EntryTransferType$inboundSchema;
    /** @deprecated use `EntryTransferType$outboundSchema` instead. */
    EntryTransferType$.outboundSchema = exports.EntryTransferType$outboundSchema;
})(EntryTransferType$ || (exports.EntryTransferType$ = EntryTransferType$ = {}));
/** @internal */
exports.Transfer$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    client_brokerage: z.string().optional(),
    transfer_type: exports.EntryTransferType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "client_brokerage": "clientBrokerage",
        "transfer_type": "transferType",
    });
});
/** @internal */
exports.Transfer$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    clientBrokerage: z.string().optional(),
    transferType: exports.EntryTransferType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        clientBrokerage: "client_brokerage",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Transfer$;
(function (Transfer$) {
    /** @deprecated use `Transfer$inboundSchema` instead. */
    Transfer$.inboundSchema = exports.Transfer$inboundSchema;
    /** @deprecated use `Transfer$outboundSchema` instead. */
    Transfer$.outboundSchema = exports.Transfer$outboundSchema;
})(Transfer$ || (exports.Transfer$ = Transfer$ = {}));
/** @internal */
exports.EntryType$inboundSchema = z
    .union([
    z.nativeEnum(EntryType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryType$outboundSchema = z.union([
    z.nativeEnum(EntryType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryType$;
(function (EntryType$) {
    /** @deprecated use `EntryType$inboundSchema` instead. */
    EntryType$.inboundSchema = exports.EntryType$inboundSchema;
    /** @deprecated use `EntryType$outboundSchema` instead. */
    EntryType$.outboundSchema = exports.EntryType$outboundSchema;
})(EntryType$ || (exports.EntryType$ = EntryType$ = {}));
/** @internal */
exports.EntryUnitSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryUnitSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryUnitSplitCorporateActionGeneralInformation$;
(function (EntryUnitSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryUnitSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryUnitSplitCorporateActionGeneralInformation$.inboundSchema = exports.EntryUnitSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryUnitSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryUnitSplitCorporateActionGeneralInformation$.outboundSchema = exports.EntryUnitSplitCorporateActionGeneralInformation$outboundSchema;
})(EntryUnitSplitCorporateActionGeneralInformation$ || (exports.EntryUnitSplitCorporateActionGeneralInformation$ = EntryUnitSplitCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryUnitSplitStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryUnitSplitStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryUnitSplitStockRate$;
(function (EntryUnitSplitStockRate$) {
    /** @deprecated use `EntryUnitSplitStockRate$inboundSchema` instead. */
    EntryUnitSplitStockRate$.inboundSchema = exports.EntryUnitSplitStockRate$inboundSchema;
    /** @deprecated use `EntryUnitSplitStockRate$outboundSchema` instead. */
    EntryUnitSplitStockRate$.outboundSchema = exports.EntryUnitSplitStockRate$outboundSchema;
})(EntryUnitSplitStockRate$ || (exports.EntryUnitSplitStockRate$ = EntryUnitSplitStockRate$ = {}));
/** @internal */
exports.UnitSplit$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryUnitSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => exports.EntryUnitSplitStockRate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.UnitSplit$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryUnitSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => exports.EntryUnitSplitStockRate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UnitSplit$;
(function (UnitSplit$) {
    /** @deprecated use `UnitSplit$inboundSchema` instead. */
    UnitSplit$.inboundSchema = exports.UnitSplit$inboundSchema;
    /** @deprecated use `UnitSplit$outboundSchema` instead. */
    UnitSplit$.outboundSchema = exports.UnitSplit$outboundSchema;
})(UnitSplit$ || (exports.UnitSplit$ = UnitSplit$ = {}));
/** @internal */
exports.EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWarrantExerciseCorporateActionGeneralInformation$;
(function (EntryWarrantExerciseCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryWarrantExerciseCorporateActionGeneralInformation$.inboundSchema = exports.EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryWarrantExerciseCorporateActionGeneralInformation$.outboundSchema = exports.EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema;
})(EntryWarrantExerciseCorporateActionGeneralInformation$ || (exports.EntryWarrantExerciseCorporateActionGeneralInformation$ = EntryWarrantExerciseCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.WarrantExercise$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryWarrantExerciseCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
exports.WarrantExercise$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryWarrantExerciseCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WarrantExercise$;
(function (WarrantExercise$) {
    /** @deprecated use `WarrantExercise$inboundSchema` instead. */
    WarrantExercise$.inboundSchema = exports.WarrantExercise$inboundSchema;
    /** @deprecated use `WarrantExercise$outboundSchema` instead. */
    WarrantExercise$.outboundSchema = exports.WarrantExercise$outboundSchema;
})(WarrantExercise$ || (exports.WarrantExercise$ = WarrantExercise$ = {}));
/** @internal */
exports.DistributionType$inboundSchema = z
    .union([
    z.nativeEnum(DistributionType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.DistributionType$outboundSchema = z.union([
    z.nativeEnum(DistributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DistributionType$;
(function (DistributionType$) {
    /** @deprecated use `DistributionType$inboundSchema` instead. */
    DistributionType$.inboundSchema = exports.DistributionType$inboundSchema;
    /** @deprecated use `DistributionType$outboundSchema` instead. */
    DistributionType$.outboundSchema = exports.DistributionType$outboundSchema;
})(DistributionType$ || (exports.DistributionType$ = DistributionType$ = {}));
/** @internal */
exports.RetirementType$inboundSchema = z
    .union([
    z.nativeEnum(RetirementType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RetirementType$outboundSchema = z.union([
    z.nativeEnum(RetirementType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RetirementType$;
(function (RetirementType$) {
    /** @deprecated use `RetirementType$inboundSchema` instead. */
    RetirementType$.inboundSchema = exports.RetirementType$inboundSchema;
    /** @deprecated use `RetirementType$outboundSchema` instead. */
    RetirementType$.outboundSchema = exports.RetirementType$outboundSchema;
})(RetirementType$ || (exports.RetirementType$ = RetirementType$ = {}));
/** @internal */
exports.EntryWithdrawalType$inboundSchema = z
    .union([
    z.nativeEnum(EntryWithdrawalType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryWithdrawalType$outboundSchema = z.union([
    z.nativeEnum(EntryWithdrawalType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWithdrawalType$;
(function (EntryWithdrawalType$) {
    /** @deprecated use `EntryWithdrawalType$inboundSchema` instead. */
    EntryWithdrawalType$.inboundSchema = exports.EntryWithdrawalType$inboundSchema;
    /** @deprecated use `EntryWithdrawalType$outboundSchema` instead. */
    EntryWithdrawalType$.outboundSchema = exports.EntryWithdrawalType$outboundSchema;
})(EntryWithdrawalType$ || (exports.EntryWithdrawalType$ = EntryWithdrawalType$ = {}));
/** @internal */
exports.Withdrawal$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    closing_account: z.boolean().optional(),
    destination_account_number: z.string().optional(),
    destination_institution: z.string().optional(),
    distribution_type: exports.DistributionType$inboundSchema.optional(),
    distribution_year: z.number().int().optional(),
    fed_reference_number: z.string().optional(),
    originating_institution: z.string().optional(),
    periodic: z.boolean().optional(),
    retirement_type: exports.RetirementType$inboundSchema.optional(),
    type: exports.EntryWithdrawalType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "closing_account": "closingAccount",
        "destination_account_number": "destinationAccountNumber",
        "destination_institution": "destinationInstitution",
        "distribution_type": "distributionType",
        "distribution_year": "distributionYear",
        "fed_reference_number": "fedReferenceNumber",
        "originating_institution": "originatingInstitution",
        "retirement_type": "retirementType",
    });
});
/** @internal */
exports.Withdrawal$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    closingAccount: z.boolean().optional(),
    destinationAccountNumber: z.string().optional(),
    destinationInstitution: z.string().optional(),
    distributionType: exports.DistributionType$outboundSchema.optional(),
    distributionYear: z.number().int().optional(),
    fedReferenceNumber: z.string().optional(),
    originatingInstitution: z.string().optional(),
    periodic: z.boolean().optional(),
    retirementType: exports.RetirementType$outboundSchema.optional(),
    type: exports.EntryWithdrawalType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        closingAccount: "closing_account",
        destinationAccountNumber: "destination_account_number",
        destinationInstitution: "destination_institution",
        distributionType: "distribution_type",
        distributionYear: "distribution_year",
        fedReferenceNumber: "fed_reference_number",
        originatingInstitution: "originating_institution",
        retirementType: "retirement_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Withdrawal$;
(function (Withdrawal$) {
    /** @deprecated use `Withdrawal$inboundSchema` instead. */
    Withdrawal$.inboundSchema = exports.Withdrawal$inboundSchema;
    /** @deprecated use `Withdrawal$outboundSchema` instead. */
    Withdrawal$.outboundSchema = exports.Withdrawal$outboundSchema;
})(Withdrawal$ || (exports.Withdrawal$ = Withdrawal$ = {}));
/** @internal */
exports.Review$inboundSchema = z
    .union([
    z.nativeEnum(Review),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.Review$outboundSchema = z.union([
    z.nativeEnum(Review),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Review$;
(function (Review$) {
    /** @deprecated use `Review$inboundSchema` instead. */
    Review$.inboundSchema = exports.Review$inboundSchema;
    /** @deprecated use `Review$outboundSchema` instead. */
    Review$.outboundSchema = exports.Review$outboundSchema;
})(Review$ || (exports.Review$ = Review$ = {}));
/** @internal */
exports.WithdrawalPendingReview$inboundSchema = z.object({
    review: exports.Review$inboundSchema.optional(),
});
/** @internal */
exports.WithdrawalPendingReview$outboundSchema = z.object({
    review: exports.Review$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithdrawalPendingReview$;
(function (WithdrawalPendingReview$) {
    /** @deprecated use `WithdrawalPendingReview$inboundSchema` instead. */
    WithdrawalPendingReview$.inboundSchema = exports.WithdrawalPendingReview$inboundSchema;
    /** @deprecated use `WithdrawalPendingReview$outboundSchema` instead. */
    WithdrawalPendingReview$.outboundSchema = exports.WithdrawalPendingReview$outboundSchema;
})(WithdrawalPendingReview$ || (exports.WithdrawalPendingReview$ = WithdrawalPendingReview$ = {}));
/** @internal */
exports.EntryWithholdingRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.EntryWithholdingRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWithholdingRate$;
(function (EntryWithholdingRate$) {
    /** @deprecated use `EntryWithholdingRate$inboundSchema` instead. */
    EntryWithholdingRate$.inboundSchema = exports.EntryWithholdingRate$inboundSchema;
    /** @deprecated use `EntryWithholdingRate$outboundSchema` instead. */
    EntryWithholdingRate$.outboundSchema = exports.EntryWithholdingRate$outboundSchema;
})(EntryWithholdingRate$ || (exports.EntryWithholdingRate$ = EntryWithholdingRate$ = {}));
/** @internal */
exports.EntryWithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(EntryWithholdingState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryWithholdingState$outboundSchema = z.union([
    z.nativeEnum(EntryWithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWithholdingState$;
(function (EntryWithholdingState$) {
    /** @deprecated use `EntryWithholdingState$inboundSchema` instead. */
    EntryWithholdingState$.inboundSchema = exports.EntryWithholdingState$inboundSchema;
    /** @deprecated use `EntryWithholdingState$outboundSchema` instead. */
    EntryWithholdingState$.outboundSchema = exports.EntryWithholdingState$outboundSchema;
})(EntryWithholdingState$ || (exports.EntryWithholdingState$ = EntryWithholdingState$ = {}));
/** @internal */
exports.EntryWithholdingType$inboundSchema = z
    .union([
    z.nativeEnum(EntryWithholdingType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.EntryWithholdingType$outboundSchema = z.union([
    z.nativeEnum(EntryWithholdingType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWithholdingType$;
(function (EntryWithholdingType$) {
    /** @deprecated use `EntryWithholdingType$inboundSchema` instead. */
    EntryWithholdingType$.inboundSchema = exports.EntryWithholdingType$inboundSchema;
    /** @deprecated use `EntryWithholdingType$outboundSchema` instead. */
    EntryWithholdingType$.outboundSchema = exports.EntryWithholdingType$outboundSchema;
})(EntryWithholdingType$ || (exports.EntryWithholdingType$ = EntryWithholdingType$ = {}));
/** @internal */
exports.EntryWithholding$inboundSchema = z.object({
    rate: z.nullable(z.lazy(() => exports.EntryWithholdingRate$inboundSchema)).optional(),
    region_code: z.string().optional(),
    state: exports.EntryWithholdingState$inboundSchema.optional(),
    tax_year: z.number().int().optional(),
    type: exports.EntryWithholdingType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "region_code": "regionCode",
        "tax_year": "taxYear",
    });
});
/** @internal */
exports.EntryWithholding$outboundSchema = z.object({
    rate: z.nullable(z.lazy(() => exports.EntryWithholdingRate$outboundSchema))
        .optional(),
    regionCode: z.string().optional(),
    state: exports.EntryWithholdingState$outboundSchema.optional(),
    taxYear: z.number().int().optional(),
    type: exports.EntryWithholdingType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        regionCode: "region_code",
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWithholding$;
(function (EntryWithholding$) {
    /** @deprecated use `EntryWithholding$inboundSchema` instead. */
    EntryWithholding$.inboundSchema = exports.EntryWithholding$inboundSchema;
    /** @deprecated use `EntryWithholding$outboundSchema` instead. */
    EntryWithholding$.outboundSchema = exports.EntryWithholding$outboundSchema;
})(EntryWithholding$ || (exports.EntryWithholding$ = EntryWithholding$ = {}));
/** @internal */
exports.EntryWorthlessCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.EntryWorthlessCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWorthlessCorporateActionGeneralInformation$;
(function (EntryWorthlessCorporateActionGeneralInformation$) {
    /** @deprecated use `EntryWorthlessCorporateActionGeneralInformation$inboundSchema` instead. */
    EntryWorthlessCorporateActionGeneralInformation$.inboundSchema = exports.EntryWorthlessCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `EntryWorthlessCorporateActionGeneralInformation$outboundSchema` instead. */
    EntryWorthlessCorporateActionGeneralInformation$.outboundSchema = exports.EntryWorthlessCorporateActionGeneralInformation$outboundSchema;
})(EntryWorthlessCorporateActionGeneralInformation$ || (exports.EntryWorthlessCorporateActionGeneralInformation$ = EntryWorthlessCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.EntryWorthlessEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryWorthlessEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWorthlessEffectiveDate$;
(function (EntryWorthlessEffectiveDate$) {
    /** @deprecated use `EntryWorthlessEffectiveDate$inboundSchema` instead. */
    EntryWorthlessEffectiveDate$.inboundSchema = exports.EntryWorthlessEffectiveDate$inboundSchema;
    /** @deprecated use `EntryWorthlessEffectiveDate$outboundSchema` instead. */
    EntryWorthlessEffectiveDate$.outboundSchema = exports.EntryWorthlessEffectiveDate$outboundSchema;
})(EntryWorthlessEffectiveDate$ || (exports.EntryWorthlessEffectiveDate$ = EntryWorthlessEffectiveDate$ = {}));
/** @internal */
exports.EntryWorthlessPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.EntryWorthlessPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntryWorthlessPaymentDate$;
(function (EntryWorthlessPaymentDate$) {
    /** @deprecated use `EntryWorthlessPaymentDate$inboundSchema` instead. */
    EntryWorthlessPaymentDate$.inboundSchema = exports.EntryWorthlessPaymentDate$inboundSchema;
    /** @deprecated use `EntryWorthlessPaymentDate$outboundSchema` instead. */
    EntryWorthlessPaymentDate$.outboundSchema = exports.EntryWorthlessPaymentDate$outboundSchema;
})(EntryWorthlessPaymentDate$ || (exports.EntryWorthlessPaymentDate$ = EntryWorthlessPaymentDate$ = {}));
/** @internal */
exports.Worthless$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.EntryWorthlessCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.EntryWorthlessEffectiveDate$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.EntryWorthlessPaymentDate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "payment_date": "paymentDate",
    });
});
/** @internal */
exports.Worthless$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.EntryWorthlessCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.EntryWorthlessEffectiveDate$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.EntryWorthlessPaymentDate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Worthless$;
(function (Worthless$) {
    /** @deprecated use `Worthless$inboundSchema` instead. */
    Worthless$.inboundSchema = exports.Worthless$inboundSchema;
    /** @deprecated use `Worthless$outboundSchema` instead. */
    Worthless$.outboundSchema = exports.Worthless$outboundSchema;
})(Worthless$ || (exports.Worthless$ = Worthless$ = {}));
/** @internal */
exports.Entry$inboundSchema = z
    .object({
    acats_pending_out: z.nullable(z.lazy(() => exports.AcatsPendingOut$inboundSchema))
        .optional(),
    account_id: z.string().optional(),
    account_memo: exports.AccountMemo$inboundSchema.optional(),
    account_transfer: z.nullable(z.lazy(() => exports.AccountTransfer$inboundSchema))
        .optional(),
    accrued_interest: z.nullable(z.lazy(() => exports.EntryAccruedInterest$inboundSchema)).optional(),
    acquisition: z.nullable(z.lazy(() => exports.Acquisition$inboundSchema)).optional(),
    activity_date: z.nullable(z.lazy(() => exports.ActivityDate$inboundSchema))
        .optional(),
    activity_id: z.string().optional(),
    activity_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    asset_id: z.string().optional(),
    capital_gains: z.nullable(z.lazy(() => exports.CapitalGains$inboundSchema))
        .optional(),
    cash_dividend: z.nullable(z.lazy(() => exports.CashDividend$inboundSchema))
        .optional(),
    commission: z.nullable(z.lazy(() => exports.EntryCommission$inboundSchema))
        .optional(),
    conversion: z.nullable(z.lazy(() => exports.Conversion$inboundSchema)).optional(),
    corporate_action_memo_adjustment: z.nullable(z.lazy(() => exports.CorporateActionMemoAdjustment$inboundSchema)).optional(),
    credit: z.nullable(z.lazy(() => exports.Credit$inboundSchema)).optional(),
    currency_asset_id: z.string().optional(),
    delivery: z.nullable(z.lazy(() => exports.Delivery$inboundSchema)).optional(),
    deposit: z.nullable(z.lazy(() => exports.Deposit$inboundSchema)).optional(),
    description: z.string().optional(),
    drip: z.nullable(z.lazy(() => exports.Drip$inboundSchema)).optional(),
    entry_id: z.string().optional(),
    exchange: z.nullable(z.lazy(() => exports.Exchange$inboundSchema)).optional(),
    fee: z.nullable(z.lazy(() => exports.EntryFee$inboundSchema)).optional(),
    flip: z.nullable(z.lazy(() => exports.Flip$inboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => exports.Fpsl$inboundSchema)).optional(),
    gross_amount: z.nullable(z.lazy(() => exports.EntryGrossAmount$inboundSchema))
        .optional(),
    interest: z.nullable(z.lazy(() => exports.Interest$inboundSchema)).optional(),
    interest_payment: z.nullable(z.lazy(() => exports.InterestPayment$inboundSchema))
        .optional(),
    liquidation: z.nullable(z.lazy(() => exports.Liquidation$inboundSchema)).optional(),
    maturity: z.nullable(z.lazy(() => exports.Maturity$inboundSchema)).optional(),
    merger: z.nullable(z.lazy(() => exports.Merger$inboundSchema)).optional(),
    name: z.string().optional(),
    name_change: z.nullable(z.lazy(() => exports.NameChange$inboundSchema)).optional(),
    original_id: z.string().optional(),
    original_process_date: z.nullable(z.lazy(() => exports.OriginalProcessDate$inboundSchema)).optional(),
    payment_in_kind: z.nullable(z.lazy(() => exports.PaymentInKind$inboundSchema))
        .optional(),
    price: z.nullable(z.lazy(() => exports.EntryPrice$inboundSchema)).optional(),
    process_date: z.nullable(z.lazy(() => exports.EntryProcessDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryQuantity$inboundSchema)).optional(),
    receive: z.nullable(z.lazy(() => exports.Receive$inboundSchema)).optional(),
    redemption_full: z.nullable(z.lazy(() => exports.RedemptionFull$inboundSchema))
        .optional(),
    redemption_partial: z.nullable(z.lazy(() => exports.RedemptionPartial$inboundSchema)).optional(),
    reverse_stock_split: z.nullable(z.lazy(() => exports.ReverseStockSplit$inboundSchema)).optional(),
    reversed_entry_id: z.string().optional(),
    rights_distribution: z.nullable(z.lazy(() => exports.RightsDistribution$inboundSchema)).optional(),
    rights_subscription: z.nullable(z.lazy(() => exports.RightsSubscription$inboundSchema)).optional(),
    rounding_adjustment: z.nullable(z.lazy(() => exports.RoundingAdjustment$inboundSchema)).optional(),
    sale_of_rights: z.nullable(z.lazy(() => exports.SaleOfRights$inboundSchema))
        .optional(),
    settle_date: z.nullable(z.lazy(() => exports.SettleDate$inboundSchema)).optional(),
    side: exports.EntrySide$inboundSchema.optional(),
    side_modifier: exports.EntrySideModifier$inboundSchema.optional(),
    spin_off: z.nullable(z.lazy(() => exports.SpinOff$inboundSchema)).optional(),
    state: exports.EntryState$inboundSchema.optional(),
    stock_dividend: z.nullable(z.lazy(() => exports.StockDividend$inboundSchema))
        .optional(),
    stock_split: z.nullable(z.lazy(() => exports.StockSplit$inboundSchema)).optional(),
    subtype_category: z.string().optional(),
    sweep: z.nullable(z.lazy(() => exports.Sweep$inboundSchema)).optional(),
    tender_offer: z.nullable(z.lazy(() => exports.TenderOffer$inboundSchema))
        .optional(),
    trade: z.nullable(z.lazy(() => exports.EntryTrade$inboundSchema)).optional(),
    transfer: z.nullable(z.lazy(() => exports.Transfer$inboundSchema)).optional(),
    type: exports.EntryType$inboundSchema.optional(),
    unit_split: z.nullable(z.lazy(() => exports.UnitSplit$inboundSchema)).optional(),
    warrant_exercise: z.nullable(z.lazy(() => exports.WarrantExercise$inboundSchema))
        .optional(),
    withdrawal: z.nullable(z.lazy(() => exports.Withdrawal$inboundSchema)).optional(),
    withdrawal_pending_review: z.nullable(z.lazy(() => exports.WithdrawalPendingReview$inboundSchema)).optional(),
    withholding: z.nullable(z.lazy(() => exports.EntryWithholding$inboundSchema))
        .optional(),
    worthless: z.nullable(z.lazy(() => exports.Worthless$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "acats_pending_out": "acatsPendingOut",
        "account_id": "accountId",
        "account_memo": "accountMemo",
        "account_transfer": "accountTransfer",
        "accrued_interest": "accruedInterest",
        "activity_date": "activityDate",
        "activity_id": "activityId",
        "activity_time": "activityTime",
        "asset_id": "assetId",
        "capital_gains": "capitalGains",
        "cash_dividend": "cashDividend",
        "corporate_action_memo_adjustment": "corporateActionMemoAdjustment",
        "currency_asset_id": "currencyAssetId",
        "entry_id": "entryId",
        "gross_amount": "grossAmount",
        "interest_payment": "interestPayment",
        "name_change": "nameChange",
        "original_id": "originalId",
        "original_process_date": "originalProcessDate",
        "payment_in_kind": "paymentInKind",
        "process_date": "processDate",
        "redemption_full": "redemptionFull",
        "redemption_partial": "redemptionPartial",
        "reverse_stock_split": "reverseStockSplit",
        "reversed_entry_id": "reversedEntryId",
        "rights_distribution": "rightsDistribution",
        "rights_subscription": "rightsSubscription",
        "rounding_adjustment": "roundingAdjustment",
        "sale_of_rights": "saleOfRights",
        "settle_date": "settleDate",
        "side_modifier": "sideModifier",
        "spin_off": "spinOff",
        "stock_dividend": "stockDividend",
        "stock_split": "stockSplit",
        "subtype_category": "subtypeCategory",
        "tender_offer": "tenderOffer",
        "unit_split": "unitSplit",
        "warrant_exercise": "warrantExercise",
        "withdrawal_pending_review": "withdrawalPendingReview",
    });
});
/** @internal */
exports.Entry$outboundSchema = z.object({
    acatsPendingOut: z.nullable(z.lazy(() => exports.AcatsPendingOut$outboundSchema))
        .optional(),
    accountId: z.string().optional(),
    accountMemo: exports.AccountMemo$outboundSchema.optional(),
    accountTransfer: z.nullable(z.lazy(() => exports.AccountTransfer$outboundSchema))
        .optional(),
    accruedInterest: z.nullable(z.lazy(() => exports.EntryAccruedInterest$outboundSchema))
        .optional(),
    acquisition: z.nullable(z.lazy(() => exports.Acquisition$outboundSchema)).optional(),
    activityDate: z.nullable(z.lazy(() => exports.ActivityDate$outboundSchema))
        .optional(),
    activityId: z.string().optional(),
    activityTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    assetId: z.string().optional(),
    capitalGains: z.nullable(z.lazy(() => exports.CapitalGains$outboundSchema))
        .optional(),
    cashDividend: z.nullable(z.lazy(() => exports.CashDividend$outboundSchema))
        .optional(),
    commission: z.nullable(z.lazy(() => exports.EntryCommission$outboundSchema))
        .optional(),
    conversion: z.nullable(z.lazy(() => exports.Conversion$outboundSchema)).optional(),
    corporateActionMemoAdjustment: z.nullable(z.lazy(() => exports.CorporateActionMemoAdjustment$outboundSchema)).optional(),
    credit: z.nullable(z.lazy(() => exports.Credit$outboundSchema)).optional(),
    currencyAssetId: z.string().optional(),
    delivery: z.nullable(z.lazy(() => exports.Delivery$outboundSchema)).optional(),
    deposit: z.nullable(z.lazy(() => exports.Deposit$outboundSchema)).optional(),
    description: z.string().optional(),
    drip: z.nullable(z.lazy(() => exports.Drip$outboundSchema)).optional(),
    entryId: z.string().optional(),
    exchange: z.nullable(z.lazy(() => exports.Exchange$outboundSchema)).optional(),
    fee: z.nullable(z.lazy(() => exports.EntryFee$outboundSchema)).optional(),
    flip: z.nullable(z.lazy(() => exports.Flip$outboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => exports.Fpsl$outboundSchema)).optional(),
    grossAmount: z.nullable(z.lazy(() => exports.EntryGrossAmount$outboundSchema))
        .optional(),
    interest: z.nullable(z.lazy(() => exports.Interest$outboundSchema)).optional(),
    interestPayment: z.nullable(z.lazy(() => exports.InterestPayment$outboundSchema))
        .optional(),
    liquidation: z.nullable(z.lazy(() => exports.Liquidation$outboundSchema)).optional(),
    maturity: z.nullable(z.lazy(() => exports.Maturity$outboundSchema)).optional(),
    merger: z.nullable(z.lazy(() => exports.Merger$outboundSchema)).optional(),
    name: z.string().optional(),
    nameChange: z.nullable(z.lazy(() => exports.NameChange$outboundSchema)).optional(),
    originalId: z.string().optional(),
    originalProcessDate: z.nullable(z.lazy(() => exports.OriginalProcessDate$outboundSchema)).optional(),
    paymentInKind: z.nullable(z.lazy(() => exports.PaymentInKind$outboundSchema))
        .optional(),
    price: z.nullable(z.lazy(() => exports.EntryPrice$outboundSchema)).optional(),
    processDate: z.nullable(z.lazy(() => exports.EntryProcessDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.EntryQuantity$outboundSchema)).optional(),
    receive: z.nullable(z.lazy(() => exports.Receive$outboundSchema)).optional(),
    redemptionFull: z.nullable(z.lazy(() => exports.RedemptionFull$outboundSchema))
        .optional(),
    redemptionPartial: z.nullable(z.lazy(() => exports.RedemptionPartial$outboundSchema))
        .optional(),
    reverseStockSplit: z.nullable(z.lazy(() => exports.ReverseStockSplit$outboundSchema))
        .optional(),
    reversedEntryId: z.string().optional(),
    rightsDistribution: z.nullable(z.lazy(() => exports.RightsDistribution$outboundSchema)).optional(),
    rightsSubscription: z.nullable(z.lazy(() => exports.RightsSubscription$outboundSchema)).optional(),
    roundingAdjustment: z.nullable(z.lazy(() => exports.RoundingAdjustment$outboundSchema)).optional(),
    saleOfRights: z.nullable(z.lazy(() => exports.SaleOfRights$outboundSchema))
        .optional(),
    settleDate: z.nullable(z.lazy(() => exports.SettleDate$outboundSchema)).optional(),
    side: exports.EntrySide$outboundSchema.optional(),
    sideModifier: exports.EntrySideModifier$outboundSchema.optional(),
    spinOff: z.nullable(z.lazy(() => exports.SpinOff$outboundSchema)).optional(),
    state: exports.EntryState$outboundSchema.optional(),
    stockDividend: z.nullable(z.lazy(() => exports.StockDividend$outboundSchema))
        .optional(),
    stockSplit: z.nullable(z.lazy(() => exports.StockSplit$outboundSchema)).optional(),
    subtypeCategory: z.string().optional(),
    sweep: z.nullable(z.lazy(() => exports.Sweep$outboundSchema)).optional(),
    tenderOffer: z.nullable(z.lazy(() => exports.TenderOffer$outboundSchema)).optional(),
    trade: z.nullable(z.lazy(() => exports.EntryTrade$outboundSchema)).optional(),
    transfer: z.nullable(z.lazy(() => exports.Transfer$outboundSchema)).optional(),
    type: exports.EntryType$outboundSchema.optional(),
    unitSplit: z.nullable(z.lazy(() => exports.UnitSplit$outboundSchema)).optional(),
    warrantExercise: z.nullable(z.lazy(() => exports.WarrantExercise$outboundSchema))
        .optional(),
    withdrawal: z.nullable(z.lazy(() => exports.Withdrawal$outboundSchema)).optional(),
    withdrawalPendingReview: z.nullable(z.lazy(() => exports.WithdrawalPendingReview$outboundSchema)).optional(),
    withholding: z.nullable(z.lazy(() => exports.EntryWithholding$outboundSchema))
        .optional(),
    worthless: z.nullable(z.lazy(() => exports.Worthless$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acatsPendingOut: "acats_pending_out",
        accountId: "account_id",
        accountMemo: "account_memo",
        accountTransfer: "account_transfer",
        accruedInterest: "accrued_interest",
        activityDate: "activity_date",
        activityId: "activity_id",
        activityTime: "activity_time",
        assetId: "asset_id",
        capitalGains: "capital_gains",
        cashDividend: "cash_dividend",
        corporateActionMemoAdjustment: "corporate_action_memo_adjustment",
        currencyAssetId: "currency_asset_id",
        entryId: "entry_id",
        grossAmount: "gross_amount",
        interestPayment: "interest_payment",
        nameChange: "name_change",
        originalId: "original_id",
        originalProcessDate: "original_process_date",
        paymentInKind: "payment_in_kind",
        processDate: "process_date",
        redemptionFull: "redemption_full",
        redemptionPartial: "redemption_partial",
        reverseStockSplit: "reverse_stock_split",
        reversedEntryId: "reversed_entry_id",
        rightsDistribution: "rights_distribution",
        rightsSubscription: "rights_subscription",
        roundingAdjustment: "rounding_adjustment",
        saleOfRights: "sale_of_rights",
        settleDate: "settle_date",
        sideModifier: "side_modifier",
        spinOff: "spin_off",
        stockDividend: "stock_dividend",
        stockSplit: "stock_split",
        subtypeCategory: "subtype_category",
        tenderOffer: "tender_offer",
        unitSplit: "unit_split",
        warrantExercise: "warrant_exercise",
        withdrawalPendingReview: "withdrawal_pending_review",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Entry$;
(function (Entry$) {
    /** @deprecated use `Entry$inboundSchema` instead. */
    Entry$.inboundSchema = exports.Entry$inboundSchema;
    /** @deprecated use `Entry$outboundSchema` instead. */
    Entry$.outboundSchema = exports.Entry$outboundSchema;
})(Entry$ || (exports.Entry$ = Entry$ = {}));
//# sourceMappingURL=entry.js.map