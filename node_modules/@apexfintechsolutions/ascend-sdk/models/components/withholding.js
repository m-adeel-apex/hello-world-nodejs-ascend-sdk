"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Withholding$ = exports.Withholding$outboundSchema = exports.Withholding$inboundSchema = exports.WithholdingType1$ = exports.WithholdingType1$outboundSchema = exports.WithholdingType1$inboundSchema = exports.WithholdingState$ = exports.WithholdingState$outboundSchema = exports.WithholdingState$inboundSchema = exports.WithholdingRate$ = exports.WithholdingRate$outboundSchema = exports.WithholdingRate$inboundSchema = exports.WithholdingAmount$ = exports.WithholdingAmount$outboundSchema = exports.WithholdingAmount$inboundSchema = exports.WithholdingType1 = exports.WithholdingState = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
var WithholdingState;
(function (WithholdingState) {
    WithholdingState["WithholdingStateUnspecified"] = "WITHHOLDING_STATE_UNSPECIFIED";
    WithholdingState["Ca"] = "CA";
    WithholdingState["Me"] = "ME";
    WithholdingState["Vt"] = "VT";
    WithholdingState["Al"] = "AL";
    WithholdingState["Ak"] = "AK";
    WithholdingState["Az"] = "AZ";
    WithholdingState["Ar"] = "AR";
    WithholdingState["Co"] = "CO";
    WithholdingState["Ct"] = "CT";
    WithholdingState["De"] = "DE";
    WithholdingState["Fl"] = "FL";
    WithholdingState["Ga"] = "GA";
    WithholdingState["Hi"] = "HI";
    WithholdingState["Id"] = "ID";
    WithholdingState["Il"] = "IL";
    WithholdingState["In"] = "IN";
    WithholdingState["Ia"] = "IA";
    WithholdingState["Ks"] = "KS";
    WithholdingState["Ky"] = "KY";
    WithholdingState["La"] = "LA";
    WithholdingState["Md"] = "MD";
    WithholdingState["Ma"] = "MA";
    WithholdingState["Mi"] = "MI";
    WithholdingState["Mn"] = "MN";
    WithholdingState["Ms"] = "MS";
    WithholdingState["Mo"] = "MO";
    WithholdingState["Mt"] = "MT";
    WithholdingState["Ne"] = "NE";
    WithholdingState["Nv"] = "NV";
    WithholdingState["Nh"] = "NH";
    WithholdingState["Nj"] = "NJ";
    WithholdingState["Nm"] = "NM";
    WithholdingState["Ny"] = "NY";
    WithholdingState["Nc"] = "NC";
    WithholdingState["Nd"] = "ND";
    WithholdingState["Oh"] = "OH";
    WithholdingState["Ok"] = "OK";
    WithholdingState["Or"] = "OR";
    WithholdingState["Pa"] = "PA";
    WithholdingState["Ri"] = "RI";
    WithholdingState["Sc"] = "SC";
    WithholdingState["Sd"] = "SD";
    WithholdingState["Tn"] = "TN";
    WithholdingState["Tx"] = "TX";
    WithholdingState["Ut"] = "UT";
    WithholdingState["Va"] = "VA";
    WithholdingState["Wa"] = "WA";
    WithholdingState["Wv"] = "WV";
    WithholdingState["Wi"] = "WI";
    WithholdingState["Wy"] = "WY";
})(WithholdingState || (exports.WithholdingState = WithholdingState = {}));
/**
 * Describes the type of the withholding (Federal, State, etc.)
 */
var WithholdingType1;
(function (WithholdingType1) {
    WithholdingType1["WithholdingTypeUnspecified"] = "WITHHOLDING_TYPE_UNSPECIFIED";
    WithholdingType1["Federal"] = "FEDERAL";
    WithholdingType1["State"] = "STATE";
    WithholdingType1["ForeignSecurity"] = "FOREIGN_SECURITY";
    WithholdingType1["FederalIra"] = "FEDERAL_IRA";
    WithholdingType1["StateIra"] = "STATE_IRA";
    WithholdingType1["NonResidentAlien"] = "NON_RESIDENT_ALIEN";
})(WithholdingType1 || (exports.WithholdingType1 = WithholdingType1 = {}));
/** @internal */
exports.WithholdingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.WithholdingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithholdingAmount$;
(function (WithholdingAmount$) {
    /** @deprecated use `WithholdingAmount$inboundSchema` instead. */
    WithholdingAmount$.inboundSchema = exports.WithholdingAmount$inboundSchema;
    /** @deprecated use `WithholdingAmount$outboundSchema` instead. */
    WithholdingAmount$.outboundSchema = exports.WithholdingAmount$outboundSchema;
})(WithholdingAmount$ || (exports.WithholdingAmount$ = WithholdingAmount$ = {}));
/** @internal */
exports.WithholdingRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.WithholdingRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithholdingRate$;
(function (WithholdingRate$) {
    /** @deprecated use `WithholdingRate$inboundSchema` instead. */
    WithholdingRate$.inboundSchema = exports.WithholdingRate$inboundSchema;
    /** @deprecated use `WithholdingRate$outboundSchema` instead. */
    WithholdingRate$.outboundSchema = exports.WithholdingRate$outboundSchema;
})(WithholdingRate$ || (exports.WithholdingRate$ = WithholdingRate$ = {}));
/** @internal */
exports.WithholdingState$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.WithholdingState$outboundSchema = z.union([
    z.nativeEnum(WithholdingState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithholdingState$;
(function (WithholdingState$) {
    /** @deprecated use `WithholdingState$inboundSchema` instead. */
    WithholdingState$.inboundSchema = exports.WithholdingState$inboundSchema;
    /** @deprecated use `WithholdingState$outboundSchema` instead. */
    WithholdingState$.outboundSchema = exports.WithholdingState$outboundSchema;
})(WithholdingState$ || (exports.WithholdingState$ = WithholdingState$ = {}));
/** @internal */
exports.WithholdingType1$inboundSchema = z
    .union([
    z.nativeEnum(WithholdingType1),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.WithholdingType1$outboundSchema = z.union([
    z.nativeEnum(WithholdingType1),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WithholdingType1$;
(function (WithholdingType1$) {
    /** @deprecated use `WithholdingType1$inboundSchema` instead. */
    WithholdingType1$.inboundSchema = exports.WithholdingType1$inboundSchema;
    /** @deprecated use `WithholdingType1$outboundSchema` instead. */
    WithholdingType1$.outboundSchema = exports.WithholdingType1$outboundSchema;
})(WithholdingType1$ || (exports.WithholdingType1$ = WithholdingType1$ = {}));
/** @internal */
exports.Withholding$inboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.WithholdingAmount$inboundSchema)).optional(),
    rate: z.nullable(z.lazy(() => exports.WithholdingRate$inboundSchema)).optional(),
    state: exports.WithholdingState$inboundSchema.optional(),
    tax_year: z.number().int().optional(),
    type: exports.WithholdingType1$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "tax_year": "taxYear",
    });
});
/** @internal */
exports.Withholding$outboundSchema = z.object({
    amount: z.nullable(z.lazy(() => exports.WithholdingAmount$outboundSchema)).optional(),
    rate: z.nullable(z.lazy(() => exports.WithholdingRate$outboundSchema)).optional(),
    state: exports.WithholdingState$outboundSchema.optional(),
    taxYear: z.number().int().optional(),
    type: exports.WithholdingType1$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        taxYear: "tax_year",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Withholding$;
(function (Withholding$) {
    /** @deprecated use `Withholding$inboundSchema` instead. */
    Withholding$.inboundSchema = exports.Withholding$inboundSchema;
    /** @deprecated use `Withholding$outboundSchema` instead. */
    Withholding$.outboundSchema = exports.Withholding$outboundSchema;
})(Withholding$ || (exports.Withholding$ = Withholding$ = {}));
//# sourceMappingURL=withholding.js.map