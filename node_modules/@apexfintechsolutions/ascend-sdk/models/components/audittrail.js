"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditTrail$ = exports.AuditTrail$outboundSchema = exports.AuditTrail$inboundSchema = exports.AuditType$ = exports.AuditType$outboundSchema = exports.AuditType$inboundSchema = exports.AuditType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * The type of audit that was performed on the investigation
 */
var AuditType;
(function (AuditType) {
    AuditType["AuditTypeUnspecified"] = "AUDIT_TYPE_UNSPECIFIED";
    AuditType["InvestigationRequestUpdate"] = "INVESTIGATION_REQUEST_UPDATE";
    AuditType["InvestigationState"] = "INVESTIGATION_STATE";
    AuditType["Comment"] = "COMMENT";
})(AuditType || (exports.AuditType = AuditType = {}));
/** @internal */
exports.AuditType$inboundSchema = z
    .union([
    z.nativeEnum(AuditType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AuditType$outboundSchema = z.union([
    z.nativeEnum(AuditType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AuditType$;
(function (AuditType$) {
    /** @deprecated use `AuditType$inboundSchema` instead. */
    AuditType$.inboundSchema = exports.AuditType$inboundSchema;
    /** @deprecated use `AuditType$outboundSchema` instead. */
    AuditType$.outboundSchema = exports.AuditType$outboundSchema;
})(AuditType$ || (exports.AuditType$ = AuditType$ = {}));
/** @internal */
exports.AuditTrail$inboundSchema = z.object({
    audit_type: exports.AuditType$inboundSchema.optional(),
    comment: z.string().optional(),
    field: z.string().optional(),
    new_value: z.string().optional(),
    old_value: z.string().optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    update_user: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "audit_type": "auditType",
        "new_value": "newValue",
        "old_value": "oldValue",
        "update_time": "updateTime",
        "update_user": "updateUser",
    });
});
/** @internal */
exports.AuditTrail$outboundSchema = z.object({
    auditType: exports.AuditType$outboundSchema.optional(),
    comment: z.string().optional(),
    field: z.string().optional(),
    newValue: z.string().optional(),
    oldValue: z.string().optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updateUser: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        auditType: "audit_type",
        newValue: "new_value",
        oldValue: "old_value",
        updateTime: "update_time",
        updateUser: "update_user",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AuditTrail$;
(function (AuditTrail$) {
    /** @deprecated use `AuditTrail$inboundSchema` instead. */
    AuditTrail$.inboundSchema = exports.AuditTrail$inboundSchema;
    /** @deprecated use `AuditTrail$outboundSchema` instead. */
    AuditTrail$.outboundSchema = exports.AuditTrail$outboundSchema;
})(AuditTrail$ || (exports.AuditTrail$ = AuditTrail$ = {}));
//# sourceMappingURL=audittrail.js.map