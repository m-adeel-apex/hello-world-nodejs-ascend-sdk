"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderCreate$ = exports.OrderCreate$outboundSchema = exports.OrderCreate$inboundSchema = exports.TimeInForce$ = exports.TimeInForce$outboundSchema = exports.TimeInForce$inboundSchema = exports.SpecialReportingInstructions$ = exports.SpecialReportingInstructions$outboundSchema = exports.SpecialReportingInstructions$inboundSchema = exports.Side$ = exports.Side$outboundSchema = exports.Side$inboundSchema = exports.OrderType$ = exports.OrderType$outboundSchema = exports.OrderType$inboundSchema = exports.IdentifierType$ = exports.IdentifierType$outboundSchema = exports.IdentifierType$inboundSchema = exports.BrokerCapacity$ = exports.BrokerCapacity$outboundSchema = exports.BrokerCapacity$inboundSchema = exports.AssetType$ = exports.AssetType$outboundSchema = exports.AssetType$inboundSchema = exports.TimeInForce = exports.SpecialReportingInstructions = exports.Side = exports.OrderType = exports.IdentifierType = exports.BrokerCapacity = exports.AssetType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const commissioncreate_js_1 = require("./commissioncreate.js");
const datecreate_js_1 = require("./datecreate.js");
const decimalcreate_js_1 = require("./decimalcreate.js");
const feecreate_js_1 = require("./feecreate.js");
const letterofintentcreate_js_1 = require("./letterofintentcreate.js");
const limitpricecreate_js_1 = require("./limitpricecreate.js");
const rightsofaccumulationcreate_js_1 = require("./rightsofaccumulationcreate.js");
const stoppricecreate_js_1 = require("./stoppricecreate.js");
/**
 * The type of the asset in this order, which must be one of the following:
 *
 * @remarks
 *  EQUITY, MUTUAL_FUND, and FIXED_INCOME.
 */
var AssetType;
(function (AssetType) {
    AssetType["Equity"] = "EQUITY";
    AssetType["FixedIncome"] = "FIXED_INCOME";
    AssetType["MutualFund"] = "MUTUAL_FUND";
})(AssetType || (exports.AssetType = AssetType = {}));
/**
 * Defaults to "AGENCY" if not specified. For Equities: Only "AGENCY" is allowed. For Mutual Funds: Only "AGENCY" is allowed. For Fixed Income: Either "AGENCY" or "PRINCIPAL" are allowed.
 */
var BrokerCapacity;
(function (BrokerCapacity) {
    BrokerCapacity["BrokerCapacityUnspecified"] = "BROKER_CAPACITY_UNSPECIFIED";
    BrokerCapacity["Agency"] = "AGENCY";
    BrokerCapacity["Principal"] = "PRINCIPAL";
})(BrokerCapacity || (exports.BrokerCapacity = BrokerCapacity = {}));
/**
 * The identifier type of the asset being ordered. For Equities: only SYMBOL is supported For Mutual Funds: only SYMBOL and CUSIP are supported For Fixed Income: only CUSIP and ISIN are supported
 */
var IdentifierType;
(function (IdentifierType) {
    IdentifierType["Symbol"] = "SYMBOL";
    IdentifierType["Cusip"] = "CUSIP";
    IdentifierType["Isin"] = "ISIN";
})(IdentifierType || (exports.IdentifierType = IdentifierType = {}));
/**
 * The execution type of this order. For Equities: MARKET, LIMIT, or STOP are supported. For Mutual Funds: only MARKET is supported. For Fixed Income: only LIMIT is supported.
 */
var OrderType;
(function (OrderType) {
    OrderType["OrderTypeUnspecified"] = "ORDER_TYPE_UNSPECIFIED";
    OrderType["Limit"] = "LIMIT";
    OrderType["Market"] = "MARKET";
    OrderType["Stop"] = "STOP";
})(OrderType || (exports.OrderType = OrderType = {}));
/**
 * The side of this order.
 */
var Side;
(function (Side) {
    Side["SideUnspecified"] = "SIDE_UNSPECIFIED";
    Side["Buy"] = "BUY";
    Side["Sell"] = "SELL";
})(Side || (exports.Side = Side = {}));
var SpecialReportingInstructions;
(function (SpecialReportingInstructions) {
    SpecialReportingInstructions["SpecialReportingInstructionsUnspecified"] = "SPECIAL_REPORTING_INSTRUCTIONS_UNSPECIFIED";
    SpecialReportingInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    SpecialReportingInstructions["WithDividend"] = "WITH_DIVIDEND";
    SpecialReportingInstructions["WithRights"] = "WITH_RIGHTS";
    SpecialReportingInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    SpecialReportingInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    SpecialReportingInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    SpecialReportingInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    SpecialReportingInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    SpecialReportingInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    SpecialReportingInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    SpecialReportingInstructions["Solicited"] = "SOLICITED";
    SpecialReportingInstructions["Unsolicited"] = "UNSOLICITED";
    SpecialReportingInstructions["XDividend"] = "X_DIVIDEND";
    SpecialReportingInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    SpecialReportingInstructions["AveragePrice"] = "AVERAGE_PRICE";
    SpecialReportingInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    SpecialReportingInstructions["InternetOrder"] = "INTERNET_ORDER";
    SpecialReportingInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    SpecialReportingInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    SpecialReportingInstructions["RisklessPrincipal"] = "RISKLESS_PRINCIPAL";
    SpecialReportingInstructions["ThirdMarket"] = "THIRD_MARKET";
    SpecialReportingInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    SpecialReportingInstructions["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(SpecialReportingInstructions || (exports.SpecialReportingInstructions = SpecialReportingInstructions = {}));
/**
 * Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
 */
var TimeInForce;
(function (TimeInForce) {
    TimeInForce["TimeInForceUnspecified"] = "TIME_IN_FORCE_UNSPECIFIED";
    TimeInForce["Day"] = "DAY";
})(TimeInForce || (exports.TimeInForce = TimeInForce = {}));
/** @internal */
exports.AssetType$inboundSchema = z
    .union([
    z.nativeEnum(AssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AssetType$outboundSchema = z.union([
    z.nativeEnum(AssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AssetType$;
(function (AssetType$) {
    /** @deprecated use `AssetType$inboundSchema` instead. */
    AssetType$.inboundSchema = exports.AssetType$inboundSchema;
    /** @deprecated use `AssetType$outboundSchema` instead. */
    AssetType$.outboundSchema = exports.AssetType$outboundSchema;
})(AssetType$ || (exports.AssetType$ = AssetType$ = {}));
/** @internal */
exports.BrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(BrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.BrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(BrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BrokerCapacity$;
(function (BrokerCapacity$) {
    /** @deprecated use `BrokerCapacity$inboundSchema` instead. */
    BrokerCapacity$.inboundSchema = exports.BrokerCapacity$inboundSchema;
    /** @deprecated use `BrokerCapacity$outboundSchema` instead. */
    BrokerCapacity$.outboundSchema = exports.BrokerCapacity$outboundSchema;
})(BrokerCapacity$ || (exports.BrokerCapacity$ = BrokerCapacity$ = {}));
/** @internal */
exports.IdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(IdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.IdentifierType$outboundSchema = z.union([
    z.nativeEnum(IdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IdentifierType$;
(function (IdentifierType$) {
    /** @deprecated use `IdentifierType$inboundSchema` instead. */
    IdentifierType$.inboundSchema = exports.IdentifierType$inboundSchema;
    /** @deprecated use `IdentifierType$outboundSchema` instead. */
    IdentifierType$.outboundSchema = exports.IdentifierType$outboundSchema;
})(IdentifierType$ || (exports.IdentifierType$ = IdentifierType$ = {}));
/** @internal */
exports.OrderType$inboundSchema = z
    .union([
    z.nativeEnum(OrderType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OrderType$outboundSchema = z.union([
    z.nativeEnum(OrderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderType$;
(function (OrderType$) {
    /** @deprecated use `OrderType$inboundSchema` instead. */
    OrderType$.inboundSchema = exports.OrderType$inboundSchema;
    /** @deprecated use `OrderType$outboundSchema` instead. */
    OrderType$.outboundSchema = exports.OrderType$outboundSchema;
})(OrderType$ || (exports.OrderType$ = OrderType$ = {}));
/** @internal */
exports.Side$inboundSchema = z
    .union([
    z.nativeEnum(Side),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.Side$outboundSchema = z.union([
    z.nativeEnum(Side),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Side$;
(function (Side$) {
    /** @deprecated use `Side$inboundSchema` instead. */
    Side$.inboundSchema = exports.Side$inboundSchema;
    /** @deprecated use `Side$outboundSchema` instead. */
    Side$.outboundSchema = exports.Side$outboundSchema;
})(Side$ || (exports.Side$ = Side$ = {}));
/** @internal */
exports.SpecialReportingInstructions$inboundSchema = z
    .union([
    z.nativeEnum(SpecialReportingInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.SpecialReportingInstructions$outboundSchema = z.union([
    z.nativeEnum(SpecialReportingInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SpecialReportingInstructions$;
(function (SpecialReportingInstructions$) {
    /** @deprecated use `SpecialReportingInstructions$inboundSchema` instead. */
    SpecialReportingInstructions$.inboundSchema = exports.SpecialReportingInstructions$inboundSchema;
    /** @deprecated use `SpecialReportingInstructions$outboundSchema` instead. */
    SpecialReportingInstructions$.outboundSchema = exports.SpecialReportingInstructions$outboundSchema;
})(SpecialReportingInstructions$ || (exports.SpecialReportingInstructions$ = SpecialReportingInstructions$ = {}));
/** @internal */
exports.TimeInForce$inboundSchema = z
    .union([
    z.nativeEnum(TimeInForce),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.TimeInForce$outboundSchema = z.union([
    z.nativeEnum(TimeInForce),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TimeInForce$;
(function (TimeInForce$) {
    /** @deprecated use `TimeInForce$inboundSchema` instead. */
    TimeInForce$.inboundSchema = exports.TimeInForce$inboundSchema;
    /** @deprecated use `TimeInForce$outboundSchema` instead. */
    TimeInForce$.outboundSchema = exports.TimeInForce$outboundSchema;
})(TimeInForce$ || (exports.TimeInForce$ = TimeInForce$ = {}));
/** @internal */
exports.OrderCreate$inboundSchema = z.object({
    asset_type: exports.AssetType$inboundSchema,
    broker_capacity: exports.BrokerCapacity$inboundSchema.optional(),
    client_order_id: z.string(),
    client_received_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    commission: commissioncreate_js_1.CommissionCreate$inboundSchema.optional(),
    currency_code: z.string().optional(),
    fees: z.array(feecreate_js_1.FeeCreate$inboundSchema).optional(),
    identifier: z.string(),
    identifier_issuing_region_code: z.string().optional(),
    identifier_type: exports.IdentifierType$inboundSchema,
    letter_of_intent: letterofintentcreate_js_1.LetterOfIntentCreate$inboundSchema.optional(),
    limit_price: limitpricecreate_js_1.LimitPriceCreate$inboundSchema.optional(),
    max_sell_quantity: decimalcreate_js_1.DecimalCreate$inboundSchema.optional(),
    notional_value: decimalcreate_js_1.DecimalCreate$inboundSchema.optional(),
    order_date: datecreate_js_1.DateCreate$inboundSchema,
    order_type: exports.OrderType$inboundSchema,
    quantity: decimalcreate_js_1.DecimalCreate$inboundSchema.optional(),
    rights_of_accumulation: rightsofaccumulationcreate_js_1.RightsOfAccumulationCreate$inboundSchema.optional(),
    side: exports.Side$inboundSchema,
    special_reporting_instructions: z.array(exports.SpecialReportingInstructions$inboundSchema).optional(),
    stop_price: stoppricecreate_js_1.StopPriceCreate$inboundSchema.optional(),
    time_in_force: exports.TimeInForce$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "asset_type": "assetType",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "client_received_time": "clientReceivedTime",
        "currency_code": "currencyCode",
        "identifier_issuing_region_code": "identifierIssuingRegionCode",
        "identifier_type": "identifierType",
        "letter_of_intent": "letterOfIntent",
        "limit_price": "limitPrice",
        "max_sell_quantity": "maxSellQuantity",
        "notional_value": "notionalValue",
        "order_date": "orderDate",
        "order_type": "orderType",
        "rights_of_accumulation": "rightsOfAccumulation",
        "special_reporting_instructions": "specialReportingInstructions",
        "stop_price": "stopPrice",
        "time_in_force": "timeInForce",
    });
});
/** @internal */
exports.OrderCreate$outboundSchema = z.object({
    assetType: exports.AssetType$outboundSchema,
    brokerCapacity: exports.BrokerCapacity$outboundSchema.optional(),
    clientOrderId: z.string(),
    clientReceivedTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    commission: commissioncreate_js_1.CommissionCreate$outboundSchema.optional(),
    currencyCode: z.string().optional(),
    fees: z.array(feecreate_js_1.FeeCreate$outboundSchema).optional(),
    identifier: z.string(),
    identifierIssuingRegionCode: z.string().optional(),
    identifierType: exports.IdentifierType$outboundSchema,
    letterOfIntent: letterofintentcreate_js_1.LetterOfIntentCreate$outboundSchema.optional(),
    limitPrice: limitpricecreate_js_1.LimitPriceCreate$outboundSchema.optional(),
    maxSellQuantity: decimalcreate_js_1.DecimalCreate$outboundSchema.optional(),
    notionalValue: decimalcreate_js_1.DecimalCreate$outboundSchema.optional(),
    orderDate: datecreate_js_1.DateCreate$outboundSchema,
    orderType: exports.OrderType$outboundSchema,
    quantity: decimalcreate_js_1.DecimalCreate$outboundSchema.optional(),
    rightsOfAccumulation: rightsofaccumulationcreate_js_1.RightsOfAccumulationCreate$outboundSchema.optional(),
    side: exports.Side$outboundSchema,
    specialReportingInstructions: z.array(exports.SpecialReportingInstructions$outboundSchema).optional(),
    stopPrice: stoppricecreate_js_1.StopPriceCreate$outboundSchema.optional(),
    timeInForce: exports.TimeInForce$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        assetType: "asset_type",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        clientReceivedTime: "client_received_time",
        currencyCode: "currency_code",
        identifierIssuingRegionCode: "identifier_issuing_region_code",
        identifierType: "identifier_type",
        letterOfIntent: "letter_of_intent",
        limitPrice: "limit_price",
        maxSellQuantity: "max_sell_quantity",
        notionalValue: "notional_value",
        orderDate: "order_date",
        orderType: "order_type",
        rightsOfAccumulation: "rights_of_accumulation",
        specialReportingInstructions: "special_reporting_instructions",
        stopPrice: "stop_price",
        timeInForce: "time_in_force",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderCreate$;
(function (OrderCreate$) {
    /** @deprecated use `OrderCreate$inboundSchema` instead. */
    OrderCreate$.inboundSchema = exports.OrderCreate$inboundSchema;
    /** @deprecated use `OrderCreate$outboundSchema` instead. */
    OrderCreate$.outboundSchema = exports.OrderCreate$outboundSchema;
})(OrderCreate$ || (exports.OrderCreate$ = OrderCreate$ = {}));
//# sourceMappingURL=ordercreate.js.map