"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuyingPower$ = exports.BuyingPower$outboundSchema = exports.BuyingPower$inboundSchema = exports.SmaAmount$ = exports.SmaAmount$outboundSchema = exports.SmaAmount$inboundSchema = exports.Requirements$ = exports.Requirements$outboundSchema = exports.Requirements$inboundSchema = exports.TotalRequirementsAmount$ = exports.TotalRequirementsAmount$outboundSchema = exports.TotalRequirementsAmount$inboundSchema = exports.TotalExcessAmount$ = exports.TotalExcessAmount$outboundSchema = exports.TotalExcessAmount$inboundSchema = exports.PositionMarketValueAmount$ = exports.PositionMarketValueAmount$outboundSchema = exports.PositionMarketValueAmount$inboundSchema = exports.DayTradeBuyingPowerAmount$ = exports.DayTradeBuyingPowerAmount$outboundSchema = exports.DayTradeBuyingPowerAmount$inboundSchema = exports.BuyingPowerAmount$ = exports.BuyingPowerAmount$outboundSchema = exports.BuyingPowerAmount$inboundSchema = exports.AccountEquityAmount$ = exports.AccountEquityAmount$outboundSchema = exports.AccountEquityAmount$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
/** @internal */
exports.AccountEquityAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.AccountEquityAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountEquityAmount$;
(function (AccountEquityAmount$) {
    /** @deprecated use `AccountEquityAmount$inboundSchema` instead. */
    AccountEquityAmount$.inboundSchema = exports.AccountEquityAmount$inboundSchema;
    /** @deprecated use `AccountEquityAmount$outboundSchema` instead. */
    AccountEquityAmount$.outboundSchema = exports.AccountEquityAmount$outboundSchema;
})(AccountEquityAmount$ || (exports.AccountEquityAmount$ = AccountEquityAmount$ = {}));
/** @internal */
exports.BuyingPowerAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.BuyingPowerAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BuyingPowerAmount$;
(function (BuyingPowerAmount$) {
    /** @deprecated use `BuyingPowerAmount$inboundSchema` instead. */
    BuyingPowerAmount$.inboundSchema = exports.BuyingPowerAmount$inboundSchema;
    /** @deprecated use `BuyingPowerAmount$outboundSchema` instead. */
    BuyingPowerAmount$.outboundSchema = exports.BuyingPowerAmount$outboundSchema;
})(BuyingPowerAmount$ || (exports.BuyingPowerAmount$ = BuyingPowerAmount$ = {}));
/** @internal */
exports.DayTradeBuyingPowerAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.DayTradeBuyingPowerAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DayTradeBuyingPowerAmount$;
(function (DayTradeBuyingPowerAmount$) {
    /** @deprecated use `DayTradeBuyingPowerAmount$inboundSchema` instead. */
    DayTradeBuyingPowerAmount$.inboundSchema = exports.DayTradeBuyingPowerAmount$inboundSchema;
    /** @deprecated use `DayTradeBuyingPowerAmount$outboundSchema` instead. */
    DayTradeBuyingPowerAmount$.outboundSchema = exports.DayTradeBuyingPowerAmount$outboundSchema;
})(DayTradeBuyingPowerAmount$ || (exports.DayTradeBuyingPowerAmount$ = DayTradeBuyingPowerAmount$ = {}));
/** @internal */
exports.PositionMarketValueAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.PositionMarketValueAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PositionMarketValueAmount$;
(function (PositionMarketValueAmount$) {
    /** @deprecated use `PositionMarketValueAmount$inboundSchema` instead. */
    PositionMarketValueAmount$.inboundSchema = exports.PositionMarketValueAmount$inboundSchema;
    /** @deprecated use `PositionMarketValueAmount$outboundSchema` instead. */
    PositionMarketValueAmount$.outboundSchema = exports.PositionMarketValueAmount$outboundSchema;
})(PositionMarketValueAmount$ || (exports.PositionMarketValueAmount$ = PositionMarketValueAmount$ = {}));
/** @internal */
exports.TotalExcessAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TotalExcessAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TotalExcessAmount$;
(function (TotalExcessAmount$) {
    /** @deprecated use `TotalExcessAmount$inboundSchema` instead. */
    TotalExcessAmount$.inboundSchema = exports.TotalExcessAmount$inboundSchema;
    /** @deprecated use `TotalExcessAmount$outboundSchema` instead. */
    TotalExcessAmount$.outboundSchema = exports.TotalExcessAmount$outboundSchema;
})(TotalExcessAmount$ || (exports.TotalExcessAmount$ = TotalExcessAmount$ = {}));
/** @internal */
exports.TotalRequirementsAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.TotalRequirementsAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TotalRequirementsAmount$;
(function (TotalRequirementsAmount$) {
    /** @deprecated use `TotalRequirementsAmount$inboundSchema` instead. */
    TotalRequirementsAmount$.inboundSchema = exports.TotalRequirementsAmount$inboundSchema;
    /** @deprecated use `TotalRequirementsAmount$outboundSchema` instead. */
    TotalRequirementsAmount$.outboundSchema = exports.TotalRequirementsAmount$outboundSchema;
})(TotalRequirementsAmount$ || (exports.TotalRequirementsAmount$ = TotalRequirementsAmount$ = {}));
/** @internal */
exports.Requirements$inboundSchema = z.object({
    total_excess_amount: z.nullable(z.lazy(() => exports.TotalExcessAmount$inboundSchema))
        .optional(),
    total_requirements_amount: z.nullable(z.lazy(() => exports.TotalRequirementsAmount$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "total_excess_amount": "totalExcessAmount",
        "total_requirements_amount": "totalRequirementsAmount",
    });
});
/** @internal */
exports.Requirements$outboundSchema = z.object({
    totalExcessAmount: z.nullable(z.lazy(() => exports.TotalExcessAmount$outboundSchema))
        .optional(),
    totalRequirementsAmount: z.nullable(z.lazy(() => exports.TotalRequirementsAmount$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        totalExcessAmount: "total_excess_amount",
        totalRequirementsAmount: "total_requirements_amount",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Requirements$;
(function (Requirements$) {
    /** @deprecated use `Requirements$inboundSchema` instead. */
    Requirements$.inboundSchema = exports.Requirements$inboundSchema;
    /** @deprecated use `Requirements$outboundSchema` instead. */
    Requirements$.outboundSchema = exports.Requirements$outboundSchema;
})(Requirements$ || (exports.Requirements$ = Requirements$ = {}));
/** @internal */
exports.SmaAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.SmaAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SmaAmount$;
(function (SmaAmount$) {
    /** @deprecated use `SmaAmount$inboundSchema` instead. */
    SmaAmount$.inboundSchema = exports.SmaAmount$inboundSchema;
    /** @deprecated use `SmaAmount$outboundSchema` instead. */
    SmaAmount$.outboundSchema = exports.SmaAmount$outboundSchema;
})(SmaAmount$ || (exports.SmaAmount$ = SmaAmount$ = {}));
/** @internal */
exports.BuyingPower$inboundSchema = z.object({
    account_equity_amount: z.nullable(z.lazy(() => exports.AccountEquityAmount$inboundSchema)).optional(),
    account_id: z.string().optional(),
    buying_power_amount: z.nullable(z.lazy(() => exports.BuyingPowerAmount$inboundSchema))
        .optional(),
    day_trade_buying_power_amount: z.nullable(z.lazy(() => exports.DayTradeBuyingPowerAmount$inboundSchema)).optional(),
    is_day_trade_buying_power_allowed: z.boolean().optional(),
    name: z.string().optional(),
    position_market_value_amount: z.nullable(z.lazy(() => exports.PositionMarketValueAmount$inboundSchema)).optional(),
    requirements: z.nullable(z.lazy(() => exports.Requirements$inboundSchema)).optional(),
    sma_amount: z.nullable(z.lazy(() => exports.SmaAmount$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_equity_amount": "accountEquityAmount",
        "account_id": "accountId",
        "buying_power_amount": "buyingPowerAmount",
        "day_trade_buying_power_amount": "dayTradeBuyingPowerAmount",
        "is_day_trade_buying_power_allowed": "isDayTradeBuyingPowerAllowed",
        "position_market_value_amount": "positionMarketValueAmount",
        "sma_amount": "smaAmount",
    });
});
/** @internal */
exports.BuyingPower$outboundSchema = z.object({
    accountEquityAmount: z.nullable(z.lazy(() => exports.AccountEquityAmount$outboundSchema)).optional(),
    accountId: z.string().optional(),
    buyingPowerAmount: z.nullable(z.lazy(() => exports.BuyingPowerAmount$outboundSchema))
        .optional(),
    dayTradeBuyingPowerAmount: z.nullable(z.lazy(() => exports.DayTradeBuyingPowerAmount$outboundSchema)).optional(),
    isDayTradeBuyingPowerAllowed: z.boolean().optional(),
    name: z.string().optional(),
    positionMarketValueAmount: z.nullable(z.lazy(() => exports.PositionMarketValueAmount$outboundSchema)).optional(),
    requirements: z.nullable(z.lazy(() => exports.Requirements$outboundSchema))
        .optional(),
    smaAmount: z.nullable(z.lazy(() => exports.SmaAmount$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountEquityAmount: "account_equity_amount",
        accountId: "account_id",
        buyingPowerAmount: "buying_power_amount",
        dayTradeBuyingPowerAmount: "day_trade_buying_power_amount",
        isDayTradeBuyingPowerAllowed: "is_day_trade_buying_power_allowed",
        positionMarketValueAmount: "position_market_value_amount",
        smaAmount: "sma_amount",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BuyingPower$;
(function (BuyingPower$) {
    /** @deprecated use `BuyingPower$inboundSchema` instead. */
    BuyingPower$.inboundSchema = exports.BuyingPower$inboundSchema;
    /** @deprecated use `BuyingPower$outboundSchema` instead. */
    BuyingPower$.outboundSchema = exports.BuyingPower$outboundSchema;
})(BuyingPower$ || (exports.BuyingPower$ = BuyingPower$ = {}));
//# sourceMappingURL=buyingpower.js.map