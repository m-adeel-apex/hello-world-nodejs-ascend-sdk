"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccruedInterestDesc$outboundSchema = exports.AccruedInterestDesc$inboundSchema = exports.ActivityAccountTransfer$ = exports.ActivityAccountTransfer$outboundSchema = exports.ActivityAccountTransfer$inboundSchema = exports.ActivityMethod$ = exports.ActivityMethod$outboundSchema = exports.ActivityMethod$inboundSchema = exports.ActivityAction$ = exports.ActivityAction$outboundSchema = exports.ActivityAction$inboundSchema = exports.ActivityAccountMemo$ = exports.ActivityAccountMemo$outboundSchema = exports.ActivityAccountMemo$inboundSchema = exports.ActivityAcatsPendingOut$ = exports.ActivityAcatsPendingOut$outboundSchema = exports.ActivityAcatsPendingOut$inboundSchema = exports.ActivityReview = exports.ActivityWithdrawalType = exports.ActivityRetirementType = exports.ActivityDistributionType = exports.ActivityType = exports.ActivityTransferType = exports.ActivityPriceAdjustmentType = exports.ActivityBrokerCapacity = exports.ActivitySweepType = exports.ActivitySweepAction = exports.ActivityState = exports.ActivitySide = exports.ActivityReverseStockSplitAction = exports.ActivityRedemptionPartialAction = exports.ActivityRedemptionFullSubtype = exports.ActivityRedemptionFullAction = exports.ActivityNameChangeAction = exports.ActivityMergerType = exports.ActivityMergerAction = exports.ActivityLiquidationSubtype = exports.ActivityLiquidationAction = exports.ActivityInterestType = exports.ActivityFpslAction = exports.ActivityExchangeType = exports.ActivityDripAction = exports.ActivityDepositType = exports.ActivityContributionType = exports.ActivityCreditType = exports.ActivityConversionType = exports.ActivitySubtype = exports.ActivityMethod = exports.ActivityAction = exports.ActivityAccountMemo = void 0;
exports.ActivityCommission$inboundSchema = exports.ActivityCashDividend$ = exports.ActivityCashDividend$outboundSchema = exports.ActivityCashDividend$inboundSchema = exports.ActivitySubtype$ = exports.ActivitySubtype$outboundSchema = exports.ActivitySubtype$inboundSchema = exports.ActivitySettled$ = exports.ActivitySettled$outboundSchema = exports.ActivitySettled$inboundSchema = exports.ActivityCashDividendRecordDate$ = exports.ActivityCashDividendRecordDate$outboundSchema = exports.ActivityCashDividendRecordDate$inboundSchema = exports.ActivityCashDividendQuantity$ = exports.ActivityCashDividendQuantity$outboundSchema = exports.ActivityCashDividendQuantity$inboundSchema = exports.ActivityCashDividendPaymentDate$ = exports.ActivityCashDividendPaymentDate$outboundSchema = exports.ActivityCashDividendPaymentDate$inboundSchema = exports.ActivityFree$ = exports.ActivityFree$outboundSchema = exports.ActivityFree$inboundSchema = exports.ActivityCashDividendFpsl$ = exports.ActivityCashDividendFpsl$outboundSchema = exports.ActivityCashDividendFpsl$inboundSchema = exports.ActivityCashDividendCorporateActionGeneralInformation$ = exports.ActivityCashDividendCorporateActionGeneralInformation$outboundSchema = exports.ActivityCashDividendCorporateActionGeneralInformation$inboundSchema = exports.ActivityCashRate$ = exports.ActivityCashRate$outboundSchema = exports.ActivityCashRate$inboundSchema = exports.ActivityCapitalGains$ = exports.ActivityCapitalGains$outboundSchema = exports.ActivityCapitalGains$inboundSchema = exports.ActivityRecordDate$ = exports.ActivityRecordDate$outboundSchema = exports.ActivityRecordDate$inboundSchema = exports.ActivityCapitalGainsQuantity$ = exports.ActivityCapitalGainsQuantity$outboundSchema = exports.ActivityCapitalGainsQuantity$inboundSchema = exports.ActivityPaymentDate$ = exports.ActivityPaymentDate$outboundSchema = exports.ActivityPaymentDate$inboundSchema = exports.ActivityCorporateActionGeneralInformation$ = exports.ActivityCorporateActionGeneralInformation$outboundSchema = exports.ActivityCorporateActionGeneralInformation$inboundSchema = exports.ActivityActivityDate$ = exports.ActivityActivityDate$outboundSchema = exports.ActivityActivityDate$inboundSchema = exports.AccruedInterestDesc$ = void 0;
exports.ActivityExchangeStockRate$ = exports.ActivityExchangeStockRate$outboundSchema = exports.ActivityExchangeStockRate$inboundSchema = exports.ActivityExchangeCorporateActionGeneralInformation$ = exports.ActivityExchangeCorporateActionGeneralInformation$outboundSchema = exports.ActivityExchangeCorporateActionGeneralInformation$inboundSchema = exports.ActivityExchangeCashRate$ = exports.ActivityExchangeCashRate$outboundSchema = exports.ActivityExchangeCashRate$inboundSchema = exports.ActivityDrip$ = exports.ActivityDrip$outboundSchema = exports.ActivityDrip$inboundSchema = exports.ActivityDripAction$ = exports.ActivityDripAction$outboundSchema = exports.ActivityDripAction$inboundSchema = exports.ActivityDeposit$ = exports.ActivityDeposit$outboundSchema = exports.ActivityDeposit$inboundSchema = exports.ActivityDepositType$ = exports.ActivityDepositType$outboundSchema = exports.ActivityDepositType$inboundSchema = exports.ActivityContributionType$ = exports.ActivityContributionType$outboundSchema = exports.ActivityContributionType$inboundSchema = exports.ActivityCredit$ = exports.ActivityCredit$outboundSchema = exports.ActivityCredit$inboundSchema = exports.ActivityCreditType$ = exports.ActivityCreditType$outboundSchema = exports.ActivityCreditType$inboundSchema = exports.ActivityCorporateActionMemoAdjustment$ = exports.ActivityCorporateActionMemoAdjustment$outboundSchema = exports.ActivityCorporateActionMemoAdjustment$inboundSchema = exports.ActivityConversion$ = exports.ActivityConversion$outboundSchema = exports.ActivityConversion$inboundSchema = exports.ActivityConversionType$ = exports.ActivityConversionType$outboundSchema = exports.ActivityConversionType$inboundSchema = exports.ActivityStockRate$ = exports.ActivityStockRate$outboundSchema = exports.ActivityStockRate$inboundSchema = exports.ActivityConversionCorporateActionGeneralInformation$ = exports.ActivityConversionCorporateActionGeneralInformation$outboundSchema = exports.ActivityConversionCorporateActionGeneralInformation$inboundSchema = exports.ActivityConversionCashRate$ = exports.ActivityConversionCashRate$outboundSchema = exports.ActivityConversionCashRate$inboundSchema = exports.ActivityCommission$ = exports.ActivityCommission$outboundSchema = void 0;
exports.ActivityLiquidationAction$outboundSchema = exports.ActivityLiquidationAction$inboundSchema = exports.ActivityInterestPayment$ = exports.ActivityInterestPayment$outboundSchema = exports.ActivityInterestPayment$inboundSchema = exports.ActivityInterestPaymentSettled$ = exports.ActivityInterestPaymentSettled$outboundSchema = exports.ActivityInterestPaymentSettled$inboundSchema = exports.ActivityInterestPaymentRecordDate$ = exports.ActivityInterestPaymentRecordDate$outboundSchema = exports.ActivityInterestPaymentRecordDate$inboundSchema = exports.ActivityInterestPaymentPaymentDate$ = exports.ActivityInterestPaymentPaymentDate$outboundSchema = exports.ActivityInterestPaymentPaymentDate$inboundSchema = exports.ActivityInterestPaymentCorporateActionGeneralInformation$ = exports.ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema = exports.ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema = exports.ActivityInterestPaymentCashRate$ = exports.ActivityInterestPaymentCashRate$outboundSchema = exports.ActivityInterestPaymentCashRate$inboundSchema = exports.ActivityInterest$ = exports.ActivityInterest$outboundSchema = exports.ActivityInterest$inboundSchema = exports.ActivityInterestType$ = exports.ActivityInterestType$outboundSchema = exports.ActivityInterestType$inboundSchema = exports.ActivityInterestAccrualStartDate$ = exports.ActivityInterestAccrualStartDate$outboundSchema = exports.ActivityInterestAccrualStartDate$inboundSchema = exports.ActivityInterestAccrualEndDate$ = exports.ActivityInterestAccrualEndDate$outboundSchema = exports.ActivityInterestAccrualEndDate$inboundSchema = exports.ActivityGrossAmount$ = exports.ActivityGrossAmount$outboundSchema = exports.ActivityGrossAmount$inboundSchema = exports.ActivityFpsl$ = exports.ActivityFpsl$outboundSchema = exports.ActivityFpsl$inboundSchema = exports.ActivityFpslAction$ = exports.ActivityFpslAction$outboundSchema = exports.ActivityFpslAction$inboundSchema = exports.ActivityFee$ = exports.ActivityFee$outboundSchema = exports.ActivityFee$inboundSchema = exports.ActivityExchange$ = exports.ActivityExchange$outboundSchema = exports.ActivityExchange$inboundSchema = exports.ActivityExchangeType$ = exports.ActivityExchangeType$outboundSchema = exports.ActivityExchangeType$inboundSchema = void 0;
exports.ActivityMergerCorporateActionGeneralInformation$inboundSchema = exports.ActivityMergerCashRate$ = exports.ActivityMergerCashRate$outboundSchema = exports.ActivityMergerCashRate$inboundSchema = exports.ActivityMergerAction$ = exports.ActivityMergerAction$outboundSchema = exports.ActivityMergerAction$inboundSchema = exports.ActivityMaturity$ = exports.ActivityMaturity$outboundSchema = exports.ActivityMaturity$inboundSchema = exports.ActivityMaturityQuantity$ = exports.ActivityMaturityQuantity$outboundSchema = exports.ActivityMaturityQuantity$inboundSchema = exports.ActivityMaturityPaymentDate$ = exports.ActivityMaturityPaymentDate$outboundSchema = exports.ActivityMaturityPaymentDate$inboundSchema = exports.ActivityMaturityCorporateActionGeneralInformation$ = exports.ActivityMaturityCorporateActionGeneralInformation$outboundSchema = exports.ActivityMaturityCorporateActionGeneralInformation$inboundSchema = exports.ActivityMaturityCashRate$ = exports.ActivityMaturityCashRate$outboundSchema = exports.ActivityMaturityCashRate$inboundSchema = exports.ActivityLiquidation$ = exports.ActivityLiquidation$outboundSchema = exports.ActivityLiquidation$inboundSchema = exports.ActivityLiquidationSubtype$ = exports.ActivityLiquidationSubtype$outboundSchema = exports.ActivityLiquidationSubtype$inboundSchema = exports.ActivityLiquidationSettled$ = exports.ActivityLiquidationSettled$outboundSchema = exports.ActivityLiquidationSettled$inboundSchema = exports.ActivityLiquidationRecordDate$ = exports.ActivityLiquidationRecordDate$outboundSchema = exports.ActivityLiquidationRecordDate$inboundSchema = exports.ActivityLiquidationQuantity$ = exports.ActivityLiquidationQuantity$outboundSchema = exports.ActivityLiquidationQuantity$inboundSchema = exports.ActivityLiquidationPaymentDate$ = exports.ActivityLiquidationPaymentDate$outboundSchema = exports.ActivityLiquidationPaymentDate$inboundSchema = exports.ActivityEffectiveDate$ = exports.ActivityEffectiveDate$outboundSchema = exports.ActivityEffectiveDate$inboundSchema = exports.ActivityLiquidationCorporateActionGeneralInformation$ = exports.ActivityLiquidationCorporateActionGeneralInformation$outboundSchema = exports.ActivityLiquidationCorporateActionGeneralInformation$inboundSchema = exports.ActivityLiquidationCashRate$ = exports.ActivityLiquidationCashRate$outboundSchema = exports.ActivityLiquidationCashRate$inboundSchema = exports.ActivityLiquidationAction$ = void 0;
exports.ActivityPaymentInKindRecordDate$ = exports.ActivityPaymentInKindRecordDate$outboundSchema = exports.ActivityPaymentInKindRecordDate$inboundSchema = exports.ActivityPaymentInKindPaymentDate$ = exports.ActivityPaymentInKindPaymentDate$outboundSchema = exports.ActivityPaymentInKindPaymentDate$inboundSchema = exports.ActivityPaymentInKindCorporateActionGeneralInformation$ = exports.ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema = exports.ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema = exports.None$ = exports.None$outboundSchema = exports.None$inboundSchema = exports.NextActivityProcessDate$ = exports.NextActivityProcessDate$outboundSchema = exports.NextActivityProcessDate$inboundSchema = exports.ActivityNetAmount$ = exports.ActivityNetAmount$outboundSchema = exports.ActivityNetAmount$inboundSchema = exports.ActivityNameChange$ = exports.ActivityNameChange$outboundSchema = exports.ActivityNameChange$inboundSchema = exports.ActivityNameChangeQuantity$ = exports.ActivityNameChangeQuantity$outboundSchema = exports.ActivityNameChangeQuantity$inboundSchema = exports.ActivityNameChangeEffectiveDate$ = exports.ActivityNameChangeEffectiveDate$outboundSchema = exports.ActivityNameChangeEffectiveDate$inboundSchema = exports.ActivityNameChangeCorporateActionGeneralInformation$ = exports.ActivityNameChangeCorporateActionGeneralInformation$outboundSchema = exports.ActivityNameChangeCorporateActionGeneralInformation$inboundSchema = exports.ActivityNameChangeAction$ = exports.ActivityNameChangeAction$outboundSchema = exports.ActivityNameChangeAction$inboundSchema = exports.ActivityMerger$ = exports.ActivityMerger$outboundSchema = exports.ActivityMerger$inboundSchema = exports.ActivityMergerType$ = exports.ActivityMergerType$outboundSchema = exports.ActivityMergerType$inboundSchema = exports.ActivityMergerStockRate$ = exports.ActivityMergerStockRate$outboundSchema = exports.ActivityMergerStockRate$inboundSchema = exports.ActivityMergerQuantity$ = exports.ActivityMergerQuantity$outboundSchema = exports.ActivityMergerQuantity$inboundSchema = exports.ActivityMergerEffectiveDate$ = exports.ActivityMergerEffectiveDate$outboundSchema = exports.ActivityMergerEffectiveDate$inboundSchema = exports.ActivityMergerCorporateActionGeneralInformation$ = exports.ActivityMergerCorporateActionGeneralInformation$outboundSchema = void 0;
exports.ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema = exports.ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema = exports.ActivityRedemptionPartialCashRate$ = exports.ActivityRedemptionPartialCashRate$outboundSchema = exports.ActivityRedemptionPartialCashRate$inboundSchema = exports.ActivityRedemptionPartialAction$ = exports.ActivityRedemptionPartialAction$outboundSchema = exports.ActivityRedemptionPartialAction$inboundSchema = exports.ActivityRedemptionFull$ = exports.ActivityRedemptionFull$outboundSchema = exports.ActivityRedemptionFull$inboundSchema = exports.ActivityRedemptionFullSubtype$ = exports.ActivityRedemptionFullSubtype$outboundSchema = exports.ActivityRedemptionFullSubtype$inboundSchema = exports.ActivityRedemptionFullQuantity$ = exports.ActivityRedemptionFullQuantity$outboundSchema = exports.ActivityRedemptionFullQuantity$inboundSchema = exports.ActivityRedemptionFullPaymentDate$ = exports.ActivityRedemptionFullPaymentDate$outboundSchema = exports.ActivityRedemptionFullPaymentDate$inboundSchema = exports.ActivityRedemptionFullCorporateActionGeneralInformation$ = exports.ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema = exports.ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema = exports.ActivityRedemptionFullCashRate$ = exports.ActivityRedemptionFullCashRate$outboundSchema = exports.ActivityRedemptionFullCashRate$inboundSchema = exports.ActivityRedemptionFullAction$ = exports.ActivityRedemptionFullAction$outboundSchema = exports.ActivityRedemptionFullAction$inboundSchema = exports.ActivityQuantity$ = exports.ActivityQuantity$outboundSchema = exports.ActivityQuantity$inboundSchema = exports.ActivityProcessDate$ = exports.ActivityProcessDate$outboundSchema = exports.ActivityProcessDate$inboundSchema = exports.ActivityPrice$ = exports.ActivityPrice$outboundSchema = exports.ActivityPrice$inboundSchema = exports.PreviousProcessDate$ = exports.PreviousProcessDate$outboundSchema = exports.PreviousProcessDate$inboundSchema = exports.ActivityPaymentInKind$ = exports.ActivityPaymentInKind$outboundSchema = exports.ActivityPaymentInKind$inboundSchema = exports.ActivityPaymentInKindStockRate$ = exports.ActivityPaymentInKindStockRate$outboundSchema = exports.ActivityPaymentInKindStockRate$inboundSchema = exports.ActivityPaymentInKindSettled$ = exports.ActivityPaymentInKindSettled$outboundSchema = exports.ActivityPaymentInKindSettled$inboundSchema = void 0;
exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema = exports.ActivityRightsDistribution$ = exports.ActivityRightsDistribution$outboundSchema = exports.ActivityRightsDistribution$inboundSchema = exports.ActivityRightsDistributionSettled$ = exports.ActivityRightsDistributionSettled$outboundSchema = exports.ActivityRightsDistributionSettled$inboundSchema = exports.ActivityRightsDistributionRecordDate$ = exports.ActivityRightsDistributionRecordDate$outboundSchema = exports.ActivityRightsDistributionRecordDate$inboundSchema = exports.ActivityRightsDistributionPaymentDate$ = exports.ActivityRightsDistributionPaymentDate$outboundSchema = exports.ActivityRightsDistributionPaymentDate$inboundSchema = exports.ActivityRightsDistributionCorporateActionGeneralInformation$ = exports.ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema = exports.ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema = exports.ActivityReverseStockSplit$ = exports.ActivityReverseStockSplit$outboundSchema = exports.ActivityReverseStockSplit$inboundSchema = exports.ActivityReverseStockSplitQuantity$ = exports.ActivityReverseStockSplitQuantity$outboundSchema = exports.ActivityReverseStockSplitQuantity$inboundSchema = exports.ActivityFactorNumerator$ = exports.ActivityFactorNumerator$outboundSchema = exports.ActivityFactorNumerator$inboundSchema = exports.ActivityFactorDenominator$ = exports.ActivityFactorDenominator$outboundSchema = exports.ActivityFactorDenominator$inboundSchema = exports.ActivityReverseStockSplitEffectiveDate$ = exports.ActivityReverseStockSplitEffectiveDate$outboundSchema = exports.ActivityReverseStockSplitEffectiveDate$inboundSchema = exports.ActivityReverseStockSplitCorporateActionGeneralInformation$ = exports.ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema = exports.ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema = exports.ActivityReverseStockSplitCashRate$ = exports.ActivityReverseStockSplitCashRate$outboundSchema = exports.ActivityReverseStockSplitCashRate$inboundSchema = exports.ActivityReverseStockSplitAction$ = exports.ActivityReverseStockSplitAction$outboundSchema = exports.ActivityReverseStockSplitAction$inboundSchema = exports.ActivityRedemptionPartial$ = exports.ActivityRedemptionPartial$outboundSchema = exports.ActivityRedemptionPartial$inboundSchema = exports.ActivityRedemptionPartialQuantity$ = exports.ActivityRedemptionPartialQuantity$outboundSchema = exports.ActivityRedemptionPartialQuantity$inboundSchema = exports.ActivityRedemptionPartialPaymentDate$ = exports.ActivityRedemptionPartialPaymentDate$outboundSchema = exports.ActivityRedemptionPartialPaymentDate$inboundSchema = exports.ActivityRedemptionPartialCorporateActionGeneralInformation$ = void 0;
exports.ActivitySpinoff$ = exports.ActivitySpinoff$outboundSchema = exports.ActivitySpinoff$inboundSchema = exports.ActivitySpinoffRecordDate$ = exports.ActivitySpinoffRecordDate$outboundSchema = exports.ActivitySpinoffRecordDate$inboundSchema = exports.ActivitySpinoffQuantity$ = exports.ActivitySpinoffQuantity$outboundSchema = exports.ActivitySpinoffQuantity$inboundSchema = exports.ActivityPayDate$ = exports.ActivityPayDate$outboundSchema = exports.ActivityPayDate$inboundSchema = exports.ActivitySpinoffCorporateActionGeneralInformation$ = exports.ActivitySpinoffCorporateActionGeneralInformation$outboundSchema = exports.ActivitySpinoffCorporateActionGeneralInformation$inboundSchema = exports.ActivitySide$ = exports.ActivitySide$outboundSchema = exports.ActivitySide$inboundSchema = exports.ActivitySettleDate$ = exports.ActivitySettleDate$outboundSchema = exports.ActivitySettleDate$inboundSchema = exports.ActivitySaleOfRights$ = exports.ActivitySaleOfRights$outboundSchema = exports.ActivitySaleOfRights$inboundSchema = exports.ActivitySaleOfRightsSettled$ = exports.ActivitySaleOfRightsSettled$outboundSchema = exports.ActivitySaleOfRightsSettled$inboundSchema = exports.ActivitySaleOfRightsRecordDate$ = exports.ActivitySaleOfRightsRecordDate$outboundSchema = exports.ActivitySaleOfRightsRecordDate$inboundSchema = exports.ActivitySaleOfRightsPaymentDate$ = exports.ActivitySaleOfRightsPaymentDate$outboundSchema = exports.ActivitySaleOfRightsPaymentDate$inboundSchema = exports.ActivitySaleOfRightsCorporateActionGeneralInformation$ = exports.ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema = exports.ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema = exports.ActivitySaleOfRightsCashRate$ = exports.ActivitySaleOfRightsCashRate$outboundSchema = exports.ActivitySaleOfRightsCashRate$inboundSchema = exports.RoundingAmount$ = exports.RoundingAmount$outboundSchema = exports.RoundingAmount$inboundSchema = exports.ActivityRoundingAdjustment$ = exports.ActivityRoundingAdjustment$outboundSchema = exports.ActivityRoundingAdjustment$inboundSchema = exports.ActivityRightsSubscription$ = exports.ActivityRightsSubscription$outboundSchema = exports.ActivityRightsSubscription$inboundSchema = exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$ = exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema = void 0;
exports.ActivitySweep$outboundSchema = exports.ActivitySweep$inboundSchema = exports.ActivitySweepType$ = exports.ActivitySweepType$outboundSchema = exports.ActivitySweepType$inboundSchema = exports.ActivitySweepAction$ = exports.ActivitySweepAction$outboundSchema = exports.ActivitySweepAction$inboundSchema = exports.ActivityStockSplit$ = exports.ActivityStockSplit$outboundSchema = exports.ActivityStockSplit$inboundSchema = exports.ActivityStockSplitRecordDate$ = exports.ActivityStockSplitRecordDate$outboundSchema = exports.ActivityStockSplitRecordDate$inboundSchema = exports.ActivityStockSplitQuantity$ = exports.ActivityStockSplitQuantity$outboundSchema = exports.ActivityStockSplitQuantity$inboundSchema = exports.ActivityStockSplitPayDate$ = exports.ActivityStockSplitPayDate$outboundSchema = exports.ActivityStockSplitPayDate$inboundSchema = exports.ActivityStockSplitFactorNumerator$ = exports.ActivityStockSplitFactorNumerator$outboundSchema = exports.ActivityStockSplitFactorNumerator$inboundSchema = exports.ActivityStockSplitFactorDenominator$ = exports.ActivityStockSplitFactorDenominator$outboundSchema = exports.ActivityStockSplitFactorDenominator$inboundSchema = exports.ActivityStockSplitCorporateActionGeneralInformation$ = exports.ActivityStockSplitCorporateActionGeneralInformation$outboundSchema = exports.ActivityStockSplitCorporateActionGeneralInformation$inboundSchema = exports.ActivityStockDividend$ = exports.ActivityStockDividend$outboundSchema = exports.ActivityStockDividend$inboundSchema = exports.ActivityStockDividendRecordDate$ = exports.ActivityStockDividendRecordDate$outboundSchema = exports.ActivityStockDividendRecordDate$inboundSchema = exports.ActivityRate$ = exports.ActivityRate$outboundSchema = exports.ActivityRate$inboundSchema = exports.ActivityStockDividendQuantity$ = exports.ActivityStockDividendQuantity$outboundSchema = exports.ActivityStockDividendQuantity$inboundSchema = exports.ActivityStockDividendPayDate$ = exports.ActivityStockDividendPayDate$outboundSchema = exports.ActivityStockDividendPayDate$inboundSchema = exports.ActivityStockDividendCorporateActionGeneralInformation$ = exports.ActivityStockDividendCorporateActionGeneralInformation$outboundSchema = exports.ActivityStockDividendCorporateActionGeneralInformation$inboundSchema = exports.ActivityState$ = exports.ActivityState$outboundSchema = exports.ActivityState$inboundSchema = void 0;
exports.ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema = exports.ActivityUnitSplit$ = exports.ActivityUnitSplit$outboundSchema = exports.ActivityUnitSplit$inboundSchema = exports.ActivityUnitSplitStockRate$ = exports.ActivityUnitSplitStockRate$outboundSchema = exports.ActivityUnitSplitStockRate$inboundSchema = exports.ActivityUnitSplitCorporateActionGeneralInformation$ = exports.ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema = exports.ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema = exports.ActivityType$ = exports.ActivityType$outboundSchema = exports.ActivityType$inboundSchema = exports.ActivityTransfer$ = exports.ActivityTransfer$outboundSchema = exports.ActivityTransfer$inboundSchema = exports.ActivityTransferType$ = exports.ActivityTransferType$outboundSchema = exports.ActivityTransferType$inboundSchema = exports.ActivityTrade$ = exports.ActivityTrade$outboundSchema = exports.ActivityTrade$inboundSchema = exports.ActivityPriceAdjustmentRecord$ = exports.ActivityPriceAdjustmentRecord$outboundSchema = exports.ActivityPriceAdjustmentRecord$inboundSchema = exports.ActivityPriceAdjustmentType$ = exports.ActivityPriceAdjustmentType$outboundSchema = exports.ActivityPriceAdjustmentType$inboundSchema = exports.ActivityPriceAdjustmentPercent$ = exports.ActivityPriceAdjustmentPercent$outboundSchema = exports.ActivityPriceAdjustmentPercent$inboundSchema = exports.ActivityPriceAdjustmentAmount$ = exports.ActivityPriceAdjustmentAmount$outboundSchema = exports.ActivityPriceAdjustmentAmount$inboundSchema = exports.ActivityPrevailingMarketPrice$ = exports.ActivityPrevailingMarketPrice$outboundSchema = exports.ActivityPrevailingMarketPrice$inboundSchema = exports.ActivityBrokerCapacity$ = exports.ActivityBrokerCapacity$outboundSchema = exports.ActivityBrokerCapacity$inboundSchema = exports.ActivityTenderOffer$ = exports.ActivityTenderOffer$outboundSchema = exports.ActivityTenderOffer$inboundSchema = exports.ActivityTenderOfferCorporateActionGeneralInformation$ = exports.ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema = exports.ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema = exports.ActivityTenderOfferCashRate$ = exports.ActivityTenderOfferCashRate$outboundSchema = exports.ActivityTenderOfferCashRate$inboundSchema = exports.ActivitySweep$ = void 0;
exports.Activity$ = exports.Activity$outboundSchema = exports.Activity$inboundSchema = exports.ActivityWorthless$ = exports.ActivityWorthless$outboundSchema = exports.ActivityWorthless$inboundSchema = exports.ActivityWorthlessPaymentDate$ = exports.ActivityWorthlessPaymentDate$outboundSchema = exports.ActivityWorthlessPaymentDate$inboundSchema = exports.ActivityWorthlessEffectiveDate$ = exports.ActivityWorthlessEffectiveDate$outboundSchema = exports.ActivityWorthlessEffectiveDate$inboundSchema = exports.ActivityWorthlessCorporateActionGeneralInformation$ = exports.ActivityWorthlessCorporateActionGeneralInformation$outboundSchema = exports.ActivityWorthlessCorporateActionGeneralInformation$inboundSchema = exports.ActivityWithholding$ = exports.ActivityWithholding$outboundSchema = exports.ActivityWithholding$inboundSchema = exports.ActivityWithdrawalPendingReview$ = exports.ActivityWithdrawalPendingReview$outboundSchema = exports.ActivityWithdrawalPendingReview$inboundSchema = exports.ActivityReview$ = exports.ActivityReview$outboundSchema = exports.ActivityReview$inboundSchema = exports.ActivityWithdrawal$ = exports.ActivityWithdrawal$outboundSchema = exports.ActivityWithdrawal$inboundSchema = exports.ActivityWithdrawalType$ = exports.ActivityWithdrawalType$outboundSchema = exports.ActivityWithdrawalType$inboundSchema = exports.ActivityRetirementType$ = exports.ActivityRetirementType$outboundSchema = exports.ActivityRetirementType$inboundSchema = exports.ActivityDistributionType$ = exports.ActivityDistributionType$outboundSchema = exports.ActivityDistributionType$inboundSchema = exports.ActivityWarrantExercise$ = exports.ActivityWarrantExercise$outboundSchema = exports.ActivityWarrantExercise$inboundSchema = exports.ActivityWarrantExerciseCorporateActionGeneralInformation$ = exports.ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const accruedinterest_js_1 = require("./accruedinterest.js");
const commission_js_1 = require("./commission.js");
const fee_js_1 = require("./fee.js");
const lot_js_1 = require("./lot.js");
const withholding_js_1 = require("./withholding.js");
const withholdingdata_js_1 = require("./withholdingdata.js");
const yieldrecord_js_1 = require("./yieldrecord.js");
/**
 * Indicates the memo location impacted by an entry
 */
var ActivityAccountMemo;
(function (ActivityAccountMemo) {
    ActivityAccountMemo["MemoTypeUnspecified"] = "MEMO_TYPE_UNSPECIFIED";
    ActivityAccountMemo["FullyPaidStockLoan"] = "FULLY_PAID_STOCK_LOAN";
    ActivityAccountMemo["Free"] = "FREE";
    ActivityAccountMemo["PendingOutgoingAcat"] = "PENDING_OUTGOING_ACAT";
    ActivityAccountMemo["PendingDrip"] = "PENDING_DRIP";
    ActivityAccountMemo["PendingWithdrawal"] = "PENDING_WITHDRAWAL";
})(ActivityAccountMemo || (exports.ActivityAccountMemo = ActivityAccountMemo = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
var ActivityAction;
(function (ActivityAction) {
    ActivityAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityAction["Incoming"] = "INCOMING";
    ActivityAction["Outgoing"] = "OUTGOING";
    ActivityAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityAction || (exports.ActivityAction = ActivityAction = {}));
/**
 * The method used for the account transfer
 */
var ActivityMethod;
(function (ActivityMethod) {
    ActivityMethod["AccountTransferMethodUnspecified"] = "ACCOUNT_TRANSFER_METHOD_UNSPECIFIED";
    ActivityMethod["Acats"] = "ACATS";
    ActivityMethod["Internal"] = "INTERNAL";
    ActivityMethod["Manual"] = "MANUAL";
})(ActivityMethod || (exports.ActivityMethod = ActivityMethod = {}));
/**
 * The subtype for the corporate action event
 */
var ActivitySubtype;
(function (ActivitySubtype) {
    ActivitySubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    ActivitySubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    ActivitySubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    ActivitySubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    ActivitySubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    ActivitySubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    ActivitySubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    ActivitySubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    ActivitySubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivitySubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    ActivitySubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    ActivitySubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    ActivitySubtype["GrossRate"] = "GROSS_RATE";
    ActivitySubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    ActivitySubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    ActivitySubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    ActivitySubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    ActivitySubtype["Liquidation"] = "LIQUIDATION";
    ActivitySubtype["NetRate"] = "NET_RATE";
    ActivitySubtype["Other"] = "OTHER";
    ActivitySubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    ActivitySubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    ActivitySubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    ActivitySubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivitySubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    ActivitySubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    ActivitySubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    ActivitySubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    ActivitySubtype["Partial"] = "PARTIAL";
    ActivitySubtype["Full"] = "FULL";
    ActivitySubtype["Maturity"] = "MATURITY";
    ActivitySubtype["Termination"] = "TERMINATION";
    ActivitySubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
})(ActivitySubtype || (exports.ActivitySubtype = ActivitySubtype = {}));
/**
 * The subtype for the corporate action event
 */
var ActivityConversionType;
(function (ActivityConversionType) {
    ActivityConversionType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    ActivityConversionType["Cash"] = "CASH";
    ActivityConversionType["Stock"] = "STOCK";
    ActivityConversionType["CashAndStock"] = "CASH_AND_STOCK";
})(ActivityConversionType || (exports.ActivityConversionType = ActivityConversionType = {}));
/**
 * Further detail describing the type of credit
 */
var ActivityCreditType;
(function (ActivityCreditType) {
    ActivityCreditType["CreditTypeUnspecified"] = "CREDIT_TYPE_UNSPECIFIED";
    ActivityCreditType["FullyPaidStockLoan"] = "FULLY_PAID_STOCK_LOAN";
    ActivityCreditType["WriteOff"] = "WRITE_OFF";
    ActivityCreditType["Reimbursement"] = "REIMBURSEMENT";
    ActivityCreditType["Promotional"] = "PROMOTIONAL";
    ActivityCreditType["FdicInsuredDepositProgram"] = "FDIC_INSURED_DEPOSIT_PROGRAM";
    ActivityCreditType["AccountTransferAdjustment"] = "ACCOUNT_TRANSFER_ADJUSTMENT";
})(ActivityCreditType || (exports.ActivityCreditType = ActivityCreditType = {}));
/**
 * Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
 */
var ActivityContributionType;
(function (ActivityContributionType) {
    ActivityContributionType["ContributionTypeUnspecified"] = "CONTRIBUTION_TYPE_UNSPECIFIED";
    ActivityContributionType["Regular"] = "REGULAR";
    ActivityContributionType["Employee"] = "EMPLOYEE";
    ActivityContributionType["Employer"] = "EMPLOYER";
    ActivityContributionType["Recharacterization"] = "RECHARACTERIZATION";
    ActivityContributionType["Rollover60Day"] = "ROLLOVER_60_DAY";
    ActivityContributionType["RolloverDirect"] = "ROLLOVER_DIRECT";
    ActivityContributionType["Transfer"] = "TRANSFER";
    ActivityContributionType["TrusteeFee"] = "TRUSTEE_FEE";
    ActivityContributionType["Conversion"] = "CONVERSION";
    ActivityContributionType["Repayment"] = "REPAYMENT";
    ActivityContributionType["ContributionNonReportable"] = "CONTRIBUTION_NON_REPORTABLE";
})(ActivityContributionType || (exports.ActivityContributionType = ActivityContributionType = {}));
/**
 * The mechanism by which funds were deposited
 */
var ActivityDepositType;
(function (ActivityDepositType) {
    ActivityDepositType["ExternalMovementTypeUnspecified"] = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED";
    ActivityDepositType["Ach"] = "ACH";
    ActivityDepositType["Check"] = "CHECK";
    ActivityDepositType["Wire"] = "WIRE";
    ActivityDepositType["Paypal"] = "PAYPAL";
    ActivityDepositType["Rtp"] = "RTP";
    ActivityDepositType["Ict"] = "ICT";
    ActivityDepositType["Journal"] = "JOURNAL";
})(ActivityDepositType || (exports.ActivityDepositType = ActivityDepositType = {}));
/**
 * Denotes whether the reinvestment is pending or complete
 */
var ActivityDripAction;
(function (ActivityDripAction) {
    ActivityDripAction["DripActionUnspecified"] = "DRIP_ACTION_UNSPECIFIED";
    ActivityDripAction["DripPending"] = "DRIP_PENDING";
    ActivityDripAction["DripComplete"] = "DRIP_COMPLETE";
})(ActivityDripAction || (exports.ActivityDripAction = ActivityDripAction = {}));
/**
 * Indicates whether the merger was for cash, stock, or both
 */
var ActivityExchangeType;
(function (ActivityExchangeType) {
    ActivityExchangeType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    ActivityExchangeType["Cash"] = "CASH";
    ActivityExchangeType["Stock"] = "STOCK";
    ActivityExchangeType["CashAndStock"] = "CASH_AND_STOCK";
})(ActivityExchangeType || (exports.ActivityExchangeType = ActivityExchangeType = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
var ActivityFpslAction;
(function (ActivityFpslAction) {
    ActivityFpslAction["FpslActionUnspecified"] = "FPSL_ACTION_UNSPECIFIED";
    ActivityFpslAction["Allocate"] = "ALLOCATE";
    ActivityFpslAction["Deallocate"] = "DEALLOCATE";
})(ActivityFpslAction || (exports.ActivityFpslAction = ActivityFpslAction = {}));
var ActivityInterestType;
(function (ActivityInterestType) {
    ActivityInterestType["InterestTypeUnspecified"] = "INTEREST_TYPE_UNSPECIFIED";
    ActivityInterestType["Credit"] = "CREDIT";
    ActivityInterestType["Debit"] = "DEBIT";
})(ActivityInterestType || (exports.ActivityInterestType = ActivityInterestType = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
var ActivityLiquidationAction;
(function (ActivityLiquidationAction) {
    ActivityLiquidationAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityLiquidationAction["Incoming"] = "INCOMING";
    ActivityLiquidationAction["Outgoing"] = "OUTGOING";
    ActivityLiquidationAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityLiquidationAction || (exports.ActivityLiquidationAction = ActivityLiquidationAction = {}));
/**
 * The subtype for the corporate action event
 */
var ActivityLiquidationSubtype;
(function (ActivityLiquidationSubtype) {
    ActivityLiquidationSubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    ActivityLiquidationSubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    ActivityLiquidationSubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    ActivityLiquidationSubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    ActivityLiquidationSubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    ActivityLiquidationSubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    ActivityLiquidationSubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    ActivityLiquidationSubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    ActivityLiquidationSubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivityLiquidationSubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    ActivityLiquidationSubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    ActivityLiquidationSubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    ActivityLiquidationSubtype["GrossRate"] = "GROSS_RATE";
    ActivityLiquidationSubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    ActivityLiquidationSubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    ActivityLiquidationSubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    ActivityLiquidationSubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    ActivityLiquidationSubtype["Liquidation"] = "LIQUIDATION";
    ActivityLiquidationSubtype["NetRate"] = "NET_RATE";
    ActivityLiquidationSubtype["Other"] = "OTHER";
    ActivityLiquidationSubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    ActivityLiquidationSubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    ActivityLiquidationSubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    ActivityLiquidationSubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivityLiquidationSubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    ActivityLiquidationSubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    ActivityLiquidationSubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    ActivityLiquidationSubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    ActivityLiquidationSubtype["Partial"] = "PARTIAL";
    ActivityLiquidationSubtype["Full"] = "FULL";
    ActivityLiquidationSubtype["Maturity"] = "MATURITY";
    ActivityLiquidationSubtype["Termination"] = "TERMINATION";
    ActivityLiquidationSubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
})(ActivityLiquidationSubtype || (exports.ActivityLiquidationSubtype = ActivityLiquidationSubtype = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
var ActivityMergerAction;
(function (ActivityMergerAction) {
    ActivityMergerAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityMergerAction["Incoming"] = "INCOMING";
    ActivityMergerAction["Outgoing"] = "OUTGOING";
    ActivityMergerAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityMergerAction || (exports.ActivityMergerAction = ActivityMergerAction = {}));
/**
 * The subtype for the corporate action event
 */
var ActivityMergerType;
(function (ActivityMergerType) {
    ActivityMergerType["EventTypeUnspecified"] = "EVENT_TYPE_UNSPECIFIED";
    ActivityMergerType["Cash"] = "CASH";
    ActivityMergerType["Stock"] = "STOCK";
    ActivityMergerType["CashAndStock"] = "CASH_AND_STOCK";
})(ActivityMergerType || (exports.ActivityMergerType = ActivityMergerType = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
var ActivityNameChangeAction;
(function (ActivityNameChangeAction) {
    ActivityNameChangeAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityNameChangeAction["Incoming"] = "INCOMING";
    ActivityNameChangeAction["Outgoing"] = "OUTGOING";
    ActivityNameChangeAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityNameChangeAction || (exports.ActivityNameChangeAction = ActivityNameChangeAction = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
var ActivityRedemptionFullAction;
(function (ActivityRedemptionFullAction) {
    ActivityRedemptionFullAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityRedemptionFullAction["Incoming"] = "INCOMING";
    ActivityRedemptionFullAction["Outgoing"] = "OUTGOING";
    ActivityRedemptionFullAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityRedemptionFullAction || (exports.ActivityRedemptionFullAction = ActivityRedemptionFullAction = {}));
/**
 * The subtype for the corporate action event
 */
var ActivityRedemptionFullSubtype;
(function (ActivityRedemptionFullSubtype) {
    ActivityRedemptionFullSubtype["CorporateactionsubtypeUnspecified"] = "CORPORATEACTIONSUBTYPE_UNSPECIFIED";
    ActivityRedemptionFullSubtype["AdditionalDividend"] = "ADDITIONAL_DIVIDEND";
    ActivityRedemptionFullSubtype["ApproximateRate"] = "APPROXIMATE_RATE";
    ActivityRedemptionFullSubtype["DividendArrears"] = "DIVIDEND_ARREARS";
    ActivityRedemptionFullSubtype["DividendCancelled"] = "DIVIDEND_CANCELLED";
    ActivityRedemptionFullSubtype["DividendPaymentTaxClassifications"] = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS";
    ActivityRedemptionFullSubtype["DividendRescinded"] = "DIVIDEND_RESCINDED";
    ActivityRedemptionFullSubtype["EstimatedReturnOfCapital"] = "ESTIMATED_RETURN_OF_CAPITAL";
    ActivityRedemptionFullSubtype["EstimatedReturnOfCapitalPlusIncome"] = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivityRedemptionFullSubtype["ExtraDividend"] = "EXTRA_DIVIDEND";
    ActivityRedemptionFullSubtype["ExtraDividendPlusIncome"] = "EXTRA_DIVIDEND_PLUS_INCOME";
    ActivityRedemptionFullSubtype["FinalPaymentTransferBooksAreClosed"] = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED";
    ActivityRedemptionFullSubtype["GrossRate"] = "GROSS_RATE";
    ActivityRedemptionFullSubtype["InitialDividend"] = "INITIAL_DIVIDEND";
    ActivityRedemptionFullSubtype["InitialDividendLongPeriod"] = "INITIAL_DIVIDEND_LONG_PERIOD";
    ActivityRedemptionFullSubtype["InitialDividendShortPeriod"] = "INITIAL_DIVIDEND_SHORT_PERIOD";
    ActivityRedemptionFullSubtype["LimitedPartnershipDistribution"] = "LIMITED_PARTNERSHIP_DISTRIBUTION";
    ActivityRedemptionFullSubtype["Liquidation"] = "LIQUIDATION";
    ActivityRedemptionFullSubtype["NetRate"] = "NET_RATE";
    ActivityRedemptionFullSubtype["Other"] = "OTHER";
    ActivityRedemptionFullSubtype["ProceedsFromSaleOfRights"] = "PROCEEDS_FROM_SALE_OF_RIGHTS";
    ActivityRedemptionFullSubtype["RegularDividend"] = "REGULAR_DIVIDEND";
    ActivityRedemptionFullSubtype["ReturnOfCapital"] = "RETURN_OF_CAPITAL";
    ActivityRedemptionFullSubtype["ReturnOfCapitalPlusIncome"] = "RETURN_OF_CAPITAL_PLUS_INCOME";
    ActivityRedemptionFullSubtype["SpecialDividend"] = "SPECIAL_DIVIDEND";
    ActivityRedemptionFullSubtype["SpecialDividendPlusIncome"] = "SPECIAL_DIVIDEND_PLUS_INCOME";
    ActivityRedemptionFullSubtype["YearEndDividend"] = "YEAR_END_DIVIDEND";
    ActivityRedemptionFullSubtype["YearEndDividendPlusIncome"] = "YEAR_END_DIVIDEND_PLUS_INCOME";
    ActivityRedemptionFullSubtype["Partial"] = "PARTIAL";
    ActivityRedemptionFullSubtype["Full"] = "FULL";
    ActivityRedemptionFullSubtype["Maturity"] = "MATURITY";
    ActivityRedemptionFullSubtype["Termination"] = "TERMINATION";
    ActivityRedemptionFullSubtype["RedemptionOfWarrants"] = "REDEMPTION_OF_WARRANTS";
})(ActivityRedemptionFullSubtype || (exports.ActivityRedemptionFullSubtype = ActivityRedemptionFullSubtype = {}));
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
var ActivityRedemptionPartialAction;
(function (ActivityRedemptionPartialAction) {
    ActivityRedemptionPartialAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityRedemptionPartialAction["Incoming"] = "INCOMING";
    ActivityRedemptionPartialAction["Outgoing"] = "OUTGOING";
    ActivityRedemptionPartialAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityRedemptionPartialAction || (exports.ActivityRedemptionPartialAction = ActivityRedemptionPartialAction = {}));
/**
 * Denotes whether the shares are incoming or outgoing
 */
var ActivityReverseStockSplitAction;
(function (ActivityReverseStockSplitAction) {
    ActivityReverseStockSplitAction["ActionUnspecified"] = "ACTION_UNSPECIFIED";
    ActivityReverseStockSplitAction["Incoming"] = "INCOMING";
    ActivityReverseStockSplitAction["Outgoing"] = "OUTGOING";
    ActivityReverseStockSplitAction["CashInLieu"] = "CASH_IN_LIEU";
})(ActivityReverseStockSplitAction || (exports.ActivityReverseStockSplitAction = ActivityReverseStockSplitAction = {}));
/**
 * Denotes whether the trade is a buy or sell
 */
var ActivitySide;
(function (ActivitySide) {
    ActivitySide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    ActivitySide["Buy"] = "BUY";
    ActivitySide["Sell"] = "SELL";
})(ActivitySide || (exports.ActivitySide = ActivitySide = {}));
/**
 * The state of the activity
 */
var ActivityState;
(function (ActivityState) {
    ActivityState["ActivityStateUnspecified"] = "ACTIVITY_STATE_UNSPECIFIED";
    ActivityState["Pending"] = "PENDING";
    ActivityState["Current"] = "CURRENT";
    ActivityState["Canceled"] = "CANCELED";
    ActivityState["Rebooked"] = "REBOOKED";
    ActivityState["Rebook"] = "REBOOK";
    ActivityState["Cancel"] = "CANCEL";
})(ActivityState || (exports.ActivityState = ActivityState = {}));
/**
 * Indicates purchase or redemption of the sweep asset
 */
var ActivitySweepAction;
(function (ActivitySweepAction) {
    ActivitySweepAction["SweepActionUnspecified"] = "SWEEP_ACTION_UNSPECIFIED";
    ActivitySweepAction["Purchase"] = "PURCHASE";
    ActivitySweepAction["Redemption"] = "REDEMPTION";
})(ActivitySweepAction || (exports.ActivitySweepAction = ActivitySweepAction = {}));
/**
 * Sweep program that cash is being swept to/ from
 */
var ActivitySweepType;
(function (ActivitySweepType) {
    ActivitySweepType["SweepTypeUnspecified"] = "SWEEP_TYPE_UNSPECIFIED";
    ActivitySweepType["Fdic"] = "FDIC";
    ActivitySweepType["MoneyMarket"] = "MONEY_MARKET";
})(ActivitySweepType || (exports.ActivitySweepType = ActivitySweepType = {}));
/**
 * Used to calculate broadridge blotter code
 */
var ActivityBrokerCapacity;
(function (ActivityBrokerCapacity) {
    ActivityBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    ActivityBrokerCapacity["Agency"] = "AGENCY";
    ActivityBrokerCapacity["Principal"] = "PRINCIPAL";
    ActivityBrokerCapacity["Mixed"] = "MIXED";
})(ActivityBrokerCapacity || (exports.ActivityBrokerCapacity = ActivityBrokerCapacity = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
var ActivityPriceAdjustmentType;
(function (ActivityPriceAdjustmentType) {
    ActivityPriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    ActivityPriceAdjustmentType["Markup"] = "MARKUP";
    ActivityPriceAdjustmentType["Markdown"] = "MARKDOWN";
    ActivityPriceAdjustmentType["SalesLoad"] = "SALES_LOAD";
})(ActivityPriceAdjustmentType || (exports.ActivityPriceAdjustmentType = ActivityPriceAdjustmentType = {}));
/**
 * Provides more granular detail on the purpose of transfer
 */
var ActivityTransferType;
(function (ActivityTransferType) {
    ActivityTransferType["TransferTypeUnspecified"] = "TRANSFER_TYPE_UNSPECIFIED";
    ActivityTransferType["TransferConversion"] = "TRANSFER_CONVERSION";
    ActivityTransferType["Deconversion"] = "DECONVERSION";
    ActivityTransferType["Migration"] = "MIGRATION";
    ActivityTransferType["ManualAdjustment"] = "MANUAL_ADJUSTMENT";
    ActivityTransferType["InternalConversion"] = "INTERNAL_CONVERSION";
})(ActivityTransferType || (exports.ActivityTransferType = ActivityTransferType = {}));
/**
 * The type of activity this is
 */
var ActivityType;
(function (ActivityType) {
    ActivityType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    ActivityType["Trade"] = "TRADE";
    ActivityType["Movement"] = "MOVEMENT";
    ActivityType["Memo"] = "MEMO";
    ActivityType["CorporateAction"] = "CORPORATE_ACTION";
})(ActivityType || (exports.ActivityType = ActivityType = {}));
/**
 * Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
 */
var ActivityDistributionType;
(function (ActivityDistributionType) {
    ActivityDistributionType["DistributionTypeUnspecified"] = "DISTRIBUTION_TYPE_UNSPECIFIED";
    ActivityDistributionType["Premature"] = "PREMATURE";
    ActivityDistributionType["Disability"] = "DISABILITY";
    ActivityDistributionType["Death"] = "DEATH";
    ActivityDistributionType["Normal"] = "NORMAL";
    ActivityDistributionType["Sosepp"] = "SOSEPP";
    ActivityDistributionType["RolloverToQualifiedPlan"] = "ROLLOVER_TO_QUALIFIED_PLAN";
    ActivityDistributionType["RolloverToIra"] = "ROLLOVER_TO_IRA";
    ActivityDistributionType["DistTransfer"] = "DIST_TRANSFER";
    ActivityDistributionType["ExcessContributionRemovalBeforeTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE";
    ActivityDistributionType["ExcessContributionRemovalAfterTaxDeadline"] = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE";
    ActivityDistributionType["RecharacterizationPriorYear"] = "RECHARACTERIZATION_PRIOR_YEAR";
    ActivityDistributionType["RecharacterizationCurrentYear"] = "RECHARACTERIZATION_CURRENT_YEAR";
    ActivityDistributionType["DistConversion"] = "DIST_CONVERSION";
    ActivityDistributionType["ManagementFee"] = "MANAGEMENT_FEE";
    ActivityDistributionType["PrematureSimpleIraLessThan2Years"] = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS";
    ActivityDistributionType["NormalRothIraGreaterThan5Years"] = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS";
    ActivityDistributionType["PlanLoan401K"] = "PLAN_LOAN_401K";
    ActivityDistributionType["NetIncomeAttributable"] = "NET_INCOME_ATTRIBUTABLE";
    ActivityDistributionType["Revocation"] = "REVOCATION";
    ActivityDistributionType["NonReportable"] = "NON_REPORTABLE";
})(ActivityDistributionType || (exports.ActivityDistributionType = ActivityDistributionType = {}));
/**
 * The type of retirement account the withdrawal is being made from
 */
var ActivityRetirementType;
(function (ActivityRetirementType) {
    ActivityRetirementType["RetirementTypeUnspecified"] = "RETIREMENT_TYPE_UNSPECIFIED";
    ActivityRetirementType["Ira"] = "IRA";
    ActivityRetirementType["Sep"] = "SEP";
    ActivityRetirementType["Simple"] = "SIMPLE";
    ActivityRetirementType["Keogh"] = "KEOGH";
    ActivityRetirementType["Roth"] = "ROTH";
    ActivityRetirementType["Qp"] = "QP";
    ActivityRetirementType["RolloverIra"] = "ROLLOVER_IRA";
})(ActivityRetirementType || (exports.ActivityRetirementType = ActivityRetirementType = {}));
/**
 * The mechanism by which the funds will be withdrawn
 */
var ActivityWithdrawalType;
(function (ActivityWithdrawalType) {
    ActivityWithdrawalType["ExternalMovementTypeUnspecified"] = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED";
    ActivityWithdrawalType["Ach"] = "ACH";
    ActivityWithdrawalType["Check"] = "CHECK";
    ActivityWithdrawalType["Wire"] = "WIRE";
    ActivityWithdrawalType["Paypal"] = "PAYPAL";
    ActivityWithdrawalType["Rtp"] = "RTP";
    ActivityWithdrawalType["Ict"] = "ICT";
    ActivityWithdrawalType["Journal"] = "JOURNAL";
})(ActivityWithdrawalType || (exports.ActivityWithdrawalType = ActivityWithdrawalType = {}));
/**
 * Denotes whether the withdrawal is pending or complete
 */
var ActivityReview;
(function (ActivityReview) {
    ActivityReview["ReviewStateUnspecified"] = "REVIEW_STATE_UNSPECIFIED";
    ActivityReview["ReviewStatePending"] = "REVIEW_STATE_PENDING";
    ActivityReview["ReviewStateComplete"] = "REVIEW_STATE_COMPLETE";
})(ActivityReview || (exports.ActivityReview = ActivityReview = {}));
/** @internal */
exports.ActivityAcatsPendingOut$inboundSchema = z.object({
    acats_control_number: z.string().optional(),
    additional_instructions: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "acats_control_number": "acatsControlNumber",
        "additional_instructions": "additionalInstructions",
    });
});
/** @internal */
exports.ActivityAcatsPendingOut$outboundSchema = z.object({
    acatsControlNumber: z.string().optional(),
    additionalInstructions: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acatsControlNumber: "acats_control_number",
        additionalInstructions: "additional_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityAcatsPendingOut$;
(function (ActivityAcatsPendingOut$) {
    /** @deprecated use `ActivityAcatsPendingOut$inboundSchema` instead. */
    ActivityAcatsPendingOut$.inboundSchema = exports.ActivityAcatsPendingOut$inboundSchema;
    /** @deprecated use `ActivityAcatsPendingOut$outboundSchema` instead. */
    ActivityAcatsPendingOut$.outboundSchema = exports.ActivityAcatsPendingOut$outboundSchema;
})(ActivityAcatsPendingOut$ || (exports.ActivityAcatsPendingOut$ = ActivityAcatsPendingOut$ = {}));
/** @internal */
exports.ActivityAccountMemo$inboundSchema = z
    .union([
    z.nativeEnum(ActivityAccountMemo),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityAccountMemo$outboundSchema = z.union([
    z.nativeEnum(ActivityAccountMemo),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityAccountMemo$;
(function (ActivityAccountMemo$) {
    /** @deprecated use `ActivityAccountMemo$inboundSchema` instead. */
    ActivityAccountMemo$.inboundSchema = exports.ActivityAccountMemo$inboundSchema;
    /** @deprecated use `ActivityAccountMemo$outboundSchema` instead. */
    ActivityAccountMemo$.outboundSchema = exports.ActivityAccountMemo$outboundSchema;
})(ActivityAccountMemo$ || (exports.ActivityAccountMemo$ = ActivityAccountMemo$ = {}));
/** @internal */
exports.ActivityAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityAction$outboundSchema = z.union([
    z.nativeEnum(ActivityAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityAction$;
(function (ActivityAction$) {
    /** @deprecated use `ActivityAction$inboundSchema` instead. */
    ActivityAction$.inboundSchema = exports.ActivityAction$inboundSchema;
    /** @deprecated use `ActivityAction$outboundSchema` instead. */
    ActivityAction$.outboundSchema = exports.ActivityAction$outboundSchema;
})(ActivityAction$ || (exports.ActivityAction$ = ActivityAction$ = {}));
/** @internal */
exports.ActivityMethod$inboundSchema = z
    .union([
    z.nativeEnum(ActivityMethod),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityMethod$outboundSchema = z.union([
    z.nativeEnum(ActivityMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMethod$;
(function (ActivityMethod$) {
    /** @deprecated use `ActivityMethod$inboundSchema` instead. */
    ActivityMethod$.inboundSchema = exports.ActivityMethod$inboundSchema;
    /** @deprecated use `ActivityMethod$outboundSchema` instead. */
    ActivityMethod$.outboundSchema = exports.ActivityMethod$outboundSchema;
})(ActivityMethod$ || (exports.ActivityMethod$ = ActivityMethod$ = {}));
/** @internal */
exports.ActivityAccountTransfer$inboundSchema = z.object({
    acats_asset_sequence_number: z.string().optional(),
    acats_control_number: z.string().optional(),
    action: exports.ActivityAction$inboundSchema.optional(),
    additional_instructions: z.string().optional(),
    contra_party_account_number: z.string().optional(),
    contra_party_id: z.string().optional(),
    institution: z.string().optional(),
    method: exports.ActivityMethod$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "acats_asset_sequence_number": "acatsAssetSequenceNumber",
        "acats_control_number": "acatsControlNumber",
        "additional_instructions": "additionalInstructions",
        "contra_party_account_number": "contraPartyAccountNumber",
        "contra_party_id": "contraPartyId",
    });
});
/** @internal */
exports.ActivityAccountTransfer$outboundSchema = z.object({
    acatsAssetSequenceNumber: z.string().optional(),
    acatsControlNumber: z.string().optional(),
    action: exports.ActivityAction$outboundSchema.optional(),
    additionalInstructions: z.string().optional(),
    contraPartyAccountNumber: z.string().optional(),
    contraPartyId: z.string().optional(),
    institution: z.string().optional(),
    method: exports.ActivityMethod$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acatsAssetSequenceNumber: "acats_asset_sequence_number",
        acatsControlNumber: "acats_control_number",
        additionalInstructions: "additional_instructions",
        contraPartyAccountNumber: "contra_party_account_number",
        contraPartyId: "contra_party_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityAccountTransfer$;
(function (ActivityAccountTransfer$) {
    /** @deprecated use `ActivityAccountTransfer$inboundSchema` instead. */
    ActivityAccountTransfer$.inboundSchema = exports.ActivityAccountTransfer$inboundSchema;
    /** @deprecated use `ActivityAccountTransfer$outboundSchema` instead. */
    ActivityAccountTransfer$.outboundSchema = exports.ActivityAccountTransfer$outboundSchema;
})(ActivityAccountTransfer$ || (exports.ActivityAccountTransfer$ = ActivityAccountTransfer$ = {}));
/** @internal */
exports.AccruedInterestDesc$inboundSchema = z.object({});
/** @internal */
exports.AccruedInterestDesc$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccruedInterestDesc$;
(function (AccruedInterestDesc$) {
    /** @deprecated use `AccruedInterestDesc$inboundSchema` instead. */
    AccruedInterestDesc$.inboundSchema = exports.AccruedInterestDesc$inboundSchema;
    /** @deprecated use `AccruedInterestDesc$outboundSchema` instead. */
    AccruedInterestDesc$.outboundSchema = exports.AccruedInterestDesc$outboundSchema;
})(AccruedInterestDesc$ || (exports.AccruedInterestDesc$ = AccruedInterestDesc$ = {}));
/** @internal */
exports.ActivityActivityDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityActivityDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityActivityDate$;
(function (ActivityActivityDate$) {
    /** @deprecated use `ActivityActivityDate$inboundSchema` instead. */
    ActivityActivityDate$.inboundSchema = exports.ActivityActivityDate$inboundSchema;
    /** @deprecated use `ActivityActivityDate$outboundSchema` instead. */
    ActivityActivityDate$.outboundSchema = exports.ActivityActivityDate$outboundSchema;
})(ActivityActivityDate$ || (exports.ActivityActivityDate$ = ActivityActivityDate$ = {}));
/** @internal */
exports.ActivityCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCorporateActionGeneralInformation$;
(function (ActivityCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityCorporateActionGeneralInformation$.inboundSchema = exports.ActivityCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityCorporateActionGeneralInformation$.outboundSchema = exports.ActivityCorporateActionGeneralInformation$outboundSchema;
})(ActivityCorporateActionGeneralInformation$ || (exports.ActivityCorporateActionGeneralInformation$ = ActivityCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPaymentDate$;
(function (ActivityPaymentDate$) {
    /** @deprecated use `ActivityPaymentDate$inboundSchema` instead. */
    ActivityPaymentDate$.inboundSchema = exports.ActivityPaymentDate$inboundSchema;
    /** @deprecated use `ActivityPaymentDate$outboundSchema` instead. */
    ActivityPaymentDate$.outboundSchema = exports.ActivityPaymentDate$outboundSchema;
})(ActivityPaymentDate$ || (exports.ActivityPaymentDate$ = ActivityPaymentDate$ = {}));
/** @internal */
exports.ActivityCapitalGainsQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityCapitalGainsQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCapitalGainsQuantity$;
(function (ActivityCapitalGainsQuantity$) {
    /** @deprecated use `ActivityCapitalGainsQuantity$inboundSchema` instead. */
    ActivityCapitalGainsQuantity$.inboundSchema = exports.ActivityCapitalGainsQuantity$inboundSchema;
    /** @deprecated use `ActivityCapitalGainsQuantity$outboundSchema` instead. */
    ActivityCapitalGainsQuantity$.outboundSchema = exports.ActivityCapitalGainsQuantity$outboundSchema;
})(ActivityCapitalGainsQuantity$ || (exports.ActivityCapitalGainsQuantity$ = ActivityCapitalGainsQuantity$ = {}));
/** @internal */
exports.ActivityRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRecordDate$;
(function (ActivityRecordDate$) {
    /** @deprecated use `ActivityRecordDate$inboundSchema` instead. */
    ActivityRecordDate$.inboundSchema = exports.ActivityRecordDate$inboundSchema;
    /** @deprecated use `ActivityRecordDate$outboundSchema` instead. */
    ActivityRecordDate$.outboundSchema = exports.ActivityRecordDate$outboundSchema;
})(ActivityRecordDate$ || (exports.ActivityRecordDate$ = ActivityRecordDate$ = {}));
/** @internal */
exports.ActivityCapitalGains$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityCorporateActionGeneralInformation$inboundSchema)).optional(),
    long_term_gain: z.boolean().optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityPaymentDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityCapitalGainsQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivityRecordDate$inboundSchema))
        .optional(),
    reinvested: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "long_term_gain": "longTermGain",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.ActivityCapitalGains$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityCorporateActionGeneralInformation$outboundSchema)).optional(),
    longTermGain: z.boolean().optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityPaymentDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityCapitalGainsQuantity$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivityRecordDate$outboundSchema))
        .optional(),
    reinvested: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        longTermGain: "long_term_gain",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCapitalGains$;
(function (ActivityCapitalGains$) {
    /** @deprecated use `ActivityCapitalGains$inboundSchema` instead. */
    ActivityCapitalGains$.inboundSchema = exports.ActivityCapitalGains$inboundSchema;
    /** @deprecated use `ActivityCapitalGains$outboundSchema` instead. */
    ActivityCapitalGains$.outboundSchema = exports.ActivityCapitalGains$outboundSchema;
})(ActivityCapitalGains$ || (exports.ActivityCapitalGains$ = ActivityCapitalGains$ = {}));
/** @internal */
exports.ActivityCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCashRate$;
(function (ActivityCashRate$) {
    /** @deprecated use `ActivityCashRate$inboundSchema` instead. */
    ActivityCashRate$.inboundSchema = exports.ActivityCashRate$inboundSchema;
    /** @deprecated use `ActivityCashRate$outboundSchema` instead. */
    ActivityCashRate$.outboundSchema = exports.ActivityCashRate$outboundSchema;
})(ActivityCashRate$ || (exports.ActivityCashRate$ = ActivityCashRate$ = {}));
/** @internal */
exports.ActivityCashDividendCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityCashDividendCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCashDividendCorporateActionGeneralInformation$;
(function (ActivityCashDividendCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityCashDividendCorporateActionGeneralInformation$.inboundSchema = exports.ActivityCashDividendCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityCashDividendCorporateActionGeneralInformation$.outboundSchema = exports.ActivityCashDividendCorporateActionGeneralInformation$outboundSchema;
})(ActivityCashDividendCorporateActionGeneralInformation$ || (exports.ActivityCashDividendCorporateActionGeneralInformation$ = ActivityCashDividendCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityCashDividendFpsl$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityCashDividendFpsl$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCashDividendFpsl$;
(function (ActivityCashDividendFpsl$) {
    /** @deprecated use `ActivityCashDividendFpsl$inboundSchema` instead. */
    ActivityCashDividendFpsl$.inboundSchema = exports.ActivityCashDividendFpsl$inboundSchema;
    /** @deprecated use `ActivityCashDividendFpsl$outboundSchema` instead. */
    ActivityCashDividendFpsl$.outboundSchema = exports.ActivityCashDividendFpsl$outboundSchema;
})(ActivityCashDividendFpsl$ || (exports.ActivityCashDividendFpsl$ = ActivityCashDividendFpsl$ = {}));
/** @internal */
exports.ActivityFree$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityFree$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityFree$;
(function (ActivityFree$) {
    /** @deprecated use `ActivityFree$inboundSchema` instead. */
    ActivityFree$.inboundSchema = exports.ActivityFree$inboundSchema;
    /** @deprecated use `ActivityFree$outboundSchema` instead. */
    ActivityFree$.outboundSchema = exports.ActivityFree$outboundSchema;
})(ActivityFree$ || (exports.ActivityFree$ = ActivityFree$ = {}));
/** @internal */
exports.ActivityCashDividendPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityCashDividendPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCashDividendPaymentDate$;
(function (ActivityCashDividendPaymentDate$) {
    /** @deprecated use `ActivityCashDividendPaymentDate$inboundSchema` instead. */
    ActivityCashDividendPaymentDate$.inboundSchema = exports.ActivityCashDividendPaymentDate$inboundSchema;
    /** @deprecated use `ActivityCashDividendPaymentDate$outboundSchema` instead. */
    ActivityCashDividendPaymentDate$.outboundSchema = exports.ActivityCashDividendPaymentDate$outboundSchema;
})(ActivityCashDividendPaymentDate$ || (exports.ActivityCashDividendPaymentDate$ = ActivityCashDividendPaymentDate$ = {}));
/** @internal */
exports.ActivityCashDividendQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityCashDividendQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCashDividendQuantity$;
(function (ActivityCashDividendQuantity$) {
    /** @deprecated use `ActivityCashDividendQuantity$inboundSchema` instead. */
    ActivityCashDividendQuantity$.inboundSchema = exports.ActivityCashDividendQuantity$inboundSchema;
    /** @deprecated use `ActivityCashDividendQuantity$outboundSchema` instead. */
    ActivityCashDividendQuantity$.outboundSchema = exports.ActivityCashDividendQuantity$outboundSchema;
})(ActivityCashDividendQuantity$ || (exports.ActivityCashDividendQuantity$ = ActivityCashDividendQuantity$ = {}));
/** @internal */
exports.ActivityCashDividendRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityCashDividendRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCashDividendRecordDate$;
(function (ActivityCashDividendRecordDate$) {
    /** @deprecated use `ActivityCashDividendRecordDate$inboundSchema` instead. */
    ActivityCashDividendRecordDate$.inboundSchema = exports.ActivityCashDividendRecordDate$inboundSchema;
    /** @deprecated use `ActivityCashDividendRecordDate$outboundSchema` instead. */
    ActivityCashDividendRecordDate$.outboundSchema = exports.ActivityCashDividendRecordDate$outboundSchema;
})(ActivityCashDividendRecordDate$ || (exports.ActivityCashDividendRecordDate$ = ActivityCashDividendRecordDate$ = {}));
/** @internal */
exports.ActivitySettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivitySettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySettled$;
(function (ActivitySettled$) {
    /** @deprecated use `ActivitySettled$inboundSchema` instead. */
    ActivitySettled$.inboundSchema = exports.ActivitySettled$inboundSchema;
    /** @deprecated use `ActivitySettled$outboundSchema` instead. */
    ActivitySettled$.outboundSchema = exports.ActivitySettled$outboundSchema;
})(ActivitySettled$ || (exports.ActivitySettled$ = ActivitySettled$ = {}));
/** @internal */
exports.ActivitySubtype$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySubtype),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivitySubtype$outboundSchema = z.union([
    z.nativeEnum(ActivitySubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySubtype$;
(function (ActivitySubtype$) {
    /** @deprecated use `ActivitySubtype$inboundSchema` instead. */
    ActivitySubtype$.inboundSchema = exports.ActivitySubtype$inboundSchema;
    /** @deprecated use `ActivitySubtype$outboundSchema` instead. */
    ActivitySubtype$.outboundSchema = exports.ActivitySubtype$outboundSchema;
})(ActivitySubtype$ || (exports.ActivitySubtype$ = ActivitySubtype$ = {}));
/** @internal */
exports.ActivityCashDividend$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.ActivityCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityCashDividendCorporateActionGeneralInformation$inboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => exports.ActivityCashDividendFpsl$inboundSchema))
        .optional(),
    free: z.nullable(z.lazy(() => exports.ActivityFree$inboundSchema)).optional(),
    long_term_gain: z.boolean().optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityCashDividendPaymentDate$inboundSchema)).optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityCashDividendQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivityCashDividendRecordDate$inboundSchema)).optional(),
    reinvested: z.boolean().optional(),
    settled: z.nullable(z.lazy(() => exports.ActivitySettled$inboundSchema)).optional(),
    substitute_payment: z.boolean().optional(),
    subtype: exports.ActivitySubtype$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "long_term_gain": "longTermGain",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
        "substitute_payment": "substitutePayment",
    });
});
/** @internal */
exports.ActivityCashDividend$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.ActivityCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityCashDividendCorporateActionGeneralInformation$outboundSchema)).optional(),
    fpsl: z.nullable(z.lazy(() => exports.ActivityCashDividendFpsl$outboundSchema))
        .optional(),
    free: z.nullable(z.lazy(() => exports.ActivityFree$outboundSchema)).optional(),
    longTermGain: z.boolean().optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityCashDividendPaymentDate$outboundSchema)).optional(),
    qualified: z.boolean().optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityCashDividendQuantity$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivityCashDividendRecordDate$outboundSchema)).optional(),
    reinvested: z.boolean().optional(),
    settled: z.nullable(z.lazy(() => exports.ActivitySettled$outboundSchema)).optional(),
    substitutePayment: z.boolean().optional(),
    subtype: exports.ActivitySubtype$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        longTermGain: "long_term_gain",
        paymentDate: "payment_date",
        recordDate: "record_date",
        substitutePayment: "substitute_payment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCashDividend$;
(function (ActivityCashDividend$) {
    /** @deprecated use `ActivityCashDividend$inboundSchema` instead. */
    ActivityCashDividend$.inboundSchema = exports.ActivityCashDividend$inboundSchema;
    /** @deprecated use `ActivityCashDividend$outboundSchema` instead. */
    ActivityCashDividend$.outboundSchema = exports.ActivityCashDividend$outboundSchema;
})(ActivityCashDividend$ || (exports.ActivityCashDividend$ = ActivityCashDividend$ = {}));
/** @internal */
exports.ActivityCommission$inboundSchema = z.object({});
/** @internal */
exports.ActivityCommission$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCommission$;
(function (ActivityCommission$) {
    /** @deprecated use `ActivityCommission$inboundSchema` instead. */
    ActivityCommission$.inboundSchema = exports.ActivityCommission$inboundSchema;
    /** @deprecated use `ActivityCommission$outboundSchema` instead. */
    ActivityCommission$.outboundSchema = exports.ActivityCommission$outboundSchema;
})(ActivityCommission$ || (exports.ActivityCommission$ = ActivityCommission$ = {}));
/** @internal */
exports.ActivityConversionCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityConversionCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityConversionCashRate$;
(function (ActivityConversionCashRate$) {
    /** @deprecated use `ActivityConversionCashRate$inboundSchema` instead. */
    ActivityConversionCashRate$.inboundSchema = exports.ActivityConversionCashRate$inboundSchema;
    /** @deprecated use `ActivityConversionCashRate$outboundSchema` instead. */
    ActivityConversionCashRate$.outboundSchema = exports.ActivityConversionCashRate$outboundSchema;
})(ActivityConversionCashRate$ || (exports.ActivityConversionCashRate$ = ActivityConversionCashRate$ = {}));
/** @internal */
exports.ActivityConversionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityConversionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityConversionCorporateActionGeneralInformation$;
(function (ActivityConversionCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityConversionCorporateActionGeneralInformation$.inboundSchema = exports.ActivityConversionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityConversionCorporateActionGeneralInformation$.outboundSchema = exports.ActivityConversionCorporateActionGeneralInformation$outboundSchema;
})(ActivityConversionCorporateActionGeneralInformation$ || (exports.ActivityConversionCorporateActionGeneralInformation$ = ActivityConversionCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockRate$;
(function (ActivityStockRate$) {
    /** @deprecated use `ActivityStockRate$inboundSchema` instead. */
    ActivityStockRate$.inboundSchema = exports.ActivityStockRate$inboundSchema;
    /** @deprecated use `ActivityStockRate$outboundSchema` instead. */
    ActivityStockRate$.outboundSchema = exports.ActivityStockRate$outboundSchema;
})(ActivityStockRate$ || (exports.ActivityStockRate$ = ActivityStockRate$ = {}));
/** @internal */
exports.ActivityConversionType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityConversionType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityConversionType$outboundSchema = z.union([
    z.nativeEnum(ActivityConversionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityConversionType$;
(function (ActivityConversionType$) {
    /** @deprecated use `ActivityConversionType$inboundSchema` instead. */
    ActivityConversionType$.inboundSchema = exports.ActivityConversionType$inboundSchema;
    /** @deprecated use `ActivityConversionType$outboundSchema` instead. */
    ActivityConversionType$.outboundSchema = exports.ActivityConversionType$outboundSchema;
})(ActivityConversionType$ || (exports.ActivityConversionType$ = ActivityConversionType$ = {}));
/** @internal */
exports.ActivityConversion$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.ActivityConversionCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityConversionCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => exports.ActivityStockRate$inboundSchema))
        .optional(),
    type: exports.ActivityConversionType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.ActivityConversion$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.ActivityConversionCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityConversionCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => exports.ActivityStockRate$outboundSchema))
        .optional(),
    type: exports.ActivityConversionType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityConversion$;
(function (ActivityConversion$) {
    /** @deprecated use `ActivityConversion$inboundSchema` instead. */
    ActivityConversion$.inboundSchema = exports.ActivityConversion$inboundSchema;
    /** @deprecated use `ActivityConversion$outboundSchema` instead. */
    ActivityConversion$.outboundSchema = exports.ActivityConversion$outboundSchema;
})(ActivityConversion$ || (exports.ActivityConversion$ = ActivityConversion$ = {}));
/** @internal */
exports.ActivityCorporateActionMemoAdjustment$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    corporate_action_type: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "corporate_action_type": "corporateActionType",
    });
});
/** @internal */
exports.ActivityCorporateActionMemoAdjustment$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    corporateActionType: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        corporateActionType: "corporate_action_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCorporateActionMemoAdjustment$;
(function (ActivityCorporateActionMemoAdjustment$) {
    /** @deprecated use `ActivityCorporateActionMemoAdjustment$inboundSchema` instead. */
    ActivityCorporateActionMemoAdjustment$.inboundSchema = exports.ActivityCorporateActionMemoAdjustment$inboundSchema;
    /** @deprecated use `ActivityCorporateActionMemoAdjustment$outboundSchema` instead. */
    ActivityCorporateActionMemoAdjustment$.outboundSchema = exports.ActivityCorporateActionMemoAdjustment$outboundSchema;
})(ActivityCorporateActionMemoAdjustment$ || (exports.ActivityCorporateActionMemoAdjustment$ = ActivityCorporateActionMemoAdjustment$ = {}));
/** @internal */
exports.ActivityCreditType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityCreditType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityCreditType$outboundSchema = z.union([
    z.nativeEnum(ActivityCreditType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCreditType$;
(function (ActivityCreditType$) {
    /** @deprecated use `ActivityCreditType$inboundSchema` instead. */
    ActivityCreditType$.inboundSchema = exports.ActivityCreditType$inboundSchema;
    /** @deprecated use `ActivityCreditType$outboundSchema` instead. */
    ActivityCreditType$.outboundSchema = exports.ActivityCreditType$outboundSchema;
})(ActivityCreditType$ || (exports.ActivityCreditType$ = ActivityCreditType$ = {}));
/** @internal */
exports.ActivityCredit$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    credit_type: exports.ActivityCreditType$inboundSchema.optional(),
    taxable: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "credit_type": "creditType",
    });
});
/** @internal */
exports.ActivityCredit$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    creditType: exports.ActivityCreditType$outboundSchema.optional(),
    taxable: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        creditType: "credit_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityCredit$;
(function (ActivityCredit$) {
    /** @deprecated use `ActivityCredit$inboundSchema` instead. */
    ActivityCredit$.inboundSchema = exports.ActivityCredit$inboundSchema;
    /** @deprecated use `ActivityCredit$outboundSchema` instead. */
    ActivityCredit$.outboundSchema = exports.ActivityCredit$outboundSchema;
})(ActivityCredit$ || (exports.ActivityCredit$ = ActivityCredit$ = {}));
/** @internal */
exports.ActivityContributionType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityContributionType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityContributionType$outboundSchema = z.union([
    z.nativeEnum(ActivityContributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityContributionType$;
(function (ActivityContributionType$) {
    /** @deprecated use `ActivityContributionType$inboundSchema` instead. */
    ActivityContributionType$.inboundSchema = exports.ActivityContributionType$inboundSchema;
    /** @deprecated use `ActivityContributionType$outboundSchema` instead. */
    ActivityContributionType$.outboundSchema = exports.ActivityContributionType$outboundSchema;
})(ActivityContributionType$ || (exports.ActivityContributionType$ = ActivityContributionType$ = {}));
/** @internal */
exports.ActivityDepositType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityDepositType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityDepositType$outboundSchema = z.union([
    z.nativeEnum(ActivityDepositType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityDepositType$;
(function (ActivityDepositType$) {
    /** @deprecated use `ActivityDepositType$inboundSchema` instead. */
    ActivityDepositType$.inboundSchema = exports.ActivityDepositType$inboundSchema;
    /** @deprecated use `ActivityDepositType$outboundSchema` instead. */
    ActivityDepositType$.outboundSchema = exports.ActivityDepositType$outboundSchema;
})(ActivityDepositType$ || (exports.ActivityDepositType$ = ActivityDepositType$ = {}));
/** @internal */
exports.ActivityDeposit$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    contribution_type: exports.ActivityContributionType$inboundSchema.optional(),
    contribution_year: z.number().int().optional(),
    fed_reference_number: z.string().optional(),
    originating_account_number: z.string().optional(),
    type: exports.ActivityDepositType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "contribution_type": "contributionType",
        "contribution_year": "contributionYear",
        "fed_reference_number": "fedReferenceNumber",
        "originating_account_number": "originatingAccountNumber",
    });
});
/** @internal */
exports.ActivityDeposit$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    contributionType: exports.ActivityContributionType$outboundSchema.optional(),
    contributionYear: z.number().int().optional(),
    fedReferenceNumber: z.string().optional(),
    originatingAccountNumber: z.string().optional(),
    type: exports.ActivityDepositType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        contributionType: "contribution_type",
        contributionYear: "contribution_year",
        fedReferenceNumber: "fed_reference_number",
        originatingAccountNumber: "originating_account_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityDeposit$;
(function (ActivityDeposit$) {
    /** @deprecated use `ActivityDeposit$inboundSchema` instead. */
    ActivityDeposit$.inboundSchema = exports.ActivityDeposit$inboundSchema;
    /** @deprecated use `ActivityDeposit$outboundSchema` instead. */
    ActivityDeposit$.outboundSchema = exports.ActivityDeposit$outboundSchema;
})(ActivityDeposit$ || (exports.ActivityDeposit$ = ActivityDeposit$ = {}));
/** @internal */
exports.ActivityDripAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityDripAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityDripAction$outboundSchema = z.union([
    z.nativeEnum(ActivityDripAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityDripAction$;
(function (ActivityDripAction$) {
    /** @deprecated use `ActivityDripAction$inboundSchema` instead. */
    ActivityDripAction$.inboundSchema = exports.ActivityDripAction$inboundSchema;
    /** @deprecated use `ActivityDripAction$outboundSchema` instead. */
    ActivityDripAction$.outboundSchema = exports.ActivityDripAction$outboundSchema;
})(ActivityDripAction$ || (exports.ActivityDripAction$ = ActivityDripAction$ = {}));
/** @internal */
exports.ActivityDrip$inboundSchema = z.object({
    action: exports.ActivityDripAction$inboundSchema.optional(),
});
/** @internal */
exports.ActivityDrip$outboundSchema = z.object({
    action: exports.ActivityDripAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityDrip$;
(function (ActivityDrip$) {
    /** @deprecated use `ActivityDrip$inboundSchema` instead. */
    ActivityDrip$.inboundSchema = exports.ActivityDrip$inboundSchema;
    /** @deprecated use `ActivityDrip$outboundSchema` instead. */
    ActivityDrip$.outboundSchema = exports.ActivityDrip$outboundSchema;
})(ActivityDrip$ || (exports.ActivityDrip$ = ActivityDrip$ = {}));
/** @internal */
exports.ActivityExchangeCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityExchangeCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityExchangeCashRate$;
(function (ActivityExchangeCashRate$) {
    /** @deprecated use `ActivityExchangeCashRate$inboundSchema` instead. */
    ActivityExchangeCashRate$.inboundSchema = exports.ActivityExchangeCashRate$inboundSchema;
    /** @deprecated use `ActivityExchangeCashRate$outboundSchema` instead. */
    ActivityExchangeCashRate$.outboundSchema = exports.ActivityExchangeCashRate$outboundSchema;
})(ActivityExchangeCashRate$ || (exports.ActivityExchangeCashRate$ = ActivityExchangeCashRate$ = {}));
/** @internal */
exports.ActivityExchangeCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityExchangeCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityExchangeCorporateActionGeneralInformation$;
(function (ActivityExchangeCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityExchangeCorporateActionGeneralInformation$.inboundSchema = exports.ActivityExchangeCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityExchangeCorporateActionGeneralInformation$.outboundSchema = exports.ActivityExchangeCorporateActionGeneralInformation$outboundSchema;
})(ActivityExchangeCorporateActionGeneralInformation$ || (exports.ActivityExchangeCorporateActionGeneralInformation$ = ActivityExchangeCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityExchangeStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityExchangeStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityExchangeStockRate$;
(function (ActivityExchangeStockRate$) {
    /** @deprecated use `ActivityExchangeStockRate$inboundSchema` instead. */
    ActivityExchangeStockRate$.inboundSchema = exports.ActivityExchangeStockRate$inboundSchema;
    /** @deprecated use `ActivityExchangeStockRate$outboundSchema` instead. */
    ActivityExchangeStockRate$.outboundSchema = exports.ActivityExchangeStockRate$outboundSchema;
})(ActivityExchangeStockRate$ || (exports.ActivityExchangeStockRate$ = ActivityExchangeStockRate$ = {}));
/** @internal */
exports.ActivityExchangeType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityExchangeType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityExchangeType$outboundSchema = z.union([
    z.nativeEnum(ActivityExchangeType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityExchangeType$;
(function (ActivityExchangeType$) {
    /** @deprecated use `ActivityExchangeType$inboundSchema` instead. */
    ActivityExchangeType$.inboundSchema = exports.ActivityExchangeType$inboundSchema;
    /** @deprecated use `ActivityExchangeType$outboundSchema` instead. */
    ActivityExchangeType$.outboundSchema = exports.ActivityExchangeType$outboundSchema;
})(ActivityExchangeType$ || (exports.ActivityExchangeType$ = ActivityExchangeType$ = {}));
/** @internal */
exports.ActivityExchange$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.ActivityExchangeCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityExchangeCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => exports.ActivityExchangeStockRate$inboundSchema))
        .optional(),
    type: exports.ActivityExchangeType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.ActivityExchange$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.ActivityExchangeCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityExchangeCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => exports.ActivityExchangeStockRate$outboundSchema))
        .optional(),
    type: exports.ActivityExchangeType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityExchange$;
(function (ActivityExchange$) {
    /** @deprecated use `ActivityExchange$inboundSchema` instead. */
    ActivityExchange$.inboundSchema = exports.ActivityExchange$inboundSchema;
    /** @deprecated use `ActivityExchange$outboundSchema` instead. */
    ActivityExchange$.outboundSchema = exports.ActivityExchange$outboundSchema;
})(ActivityExchange$ || (exports.ActivityExchange$ = ActivityExchange$ = {}));
/** @internal */
exports.ActivityFee$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
    });
});
/** @internal */
exports.ActivityFee$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityFee$;
(function (ActivityFee$) {
    /** @deprecated use `ActivityFee$inboundSchema` instead. */
    ActivityFee$.inboundSchema = exports.ActivityFee$inboundSchema;
    /** @deprecated use `ActivityFee$outboundSchema` instead. */
    ActivityFee$.outboundSchema = exports.ActivityFee$outboundSchema;
})(ActivityFee$ || (exports.ActivityFee$ = ActivityFee$ = {}));
/** @internal */
exports.ActivityFpslAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityFpslAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityFpslAction$outboundSchema = z.union([
    z.nativeEnum(ActivityFpslAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityFpslAction$;
(function (ActivityFpslAction$) {
    /** @deprecated use `ActivityFpslAction$inboundSchema` instead. */
    ActivityFpslAction$.inboundSchema = exports.ActivityFpslAction$inboundSchema;
    /** @deprecated use `ActivityFpslAction$outboundSchema` instead. */
    ActivityFpslAction$.outboundSchema = exports.ActivityFpslAction$outboundSchema;
})(ActivityFpslAction$ || (exports.ActivityFpslAction$ = ActivityFpslAction$ = {}));
/** @internal */
exports.ActivityFpsl$inboundSchema = z.object({
    action: exports.ActivityFpslAction$inboundSchema.optional(),
});
/** @internal */
exports.ActivityFpsl$outboundSchema = z.object({
    action: exports.ActivityFpslAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityFpsl$;
(function (ActivityFpsl$) {
    /** @deprecated use `ActivityFpsl$inboundSchema` instead. */
    ActivityFpsl$.inboundSchema = exports.ActivityFpsl$inboundSchema;
    /** @deprecated use `ActivityFpsl$outboundSchema` instead. */
    ActivityFpsl$.outboundSchema = exports.ActivityFpsl$outboundSchema;
})(ActivityFpsl$ || (exports.ActivityFpsl$ = ActivityFpsl$ = {}));
/** @internal */
exports.ActivityGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityGrossAmount$;
(function (ActivityGrossAmount$) {
    /** @deprecated use `ActivityGrossAmount$inboundSchema` instead. */
    ActivityGrossAmount$.inboundSchema = exports.ActivityGrossAmount$inboundSchema;
    /** @deprecated use `ActivityGrossAmount$outboundSchema` instead. */
    ActivityGrossAmount$.outboundSchema = exports.ActivityGrossAmount$outboundSchema;
})(ActivityGrossAmount$ || (exports.ActivityGrossAmount$ = ActivityGrossAmount$ = {}));
/** @internal */
exports.ActivityInterestAccrualEndDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityInterestAccrualEndDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestAccrualEndDate$;
(function (ActivityInterestAccrualEndDate$) {
    /** @deprecated use `ActivityInterestAccrualEndDate$inboundSchema` instead. */
    ActivityInterestAccrualEndDate$.inboundSchema = exports.ActivityInterestAccrualEndDate$inboundSchema;
    /** @deprecated use `ActivityInterestAccrualEndDate$outboundSchema` instead. */
    ActivityInterestAccrualEndDate$.outboundSchema = exports.ActivityInterestAccrualEndDate$outboundSchema;
})(ActivityInterestAccrualEndDate$ || (exports.ActivityInterestAccrualEndDate$ = ActivityInterestAccrualEndDate$ = {}));
/** @internal */
exports.ActivityInterestAccrualStartDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityInterestAccrualStartDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestAccrualStartDate$;
(function (ActivityInterestAccrualStartDate$) {
    /** @deprecated use `ActivityInterestAccrualStartDate$inboundSchema` instead. */
    ActivityInterestAccrualStartDate$.inboundSchema = exports.ActivityInterestAccrualStartDate$inboundSchema;
    /** @deprecated use `ActivityInterestAccrualStartDate$outboundSchema` instead. */
    ActivityInterestAccrualStartDate$.outboundSchema = exports.ActivityInterestAccrualStartDate$outboundSchema;
})(ActivityInterestAccrualStartDate$ || (exports.ActivityInterestAccrualStartDate$ = ActivityInterestAccrualStartDate$ = {}));
/** @internal */
exports.ActivityInterestType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityInterestType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityInterestType$outboundSchema = z.union([
    z.nativeEnum(ActivityInterestType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestType$;
(function (ActivityInterestType$) {
    /** @deprecated use `ActivityInterestType$inboundSchema` instead. */
    ActivityInterestType$.inboundSchema = exports.ActivityInterestType$inboundSchema;
    /** @deprecated use `ActivityInterestType$outboundSchema` instead. */
    ActivityInterestType$.outboundSchema = exports.ActivityInterestType$outboundSchema;
})(ActivityInterestType$ || (exports.ActivityInterestType$ = ActivityInterestType$ = {}));
/** @internal */
exports.ActivityInterest$inboundSchema = z.object({
    interest_accrual_end_date: z.nullable(z.lazy(() => exports.ActivityInterestAccrualEndDate$inboundSchema)).optional(),
    interest_accrual_start_date: z.nullable(z.lazy(() => exports.ActivityInterestAccrualStartDate$inboundSchema)).optional(),
    interest_type: exports.ActivityInterestType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "interest_accrual_end_date": "interestAccrualEndDate",
        "interest_accrual_start_date": "interestAccrualStartDate",
        "interest_type": "interestType",
    });
});
/** @internal */
exports.ActivityInterest$outboundSchema = z.object({
    interestAccrualEndDate: z.nullable(z.lazy(() => exports.ActivityInterestAccrualEndDate$outboundSchema)).optional(),
    interestAccrualStartDate: z.nullable(z.lazy(() => exports.ActivityInterestAccrualStartDate$outboundSchema)).optional(),
    interestType: exports.ActivityInterestType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        interestAccrualEndDate: "interest_accrual_end_date",
        interestAccrualStartDate: "interest_accrual_start_date",
        interestType: "interest_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterest$;
(function (ActivityInterest$) {
    /** @deprecated use `ActivityInterest$inboundSchema` instead. */
    ActivityInterest$.inboundSchema = exports.ActivityInterest$inboundSchema;
    /** @deprecated use `ActivityInterest$outboundSchema` instead. */
    ActivityInterest$.outboundSchema = exports.ActivityInterest$outboundSchema;
})(ActivityInterest$ || (exports.ActivityInterest$ = ActivityInterest$ = {}));
/** @internal */
exports.ActivityInterestPaymentCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityInterestPaymentCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestPaymentCashRate$;
(function (ActivityInterestPaymentCashRate$) {
    /** @deprecated use `ActivityInterestPaymentCashRate$inboundSchema` instead. */
    ActivityInterestPaymentCashRate$.inboundSchema = exports.ActivityInterestPaymentCashRate$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentCashRate$outboundSchema` instead. */
    ActivityInterestPaymentCashRate$.outboundSchema = exports.ActivityInterestPaymentCashRate$outboundSchema;
})(ActivityInterestPaymentCashRate$ || (exports.ActivityInterestPaymentCashRate$ = ActivityInterestPaymentCashRate$ = {}));
/** @internal */
exports.ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestPaymentCorporateActionGeneralInformation$;
(function (ActivityInterestPaymentCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityInterestPaymentCorporateActionGeneralInformation$.inboundSchema = exports.ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityInterestPaymentCorporateActionGeneralInformation$.outboundSchema = exports.ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema;
})(ActivityInterestPaymentCorporateActionGeneralInformation$ || (exports.ActivityInterestPaymentCorporateActionGeneralInformation$ = ActivityInterestPaymentCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityInterestPaymentPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityInterestPaymentPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestPaymentPaymentDate$;
(function (ActivityInterestPaymentPaymentDate$) {
    /** @deprecated use `ActivityInterestPaymentPaymentDate$inboundSchema` instead. */
    ActivityInterestPaymentPaymentDate$.inboundSchema = exports.ActivityInterestPaymentPaymentDate$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentPaymentDate$outboundSchema` instead. */
    ActivityInterestPaymentPaymentDate$.outboundSchema = exports.ActivityInterestPaymentPaymentDate$outboundSchema;
})(ActivityInterestPaymentPaymentDate$ || (exports.ActivityInterestPaymentPaymentDate$ = ActivityInterestPaymentPaymentDate$ = {}));
/** @internal */
exports.ActivityInterestPaymentRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityInterestPaymentRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestPaymentRecordDate$;
(function (ActivityInterestPaymentRecordDate$) {
    /** @deprecated use `ActivityInterestPaymentRecordDate$inboundSchema` instead. */
    ActivityInterestPaymentRecordDate$.inboundSchema = exports.ActivityInterestPaymentRecordDate$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentRecordDate$outboundSchema` instead. */
    ActivityInterestPaymentRecordDate$.outboundSchema = exports.ActivityInterestPaymentRecordDate$outboundSchema;
})(ActivityInterestPaymentRecordDate$ || (exports.ActivityInterestPaymentRecordDate$ = ActivityInterestPaymentRecordDate$ = {}));
/** @internal */
exports.ActivityInterestPaymentSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityInterestPaymentSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestPaymentSettled$;
(function (ActivityInterestPaymentSettled$) {
    /** @deprecated use `ActivityInterestPaymentSettled$inboundSchema` instead. */
    ActivityInterestPaymentSettled$.inboundSchema = exports.ActivityInterestPaymentSettled$inboundSchema;
    /** @deprecated use `ActivityInterestPaymentSettled$outboundSchema` instead. */
    ActivityInterestPaymentSettled$.outboundSchema = exports.ActivityInterestPaymentSettled$outboundSchema;
})(ActivityInterestPaymentSettled$ || (exports.ActivityInterestPaymentSettled$ = ActivityInterestPaymentSettled$ = {}));
/** @internal */
exports.ActivityInterestPayment$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.ActivityInterestPaymentCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityInterestPaymentPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivityInterestPaymentRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivityInterestPaymentSettled$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.ActivityInterestPayment$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.ActivityInterestPaymentCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityInterestPaymentPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivityInterestPaymentRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivityInterestPaymentSettled$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityInterestPayment$;
(function (ActivityInterestPayment$) {
    /** @deprecated use `ActivityInterestPayment$inboundSchema` instead. */
    ActivityInterestPayment$.inboundSchema = exports.ActivityInterestPayment$inboundSchema;
    /** @deprecated use `ActivityInterestPayment$outboundSchema` instead. */
    ActivityInterestPayment$.outboundSchema = exports.ActivityInterestPayment$outboundSchema;
})(ActivityInterestPayment$ || (exports.ActivityInterestPayment$ = ActivityInterestPayment$ = {}));
/** @internal */
exports.ActivityLiquidationAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityLiquidationAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityLiquidationAction$outboundSchema = z.union([
    z.nativeEnum(ActivityLiquidationAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidationAction$;
(function (ActivityLiquidationAction$) {
    /** @deprecated use `ActivityLiquidationAction$inboundSchema` instead. */
    ActivityLiquidationAction$.inboundSchema = exports.ActivityLiquidationAction$inboundSchema;
    /** @deprecated use `ActivityLiquidationAction$outboundSchema` instead. */
    ActivityLiquidationAction$.outboundSchema = exports.ActivityLiquidationAction$outboundSchema;
})(ActivityLiquidationAction$ || (exports.ActivityLiquidationAction$ = ActivityLiquidationAction$ = {}));
/** @internal */
exports.ActivityLiquidationCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityLiquidationCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidationCashRate$;
(function (ActivityLiquidationCashRate$) {
    /** @deprecated use `ActivityLiquidationCashRate$inboundSchema` instead. */
    ActivityLiquidationCashRate$.inboundSchema = exports.ActivityLiquidationCashRate$inboundSchema;
    /** @deprecated use `ActivityLiquidationCashRate$outboundSchema` instead. */
    ActivityLiquidationCashRate$.outboundSchema = exports.ActivityLiquidationCashRate$outboundSchema;
})(ActivityLiquidationCashRate$ || (exports.ActivityLiquidationCashRate$ = ActivityLiquidationCashRate$ = {}));
/** @internal */
exports.ActivityLiquidationCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityLiquidationCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidationCorporateActionGeneralInformation$;
(function (ActivityLiquidationCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityLiquidationCorporateActionGeneralInformation$.inboundSchema = exports.ActivityLiquidationCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityLiquidationCorporateActionGeneralInformation$.outboundSchema = exports.ActivityLiquidationCorporateActionGeneralInformation$outboundSchema;
})(ActivityLiquidationCorporateActionGeneralInformation$ || (exports.ActivityLiquidationCorporateActionGeneralInformation$ = ActivityLiquidationCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityEffectiveDate$;
(function (ActivityEffectiveDate$) {
    /** @deprecated use `ActivityEffectiveDate$inboundSchema` instead. */
    ActivityEffectiveDate$.inboundSchema = exports.ActivityEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityEffectiveDate$outboundSchema` instead. */
    ActivityEffectiveDate$.outboundSchema = exports.ActivityEffectiveDate$outboundSchema;
})(ActivityEffectiveDate$ || (exports.ActivityEffectiveDate$ = ActivityEffectiveDate$ = {}));
/** @internal */
exports.ActivityLiquidationPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityLiquidationPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidationPaymentDate$;
(function (ActivityLiquidationPaymentDate$) {
    /** @deprecated use `ActivityLiquidationPaymentDate$inboundSchema` instead. */
    ActivityLiquidationPaymentDate$.inboundSchema = exports.ActivityLiquidationPaymentDate$inboundSchema;
    /** @deprecated use `ActivityLiquidationPaymentDate$outboundSchema` instead. */
    ActivityLiquidationPaymentDate$.outboundSchema = exports.ActivityLiquidationPaymentDate$outboundSchema;
})(ActivityLiquidationPaymentDate$ || (exports.ActivityLiquidationPaymentDate$ = ActivityLiquidationPaymentDate$ = {}));
/** @internal */
exports.ActivityLiquidationQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityLiquidationQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidationQuantity$;
(function (ActivityLiquidationQuantity$) {
    /** @deprecated use `ActivityLiquidationQuantity$inboundSchema` instead. */
    ActivityLiquidationQuantity$.inboundSchema = exports.ActivityLiquidationQuantity$inboundSchema;
    /** @deprecated use `ActivityLiquidationQuantity$outboundSchema` instead. */
    ActivityLiquidationQuantity$.outboundSchema = exports.ActivityLiquidationQuantity$outboundSchema;
})(ActivityLiquidationQuantity$ || (exports.ActivityLiquidationQuantity$ = ActivityLiquidationQuantity$ = {}));
/** @internal */
exports.ActivityLiquidationRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityLiquidationRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidationRecordDate$;
(function (ActivityLiquidationRecordDate$) {
    /** @deprecated use `ActivityLiquidationRecordDate$inboundSchema` instead. */
    ActivityLiquidationRecordDate$.inboundSchema = exports.ActivityLiquidationRecordDate$inboundSchema;
    /** @deprecated use `ActivityLiquidationRecordDate$outboundSchema` instead. */
    ActivityLiquidationRecordDate$.outboundSchema = exports.ActivityLiquidationRecordDate$outboundSchema;
})(ActivityLiquidationRecordDate$ || (exports.ActivityLiquidationRecordDate$ = ActivityLiquidationRecordDate$ = {}));
/** @internal */
exports.ActivityLiquidationSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityLiquidationSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidationSettled$;
(function (ActivityLiquidationSettled$) {
    /** @deprecated use `ActivityLiquidationSettled$inboundSchema` instead. */
    ActivityLiquidationSettled$.inboundSchema = exports.ActivityLiquidationSettled$inboundSchema;
    /** @deprecated use `ActivityLiquidationSettled$outboundSchema` instead. */
    ActivityLiquidationSettled$.outboundSchema = exports.ActivityLiquidationSettled$outboundSchema;
})(ActivityLiquidationSettled$ || (exports.ActivityLiquidationSettled$ = ActivityLiquidationSettled$ = {}));
/** @internal */
exports.ActivityLiquidationSubtype$inboundSchema = z
    .union([
    z.nativeEnum(ActivityLiquidationSubtype),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityLiquidationSubtype$outboundSchema = z.union([
    z.nativeEnum(ActivityLiquidationSubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidationSubtype$;
(function (ActivityLiquidationSubtype$) {
    /** @deprecated use `ActivityLiquidationSubtype$inboundSchema` instead. */
    ActivityLiquidationSubtype$.inboundSchema = exports.ActivityLiquidationSubtype$inboundSchema;
    /** @deprecated use `ActivityLiquidationSubtype$outboundSchema` instead. */
    ActivityLiquidationSubtype$.outboundSchema = exports.ActivityLiquidationSubtype$outboundSchema;
})(ActivityLiquidationSubtype$ || (exports.ActivityLiquidationSubtype$ = ActivityLiquidationSubtype$ = {}));
/** @internal */
exports.ActivityLiquidation$inboundSchema = z.object({
    action: exports.ActivityLiquidationAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.ActivityLiquidationCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityLiquidationCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.ActivityEffectiveDate$inboundSchema))
        .optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityLiquidationPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityLiquidationQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivityLiquidationRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivityLiquidationSettled$inboundSchema))
        .optional(),
    subtype: exports.ActivityLiquidationSubtype$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.ActivityLiquidation$outboundSchema = z.object({
    action: exports.ActivityLiquidationAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.ActivityLiquidationCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityLiquidationCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.ActivityEffectiveDate$outboundSchema))
        .optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityLiquidationPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityLiquidationQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivityLiquidationRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivityLiquidationSettled$outboundSchema))
        .optional(),
    subtype: exports.ActivityLiquidationSubtype$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityLiquidation$;
(function (ActivityLiquidation$) {
    /** @deprecated use `ActivityLiquidation$inboundSchema` instead. */
    ActivityLiquidation$.inboundSchema = exports.ActivityLiquidation$inboundSchema;
    /** @deprecated use `ActivityLiquidation$outboundSchema` instead. */
    ActivityLiquidation$.outboundSchema = exports.ActivityLiquidation$outboundSchema;
})(ActivityLiquidation$ || (exports.ActivityLiquidation$ = ActivityLiquidation$ = {}));
/** @internal */
exports.ActivityMaturityCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityMaturityCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMaturityCashRate$;
(function (ActivityMaturityCashRate$) {
    /** @deprecated use `ActivityMaturityCashRate$inboundSchema` instead. */
    ActivityMaturityCashRate$.inboundSchema = exports.ActivityMaturityCashRate$inboundSchema;
    /** @deprecated use `ActivityMaturityCashRate$outboundSchema` instead. */
    ActivityMaturityCashRate$.outboundSchema = exports.ActivityMaturityCashRate$outboundSchema;
})(ActivityMaturityCashRate$ || (exports.ActivityMaturityCashRate$ = ActivityMaturityCashRate$ = {}));
/** @internal */
exports.ActivityMaturityCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityMaturityCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMaturityCorporateActionGeneralInformation$;
(function (ActivityMaturityCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityMaturityCorporateActionGeneralInformation$.inboundSchema = exports.ActivityMaturityCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityMaturityCorporateActionGeneralInformation$.outboundSchema = exports.ActivityMaturityCorporateActionGeneralInformation$outboundSchema;
})(ActivityMaturityCorporateActionGeneralInformation$ || (exports.ActivityMaturityCorporateActionGeneralInformation$ = ActivityMaturityCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityMaturityPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityMaturityPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMaturityPaymentDate$;
(function (ActivityMaturityPaymentDate$) {
    /** @deprecated use `ActivityMaturityPaymentDate$inboundSchema` instead. */
    ActivityMaturityPaymentDate$.inboundSchema = exports.ActivityMaturityPaymentDate$inboundSchema;
    /** @deprecated use `ActivityMaturityPaymentDate$outboundSchema` instead. */
    ActivityMaturityPaymentDate$.outboundSchema = exports.ActivityMaturityPaymentDate$outboundSchema;
})(ActivityMaturityPaymentDate$ || (exports.ActivityMaturityPaymentDate$ = ActivityMaturityPaymentDate$ = {}));
/** @internal */
exports.ActivityMaturityQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityMaturityQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMaturityQuantity$;
(function (ActivityMaturityQuantity$) {
    /** @deprecated use `ActivityMaturityQuantity$inboundSchema` instead. */
    ActivityMaturityQuantity$.inboundSchema = exports.ActivityMaturityQuantity$inboundSchema;
    /** @deprecated use `ActivityMaturityQuantity$outboundSchema` instead. */
    ActivityMaturityQuantity$.outboundSchema = exports.ActivityMaturityQuantity$outboundSchema;
})(ActivityMaturityQuantity$ || (exports.ActivityMaturityQuantity$ = ActivityMaturityQuantity$ = {}));
/** @internal */
exports.ActivityMaturity$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.ActivityMaturityCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityMaturityCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityMaturityPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityMaturityQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
exports.ActivityMaturity$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.ActivityMaturityCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityMaturityCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityMaturityPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityMaturityQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMaturity$;
(function (ActivityMaturity$) {
    /** @deprecated use `ActivityMaturity$inboundSchema` instead. */
    ActivityMaturity$.inboundSchema = exports.ActivityMaturity$inboundSchema;
    /** @deprecated use `ActivityMaturity$outboundSchema` instead. */
    ActivityMaturity$.outboundSchema = exports.ActivityMaturity$outboundSchema;
})(ActivityMaturity$ || (exports.ActivityMaturity$ = ActivityMaturity$ = {}));
/** @internal */
exports.ActivityMergerAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityMergerAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityMergerAction$outboundSchema = z.union([
    z.nativeEnum(ActivityMergerAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMergerAction$;
(function (ActivityMergerAction$) {
    /** @deprecated use `ActivityMergerAction$inboundSchema` instead. */
    ActivityMergerAction$.inboundSchema = exports.ActivityMergerAction$inboundSchema;
    /** @deprecated use `ActivityMergerAction$outboundSchema` instead. */
    ActivityMergerAction$.outboundSchema = exports.ActivityMergerAction$outboundSchema;
})(ActivityMergerAction$ || (exports.ActivityMergerAction$ = ActivityMergerAction$ = {}));
/** @internal */
exports.ActivityMergerCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityMergerCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMergerCashRate$;
(function (ActivityMergerCashRate$) {
    /** @deprecated use `ActivityMergerCashRate$inboundSchema` instead. */
    ActivityMergerCashRate$.inboundSchema = exports.ActivityMergerCashRate$inboundSchema;
    /** @deprecated use `ActivityMergerCashRate$outboundSchema` instead. */
    ActivityMergerCashRate$.outboundSchema = exports.ActivityMergerCashRate$outboundSchema;
})(ActivityMergerCashRate$ || (exports.ActivityMergerCashRate$ = ActivityMergerCashRate$ = {}));
/** @internal */
exports.ActivityMergerCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityMergerCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMergerCorporateActionGeneralInformation$;
(function (ActivityMergerCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityMergerCorporateActionGeneralInformation$.inboundSchema = exports.ActivityMergerCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityMergerCorporateActionGeneralInformation$.outboundSchema = exports.ActivityMergerCorporateActionGeneralInformation$outboundSchema;
})(ActivityMergerCorporateActionGeneralInformation$ || (exports.ActivityMergerCorporateActionGeneralInformation$ = ActivityMergerCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityMergerEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityMergerEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMergerEffectiveDate$;
(function (ActivityMergerEffectiveDate$) {
    /** @deprecated use `ActivityMergerEffectiveDate$inboundSchema` instead. */
    ActivityMergerEffectiveDate$.inboundSchema = exports.ActivityMergerEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityMergerEffectiveDate$outboundSchema` instead. */
    ActivityMergerEffectiveDate$.outboundSchema = exports.ActivityMergerEffectiveDate$outboundSchema;
})(ActivityMergerEffectiveDate$ || (exports.ActivityMergerEffectiveDate$ = ActivityMergerEffectiveDate$ = {}));
/** @internal */
exports.ActivityMergerQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityMergerQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMergerQuantity$;
(function (ActivityMergerQuantity$) {
    /** @deprecated use `ActivityMergerQuantity$inboundSchema` instead. */
    ActivityMergerQuantity$.inboundSchema = exports.ActivityMergerQuantity$inboundSchema;
    /** @deprecated use `ActivityMergerQuantity$outboundSchema` instead. */
    ActivityMergerQuantity$.outboundSchema = exports.ActivityMergerQuantity$outboundSchema;
})(ActivityMergerQuantity$ || (exports.ActivityMergerQuantity$ = ActivityMergerQuantity$ = {}));
/** @internal */
exports.ActivityMergerStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityMergerStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMergerStockRate$;
(function (ActivityMergerStockRate$) {
    /** @deprecated use `ActivityMergerStockRate$inboundSchema` instead. */
    ActivityMergerStockRate$.inboundSchema = exports.ActivityMergerStockRate$inboundSchema;
    /** @deprecated use `ActivityMergerStockRate$outboundSchema` instead. */
    ActivityMergerStockRate$.outboundSchema = exports.ActivityMergerStockRate$outboundSchema;
})(ActivityMergerStockRate$ || (exports.ActivityMergerStockRate$ = ActivityMergerStockRate$ = {}));
/** @internal */
exports.ActivityMergerType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityMergerType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityMergerType$outboundSchema = z.union([
    z.nativeEnum(ActivityMergerType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMergerType$;
(function (ActivityMergerType$) {
    /** @deprecated use `ActivityMergerType$inboundSchema` instead. */
    ActivityMergerType$.inboundSchema = exports.ActivityMergerType$inboundSchema;
    /** @deprecated use `ActivityMergerType$outboundSchema` instead. */
    ActivityMergerType$.outboundSchema = exports.ActivityMergerType$outboundSchema;
})(ActivityMergerType$ || (exports.ActivityMergerType$ = ActivityMergerType$ = {}));
/** @internal */
exports.ActivityMerger$inboundSchema = z.object({
    action: exports.ActivityMergerAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.ActivityMergerCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityMergerCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.ActivityMergerEffectiveDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityMergerQuantity$inboundSchema))
        .optional(),
    stock_rate: z.nullable(z.lazy(() => exports.ActivityMergerStockRate$inboundSchema))
        .optional(),
    type: exports.ActivityMergerType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.ActivityMerger$outboundSchema = z.object({
    action: exports.ActivityMergerAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.ActivityMergerCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityMergerCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.ActivityMergerEffectiveDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityMergerQuantity$outboundSchema))
        .optional(),
    stockRate: z.nullable(z.lazy(() => exports.ActivityMergerStockRate$outboundSchema))
        .optional(),
    type: exports.ActivityMergerType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityMerger$;
(function (ActivityMerger$) {
    /** @deprecated use `ActivityMerger$inboundSchema` instead. */
    ActivityMerger$.inboundSchema = exports.ActivityMerger$inboundSchema;
    /** @deprecated use `ActivityMerger$outboundSchema` instead. */
    ActivityMerger$.outboundSchema = exports.ActivityMerger$outboundSchema;
})(ActivityMerger$ || (exports.ActivityMerger$ = ActivityMerger$ = {}));
/** @internal */
exports.ActivityNameChangeAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityNameChangeAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityNameChangeAction$outboundSchema = z.union([
    z.nativeEnum(ActivityNameChangeAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityNameChangeAction$;
(function (ActivityNameChangeAction$) {
    /** @deprecated use `ActivityNameChangeAction$inboundSchema` instead. */
    ActivityNameChangeAction$.inboundSchema = exports.ActivityNameChangeAction$inboundSchema;
    /** @deprecated use `ActivityNameChangeAction$outboundSchema` instead. */
    ActivityNameChangeAction$.outboundSchema = exports.ActivityNameChangeAction$outboundSchema;
})(ActivityNameChangeAction$ || (exports.ActivityNameChangeAction$ = ActivityNameChangeAction$ = {}));
/** @internal */
exports.ActivityNameChangeCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityNameChangeCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityNameChangeCorporateActionGeneralInformation$;
(function (ActivityNameChangeCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityNameChangeCorporateActionGeneralInformation$.inboundSchema = exports.ActivityNameChangeCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityNameChangeCorporateActionGeneralInformation$.outboundSchema = exports.ActivityNameChangeCorporateActionGeneralInformation$outboundSchema;
})(ActivityNameChangeCorporateActionGeneralInformation$ || (exports.ActivityNameChangeCorporateActionGeneralInformation$ = ActivityNameChangeCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityNameChangeEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityNameChangeEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityNameChangeEffectiveDate$;
(function (ActivityNameChangeEffectiveDate$) {
    /** @deprecated use `ActivityNameChangeEffectiveDate$inboundSchema` instead. */
    ActivityNameChangeEffectiveDate$.inboundSchema = exports.ActivityNameChangeEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityNameChangeEffectiveDate$outboundSchema` instead. */
    ActivityNameChangeEffectiveDate$.outboundSchema = exports.ActivityNameChangeEffectiveDate$outboundSchema;
})(ActivityNameChangeEffectiveDate$ || (exports.ActivityNameChangeEffectiveDate$ = ActivityNameChangeEffectiveDate$ = {}));
/** @internal */
exports.ActivityNameChangeQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityNameChangeQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityNameChangeQuantity$;
(function (ActivityNameChangeQuantity$) {
    /** @deprecated use `ActivityNameChangeQuantity$inboundSchema` instead. */
    ActivityNameChangeQuantity$.inboundSchema = exports.ActivityNameChangeQuantity$inboundSchema;
    /** @deprecated use `ActivityNameChangeQuantity$outboundSchema` instead. */
    ActivityNameChangeQuantity$.outboundSchema = exports.ActivityNameChangeQuantity$outboundSchema;
})(ActivityNameChangeQuantity$ || (exports.ActivityNameChangeQuantity$ = ActivityNameChangeQuantity$ = {}));
/** @internal */
exports.ActivityNameChange$inboundSchema = z.object({
    action: exports.ActivityNameChangeAction$inboundSchema.optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityNameChangeCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.ActivityNameChangeEffectiveDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityNameChangeQuantity$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
    });
});
/** @internal */
exports.ActivityNameChange$outboundSchema = z.object({
    action: exports.ActivityNameChangeAction$outboundSchema.optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityNameChangeCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.ActivityNameChangeEffectiveDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityNameChangeQuantity$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityNameChange$;
(function (ActivityNameChange$) {
    /** @deprecated use `ActivityNameChange$inboundSchema` instead. */
    ActivityNameChange$.inboundSchema = exports.ActivityNameChange$inboundSchema;
    /** @deprecated use `ActivityNameChange$outboundSchema` instead. */
    ActivityNameChange$.outboundSchema = exports.ActivityNameChange$outboundSchema;
})(ActivityNameChange$ || (exports.ActivityNameChange$ = ActivityNameChange$ = {}));
/** @internal */
exports.ActivityNetAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityNetAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityNetAmount$;
(function (ActivityNetAmount$) {
    /** @deprecated use `ActivityNetAmount$inboundSchema` instead. */
    ActivityNetAmount$.inboundSchema = exports.ActivityNetAmount$inboundSchema;
    /** @deprecated use `ActivityNetAmount$outboundSchema` instead. */
    ActivityNetAmount$.outboundSchema = exports.ActivityNetAmount$outboundSchema;
})(ActivityNetAmount$ || (exports.ActivityNetAmount$ = ActivityNetAmount$ = {}));
/** @internal */
exports.NextActivityProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.NextActivityProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NextActivityProcessDate$;
(function (NextActivityProcessDate$) {
    /** @deprecated use `NextActivityProcessDate$inboundSchema` instead. */
    NextActivityProcessDate$.inboundSchema = exports.NextActivityProcessDate$inboundSchema;
    /** @deprecated use `NextActivityProcessDate$outboundSchema` instead. */
    NextActivityProcessDate$.outboundSchema = exports.NextActivityProcessDate$outboundSchema;
})(NextActivityProcessDate$ || (exports.NextActivityProcessDate$ = NextActivityProcessDate$ = {}));
/** @internal */
exports.None$inboundSchema = z
    .object({});
/** @internal */
exports.None$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var None$;
(function (None$) {
    /** @deprecated use `None$inboundSchema` instead. */
    None$.inboundSchema = exports.None$inboundSchema;
    /** @deprecated use `None$outboundSchema` instead. */
    None$.outboundSchema = exports.None$outboundSchema;
})(None$ || (exports.None$ = None$ = {}));
/** @internal */
exports.ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPaymentInKindCorporateActionGeneralInformation$;
(function (ActivityPaymentInKindCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityPaymentInKindCorporateActionGeneralInformation$.inboundSchema = exports.ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityPaymentInKindCorporateActionGeneralInformation$.outboundSchema = exports.ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema;
})(ActivityPaymentInKindCorporateActionGeneralInformation$ || (exports.ActivityPaymentInKindCorporateActionGeneralInformation$ = ActivityPaymentInKindCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityPaymentInKindPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityPaymentInKindPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPaymentInKindPaymentDate$;
(function (ActivityPaymentInKindPaymentDate$) {
    /** @deprecated use `ActivityPaymentInKindPaymentDate$inboundSchema` instead. */
    ActivityPaymentInKindPaymentDate$.inboundSchema = exports.ActivityPaymentInKindPaymentDate$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindPaymentDate$outboundSchema` instead. */
    ActivityPaymentInKindPaymentDate$.outboundSchema = exports.ActivityPaymentInKindPaymentDate$outboundSchema;
})(ActivityPaymentInKindPaymentDate$ || (exports.ActivityPaymentInKindPaymentDate$ = ActivityPaymentInKindPaymentDate$ = {}));
/** @internal */
exports.ActivityPaymentInKindRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityPaymentInKindRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPaymentInKindRecordDate$;
(function (ActivityPaymentInKindRecordDate$) {
    /** @deprecated use `ActivityPaymentInKindRecordDate$inboundSchema` instead. */
    ActivityPaymentInKindRecordDate$.inboundSchema = exports.ActivityPaymentInKindRecordDate$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindRecordDate$outboundSchema` instead. */
    ActivityPaymentInKindRecordDate$.outboundSchema = exports.ActivityPaymentInKindRecordDate$outboundSchema;
})(ActivityPaymentInKindRecordDate$ || (exports.ActivityPaymentInKindRecordDate$ = ActivityPaymentInKindRecordDate$ = {}));
/** @internal */
exports.ActivityPaymentInKindSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityPaymentInKindSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPaymentInKindSettled$;
(function (ActivityPaymentInKindSettled$) {
    /** @deprecated use `ActivityPaymentInKindSettled$inboundSchema` instead. */
    ActivityPaymentInKindSettled$.inboundSchema = exports.ActivityPaymentInKindSettled$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindSettled$outboundSchema` instead. */
    ActivityPaymentInKindSettled$.outboundSchema = exports.ActivityPaymentInKindSettled$outboundSchema;
})(ActivityPaymentInKindSettled$ || (exports.ActivityPaymentInKindSettled$ = ActivityPaymentInKindSettled$ = {}));
/** @internal */
exports.ActivityPaymentInKindStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityPaymentInKindStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPaymentInKindStockRate$;
(function (ActivityPaymentInKindStockRate$) {
    /** @deprecated use `ActivityPaymentInKindStockRate$inboundSchema` instead. */
    ActivityPaymentInKindStockRate$.inboundSchema = exports.ActivityPaymentInKindStockRate$inboundSchema;
    /** @deprecated use `ActivityPaymentInKindStockRate$outboundSchema` instead. */
    ActivityPaymentInKindStockRate$.outboundSchema = exports.ActivityPaymentInKindStockRate$outboundSchema;
})(ActivityPaymentInKindStockRate$ || (exports.ActivityPaymentInKindStockRate$ = ActivityPaymentInKindStockRate$ = {}));
/** @internal */
exports.ActivityPaymentInKind$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityPaymentInKindPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivityPaymentInKindRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivityPaymentInKindSettled$inboundSchema))
        .optional(),
    stock_rate: z.nullable(z.lazy(() => exports.ActivityPaymentInKindStockRate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.ActivityPaymentInKind$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityPaymentInKindPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivityPaymentInKindRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivityPaymentInKindSettled$outboundSchema))
        .optional(),
    stockRate: z.nullable(z.lazy(() => exports.ActivityPaymentInKindStockRate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPaymentInKind$;
(function (ActivityPaymentInKind$) {
    /** @deprecated use `ActivityPaymentInKind$inboundSchema` instead. */
    ActivityPaymentInKind$.inboundSchema = exports.ActivityPaymentInKind$inboundSchema;
    /** @deprecated use `ActivityPaymentInKind$outboundSchema` instead. */
    ActivityPaymentInKind$.outboundSchema = exports.ActivityPaymentInKind$outboundSchema;
})(ActivityPaymentInKind$ || (exports.ActivityPaymentInKind$ = ActivityPaymentInKind$ = {}));
/** @internal */
exports.PreviousProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.PreviousProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PreviousProcessDate$;
(function (PreviousProcessDate$) {
    /** @deprecated use `PreviousProcessDate$inboundSchema` instead. */
    PreviousProcessDate$.inboundSchema = exports.PreviousProcessDate$inboundSchema;
    /** @deprecated use `PreviousProcessDate$outboundSchema` instead. */
    PreviousProcessDate$.outboundSchema = exports.PreviousProcessDate$outboundSchema;
})(PreviousProcessDate$ || (exports.PreviousProcessDate$ = PreviousProcessDate$ = {}));
/** @internal */
exports.ActivityPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPrice$;
(function (ActivityPrice$) {
    /** @deprecated use `ActivityPrice$inboundSchema` instead. */
    ActivityPrice$.inboundSchema = exports.ActivityPrice$inboundSchema;
    /** @deprecated use `ActivityPrice$outboundSchema` instead. */
    ActivityPrice$.outboundSchema = exports.ActivityPrice$outboundSchema;
})(ActivityPrice$ || (exports.ActivityPrice$ = ActivityPrice$ = {}));
/** @internal */
exports.ActivityProcessDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityProcessDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityProcessDate$;
(function (ActivityProcessDate$) {
    /** @deprecated use `ActivityProcessDate$inboundSchema` instead. */
    ActivityProcessDate$.inboundSchema = exports.ActivityProcessDate$inboundSchema;
    /** @deprecated use `ActivityProcessDate$outboundSchema` instead. */
    ActivityProcessDate$.outboundSchema = exports.ActivityProcessDate$outboundSchema;
})(ActivityProcessDate$ || (exports.ActivityProcessDate$ = ActivityProcessDate$ = {}));
/** @internal */
exports.ActivityQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityQuantity$;
(function (ActivityQuantity$) {
    /** @deprecated use `ActivityQuantity$inboundSchema` instead. */
    ActivityQuantity$.inboundSchema = exports.ActivityQuantity$inboundSchema;
    /** @deprecated use `ActivityQuantity$outboundSchema` instead. */
    ActivityQuantity$.outboundSchema = exports.ActivityQuantity$outboundSchema;
})(ActivityQuantity$ || (exports.ActivityQuantity$ = ActivityQuantity$ = {}));
/** @internal */
exports.ActivityRedemptionFullAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityRedemptionFullAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityRedemptionFullAction$outboundSchema = z.union([
    z.nativeEnum(ActivityRedemptionFullAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionFullAction$;
(function (ActivityRedemptionFullAction$) {
    /** @deprecated use `ActivityRedemptionFullAction$inboundSchema` instead. */
    ActivityRedemptionFullAction$.inboundSchema = exports.ActivityRedemptionFullAction$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullAction$outboundSchema` instead. */
    ActivityRedemptionFullAction$.outboundSchema = exports.ActivityRedemptionFullAction$outboundSchema;
})(ActivityRedemptionFullAction$ || (exports.ActivityRedemptionFullAction$ = ActivityRedemptionFullAction$ = {}));
/** @internal */
exports.ActivityRedemptionFullCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityRedemptionFullCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionFullCashRate$;
(function (ActivityRedemptionFullCashRate$) {
    /** @deprecated use `ActivityRedemptionFullCashRate$inboundSchema` instead. */
    ActivityRedemptionFullCashRate$.inboundSchema = exports.ActivityRedemptionFullCashRate$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullCashRate$outboundSchema` instead. */
    ActivityRedemptionFullCashRate$.outboundSchema = exports.ActivityRedemptionFullCashRate$outboundSchema;
})(ActivityRedemptionFullCashRate$ || (exports.ActivityRedemptionFullCashRate$ = ActivityRedemptionFullCashRate$ = {}));
/** @internal */
exports.ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionFullCorporateActionGeneralInformation$;
(function (ActivityRedemptionFullCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityRedemptionFullCorporateActionGeneralInformation$.inboundSchema = exports.ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityRedemptionFullCorporateActionGeneralInformation$.outboundSchema = exports.ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema;
})(ActivityRedemptionFullCorporateActionGeneralInformation$ || (exports.ActivityRedemptionFullCorporateActionGeneralInformation$ = ActivityRedemptionFullCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityRedemptionFullPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityRedemptionFullPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionFullPaymentDate$;
(function (ActivityRedemptionFullPaymentDate$) {
    /** @deprecated use `ActivityRedemptionFullPaymentDate$inboundSchema` instead. */
    ActivityRedemptionFullPaymentDate$.inboundSchema = exports.ActivityRedemptionFullPaymentDate$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullPaymentDate$outboundSchema` instead. */
    ActivityRedemptionFullPaymentDate$.outboundSchema = exports.ActivityRedemptionFullPaymentDate$outboundSchema;
})(ActivityRedemptionFullPaymentDate$ || (exports.ActivityRedemptionFullPaymentDate$ = ActivityRedemptionFullPaymentDate$ = {}));
/** @internal */
exports.ActivityRedemptionFullQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityRedemptionFullQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionFullQuantity$;
(function (ActivityRedemptionFullQuantity$) {
    /** @deprecated use `ActivityRedemptionFullQuantity$inboundSchema` instead. */
    ActivityRedemptionFullQuantity$.inboundSchema = exports.ActivityRedemptionFullQuantity$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullQuantity$outboundSchema` instead. */
    ActivityRedemptionFullQuantity$.outboundSchema = exports.ActivityRedemptionFullQuantity$outboundSchema;
})(ActivityRedemptionFullQuantity$ || (exports.ActivityRedemptionFullQuantity$ = ActivityRedemptionFullQuantity$ = {}));
/** @internal */
exports.ActivityRedemptionFullSubtype$inboundSchema = z
    .union([
    z.nativeEnum(ActivityRedemptionFullSubtype),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityRedemptionFullSubtype$outboundSchema = z.union([
    z.nativeEnum(ActivityRedemptionFullSubtype),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionFullSubtype$;
(function (ActivityRedemptionFullSubtype$) {
    /** @deprecated use `ActivityRedemptionFullSubtype$inboundSchema` instead. */
    ActivityRedemptionFullSubtype$.inboundSchema = exports.ActivityRedemptionFullSubtype$inboundSchema;
    /** @deprecated use `ActivityRedemptionFullSubtype$outboundSchema` instead. */
    ActivityRedemptionFullSubtype$.outboundSchema = exports.ActivityRedemptionFullSubtype$outboundSchema;
})(ActivityRedemptionFullSubtype$ || (exports.ActivityRedemptionFullSubtype$ = ActivityRedemptionFullSubtype$ = {}));
/** @internal */
exports.ActivityRedemptionFull$inboundSchema = z.object({
    action: exports.ActivityRedemptionFullAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.ActivityRedemptionFullCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityRedemptionFullPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityRedemptionFullQuantity$inboundSchema)).optional(),
    subtype: exports.ActivityRedemptionFullSubtype$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
exports.ActivityRedemptionFull$outboundSchema = z.object({
    action: exports.ActivityRedemptionFullAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.ActivityRedemptionFullCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityRedemptionFullPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityRedemptionFullQuantity$outboundSchema)).optional(),
    subtype: exports.ActivityRedemptionFullSubtype$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionFull$;
(function (ActivityRedemptionFull$) {
    /** @deprecated use `ActivityRedemptionFull$inboundSchema` instead. */
    ActivityRedemptionFull$.inboundSchema = exports.ActivityRedemptionFull$inboundSchema;
    /** @deprecated use `ActivityRedemptionFull$outboundSchema` instead. */
    ActivityRedemptionFull$.outboundSchema = exports.ActivityRedemptionFull$outboundSchema;
})(ActivityRedemptionFull$ || (exports.ActivityRedemptionFull$ = ActivityRedemptionFull$ = {}));
/** @internal */
exports.ActivityRedemptionPartialAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityRedemptionPartialAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityRedemptionPartialAction$outboundSchema = z.union([
    z.nativeEnum(ActivityRedemptionPartialAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionPartialAction$;
(function (ActivityRedemptionPartialAction$) {
    /** @deprecated use `ActivityRedemptionPartialAction$inboundSchema` instead. */
    ActivityRedemptionPartialAction$.inboundSchema = exports.ActivityRedemptionPartialAction$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialAction$outboundSchema` instead. */
    ActivityRedemptionPartialAction$.outboundSchema = exports.ActivityRedemptionPartialAction$outboundSchema;
})(ActivityRedemptionPartialAction$ || (exports.ActivityRedemptionPartialAction$ = ActivityRedemptionPartialAction$ = {}));
/** @internal */
exports.ActivityRedemptionPartialCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityRedemptionPartialCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionPartialCashRate$;
(function (ActivityRedemptionPartialCashRate$) {
    /** @deprecated use `ActivityRedemptionPartialCashRate$inboundSchema` instead. */
    ActivityRedemptionPartialCashRate$.inboundSchema = exports.ActivityRedemptionPartialCashRate$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialCashRate$outboundSchema` instead. */
    ActivityRedemptionPartialCashRate$.outboundSchema = exports.ActivityRedemptionPartialCashRate$outboundSchema;
})(ActivityRedemptionPartialCashRate$ || (exports.ActivityRedemptionPartialCashRate$ = ActivityRedemptionPartialCashRate$ = {}));
/** @internal */
exports.ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionPartialCorporateActionGeneralInformation$;
(function (ActivityRedemptionPartialCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityRedemptionPartialCorporateActionGeneralInformation$.inboundSchema = exports.ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityRedemptionPartialCorporateActionGeneralInformation$.outboundSchema = exports.ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema;
})(ActivityRedemptionPartialCorporateActionGeneralInformation$ || (exports.ActivityRedemptionPartialCorporateActionGeneralInformation$ = ActivityRedemptionPartialCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityRedemptionPartialPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityRedemptionPartialPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionPartialPaymentDate$;
(function (ActivityRedemptionPartialPaymentDate$) {
    /** @deprecated use `ActivityRedemptionPartialPaymentDate$inboundSchema` instead. */
    ActivityRedemptionPartialPaymentDate$.inboundSchema = exports.ActivityRedemptionPartialPaymentDate$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialPaymentDate$outboundSchema` instead. */
    ActivityRedemptionPartialPaymentDate$.outboundSchema = exports.ActivityRedemptionPartialPaymentDate$outboundSchema;
})(ActivityRedemptionPartialPaymentDate$ || (exports.ActivityRedemptionPartialPaymentDate$ = ActivityRedemptionPartialPaymentDate$ = {}));
/** @internal */
exports.ActivityRedemptionPartialQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityRedemptionPartialQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionPartialQuantity$;
(function (ActivityRedemptionPartialQuantity$) {
    /** @deprecated use `ActivityRedemptionPartialQuantity$inboundSchema` instead. */
    ActivityRedemptionPartialQuantity$.inboundSchema = exports.ActivityRedemptionPartialQuantity$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartialQuantity$outboundSchema` instead. */
    ActivityRedemptionPartialQuantity$.outboundSchema = exports.ActivityRedemptionPartialQuantity$outboundSchema;
})(ActivityRedemptionPartialQuantity$ || (exports.ActivityRedemptionPartialQuantity$ = ActivityRedemptionPartialQuantity$ = {}));
/** @internal */
exports.ActivityRedemptionPartial$inboundSchema = z.object({
    action: exports.ActivityRedemptionPartialAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.ActivityRedemptionPartialCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityRedemptionPartialPaymentDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityRedemptionPartialQuantity$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
    });
});
/** @internal */
exports.ActivityRedemptionPartial$outboundSchema = z.object({
    action: exports.ActivityRedemptionPartialAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.ActivityRedemptionPartialCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityRedemptionPartialPaymentDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityRedemptionPartialQuantity$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRedemptionPartial$;
(function (ActivityRedemptionPartial$) {
    /** @deprecated use `ActivityRedemptionPartial$inboundSchema` instead. */
    ActivityRedemptionPartial$.inboundSchema = exports.ActivityRedemptionPartial$inboundSchema;
    /** @deprecated use `ActivityRedemptionPartial$outboundSchema` instead. */
    ActivityRedemptionPartial$.outboundSchema = exports.ActivityRedemptionPartial$outboundSchema;
})(ActivityRedemptionPartial$ || (exports.ActivityRedemptionPartial$ = ActivityRedemptionPartial$ = {}));
/** @internal */
exports.ActivityReverseStockSplitAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivityReverseStockSplitAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityReverseStockSplitAction$outboundSchema = z.union([
    z.nativeEnum(ActivityReverseStockSplitAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityReverseStockSplitAction$;
(function (ActivityReverseStockSplitAction$) {
    /** @deprecated use `ActivityReverseStockSplitAction$inboundSchema` instead. */
    ActivityReverseStockSplitAction$.inboundSchema = exports.ActivityReverseStockSplitAction$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitAction$outboundSchema` instead. */
    ActivityReverseStockSplitAction$.outboundSchema = exports.ActivityReverseStockSplitAction$outboundSchema;
})(ActivityReverseStockSplitAction$ || (exports.ActivityReverseStockSplitAction$ = ActivityReverseStockSplitAction$ = {}));
/** @internal */
exports.ActivityReverseStockSplitCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityReverseStockSplitCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityReverseStockSplitCashRate$;
(function (ActivityReverseStockSplitCashRate$) {
    /** @deprecated use `ActivityReverseStockSplitCashRate$inboundSchema` instead. */
    ActivityReverseStockSplitCashRate$.inboundSchema = exports.ActivityReverseStockSplitCashRate$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitCashRate$outboundSchema` instead. */
    ActivityReverseStockSplitCashRate$.outboundSchema = exports.ActivityReverseStockSplitCashRate$outboundSchema;
})(ActivityReverseStockSplitCashRate$ || (exports.ActivityReverseStockSplitCashRate$ = ActivityReverseStockSplitCashRate$ = {}));
/** @internal */
exports.ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityReverseStockSplitCorporateActionGeneralInformation$;
(function (ActivityReverseStockSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityReverseStockSplitCorporateActionGeneralInformation$.inboundSchema = exports.ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityReverseStockSplitCorporateActionGeneralInformation$.outboundSchema = exports.ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema;
})(ActivityReverseStockSplitCorporateActionGeneralInformation$ || (exports.ActivityReverseStockSplitCorporateActionGeneralInformation$ = ActivityReverseStockSplitCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityReverseStockSplitEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityReverseStockSplitEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityReverseStockSplitEffectiveDate$;
(function (ActivityReverseStockSplitEffectiveDate$) {
    /** @deprecated use `ActivityReverseStockSplitEffectiveDate$inboundSchema` instead. */
    ActivityReverseStockSplitEffectiveDate$.inboundSchema = exports.ActivityReverseStockSplitEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitEffectiveDate$outboundSchema` instead. */
    ActivityReverseStockSplitEffectiveDate$.outboundSchema = exports.ActivityReverseStockSplitEffectiveDate$outboundSchema;
})(ActivityReverseStockSplitEffectiveDate$ || (exports.ActivityReverseStockSplitEffectiveDate$ = ActivityReverseStockSplitEffectiveDate$ = {}));
/** @internal */
exports.ActivityFactorDenominator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityFactorDenominator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityFactorDenominator$;
(function (ActivityFactorDenominator$) {
    /** @deprecated use `ActivityFactorDenominator$inboundSchema` instead. */
    ActivityFactorDenominator$.inboundSchema = exports.ActivityFactorDenominator$inboundSchema;
    /** @deprecated use `ActivityFactorDenominator$outboundSchema` instead. */
    ActivityFactorDenominator$.outboundSchema = exports.ActivityFactorDenominator$outboundSchema;
})(ActivityFactorDenominator$ || (exports.ActivityFactorDenominator$ = ActivityFactorDenominator$ = {}));
/** @internal */
exports.ActivityFactorNumerator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityFactorNumerator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityFactorNumerator$;
(function (ActivityFactorNumerator$) {
    /** @deprecated use `ActivityFactorNumerator$inboundSchema` instead. */
    ActivityFactorNumerator$.inboundSchema = exports.ActivityFactorNumerator$inboundSchema;
    /** @deprecated use `ActivityFactorNumerator$outboundSchema` instead. */
    ActivityFactorNumerator$.outboundSchema = exports.ActivityFactorNumerator$outboundSchema;
})(ActivityFactorNumerator$ || (exports.ActivityFactorNumerator$ = ActivityFactorNumerator$ = {}));
/** @internal */
exports.ActivityReverseStockSplitQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityReverseStockSplitQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityReverseStockSplitQuantity$;
(function (ActivityReverseStockSplitQuantity$) {
    /** @deprecated use `ActivityReverseStockSplitQuantity$inboundSchema` instead. */
    ActivityReverseStockSplitQuantity$.inboundSchema = exports.ActivityReverseStockSplitQuantity$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplitQuantity$outboundSchema` instead. */
    ActivityReverseStockSplitQuantity$.outboundSchema = exports.ActivityReverseStockSplitQuantity$outboundSchema;
})(ActivityReverseStockSplitQuantity$ || (exports.ActivityReverseStockSplitQuantity$ = ActivityReverseStockSplitQuantity$ = {}));
/** @internal */
exports.ActivityReverseStockSplit$inboundSchema = z.object({
    action: exports.ActivityReverseStockSplitAction$inboundSchema.optional(),
    cash_rate: z.nullable(z.lazy(() => exports.ActivityReverseStockSplitCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.ActivityReverseStockSplitEffectiveDate$inboundSchema)).optional(),
    factor_denominator: z.nullable(z.lazy(() => exports.ActivityFactorDenominator$inboundSchema)).optional(),
    factor_numerator: z.nullable(z.lazy(() => exports.ActivityFactorNumerator$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityReverseStockSplitQuantity$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "factor_denominator": "factorDenominator",
        "factor_numerator": "factorNumerator",
    });
});
/** @internal */
exports.ActivityReverseStockSplit$outboundSchema = z.object({
    action: exports.ActivityReverseStockSplitAction$outboundSchema.optional(),
    cashRate: z.nullable(z.lazy(() => exports.ActivityReverseStockSplitCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.ActivityReverseStockSplitEffectiveDate$outboundSchema)).optional(),
    factorDenominator: z.nullable(z.lazy(() => exports.ActivityFactorDenominator$outboundSchema)).optional(),
    factorNumerator: z.nullable(z.lazy(() => exports.ActivityFactorNumerator$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityReverseStockSplitQuantity$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        factorDenominator: "factor_denominator",
        factorNumerator: "factor_numerator",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityReverseStockSplit$;
(function (ActivityReverseStockSplit$) {
    /** @deprecated use `ActivityReverseStockSplit$inboundSchema` instead. */
    ActivityReverseStockSplit$.inboundSchema = exports.ActivityReverseStockSplit$inboundSchema;
    /** @deprecated use `ActivityReverseStockSplit$outboundSchema` instead. */
    ActivityReverseStockSplit$.outboundSchema = exports.ActivityReverseStockSplit$outboundSchema;
})(ActivityReverseStockSplit$ || (exports.ActivityReverseStockSplit$ = ActivityReverseStockSplit$ = {}));
/** @internal */
exports.ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRightsDistributionCorporateActionGeneralInformation$;
(function (ActivityRightsDistributionCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityRightsDistributionCorporateActionGeneralInformation$.inboundSchema = exports.ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityRightsDistributionCorporateActionGeneralInformation$.outboundSchema = exports.ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema;
})(ActivityRightsDistributionCorporateActionGeneralInformation$ || (exports.ActivityRightsDistributionCorporateActionGeneralInformation$ = ActivityRightsDistributionCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityRightsDistributionPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityRightsDistributionPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRightsDistributionPaymentDate$;
(function (ActivityRightsDistributionPaymentDate$) {
    /** @deprecated use `ActivityRightsDistributionPaymentDate$inboundSchema` instead. */
    ActivityRightsDistributionPaymentDate$.inboundSchema = exports.ActivityRightsDistributionPaymentDate$inboundSchema;
    /** @deprecated use `ActivityRightsDistributionPaymentDate$outboundSchema` instead. */
    ActivityRightsDistributionPaymentDate$.outboundSchema = exports.ActivityRightsDistributionPaymentDate$outboundSchema;
})(ActivityRightsDistributionPaymentDate$ || (exports.ActivityRightsDistributionPaymentDate$ = ActivityRightsDistributionPaymentDate$ = {}));
/** @internal */
exports.ActivityRightsDistributionRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityRightsDistributionRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRightsDistributionRecordDate$;
(function (ActivityRightsDistributionRecordDate$) {
    /** @deprecated use `ActivityRightsDistributionRecordDate$inboundSchema` instead. */
    ActivityRightsDistributionRecordDate$.inboundSchema = exports.ActivityRightsDistributionRecordDate$inboundSchema;
    /** @deprecated use `ActivityRightsDistributionRecordDate$outboundSchema` instead. */
    ActivityRightsDistributionRecordDate$.outboundSchema = exports.ActivityRightsDistributionRecordDate$outboundSchema;
})(ActivityRightsDistributionRecordDate$ || (exports.ActivityRightsDistributionRecordDate$ = ActivityRightsDistributionRecordDate$ = {}));
/** @internal */
exports.ActivityRightsDistributionSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityRightsDistributionSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRightsDistributionSettled$;
(function (ActivityRightsDistributionSettled$) {
    /** @deprecated use `ActivityRightsDistributionSettled$inboundSchema` instead. */
    ActivityRightsDistributionSettled$.inboundSchema = exports.ActivityRightsDistributionSettled$inboundSchema;
    /** @deprecated use `ActivityRightsDistributionSettled$outboundSchema` instead. */
    ActivityRightsDistributionSettled$.outboundSchema = exports.ActivityRightsDistributionSettled$outboundSchema;
})(ActivityRightsDistributionSettled$ || (exports.ActivityRightsDistributionSettled$ = ActivityRightsDistributionSettled$ = {}));
/** @internal */
exports.ActivityRightsDistribution$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityRightsDistributionPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivityRightsDistributionRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivityRightsDistributionSettled$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.ActivityRightsDistribution$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityRightsDistributionPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivityRightsDistributionRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivityRightsDistributionSettled$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRightsDistribution$;
(function (ActivityRightsDistribution$) {
    /** @deprecated use `ActivityRightsDistribution$inboundSchema` instead. */
    ActivityRightsDistribution$.inboundSchema = exports.ActivityRightsDistribution$inboundSchema;
    /** @deprecated use `ActivityRightsDistribution$outboundSchema` instead. */
    ActivityRightsDistribution$.outboundSchema = exports.ActivityRightsDistribution$outboundSchema;
})(ActivityRightsDistribution$ || (exports.ActivityRightsDistribution$ = ActivityRightsDistribution$ = {}));
/** @internal */
exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRightsSubscriptionCorporateActionGeneralInformation$;
(function (ActivityRightsSubscriptionCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityRightsSubscriptionCorporateActionGeneralInformation$.inboundSchema = exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityRightsSubscriptionCorporateActionGeneralInformation$.outboundSchema = exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema;
})(ActivityRightsSubscriptionCorporateActionGeneralInformation$ || (exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$ = ActivityRightsSubscriptionCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityRightsSubscription$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
exports.ActivityRightsSubscription$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRightsSubscription$;
(function (ActivityRightsSubscription$) {
    /** @deprecated use `ActivityRightsSubscription$inboundSchema` instead. */
    ActivityRightsSubscription$.inboundSchema = exports.ActivityRightsSubscription$inboundSchema;
    /** @deprecated use `ActivityRightsSubscription$outboundSchema` instead. */
    ActivityRightsSubscription$.outboundSchema = exports.ActivityRightsSubscription$outboundSchema;
})(ActivityRightsSubscription$ || (exports.ActivityRightsSubscription$ = ActivityRightsSubscription$ = {}));
/** @internal */
exports.ActivityRoundingAdjustment$inboundSchema = z.object({
    rounding_reason: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "rounding_reason": "roundingReason",
    });
});
/** @internal */
exports.ActivityRoundingAdjustment$outboundSchema = z.object({
    roundingReason: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        roundingReason: "rounding_reason",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRoundingAdjustment$;
(function (ActivityRoundingAdjustment$) {
    /** @deprecated use `ActivityRoundingAdjustment$inboundSchema` instead. */
    ActivityRoundingAdjustment$.inboundSchema = exports.ActivityRoundingAdjustment$inboundSchema;
    /** @deprecated use `ActivityRoundingAdjustment$outboundSchema` instead. */
    ActivityRoundingAdjustment$.outboundSchema = exports.ActivityRoundingAdjustment$outboundSchema;
})(ActivityRoundingAdjustment$ || (exports.ActivityRoundingAdjustment$ = ActivityRoundingAdjustment$ = {}));
/** @internal */
exports.RoundingAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.RoundingAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RoundingAmount$;
(function (RoundingAmount$) {
    /** @deprecated use `RoundingAmount$inboundSchema` instead. */
    RoundingAmount$.inboundSchema = exports.RoundingAmount$inboundSchema;
    /** @deprecated use `RoundingAmount$outboundSchema` instead. */
    RoundingAmount$.outboundSchema = exports.RoundingAmount$outboundSchema;
})(RoundingAmount$ || (exports.RoundingAmount$ = RoundingAmount$ = {}));
/** @internal */
exports.ActivitySaleOfRightsCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivitySaleOfRightsCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySaleOfRightsCashRate$;
(function (ActivitySaleOfRightsCashRate$) {
    /** @deprecated use `ActivitySaleOfRightsCashRate$inboundSchema` instead. */
    ActivitySaleOfRightsCashRate$.inboundSchema = exports.ActivitySaleOfRightsCashRate$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsCashRate$outboundSchema` instead. */
    ActivitySaleOfRightsCashRate$.outboundSchema = exports.ActivitySaleOfRightsCashRate$outboundSchema;
})(ActivitySaleOfRightsCashRate$ || (exports.ActivitySaleOfRightsCashRate$ = ActivitySaleOfRightsCashRate$ = {}));
/** @internal */
exports.ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySaleOfRightsCorporateActionGeneralInformation$;
(function (ActivitySaleOfRightsCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivitySaleOfRightsCorporateActionGeneralInformation$.inboundSchema = exports.ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivitySaleOfRightsCorporateActionGeneralInformation$.outboundSchema = exports.ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema;
})(ActivitySaleOfRightsCorporateActionGeneralInformation$ || (exports.ActivitySaleOfRightsCorporateActionGeneralInformation$ = ActivitySaleOfRightsCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivitySaleOfRightsPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivitySaleOfRightsPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySaleOfRightsPaymentDate$;
(function (ActivitySaleOfRightsPaymentDate$) {
    /** @deprecated use `ActivitySaleOfRightsPaymentDate$inboundSchema` instead. */
    ActivitySaleOfRightsPaymentDate$.inboundSchema = exports.ActivitySaleOfRightsPaymentDate$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsPaymentDate$outboundSchema` instead. */
    ActivitySaleOfRightsPaymentDate$.outboundSchema = exports.ActivitySaleOfRightsPaymentDate$outboundSchema;
})(ActivitySaleOfRightsPaymentDate$ || (exports.ActivitySaleOfRightsPaymentDate$ = ActivitySaleOfRightsPaymentDate$ = {}));
/** @internal */
exports.ActivitySaleOfRightsRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivitySaleOfRightsRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySaleOfRightsRecordDate$;
(function (ActivitySaleOfRightsRecordDate$) {
    /** @deprecated use `ActivitySaleOfRightsRecordDate$inboundSchema` instead. */
    ActivitySaleOfRightsRecordDate$.inboundSchema = exports.ActivitySaleOfRightsRecordDate$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsRecordDate$outboundSchema` instead. */
    ActivitySaleOfRightsRecordDate$.outboundSchema = exports.ActivitySaleOfRightsRecordDate$outboundSchema;
})(ActivitySaleOfRightsRecordDate$ || (exports.ActivitySaleOfRightsRecordDate$ = ActivitySaleOfRightsRecordDate$ = {}));
/** @internal */
exports.ActivitySaleOfRightsSettled$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivitySaleOfRightsSettled$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySaleOfRightsSettled$;
(function (ActivitySaleOfRightsSettled$) {
    /** @deprecated use `ActivitySaleOfRightsSettled$inboundSchema` instead. */
    ActivitySaleOfRightsSettled$.inboundSchema = exports.ActivitySaleOfRightsSettled$inboundSchema;
    /** @deprecated use `ActivitySaleOfRightsSettled$outboundSchema` instead. */
    ActivitySaleOfRightsSettled$.outboundSchema = exports.ActivitySaleOfRightsSettled$outboundSchema;
})(ActivitySaleOfRightsSettled$ || (exports.ActivitySaleOfRightsSettled$ = ActivitySaleOfRightsSettled$ = {}));
/** @internal */
exports.ActivitySaleOfRights$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsCashRate$inboundSchema)).optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsPaymentDate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsRecordDate$inboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsSettled$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "payment_date": "paymentDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.ActivitySaleOfRights$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsCashRate$outboundSchema)).optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsPaymentDate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsRecordDate$outboundSchema)).optional(),
    settled: z.nullable(z.lazy(() => exports.ActivitySaleOfRightsSettled$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
        paymentDate: "payment_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySaleOfRights$;
(function (ActivitySaleOfRights$) {
    /** @deprecated use `ActivitySaleOfRights$inboundSchema` instead. */
    ActivitySaleOfRights$.inboundSchema = exports.ActivitySaleOfRights$inboundSchema;
    /** @deprecated use `ActivitySaleOfRights$outboundSchema` instead. */
    ActivitySaleOfRights$.outboundSchema = exports.ActivitySaleOfRights$outboundSchema;
})(ActivitySaleOfRights$ || (exports.ActivitySaleOfRights$ = ActivitySaleOfRights$ = {}));
/** @internal */
exports.ActivitySettleDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivitySettleDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySettleDate$;
(function (ActivitySettleDate$) {
    /** @deprecated use `ActivitySettleDate$inboundSchema` instead. */
    ActivitySettleDate$.inboundSchema = exports.ActivitySettleDate$inboundSchema;
    /** @deprecated use `ActivitySettleDate$outboundSchema` instead. */
    ActivitySettleDate$.outboundSchema = exports.ActivitySettleDate$outboundSchema;
})(ActivitySettleDate$ || (exports.ActivitySettleDate$ = ActivitySettleDate$ = {}));
/** @internal */
exports.ActivitySide$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivitySide$outboundSchema = z.union([
    z.nativeEnum(ActivitySide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySide$;
(function (ActivitySide$) {
    /** @deprecated use `ActivitySide$inboundSchema` instead. */
    ActivitySide$.inboundSchema = exports.ActivitySide$inboundSchema;
    /** @deprecated use `ActivitySide$outboundSchema` instead. */
    ActivitySide$.outboundSchema = exports.ActivitySide$outboundSchema;
})(ActivitySide$ || (exports.ActivitySide$ = ActivitySide$ = {}));
/** @internal */
exports.ActivitySpinoffCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivitySpinoffCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySpinoffCorporateActionGeneralInformation$;
(function (ActivitySpinoffCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivitySpinoffCorporateActionGeneralInformation$.inboundSchema = exports.ActivitySpinoffCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivitySpinoffCorporateActionGeneralInformation$.outboundSchema = exports.ActivitySpinoffCorporateActionGeneralInformation$outboundSchema;
})(ActivitySpinoffCorporateActionGeneralInformation$ || (exports.ActivitySpinoffCorporateActionGeneralInformation$ = ActivitySpinoffCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPayDate$;
(function (ActivityPayDate$) {
    /** @deprecated use `ActivityPayDate$inboundSchema` instead. */
    ActivityPayDate$.inboundSchema = exports.ActivityPayDate$inboundSchema;
    /** @deprecated use `ActivityPayDate$outboundSchema` instead. */
    ActivityPayDate$.outboundSchema = exports.ActivityPayDate$outboundSchema;
})(ActivityPayDate$ || (exports.ActivityPayDate$ = ActivityPayDate$ = {}));
/** @internal */
exports.ActivitySpinoffQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivitySpinoffQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySpinoffQuantity$;
(function (ActivitySpinoffQuantity$) {
    /** @deprecated use `ActivitySpinoffQuantity$inboundSchema` instead. */
    ActivitySpinoffQuantity$.inboundSchema = exports.ActivitySpinoffQuantity$inboundSchema;
    /** @deprecated use `ActivitySpinoffQuantity$outboundSchema` instead. */
    ActivitySpinoffQuantity$.outboundSchema = exports.ActivitySpinoffQuantity$outboundSchema;
})(ActivitySpinoffQuantity$ || (exports.ActivitySpinoffQuantity$ = ActivitySpinoffQuantity$ = {}));
/** @internal */
exports.ActivitySpinoffRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivitySpinoffRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySpinoffRecordDate$;
(function (ActivitySpinoffRecordDate$) {
    /** @deprecated use `ActivitySpinoffRecordDate$inboundSchema` instead. */
    ActivitySpinoffRecordDate$.inboundSchema = exports.ActivitySpinoffRecordDate$inboundSchema;
    /** @deprecated use `ActivitySpinoffRecordDate$outboundSchema` instead. */
    ActivitySpinoffRecordDate$.outboundSchema = exports.ActivitySpinoffRecordDate$outboundSchema;
})(ActivitySpinoffRecordDate$ || (exports.ActivitySpinoffRecordDate$ = ActivitySpinoffRecordDate$ = {}));
/** @internal */
exports.ActivitySpinoff$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivitySpinoffCorporateActionGeneralInformation$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => exports.ActivityPayDate$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivitySpinoffQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivitySpinoffRecordDate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.ActivitySpinoff$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivitySpinoffCorporateActionGeneralInformation$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => exports.ActivityPayDate$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivitySpinoffQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivitySpinoffRecordDate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySpinoff$;
(function (ActivitySpinoff$) {
    /** @deprecated use `ActivitySpinoff$inboundSchema` instead. */
    ActivitySpinoff$.inboundSchema = exports.ActivitySpinoff$inboundSchema;
    /** @deprecated use `ActivitySpinoff$outboundSchema` instead. */
    ActivitySpinoff$.outboundSchema = exports.ActivitySpinoff$outboundSchema;
})(ActivitySpinoff$ || (exports.ActivitySpinoff$ = ActivitySpinoff$ = {}));
/** @internal */
exports.ActivityState$inboundSchema = z
    .union([
    z.nativeEnum(ActivityState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityState$outboundSchema = z.union([
    z.nativeEnum(ActivityState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityState$;
(function (ActivityState$) {
    /** @deprecated use `ActivityState$inboundSchema` instead. */
    ActivityState$.inboundSchema = exports.ActivityState$inboundSchema;
    /** @deprecated use `ActivityState$outboundSchema` instead. */
    ActivityState$.outboundSchema = exports.ActivityState$outboundSchema;
})(ActivityState$ || (exports.ActivityState$ = ActivityState$ = {}));
/** @internal */
exports.ActivityStockDividendCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityStockDividendCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockDividendCorporateActionGeneralInformation$;
(function (ActivityStockDividendCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityStockDividendCorporateActionGeneralInformation$.inboundSchema = exports.ActivityStockDividendCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityStockDividendCorporateActionGeneralInformation$.outboundSchema = exports.ActivityStockDividendCorporateActionGeneralInformation$outboundSchema;
})(ActivityStockDividendCorporateActionGeneralInformation$ || (exports.ActivityStockDividendCorporateActionGeneralInformation$ = ActivityStockDividendCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityStockDividendPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityStockDividendPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockDividendPayDate$;
(function (ActivityStockDividendPayDate$) {
    /** @deprecated use `ActivityStockDividendPayDate$inboundSchema` instead. */
    ActivityStockDividendPayDate$.inboundSchema = exports.ActivityStockDividendPayDate$inboundSchema;
    /** @deprecated use `ActivityStockDividendPayDate$outboundSchema` instead. */
    ActivityStockDividendPayDate$.outboundSchema = exports.ActivityStockDividendPayDate$outboundSchema;
})(ActivityStockDividendPayDate$ || (exports.ActivityStockDividendPayDate$ = ActivityStockDividendPayDate$ = {}));
/** @internal */
exports.ActivityStockDividendQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityStockDividendQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockDividendQuantity$;
(function (ActivityStockDividendQuantity$) {
    /** @deprecated use `ActivityStockDividendQuantity$inboundSchema` instead. */
    ActivityStockDividendQuantity$.inboundSchema = exports.ActivityStockDividendQuantity$inboundSchema;
    /** @deprecated use `ActivityStockDividendQuantity$outboundSchema` instead. */
    ActivityStockDividendQuantity$.outboundSchema = exports.ActivityStockDividendQuantity$outboundSchema;
})(ActivityStockDividendQuantity$ || (exports.ActivityStockDividendQuantity$ = ActivityStockDividendQuantity$ = {}));
/** @internal */
exports.ActivityRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRate$;
(function (ActivityRate$) {
    /** @deprecated use `ActivityRate$inboundSchema` instead. */
    ActivityRate$.inboundSchema = exports.ActivityRate$inboundSchema;
    /** @deprecated use `ActivityRate$outboundSchema` instead. */
    ActivityRate$.outboundSchema = exports.ActivityRate$outboundSchema;
})(ActivityRate$ || (exports.ActivityRate$ = ActivityRate$ = {}));
/** @internal */
exports.ActivityStockDividendRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityStockDividendRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockDividendRecordDate$;
(function (ActivityStockDividendRecordDate$) {
    /** @deprecated use `ActivityStockDividendRecordDate$inboundSchema` instead. */
    ActivityStockDividendRecordDate$.inboundSchema = exports.ActivityStockDividendRecordDate$inboundSchema;
    /** @deprecated use `ActivityStockDividendRecordDate$outboundSchema` instead. */
    ActivityStockDividendRecordDate$.outboundSchema = exports.ActivityStockDividendRecordDate$outboundSchema;
})(ActivityStockDividendRecordDate$ || (exports.ActivityStockDividendRecordDate$ = ActivityStockDividendRecordDate$ = {}));
/** @internal */
exports.ActivityStockDividend$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityStockDividendCorporateActionGeneralInformation$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => exports.ActivityStockDividendPayDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityStockDividendQuantity$inboundSchema)).optional(),
    rate: z.nullable(z.lazy(() => exports.ActivityRate$inboundSchema)).optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivityStockDividendRecordDate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.ActivityStockDividend$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityStockDividendCorporateActionGeneralInformation$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => exports.ActivityStockDividendPayDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityStockDividendQuantity$outboundSchema)).optional(),
    rate: z.nullable(z.lazy(() => exports.ActivityRate$outboundSchema)).optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivityStockDividendRecordDate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockDividend$;
(function (ActivityStockDividend$) {
    /** @deprecated use `ActivityStockDividend$inboundSchema` instead. */
    ActivityStockDividend$.inboundSchema = exports.ActivityStockDividend$inboundSchema;
    /** @deprecated use `ActivityStockDividend$outboundSchema` instead. */
    ActivityStockDividend$.outboundSchema = exports.ActivityStockDividend$outboundSchema;
})(ActivityStockDividend$ || (exports.ActivityStockDividend$ = ActivityStockDividend$ = {}));
/** @internal */
exports.ActivityStockSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityStockSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockSplitCorporateActionGeneralInformation$;
(function (ActivityStockSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityStockSplitCorporateActionGeneralInformation$.inboundSchema = exports.ActivityStockSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityStockSplitCorporateActionGeneralInformation$.outboundSchema = exports.ActivityStockSplitCorporateActionGeneralInformation$outboundSchema;
})(ActivityStockSplitCorporateActionGeneralInformation$ || (exports.ActivityStockSplitCorporateActionGeneralInformation$ = ActivityStockSplitCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityStockSplitFactorDenominator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityStockSplitFactorDenominator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockSplitFactorDenominator$;
(function (ActivityStockSplitFactorDenominator$) {
    /** @deprecated use `ActivityStockSplitFactorDenominator$inboundSchema` instead. */
    ActivityStockSplitFactorDenominator$.inboundSchema = exports.ActivityStockSplitFactorDenominator$inboundSchema;
    /** @deprecated use `ActivityStockSplitFactorDenominator$outboundSchema` instead. */
    ActivityStockSplitFactorDenominator$.outboundSchema = exports.ActivityStockSplitFactorDenominator$outboundSchema;
})(ActivityStockSplitFactorDenominator$ || (exports.ActivityStockSplitFactorDenominator$ = ActivityStockSplitFactorDenominator$ = {}));
/** @internal */
exports.ActivityStockSplitFactorNumerator$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityStockSplitFactorNumerator$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockSplitFactorNumerator$;
(function (ActivityStockSplitFactorNumerator$) {
    /** @deprecated use `ActivityStockSplitFactorNumerator$inboundSchema` instead. */
    ActivityStockSplitFactorNumerator$.inboundSchema = exports.ActivityStockSplitFactorNumerator$inboundSchema;
    /** @deprecated use `ActivityStockSplitFactorNumerator$outboundSchema` instead. */
    ActivityStockSplitFactorNumerator$.outboundSchema = exports.ActivityStockSplitFactorNumerator$outboundSchema;
})(ActivityStockSplitFactorNumerator$ || (exports.ActivityStockSplitFactorNumerator$ = ActivityStockSplitFactorNumerator$ = {}));
/** @internal */
exports.ActivityStockSplitPayDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityStockSplitPayDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockSplitPayDate$;
(function (ActivityStockSplitPayDate$) {
    /** @deprecated use `ActivityStockSplitPayDate$inboundSchema` instead. */
    ActivityStockSplitPayDate$.inboundSchema = exports.ActivityStockSplitPayDate$inboundSchema;
    /** @deprecated use `ActivityStockSplitPayDate$outboundSchema` instead. */
    ActivityStockSplitPayDate$.outboundSchema = exports.ActivityStockSplitPayDate$outboundSchema;
})(ActivityStockSplitPayDate$ || (exports.ActivityStockSplitPayDate$ = ActivityStockSplitPayDate$ = {}));
/** @internal */
exports.ActivityStockSplitQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityStockSplitQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockSplitQuantity$;
(function (ActivityStockSplitQuantity$) {
    /** @deprecated use `ActivityStockSplitQuantity$inboundSchema` instead. */
    ActivityStockSplitQuantity$.inboundSchema = exports.ActivityStockSplitQuantity$inboundSchema;
    /** @deprecated use `ActivityStockSplitQuantity$outboundSchema` instead. */
    ActivityStockSplitQuantity$.outboundSchema = exports.ActivityStockSplitQuantity$outboundSchema;
})(ActivityStockSplitQuantity$ || (exports.ActivityStockSplitQuantity$ = ActivityStockSplitQuantity$ = {}));
/** @internal */
exports.ActivityStockSplitRecordDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityStockSplitRecordDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockSplitRecordDate$;
(function (ActivityStockSplitRecordDate$) {
    /** @deprecated use `ActivityStockSplitRecordDate$inboundSchema` instead. */
    ActivityStockSplitRecordDate$.inboundSchema = exports.ActivityStockSplitRecordDate$inboundSchema;
    /** @deprecated use `ActivityStockSplitRecordDate$outboundSchema` instead. */
    ActivityStockSplitRecordDate$.outboundSchema = exports.ActivityStockSplitRecordDate$outboundSchema;
})(ActivityStockSplitRecordDate$ || (exports.ActivityStockSplitRecordDate$ = ActivityStockSplitRecordDate$ = {}));
/** @internal */
exports.ActivityStockSplit$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityStockSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    factor_denominator: z.nullable(z.lazy(() => exports.ActivityStockSplitFactorDenominator$inboundSchema)).optional(),
    factor_numerator: z.nullable(z.lazy(() => exports.ActivityStockSplitFactorNumerator$inboundSchema)).optional(),
    pay_date: z.nullable(z.lazy(() => exports.ActivityStockSplitPayDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityStockSplitQuantity$inboundSchema))
        .optional(),
    record_date: z.nullable(z.lazy(() => exports.ActivityStockSplitRecordDate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "factor_denominator": "factorDenominator",
        "factor_numerator": "factorNumerator",
        "pay_date": "payDate",
        "record_date": "recordDate",
    });
});
/** @internal */
exports.ActivityStockSplit$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityStockSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    factorDenominator: z.nullable(z.lazy(() => exports.ActivityStockSplitFactorDenominator$outboundSchema)).optional(),
    factorNumerator: z.nullable(z.lazy(() => exports.ActivityStockSplitFactorNumerator$outboundSchema)).optional(),
    payDate: z.nullable(z.lazy(() => exports.ActivityStockSplitPayDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityStockSplitQuantity$outboundSchema))
        .optional(),
    recordDate: z.nullable(z.lazy(() => exports.ActivityStockSplitRecordDate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        factorDenominator: "factor_denominator",
        factorNumerator: "factor_numerator",
        payDate: "pay_date",
        recordDate: "record_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityStockSplit$;
(function (ActivityStockSplit$) {
    /** @deprecated use `ActivityStockSplit$inboundSchema` instead. */
    ActivityStockSplit$.inboundSchema = exports.ActivityStockSplit$inboundSchema;
    /** @deprecated use `ActivityStockSplit$outboundSchema` instead. */
    ActivityStockSplit$.outboundSchema = exports.ActivityStockSplit$outboundSchema;
})(ActivityStockSplit$ || (exports.ActivityStockSplit$ = ActivityStockSplit$ = {}));
/** @internal */
exports.ActivitySweepAction$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySweepAction),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivitySweepAction$outboundSchema = z.union([
    z.nativeEnum(ActivitySweepAction),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySweepAction$;
(function (ActivitySweepAction$) {
    /** @deprecated use `ActivitySweepAction$inboundSchema` instead. */
    ActivitySweepAction$.inboundSchema = exports.ActivitySweepAction$inboundSchema;
    /** @deprecated use `ActivitySweepAction$outboundSchema` instead. */
    ActivitySweepAction$.outboundSchema = exports.ActivitySweepAction$outboundSchema;
})(ActivitySweepAction$ || (exports.ActivitySweepAction$ = ActivitySweepAction$ = {}));
/** @internal */
exports.ActivitySweepType$inboundSchema = z
    .union([
    z.nativeEnum(ActivitySweepType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivitySweepType$outboundSchema = z.union([
    z.nativeEnum(ActivitySweepType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySweepType$;
(function (ActivitySweepType$) {
    /** @deprecated use `ActivitySweepType$inboundSchema` instead. */
    ActivitySweepType$.inboundSchema = exports.ActivitySweepType$inboundSchema;
    /** @deprecated use `ActivitySweepType$outboundSchema` instead. */
    ActivitySweepType$.outboundSchema = exports.ActivitySweepType$outboundSchema;
})(ActivitySweepType$ || (exports.ActivitySweepType$ = ActivitySweepType$ = {}));
/** @internal */
exports.ActivitySweep$inboundSchema = z.object({
    action: exports.ActivitySweepAction$inboundSchema.optional(),
    eod_redemption: z.boolean().optional(),
    type: exports.ActivitySweepType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "eod_redemption": "eodRedemption",
    });
});
/** @internal */
exports.ActivitySweep$outboundSchema = z.object({
    action: exports.ActivitySweepAction$outboundSchema.optional(),
    eodRedemption: z.boolean().optional(),
    type: exports.ActivitySweepType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        eodRedemption: "eod_redemption",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivitySweep$;
(function (ActivitySweep$) {
    /** @deprecated use `ActivitySweep$inboundSchema` instead. */
    ActivitySweep$.inboundSchema = exports.ActivitySweep$inboundSchema;
    /** @deprecated use `ActivitySweep$outboundSchema` instead. */
    ActivitySweep$.outboundSchema = exports.ActivitySweep$outboundSchema;
})(ActivitySweep$ || (exports.ActivitySweep$ = ActivitySweep$ = {}));
/** @internal */
exports.ActivityTenderOfferCashRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityTenderOfferCashRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityTenderOfferCashRate$;
(function (ActivityTenderOfferCashRate$) {
    /** @deprecated use `ActivityTenderOfferCashRate$inboundSchema` instead. */
    ActivityTenderOfferCashRate$.inboundSchema = exports.ActivityTenderOfferCashRate$inboundSchema;
    /** @deprecated use `ActivityTenderOfferCashRate$outboundSchema` instead. */
    ActivityTenderOfferCashRate$.outboundSchema = exports.ActivityTenderOfferCashRate$outboundSchema;
})(ActivityTenderOfferCashRate$ || (exports.ActivityTenderOfferCashRate$ = ActivityTenderOfferCashRate$ = {}));
/** @internal */
exports.ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityTenderOfferCorporateActionGeneralInformation$;
(function (ActivityTenderOfferCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityTenderOfferCorporateActionGeneralInformation$.inboundSchema = exports.ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityTenderOfferCorporateActionGeneralInformation$.outboundSchema = exports.ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema;
})(ActivityTenderOfferCorporateActionGeneralInformation$ || (exports.ActivityTenderOfferCorporateActionGeneralInformation$ = ActivityTenderOfferCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityTenderOffer$inboundSchema = z.object({
    cash_rate: z.nullable(z.lazy(() => exports.ActivityTenderOfferCashRate$inboundSchema))
        .optional(),
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cash_rate": "cashRate",
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
exports.ActivityTenderOffer$outboundSchema = z.object({
    cashRate: z.nullable(z.lazy(() => exports.ActivityTenderOfferCashRate$outboundSchema))
        .optional(),
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cashRate: "cash_rate",
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityTenderOffer$;
(function (ActivityTenderOffer$) {
    /** @deprecated use `ActivityTenderOffer$inboundSchema` instead. */
    ActivityTenderOffer$.inboundSchema = exports.ActivityTenderOffer$inboundSchema;
    /** @deprecated use `ActivityTenderOffer$outboundSchema` instead. */
    ActivityTenderOffer$.outboundSchema = exports.ActivityTenderOffer$outboundSchema;
})(ActivityTenderOffer$ || (exports.ActivityTenderOffer$ = ActivityTenderOffer$ = {}));
/** @internal */
exports.ActivityBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(ActivityBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(ActivityBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityBrokerCapacity$;
(function (ActivityBrokerCapacity$) {
    /** @deprecated use `ActivityBrokerCapacity$inboundSchema` instead. */
    ActivityBrokerCapacity$.inboundSchema = exports.ActivityBrokerCapacity$inboundSchema;
    /** @deprecated use `ActivityBrokerCapacity$outboundSchema` instead. */
    ActivityBrokerCapacity$.outboundSchema = exports.ActivityBrokerCapacity$outboundSchema;
})(ActivityBrokerCapacity$ || (exports.ActivityBrokerCapacity$ = ActivityBrokerCapacity$ = {}));
/** @internal */
exports.ActivityPrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityPrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPrevailingMarketPrice$;
(function (ActivityPrevailingMarketPrice$) {
    /** @deprecated use `ActivityPrevailingMarketPrice$inboundSchema` instead. */
    ActivityPrevailingMarketPrice$.inboundSchema = exports.ActivityPrevailingMarketPrice$inboundSchema;
    /** @deprecated use `ActivityPrevailingMarketPrice$outboundSchema` instead. */
    ActivityPrevailingMarketPrice$.outboundSchema = exports.ActivityPrevailingMarketPrice$outboundSchema;
})(ActivityPrevailingMarketPrice$ || (exports.ActivityPrevailingMarketPrice$ = ActivityPrevailingMarketPrice$ = {}));
/** @internal */
exports.ActivityPriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityPriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPriceAdjustmentAmount$;
(function (ActivityPriceAdjustmentAmount$) {
    /** @deprecated use `ActivityPriceAdjustmentAmount$inboundSchema` instead. */
    ActivityPriceAdjustmentAmount$.inboundSchema = exports.ActivityPriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `ActivityPriceAdjustmentAmount$outboundSchema` instead. */
    ActivityPriceAdjustmentAmount$.outboundSchema = exports.ActivityPriceAdjustmentAmount$outboundSchema;
})(ActivityPriceAdjustmentAmount$ || (exports.ActivityPriceAdjustmentAmount$ = ActivityPriceAdjustmentAmount$ = {}));
/** @internal */
exports.ActivityPriceAdjustmentPercent$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityPriceAdjustmentPercent$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPriceAdjustmentPercent$;
(function (ActivityPriceAdjustmentPercent$) {
    /** @deprecated use `ActivityPriceAdjustmentPercent$inboundSchema` instead. */
    ActivityPriceAdjustmentPercent$.inboundSchema = exports.ActivityPriceAdjustmentPercent$inboundSchema;
    /** @deprecated use `ActivityPriceAdjustmentPercent$outboundSchema` instead. */
    ActivityPriceAdjustmentPercent$.outboundSchema = exports.ActivityPriceAdjustmentPercent$outboundSchema;
})(ActivityPriceAdjustmentPercent$ || (exports.ActivityPriceAdjustmentPercent$ = ActivityPriceAdjustmentPercent$ = {}));
/** @internal */
exports.ActivityPriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityPriceAdjustmentType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityPriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(ActivityPriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPriceAdjustmentType$;
(function (ActivityPriceAdjustmentType$) {
    /** @deprecated use `ActivityPriceAdjustmentType$inboundSchema` instead. */
    ActivityPriceAdjustmentType$.inboundSchema = exports.ActivityPriceAdjustmentType$inboundSchema;
    /** @deprecated use `ActivityPriceAdjustmentType$outboundSchema` instead. */
    ActivityPriceAdjustmentType$.outboundSchema = exports.ActivityPriceAdjustmentType$outboundSchema;
})(ActivityPriceAdjustmentType$ || (exports.ActivityPriceAdjustmentType$ = ActivityPriceAdjustmentType$ = {}));
/** @internal */
exports.ActivityPriceAdjustmentRecord$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => exports.ActivityPriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_percent: z.nullable(z.lazy(() => exports.ActivityPriceAdjustmentPercent$inboundSchema)).optional(),
    price_adjustment_type: exports.ActivityPriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
exports.ActivityPriceAdjustmentRecord$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => exports.ActivityPriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentPercent: z.nullable(z.lazy(() => exports.ActivityPriceAdjustmentPercent$outboundSchema)).optional(),
    priceAdjustmentType: exports.ActivityPriceAdjustmentType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentPercent: "price_adjustment_percent",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityPriceAdjustmentRecord$;
(function (ActivityPriceAdjustmentRecord$) {
    /** @deprecated use `ActivityPriceAdjustmentRecord$inboundSchema` instead. */
    ActivityPriceAdjustmentRecord$.inboundSchema = exports.ActivityPriceAdjustmentRecord$inboundSchema;
    /** @deprecated use `ActivityPriceAdjustmentRecord$outboundSchema` instead. */
    ActivityPriceAdjustmentRecord$.outboundSchema = exports.ActivityPriceAdjustmentRecord$outboundSchema;
})(ActivityPriceAdjustmentRecord$ || (exports.ActivityPriceAdjustmentRecord$ = ActivityPriceAdjustmentRecord$ = {}));
/** @internal */
exports.ActivityTrade$inboundSchema = z.object({
    additional_instructions: z.array(z.string()).optional(),
    alternate_order_id: z.string().optional(),
    booking_api_trade_allocation_id: z.string().optional(),
    booking_api_trade_id: z.string().optional(),
    broker: z.string().optional(),
    broker_capacity: exports.ActivityBrokerCapacity$inboundSchema.optional(),
    client_memos: z.array(z.string()).optional(),
    client_order_id: z.string().optional(),
    exchange: z.string().optional(),
    execution_id: z.string().optional(),
    execution_only: z.boolean().optional(),
    external_id: z.string().optional(),
    fund_confirmation_number: z.string().optional(),
    gateway_client_order_id: z.string().optional(),
    internal_error: z.boolean().optional(),
    is_writeoff: z.boolean().optional(),
    lots: z.array(lot_js_1.Lot$inboundSchema).optional(),
    order_id: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => exports.ActivityPrevailingMarketPrice$inboundSchema)).optional(),
    price_adjustment_record: z.nullable(z.lazy(() => exports.ActivityPriceAdjustmentRecord$inboundSchema)).optional(),
    route: z.string().optional(),
    special_instructions: z.array(z.string()).optional(),
    symbol_description: z.string().optional(),
    when_issued: z.boolean().optional(),
    yield_records: z.array(yieldrecord_js_1.YieldRecord$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "alternate_order_id": "alternateOrderId",
        "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
        "booking_api_trade_id": "bookingApiTradeId",
        "broker_capacity": "brokerCapacity",
        "client_memos": "clientMemos",
        "client_order_id": "clientOrderId",
        "execution_id": "executionId",
        "execution_only": "executionOnly",
        "external_id": "externalId",
        "fund_confirmation_number": "fundConfirmationNumber",
        "gateway_client_order_id": "gatewayClientOrderId",
        "internal_error": "internalError",
        "is_writeoff": "isWriteoff",
        "order_id": "orderId",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment_record": "priceAdjustmentRecord",
        "special_instructions": "specialInstructions",
        "symbol_description": "symbolDescription",
        "when_issued": "whenIssued",
        "yield_records": "yieldRecords",
    });
});
/** @internal */
exports.ActivityTrade$outboundSchema = z.object({
    additionalInstructions: z.array(z.string()).optional(),
    alternateOrderId: z.string().optional(),
    bookingApiTradeAllocationId: z.string().optional(),
    bookingApiTradeId: z.string().optional(),
    broker: z.string().optional(),
    brokerCapacity: exports.ActivityBrokerCapacity$outboundSchema.optional(),
    clientMemos: z.array(z.string()).optional(),
    clientOrderId: z.string().optional(),
    exchange: z.string().optional(),
    executionId: z.string().optional(),
    executionOnly: z.boolean().optional(),
    externalId: z.string().optional(),
    fundConfirmationNumber: z.string().optional(),
    gatewayClientOrderId: z.string().optional(),
    internalError: z.boolean().optional(),
    isWriteoff: z.boolean().optional(),
    lots: z.array(lot_js_1.Lot$outboundSchema).optional(),
    orderId: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => exports.ActivityPrevailingMarketPrice$outboundSchema)).optional(),
    priceAdjustmentRecord: z.nullable(z.lazy(() => exports.ActivityPriceAdjustmentRecord$outboundSchema)).optional(),
    route: z.string().optional(),
    specialInstructions: z.array(z.string()).optional(),
    symbolDescription: z.string().optional(),
    whenIssued: z.boolean().optional(),
    yieldRecords: z.array(yieldrecord_js_1.YieldRecord$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        alternateOrderId: "alternate_order_id",
        bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
        bookingApiTradeId: "booking_api_trade_id",
        brokerCapacity: "broker_capacity",
        clientMemos: "client_memos",
        clientOrderId: "client_order_id",
        executionId: "execution_id",
        executionOnly: "execution_only",
        externalId: "external_id",
        fundConfirmationNumber: "fund_confirmation_number",
        gatewayClientOrderId: "gateway_client_order_id",
        internalError: "internal_error",
        isWriteoff: "is_writeoff",
        orderId: "order_id",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustmentRecord: "price_adjustment_record",
        specialInstructions: "special_instructions",
        symbolDescription: "symbol_description",
        whenIssued: "when_issued",
        yieldRecords: "yield_records",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityTrade$;
(function (ActivityTrade$) {
    /** @deprecated use `ActivityTrade$inboundSchema` instead. */
    ActivityTrade$.inboundSchema = exports.ActivityTrade$inboundSchema;
    /** @deprecated use `ActivityTrade$outboundSchema` instead. */
    ActivityTrade$.outboundSchema = exports.ActivityTrade$outboundSchema;
})(ActivityTrade$ || (exports.ActivityTrade$ = ActivityTrade$ = {}));
/** @internal */
exports.ActivityTransferType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityTransferType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityTransferType$outboundSchema = z.union([
    z.nativeEnum(ActivityTransferType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityTransferType$;
(function (ActivityTransferType$) {
    /** @deprecated use `ActivityTransferType$inboundSchema` instead. */
    ActivityTransferType$.inboundSchema = exports.ActivityTransferType$inboundSchema;
    /** @deprecated use `ActivityTransferType$outboundSchema` instead. */
    ActivityTransferType$.outboundSchema = exports.ActivityTransferType$outboundSchema;
})(ActivityTransferType$ || (exports.ActivityTransferType$ = ActivityTransferType$ = {}));
/** @internal */
exports.ActivityTransfer$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    client_brokerage: z.string().optional(),
    transfer_type: exports.ActivityTransferType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "client_brokerage": "clientBrokerage",
        "transfer_type": "transferType",
    });
});
/** @internal */
exports.ActivityTransfer$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    clientBrokerage: z.string().optional(),
    transferType: exports.ActivityTransferType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        clientBrokerage: "client_brokerage",
        transferType: "transfer_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityTransfer$;
(function (ActivityTransfer$) {
    /** @deprecated use `ActivityTransfer$inboundSchema` instead. */
    ActivityTransfer$.inboundSchema = exports.ActivityTransfer$inboundSchema;
    /** @deprecated use `ActivityTransfer$outboundSchema` instead. */
    ActivityTransfer$.outboundSchema = exports.ActivityTransfer$outboundSchema;
})(ActivityTransfer$ || (exports.ActivityTransfer$ = ActivityTransfer$ = {}));
/** @internal */
exports.ActivityType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityType$outboundSchema = z.union([
    z.nativeEnum(ActivityType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityType$;
(function (ActivityType$) {
    /** @deprecated use `ActivityType$inboundSchema` instead. */
    ActivityType$.inboundSchema = exports.ActivityType$inboundSchema;
    /** @deprecated use `ActivityType$outboundSchema` instead. */
    ActivityType$.outboundSchema = exports.ActivityType$outboundSchema;
})(ActivityType$ || (exports.ActivityType$ = ActivityType$ = {}));
/** @internal */
exports.ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityUnitSplitCorporateActionGeneralInformation$;
(function (ActivityUnitSplitCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityUnitSplitCorporateActionGeneralInformation$.inboundSchema = exports.ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityUnitSplitCorporateActionGeneralInformation$.outboundSchema = exports.ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema;
})(ActivityUnitSplitCorporateActionGeneralInformation$ || (exports.ActivityUnitSplitCorporateActionGeneralInformation$ = ActivityUnitSplitCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityUnitSplitStockRate$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.ActivityUnitSplitStockRate$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityUnitSplitStockRate$;
(function (ActivityUnitSplitStockRate$) {
    /** @deprecated use `ActivityUnitSplitStockRate$inboundSchema` instead. */
    ActivityUnitSplitStockRate$.inboundSchema = exports.ActivityUnitSplitStockRate$inboundSchema;
    /** @deprecated use `ActivityUnitSplitStockRate$outboundSchema` instead. */
    ActivityUnitSplitStockRate$.outboundSchema = exports.ActivityUnitSplitStockRate$outboundSchema;
})(ActivityUnitSplitStockRate$ || (exports.ActivityUnitSplitStockRate$ = ActivityUnitSplitStockRate$ = {}));
/** @internal */
exports.ActivityUnitSplit$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema)).optional(),
    stock_rate: z.nullable(z.lazy(() => exports.ActivityUnitSplitStockRate$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "stock_rate": "stockRate",
    });
});
/** @internal */
exports.ActivityUnitSplit$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema)).optional(),
    stockRate: z.nullable(z.lazy(() => exports.ActivityUnitSplitStockRate$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        stockRate: "stock_rate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityUnitSplit$;
(function (ActivityUnitSplit$) {
    /** @deprecated use `ActivityUnitSplit$inboundSchema` instead. */
    ActivityUnitSplit$.inboundSchema = exports.ActivityUnitSplit$inboundSchema;
    /** @deprecated use `ActivityUnitSplit$outboundSchema` instead. */
    ActivityUnitSplit$.outboundSchema = exports.ActivityUnitSplit$outboundSchema;
})(ActivityUnitSplit$ || (exports.ActivityUnitSplit$ = ActivityUnitSplit$ = {}));
/** @internal */
exports.ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWarrantExerciseCorporateActionGeneralInformation$;
(function (ActivityWarrantExerciseCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityWarrantExerciseCorporateActionGeneralInformation$.inboundSchema = exports.ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityWarrantExerciseCorporateActionGeneralInformation$.outboundSchema = exports.ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema;
})(ActivityWarrantExerciseCorporateActionGeneralInformation$ || (exports.ActivityWarrantExerciseCorporateActionGeneralInformation$ = ActivityWarrantExerciseCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityWarrantExercise$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
    });
});
/** @internal */
exports.ActivityWarrantExercise$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWarrantExercise$;
(function (ActivityWarrantExercise$) {
    /** @deprecated use `ActivityWarrantExercise$inboundSchema` instead. */
    ActivityWarrantExercise$.inboundSchema = exports.ActivityWarrantExercise$inboundSchema;
    /** @deprecated use `ActivityWarrantExercise$outboundSchema` instead. */
    ActivityWarrantExercise$.outboundSchema = exports.ActivityWarrantExercise$outboundSchema;
})(ActivityWarrantExercise$ || (exports.ActivityWarrantExercise$ = ActivityWarrantExercise$ = {}));
/** @internal */
exports.ActivityDistributionType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityDistributionType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityDistributionType$outboundSchema = z.union([
    z.nativeEnum(ActivityDistributionType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityDistributionType$;
(function (ActivityDistributionType$) {
    /** @deprecated use `ActivityDistributionType$inboundSchema` instead. */
    ActivityDistributionType$.inboundSchema = exports.ActivityDistributionType$inboundSchema;
    /** @deprecated use `ActivityDistributionType$outboundSchema` instead. */
    ActivityDistributionType$.outboundSchema = exports.ActivityDistributionType$outboundSchema;
})(ActivityDistributionType$ || (exports.ActivityDistributionType$ = ActivityDistributionType$ = {}));
/** @internal */
exports.ActivityRetirementType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityRetirementType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityRetirementType$outboundSchema = z.union([
    z.nativeEnum(ActivityRetirementType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityRetirementType$;
(function (ActivityRetirementType$) {
    /** @deprecated use `ActivityRetirementType$inboundSchema` instead. */
    ActivityRetirementType$.inboundSchema = exports.ActivityRetirementType$inboundSchema;
    /** @deprecated use `ActivityRetirementType$outboundSchema` instead. */
    ActivityRetirementType$.outboundSchema = exports.ActivityRetirementType$outboundSchema;
})(ActivityRetirementType$ || (exports.ActivityRetirementType$ = ActivityRetirementType$ = {}));
/** @internal */
exports.ActivityWithdrawalType$inboundSchema = z
    .union([
    z.nativeEnum(ActivityWithdrawalType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityWithdrawalType$outboundSchema = z.union([
    z.nativeEnum(ActivityWithdrawalType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWithdrawalType$;
(function (ActivityWithdrawalType$) {
    /** @deprecated use `ActivityWithdrawalType$inboundSchema` instead. */
    ActivityWithdrawalType$.inboundSchema = exports.ActivityWithdrawalType$inboundSchema;
    /** @deprecated use `ActivityWithdrawalType$outboundSchema` instead. */
    ActivityWithdrawalType$.outboundSchema = exports.ActivityWithdrawalType$outboundSchema;
})(ActivityWithdrawalType$ || (exports.ActivityWithdrawalType$ = ActivityWithdrawalType$ = {}));
/** @internal */
exports.ActivityWithdrawal$inboundSchema = z.object({
    additional_instructions: z.string().optional(),
    advance: z.boolean().optional(),
    closing_account: z.boolean().optional(),
    conversion: z.boolean().optional(),
    destination_account_number: z.string().optional(),
    destination_institution: z.string().optional(),
    distribution_type: exports.ActivityDistributionType$inboundSchema.optional(),
    distribution_year: z.number().int().optional(),
    fed_reference_number: z.string().optional(),
    futures_settlement: z.boolean().optional(),
    micro: z.boolean().optional(),
    originating_institution: z.string().optional(),
    periodic: z.boolean().optional(),
    retirement_type: exports.ActivityRetirementType$inboundSchema.optional(),
    taxable: z.boolean().optional(),
    type: exports.ActivityWithdrawalType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "additional_instructions": "additionalInstructions",
        "closing_account": "closingAccount",
        "destination_account_number": "destinationAccountNumber",
        "destination_institution": "destinationInstitution",
        "distribution_type": "distributionType",
        "distribution_year": "distributionYear",
        "fed_reference_number": "fedReferenceNumber",
        "futures_settlement": "futuresSettlement",
        "originating_institution": "originatingInstitution",
        "retirement_type": "retirementType",
    });
});
/** @internal */
exports.ActivityWithdrawal$outboundSchema = z.object({
    additionalInstructions: z.string().optional(),
    advance: z.boolean().optional(),
    closingAccount: z.boolean().optional(),
    conversion: z.boolean().optional(),
    destinationAccountNumber: z.string().optional(),
    destinationInstitution: z.string().optional(),
    distributionType: exports.ActivityDistributionType$outboundSchema.optional(),
    distributionYear: z.number().int().optional(),
    fedReferenceNumber: z.string().optional(),
    futuresSettlement: z.boolean().optional(),
    micro: z.boolean().optional(),
    originatingInstitution: z.string().optional(),
    periodic: z.boolean().optional(),
    retirementType: exports.ActivityRetirementType$outboundSchema.optional(),
    taxable: z.boolean().optional(),
    type: exports.ActivityWithdrawalType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        additionalInstructions: "additional_instructions",
        closingAccount: "closing_account",
        destinationAccountNumber: "destination_account_number",
        destinationInstitution: "destination_institution",
        distributionType: "distribution_type",
        distributionYear: "distribution_year",
        fedReferenceNumber: "fed_reference_number",
        futuresSettlement: "futures_settlement",
        originatingInstitution: "originating_institution",
        retirementType: "retirement_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWithdrawal$;
(function (ActivityWithdrawal$) {
    /** @deprecated use `ActivityWithdrawal$inboundSchema` instead. */
    ActivityWithdrawal$.inboundSchema = exports.ActivityWithdrawal$inboundSchema;
    /** @deprecated use `ActivityWithdrawal$outboundSchema` instead. */
    ActivityWithdrawal$.outboundSchema = exports.ActivityWithdrawal$outboundSchema;
})(ActivityWithdrawal$ || (exports.ActivityWithdrawal$ = ActivityWithdrawal$ = {}));
/** @internal */
exports.ActivityReview$inboundSchema = z
    .union([
    z.nativeEnum(ActivityReview),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ActivityReview$outboundSchema = z.union([
    z.nativeEnum(ActivityReview),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityReview$;
(function (ActivityReview$) {
    /** @deprecated use `ActivityReview$inboundSchema` instead. */
    ActivityReview$.inboundSchema = exports.ActivityReview$inboundSchema;
    /** @deprecated use `ActivityReview$outboundSchema` instead. */
    ActivityReview$.outboundSchema = exports.ActivityReview$outboundSchema;
})(ActivityReview$ || (exports.ActivityReview$ = ActivityReview$ = {}));
/** @internal */
exports.ActivityWithdrawalPendingReview$inboundSchema = z.object({
    review: exports.ActivityReview$inboundSchema.optional(),
});
/** @internal */
exports.ActivityWithdrawalPendingReview$outboundSchema = z.object({
    review: exports.ActivityReview$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWithdrawalPendingReview$;
(function (ActivityWithdrawalPendingReview$) {
    /** @deprecated use `ActivityWithdrawalPendingReview$inboundSchema` instead. */
    ActivityWithdrawalPendingReview$.inboundSchema = exports.ActivityWithdrawalPendingReview$inboundSchema;
    /** @deprecated use `ActivityWithdrawalPendingReview$outboundSchema` instead. */
    ActivityWithdrawalPendingReview$.outboundSchema = exports.ActivityWithdrawalPendingReview$outboundSchema;
})(ActivityWithdrawalPendingReview$ || (exports.ActivityWithdrawalPendingReview$ = ActivityWithdrawalPendingReview$ = {}));
/** @internal */
exports.ActivityWithholding$inboundSchema = z.object({
    data: z.array(withholdingdata_js_1.WithholdingData$inboundSchema).optional(),
});
/** @internal */
exports.ActivityWithholding$outboundSchema = z.object({
    data: z.array(withholdingdata_js_1.WithholdingData$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWithholding$;
(function (ActivityWithholding$) {
    /** @deprecated use `ActivityWithholding$inboundSchema` instead. */
    ActivityWithholding$.inboundSchema = exports.ActivityWithholding$inboundSchema;
    /** @deprecated use `ActivityWithholding$outboundSchema` instead. */
    ActivityWithholding$.outboundSchema = exports.ActivityWithholding$outboundSchema;
})(ActivityWithholding$ || (exports.ActivityWithholding$ = ActivityWithholding$ = {}));
/** @internal */
exports.ActivityWorthlessCorporateActionGeneralInformation$inboundSchema = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_id": "corporateActionId",
        "disbursed_asset_id": "disbursedAssetId",
        "disbursed_cusip": "disbursedCusip",
        "disbursed_symbol_description": "disbursedSymbolDescription",
        "target_asset_id": "targetAssetId",
        "target_cusip": "targetCusip",
        "target_symbol_description": "targetSymbolDescription",
    });
});
/** @internal */
exports.ActivityWorthlessCorporateActionGeneralInformation$outboundSchema = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionId: "corporate_action_id",
        disbursedAssetId: "disbursed_asset_id",
        disbursedCusip: "disbursed_cusip",
        disbursedSymbolDescription: "disbursed_symbol_description",
        targetAssetId: "target_asset_id",
        targetCusip: "target_cusip",
        targetSymbolDescription: "target_symbol_description",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWorthlessCorporateActionGeneralInformation$;
(function (ActivityWorthlessCorporateActionGeneralInformation$) {
    /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$inboundSchema` instead. */
    ActivityWorthlessCorporateActionGeneralInformation$.inboundSchema = exports.ActivityWorthlessCorporateActionGeneralInformation$inboundSchema;
    /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$outboundSchema` instead. */
    ActivityWorthlessCorporateActionGeneralInformation$.outboundSchema = exports.ActivityWorthlessCorporateActionGeneralInformation$outboundSchema;
})(ActivityWorthlessCorporateActionGeneralInformation$ || (exports.ActivityWorthlessCorporateActionGeneralInformation$ = ActivityWorthlessCorporateActionGeneralInformation$ = {}));
/** @internal */
exports.ActivityWorthlessEffectiveDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityWorthlessEffectiveDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWorthlessEffectiveDate$;
(function (ActivityWorthlessEffectiveDate$) {
    /** @deprecated use `ActivityWorthlessEffectiveDate$inboundSchema` instead. */
    ActivityWorthlessEffectiveDate$.inboundSchema = exports.ActivityWorthlessEffectiveDate$inboundSchema;
    /** @deprecated use `ActivityWorthlessEffectiveDate$outboundSchema` instead. */
    ActivityWorthlessEffectiveDate$.outboundSchema = exports.ActivityWorthlessEffectiveDate$outboundSchema;
})(ActivityWorthlessEffectiveDate$ || (exports.ActivityWorthlessEffectiveDate$ = ActivityWorthlessEffectiveDate$ = {}));
/** @internal */
exports.ActivityWorthlessPaymentDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.ActivityWorthlessPaymentDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWorthlessPaymentDate$;
(function (ActivityWorthlessPaymentDate$) {
    /** @deprecated use `ActivityWorthlessPaymentDate$inboundSchema` instead. */
    ActivityWorthlessPaymentDate$.inboundSchema = exports.ActivityWorthlessPaymentDate$inboundSchema;
    /** @deprecated use `ActivityWorthlessPaymentDate$outboundSchema` instead. */
    ActivityWorthlessPaymentDate$.outboundSchema = exports.ActivityWorthlessPaymentDate$outboundSchema;
})(ActivityWorthlessPaymentDate$ || (exports.ActivityWorthlessPaymentDate$ = ActivityWorthlessPaymentDate$ = {}));
/** @internal */
exports.ActivityWorthless$inboundSchema = z.object({
    corporate_action_general_information: z.nullable(z.lazy(() => exports.ActivityWorthlessCorporateActionGeneralInformation$inboundSchema)).optional(),
    effective_date: z.nullable(z.lazy(() => exports.ActivityWorthlessEffectiveDate$inboundSchema)).optional(),
    payment_date: z.nullable(z.lazy(() => exports.ActivityWorthlessPaymentDate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "corporate_action_general_information": "corporateActionGeneralInformation",
        "effective_date": "effectiveDate",
        "payment_date": "paymentDate",
    });
});
/** @internal */
exports.ActivityWorthless$outboundSchema = z.object({
    corporateActionGeneralInformation: z.nullable(z.lazy(() => exports.ActivityWorthlessCorporateActionGeneralInformation$outboundSchema)).optional(),
    effectiveDate: z.nullable(z.lazy(() => exports.ActivityWorthlessEffectiveDate$outboundSchema)).optional(),
    paymentDate: z.nullable(z.lazy(() => exports.ActivityWorthlessPaymentDate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        corporateActionGeneralInformation: "corporate_action_general_information",
        effectiveDate: "effective_date",
        paymentDate: "payment_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivityWorthless$;
(function (ActivityWorthless$) {
    /** @deprecated use `ActivityWorthless$inboundSchema` instead. */
    ActivityWorthless$.inboundSchema = exports.ActivityWorthless$inboundSchema;
    /** @deprecated use `ActivityWorthless$outboundSchema` instead. */
    ActivityWorthless$.outboundSchema = exports.ActivityWorthless$outboundSchema;
})(ActivityWorthless$ || (exports.ActivityWorthless$ = ActivityWorthless$ = {}));
/** @internal */
exports.Activity$inboundSchema = z.object({
    acats_pending_out: z.nullable(z.lazy(() => exports.ActivityAcatsPendingOut$inboundSchema)).optional(),
    account_id: z.string().optional(),
    account_memo: exports.ActivityAccountMemo$inboundSchema.optional(),
    account_transfer: z.nullable(z.lazy(() => exports.ActivityAccountTransfer$inboundSchema)).optional(),
    accrued_interest: z.array(accruedinterest_js_1.AccruedInterest$inboundSchema).optional(),
    accrued_interest_desc: z.nullable(z.lazy(() => exports.AccruedInterestDesc$inboundSchema)).optional(),
    activity_date: z.nullable(z.lazy(() => exports.ActivityActivityDate$inboundSchema))
        .optional(),
    activity_description: z.string().optional(),
    activity_id: z.string().optional(),
    activity_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    asset_description: z.string().optional(),
    asset_id: z.string().optional(),
    capital_gains: z.nullable(z.lazy(() => exports.ActivityCapitalGains$inboundSchema))
        .optional(),
    cash_dividend: z.nullable(z.lazy(() => exports.ActivityCashDividend$inboundSchema))
        .optional(),
    commission: z.nullable(z.lazy(() => exports.ActivityCommission$inboundSchema))
        .optional(),
    commissions: z.array(commission_js_1.Commission$inboundSchema).optional(),
    conversion: z.nullable(z.lazy(() => exports.ActivityConversion$inboundSchema))
        .optional(),
    corporate_action_memo_adjustment: z.nullable(z.lazy(() => exports.ActivityCorporateActionMemoAdjustment$inboundSchema)).optional(),
    correspondent_id: z.string().optional(),
    creation_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    credit: z.nullable(z.lazy(() => exports.ActivityCredit$inboundSchema)).optional(),
    currency_asset_id: z.string().optional(),
    currency_code: z.string().optional(),
    deposit: z.nullable(z.lazy(() => exports.ActivityDeposit$inboundSchema)).optional(),
    drip: z.nullable(z.lazy(() => exports.ActivityDrip$inboundSchema)).optional(),
    exchange: z.nullable(z.lazy(() => exports.ActivityExchange$inboundSchema)).optional(),
    fee: z.nullable(z.lazy(() => exports.ActivityFee$inboundSchema)).optional(),
    fees: z.array(fee_js_1.Fee$inboundSchema).optional(),
    fpsl: z.nullable(z.lazy(() => exports.ActivityFpsl$inboundSchema)).optional(),
    generation: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => exports.ActivityGrossAmount$inboundSchema))
        .optional(),
    interest: z.nullable(z.lazy(() => exports.ActivityInterest$inboundSchema)).optional(),
    interest_payment: z.nullable(z.lazy(() => exports.ActivityInterestPayment$inboundSchema)).optional(),
    liquidation: z.nullable(z.lazy(() => exports.ActivityLiquidation$inboundSchema))
        .optional(),
    maturity: z.nullable(z.lazy(() => exports.ActivityMaturity$inboundSchema)).optional(),
    merger: z.nullable(z.lazy(() => exports.ActivityMerger$inboundSchema)).optional(),
    name: z.string().optional(),
    name_change: z.nullable(z.lazy(() => exports.ActivityNameChange$inboundSchema))
        .optional(),
    net_amount: z.nullable(z.lazy(() => exports.ActivityNetAmount$inboundSchema))
        .optional(),
    next_activity_id: z.string().optional(),
    next_activity_process_date: z.nullable(z.lazy(() => exports.NextActivityProcessDate$inboundSchema)).optional(),
    none: z.nullable(z.lazy(() => exports.None$inboundSchema)).optional(),
    payment_in_kind: z.nullable(z.lazy(() => exports.ActivityPaymentInKind$inboundSchema))
        .optional(),
    previous_activity_id: z.string().optional(),
    previous_process_date: z.nullable(z.lazy(() => exports.PreviousProcessDate$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => exports.ActivityPrice$inboundSchema)).optional(),
    process_date: z.nullable(z.lazy(() => exports.ActivityProcessDate$inboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityQuantity$inboundSchema)).optional(),
    redemption_full: z.nullable(z.lazy(() => exports.ActivityRedemptionFull$inboundSchema)).optional(),
    redemption_partial: z.nullable(z.lazy(() => exports.ActivityRedemptionPartial$inboundSchema)).optional(),
    region_code: z.string().optional(),
    reverse_stock_split: z.nullable(z.lazy(() => exports.ActivityReverseStockSplit$inboundSchema)).optional(),
    rights_distribution: z.nullable(z.lazy(() => exports.ActivityRightsDistribution$inboundSchema)).optional(),
    rights_subscription: z.nullable(z.lazy(() => exports.ActivityRightsSubscription$inboundSchema)).optional(),
    rounding_adjustment: z.nullable(z.lazy(() => exports.ActivityRoundingAdjustment$inboundSchema)).optional(),
    rounding_amount: z.nullable(z.lazy(() => exports.RoundingAmount$inboundSchema))
        .optional(),
    rounding_reason: z.string().optional(),
    sale_of_rights: z.nullable(z.lazy(() => exports.ActivitySaleOfRights$inboundSchema))
        .optional(),
    settle_date: z.nullable(z.lazy(() => exports.ActivitySettleDate$inboundSchema))
        .optional(),
    side: exports.ActivitySide$inboundSchema.optional(),
    spinoff: z.nullable(z.lazy(() => exports.ActivitySpinoff$inboundSchema)).optional(),
    state: exports.ActivityState$inboundSchema.optional(),
    stock_dividend: z.nullable(z.lazy(() => exports.ActivityStockDividend$inboundSchema))
        .optional(),
    stock_split: z.nullable(z.lazy(() => exports.ActivityStockSplit$inboundSchema))
        .optional(),
    subtype_category: z.string().optional(),
    sweep: z.nullable(z.lazy(() => exports.ActivitySweep$inboundSchema)).optional(),
    tender_offer: z.nullable(z.lazy(() => exports.ActivityTenderOffer$inboundSchema))
        .optional(),
    trade: z.nullable(z.lazy(() => exports.ActivityTrade$inboundSchema)).optional(),
    transfer: z.nullable(z.lazy(() => exports.ActivityTransfer$inboundSchema)).optional(),
    type: exports.ActivityType$inboundSchema.optional(),
    unit_split: z.nullable(z.lazy(() => exports.ActivityUnitSplit$inboundSchema))
        .optional(),
    warrant_exercise: z.nullable(z.lazy(() => exports.ActivityWarrantExercise$inboundSchema)).optional(),
    withdrawal: z.nullable(z.lazy(() => exports.ActivityWithdrawal$inboundSchema))
        .optional(),
    withdrawal_pending_review: z.nullable(z.lazy(() => exports.ActivityWithdrawalPendingReview$inboundSchema)).optional(),
    withholding: z.nullable(z.lazy(() => exports.ActivityWithholding$inboundSchema))
        .optional(),
    withholdings: z.array(withholding_js_1.Withholding$inboundSchema).optional(),
    worthless: z.nullable(z.lazy(() => exports.ActivityWorthless$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "acats_pending_out": "acatsPendingOut",
        "account_id": "accountId",
        "account_memo": "accountMemo",
        "account_transfer": "accountTransfer",
        "accrued_interest": "accruedInterest",
        "accrued_interest_desc": "accruedInterestDesc",
        "activity_date": "activityDate",
        "activity_description": "activityDescription",
        "activity_id": "activityId",
        "activity_time": "activityTime",
        "asset_description": "assetDescription",
        "asset_id": "assetId",
        "capital_gains": "capitalGains",
        "cash_dividend": "cashDividend",
        "corporate_action_memo_adjustment": "corporateActionMemoAdjustment",
        "correspondent_id": "correspondentId",
        "creation_time": "creationTime",
        "currency_asset_id": "currencyAssetId",
        "currency_code": "currencyCode",
        "gross_amount": "grossAmount",
        "interest_payment": "interestPayment",
        "name_change": "nameChange",
        "net_amount": "netAmount",
        "next_activity_id": "nextActivityId",
        "next_activity_process_date": "nextActivityProcessDate",
        "payment_in_kind": "paymentInKind",
        "previous_activity_id": "previousActivityId",
        "previous_process_date": "previousProcessDate",
        "process_date": "processDate",
        "redemption_full": "redemptionFull",
        "redemption_partial": "redemptionPartial",
        "region_code": "regionCode",
        "reverse_stock_split": "reverseStockSplit",
        "rights_distribution": "rightsDistribution",
        "rights_subscription": "rightsSubscription",
        "rounding_adjustment": "roundingAdjustment",
        "rounding_amount": "roundingAmount",
        "rounding_reason": "roundingReason",
        "sale_of_rights": "saleOfRights",
        "settle_date": "settleDate",
        "stock_dividend": "stockDividend",
        "stock_split": "stockSplit",
        "subtype_category": "subtypeCategory",
        "tender_offer": "tenderOffer",
        "unit_split": "unitSplit",
        "warrant_exercise": "warrantExercise",
        "withdrawal_pending_review": "withdrawalPendingReview",
    });
});
/** @internal */
exports.Activity$outboundSchema = z.object({
    acatsPendingOut: z.nullable(z.lazy(() => exports.ActivityAcatsPendingOut$outboundSchema)).optional(),
    accountId: z.string().optional(),
    accountMemo: exports.ActivityAccountMemo$outboundSchema.optional(),
    accountTransfer: z.nullable(z.lazy(() => exports.ActivityAccountTransfer$outboundSchema)).optional(),
    accruedInterest: z.array(accruedinterest_js_1.AccruedInterest$outboundSchema).optional(),
    accruedInterestDesc: z.nullable(z.lazy(() => exports.AccruedInterestDesc$outboundSchema)).optional(),
    activityDate: z.nullable(z.lazy(() => exports.ActivityActivityDate$outboundSchema))
        .optional(),
    activityDescription: z.string().optional(),
    activityId: z.string().optional(),
    activityTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    assetDescription: z.string().optional(),
    assetId: z.string().optional(),
    capitalGains: z.nullable(z.lazy(() => exports.ActivityCapitalGains$outboundSchema))
        .optional(),
    cashDividend: z.nullable(z.lazy(() => exports.ActivityCashDividend$outboundSchema))
        .optional(),
    commission: z.nullable(z.lazy(() => exports.ActivityCommission$outboundSchema))
        .optional(),
    commissions: z.array(commission_js_1.Commission$outboundSchema).optional(),
    conversion: z.nullable(z.lazy(() => exports.ActivityConversion$outboundSchema))
        .optional(),
    corporateActionMemoAdjustment: z.nullable(z.lazy(() => exports.ActivityCorporateActionMemoAdjustment$outboundSchema)).optional(),
    correspondentId: z.string().optional(),
    creationTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    credit: z.nullable(z.lazy(() => exports.ActivityCredit$outboundSchema)).optional(),
    currencyAssetId: z.string().optional(),
    currencyCode: z.string().optional(),
    deposit: z.nullable(z.lazy(() => exports.ActivityDeposit$outboundSchema)).optional(),
    drip: z.nullable(z.lazy(() => exports.ActivityDrip$outboundSchema)).optional(),
    exchange: z.nullable(z.lazy(() => exports.ActivityExchange$outboundSchema))
        .optional(),
    fee: z.nullable(z.lazy(() => exports.ActivityFee$outboundSchema)).optional(),
    fees: z.array(fee_js_1.Fee$outboundSchema).optional(),
    fpsl: z.nullable(z.lazy(() => exports.ActivityFpsl$outboundSchema)).optional(),
    generation: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => exports.ActivityGrossAmount$outboundSchema))
        .optional(),
    interest: z.nullable(z.lazy(() => exports.ActivityInterest$outboundSchema))
        .optional(),
    interestPayment: z.nullable(z.lazy(() => exports.ActivityInterestPayment$outboundSchema)).optional(),
    liquidation: z.nullable(z.lazy(() => exports.ActivityLiquidation$outboundSchema))
        .optional(),
    maturity: z.nullable(z.lazy(() => exports.ActivityMaturity$outboundSchema))
        .optional(),
    merger: z.nullable(z.lazy(() => exports.ActivityMerger$outboundSchema)).optional(),
    name: z.string().optional(),
    nameChange: z.nullable(z.lazy(() => exports.ActivityNameChange$outboundSchema))
        .optional(),
    netAmount: z.nullable(z.lazy(() => exports.ActivityNetAmount$outboundSchema))
        .optional(),
    nextActivityId: z.string().optional(),
    nextActivityProcessDate: z.nullable(z.lazy(() => exports.NextActivityProcessDate$outboundSchema)).optional(),
    none: z.nullable(z.lazy(() => exports.None$outboundSchema)).optional(),
    paymentInKind: z.nullable(z.lazy(() => exports.ActivityPaymentInKind$outboundSchema))
        .optional(),
    previousActivityId: z.string().optional(),
    previousProcessDate: z.nullable(z.lazy(() => exports.PreviousProcessDate$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => exports.ActivityPrice$outboundSchema)).optional(),
    processDate: z.nullable(z.lazy(() => exports.ActivityProcessDate$outboundSchema))
        .optional(),
    quantity: z.nullable(z.lazy(() => exports.ActivityQuantity$outboundSchema))
        .optional(),
    redemptionFull: z.nullable(z.lazy(() => exports.ActivityRedemptionFull$outboundSchema)).optional(),
    redemptionPartial: z.nullable(z.lazy(() => exports.ActivityRedemptionPartial$outboundSchema)).optional(),
    regionCode: z.string().optional(),
    reverseStockSplit: z.nullable(z.lazy(() => exports.ActivityReverseStockSplit$outboundSchema)).optional(),
    rightsDistribution: z.nullable(z.lazy(() => exports.ActivityRightsDistribution$outboundSchema)).optional(),
    rightsSubscription: z.nullable(z.lazy(() => exports.ActivityRightsSubscription$outboundSchema)).optional(),
    roundingAdjustment: z.nullable(z.lazy(() => exports.ActivityRoundingAdjustment$outboundSchema)).optional(),
    roundingAmount: z.nullable(z.lazy(() => exports.RoundingAmount$outboundSchema))
        .optional(),
    roundingReason: z.string().optional(),
    saleOfRights: z.nullable(z.lazy(() => exports.ActivitySaleOfRights$outboundSchema))
        .optional(),
    settleDate: z.nullable(z.lazy(() => exports.ActivitySettleDate$outboundSchema))
        .optional(),
    side: exports.ActivitySide$outboundSchema.optional(),
    spinoff: z.nullable(z.lazy(() => exports.ActivitySpinoff$outboundSchema)).optional(),
    state: exports.ActivityState$outboundSchema.optional(),
    stockDividend: z.nullable(z.lazy(() => exports.ActivityStockDividend$outboundSchema))
        .optional(),
    stockSplit: z.nullable(z.lazy(() => exports.ActivityStockSplit$outboundSchema))
        .optional(),
    subtypeCategory: z.string().optional(),
    sweep: z.nullable(z.lazy(() => exports.ActivitySweep$outboundSchema)).optional(),
    tenderOffer: z.nullable(z.lazy(() => exports.ActivityTenderOffer$outboundSchema))
        .optional(),
    trade: z.nullable(z.lazy(() => exports.ActivityTrade$outboundSchema)).optional(),
    transfer: z.nullable(z.lazy(() => exports.ActivityTransfer$outboundSchema))
        .optional(),
    type: exports.ActivityType$outboundSchema.optional(),
    unitSplit: z.nullable(z.lazy(() => exports.ActivityUnitSplit$outboundSchema))
        .optional(),
    warrantExercise: z.nullable(z.lazy(() => exports.ActivityWarrantExercise$outboundSchema)).optional(),
    withdrawal: z.nullable(z.lazy(() => exports.ActivityWithdrawal$outboundSchema))
        .optional(),
    withdrawalPendingReview: z.nullable(z.lazy(() => exports.ActivityWithdrawalPendingReview$outboundSchema)).optional(),
    withholding: z.nullable(z.lazy(() => exports.ActivityWithholding$outboundSchema))
        .optional(),
    withholdings: z.array(withholding_js_1.Withholding$outboundSchema).optional(),
    worthless: z.nullable(z.lazy(() => exports.ActivityWorthless$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acatsPendingOut: "acats_pending_out",
        accountId: "account_id",
        accountMemo: "account_memo",
        accountTransfer: "account_transfer",
        accruedInterest: "accrued_interest",
        accruedInterestDesc: "accrued_interest_desc",
        activityDate: "activity_date",
        activityDescription: "activity_description",
        activityId: "activity_id",
        activityTime: "activity_time",
        assetDescription: "asset_description",
        assetId: "asset_id",
        capitalGains: "capital_gains",
        cashDividend: "cash_dividend",
        corporateActionMemoAdjustment: "corporate_action_memo_adjustment",
        correspondentId: "correspondent_id",
        creationTime: "creation_time",
        currencyAssetId: "currency_asset_id",
        currencyCode: "currency_code",
        grossAmount: "gross_amount",
        interestPayment: "interest_payment",
        nameChange: "name_change",
        netAmount: "net_amount",
        nextActivityId: "next_activity_id",
        nextActivityProcessDate: "next_activity_process_date",
        paymentInKind: "payment_in_kind",
        previousActivityId: "previous_activity_id",
        previousProcessDate: "previous_process_date",
        processDate: "process_date",
        redemptionFull: "redemption_full",
        redemptionPartial: "redemption_partial",
        regionCode: "region_code",
        reverseStockSplit: "reverse_stock_split",
        rightsDistribution: "rights_distribution",
        rightsSubscription: "rights_subscription",
        roundingAdjustment: "rounding_adjustment",
        roundingAmount: "rounding_amount",
        roundingReason: "rounding_reason",
        saleOfRights: "sale_of_rights",
        settleDate: "settle_date",
        stockDividend: "stock_dividend",
        stockSplit: "stock_split",
        subtypeCategory: "subtype_category",
        tenderOffer: "tender_offer",
        unitSplit: "unit_split",
        warrantExercise: "warrant_exercise",
        withdrawalPendingReview: "withdrawal_pending_review",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Activity$;
(function (Activity$) {
    /** @deprecated use `Activity$inboundSchema` instead. */
    Activity$.inboundSchema = exports.Activity$inboundSchema;
    /** @deprecated use `Activity$outboundSchema` instead. */
    Activity$.outboundSchema = exports.Activity$outboundSchema;
})(Activity$ || (exports.Activity$ = Activity$ = {}));
//# sourceMappingURL=activity.js.map