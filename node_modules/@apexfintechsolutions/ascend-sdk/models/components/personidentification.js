"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonIdentification$ = exports.PersonIdentification$outboundSchema = exports.PersonIdentification$inboundSchema = exports.PersonIdentificationType$ = exports.PersonIdentificationType$outboundSchema = exports.PersonIdentificationType$inboundSchema = exports.PersonIdentificationType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
/**
 * Tax id type (e.g. ssn)
 */
var PersonIdentificationType;
(function (PersonIdentificationType) {
    PersonIdentificationType["IdTypeUnspecified"] = "ID_TYPE_UNSPECIFIED";
    PersonIdentificationType["Ssn"] = "SSN";
    PersonIdentificationType["Itin"] = "ITIN";
    PersonIdentificationType["Ftin"] = "FTIN";
    PersonIdentificationType["NationalId"] = "NATIONAL_ID";
    PersonIdentificationType["Passport"] = "PASSPORT";
    PersonIdentificationType["DrivingLicense"] = "DRIVING_LICENSE";
})(PersonIdentificationType || (exports.PersonIdentificationType = PersonIdentificationType = {}));
/** @internal */
exports.PersonIdentificationType$inboundSchema = z
    .union([
    z.nativeEnum(PersonIdentificationType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.PersonIdentificationType$outboundSchema = z.union([
    z.nativeEnum(PersonIdentificationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PersonIdentificationType$;
(function (PersonIdentificationType$) {
    /** @deprecated use `PersonIdentificationType$inboundSchema` instead. */
    PersonIdentificationType$.inboundSchema = exports.PersonIdentificationType$inboundSchema;
    /** @deprecated use `PersonIdentificationType$outboundSchema` instead. */
    PersonIdentificationType$.outboundSchema = exports.PersonIdentificationType$outboundSchema;
})(PersonIdentificationType$ || (exports.PersonIdentificationType$ = PersonIdentificationType$ = {}));
/** @internal */
exports.PersonIdentification$inboundSchema = z.object({
    administrative_area: z.string().optional(),
    document_reference_ids: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    type: exports.PersonIdentificationType$inboundSchema.optional(),
    value: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "administrative_area": "administrativeArea",
        "document_reference_ids": "documentReferenceIds",
        "region_code": "regionCode",
    });
});
/** @internal */
exports.PersonIdentification$outboundSchema = z.object({
    administrativeArea: z.string().optional(),
    documentReferenceIds: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    type: exports.PersonIdentificationType$outboundSchema.optional(),
    value: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        administrativeArea: "administrative_area",
        documentReferenceIds: "document_reference_ids",
        regionCode: "region_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PersonIdentification$;
(function (PersonIdentification$) {
    /** @deprecated use `PersonIdentification$inboundSchema` instead. */
    PersonIdentification$.inboundSchema = exports.PersonIdentification$inboundSchema;
    /** @deprecated use `PersonIdentification$outboundSchema` instead. */
    PersonIdentification$.outboundSchema = exports.PersonIdentification$outboundSchema;
})(PersonIdentification$ || (exports.PersonIdentification$ = PersonIdentification$ = {}));
//# sourceMappingURL=personidentification.js.map