"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountInvestmentExperience$ = exports.AccountInvestmentExperience$outboundSchema = exports.AccountInvestmentExperience$inboundSchema = exports.AccountAnnualIncomeRangeUsd$ = exports.AccountAnnualIncomeRangeUsd$outboundSchema = exports.AccountAnnualIncomeRangeUsd$inboundSchema = exports.AccountGoals$ = exports.AccountGoals$outboundSchema = exports.AccountGoals$inboundSchema = exports.AccountTimeHorizon$ = exports.AccountTimeHorizon$outboundSchema = exports.AccountTimeHorizon$inboundSchema = exports.AccountRiskTolerance$ = exports.AccountRiskTolerance$outboundSchema = exports.AccountRiskTolerance$inboundSchema = exports.AccountLiquidityNeeds$ = exports.AccountLiquidityNeeds$outboundSchema = exports.AccountLiquidityNeeds$inboundSchema = exports.AccountInvestmentObjective$ = exports.AccountInvestmentObjective$outboundSchema = exports.AccountInvestmentObjective$inboundSchema = exports.FundingType$ = exports.FundingType$outboundSchema = exports.FundingType$inboundSchema = exports.FinraCoaCode$ = exports.FinraCoaCode$outboundSchema = exports.FinraCoaCode$inboundSchema = exports.Domicile$ = exports.Domicile$outboundSchema = exports.Domicile$inboundSchema = exports.AccountCatAccountHolderType$ = exports.AccountCatAccountHolderType$outboundSchema = exports.AccountCatAccountHolderType$inboundSchema = exports.AccountCostBasisLotDisposalMethod = exports.AccountState = exports.ReserveClass = exports.RegistrationType = exports.OwnershipType = exports.AccountTotalNetWorthRangeUsd = exports.AccountLiquidNetWorthRangeUsd = exports.AccountInvestmentExperience = exports.AccountAnnualIncomeRangeUsd = exports.AccountTimeHorizon = exports.AccountRiskTolerance = exports.AccountLiquidityNeeds = exports.AccountInvestmentObjective = exports.FundingType = exports.FinraCoaCode = exports.Domicile = exports.AccountCatAccountHolderType = void 0;
exports.Account$ = exports.Account$outboundSchema = exports.Account$inboundSchema = exports.AccountTaxProfile$ = exports.AccountTaxProfile$outboundSchema = exports.AccountTaxProfile$inboundSchema = exports.AccountCostBasisLotDisposalMethod$ = exports.AccountCostBasisLotDisposalMethod$outboundSchema = exports.AccountCostBasisLotDisposalMethod$inboundSchema = exports.AccountState$ = exports.AccountState$outboundSchema = exports.AccountState$inboundSchema = exports.ReserveClass$ = exports.ReserveClass$outboundSchema = exports.ReserveClass$inboundSchema = exports.RegistrationType$ = exports.RegistrationType$outboundSchema = exports.RegistrationType$inboundSchema = exports.OwnershipType$ = exports.OwnershipType$outboundSchema = exports.OwnershipType$inboundSchema = exports.InvestmentProfile$ = exports.InvestmentProfile$outboundSchema = exports.InvestmentProfile$inboundSchema = exports.CustomerProfile$ = exports.CustomerProfile$outboundSchema = exports.CustomerProfile$inboundSchema = exports.AccountTotalNetWorthRangeUsd$ = exports.AccountTotalNetWorthRangeUsd$outboundSchema = exports.AccountTotalNetWorthRangeUsd$inboundSchema = exports.AccountLiquidNetWorthRangeUsd$ = exports.AccountLiquidNetWorthRangeUsd$outboundSchema = exports.AccountLiquidNetWorthRangeUsd$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const agreement_js_1 = require("./agreement.js");
const enrollment_js_1 = require("./enrollment.js");
const identifier_js_1 = require("./identifier.js");
const interestedparty_js_1 = require("./interestedparty.js");
const party_js_1 = require("./party.js");
const trustedcontact_js_1 = require("./trustedcontact.js");
/**
 * The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
 */
var AccountCatAccountHolderType;
(function (AccountCatAccountHolderType) {
    AccountCatAccountHolderType["CatAccountHolderTypeUnspecified"] = "CAT_ACCOUNT_HOLDER_TYPE_UNSPECIFIED";
    AccountCatAccountHolderType["AInstitutionalCustomer"] = "A_INSTITUTIONAL_CUSTOMER";
    AccountCatAccountHolderType["EEmployeeAccount"] = "E_EMPLOYEE_ACCOUNT";
    AccountCatAccountHolderType["FForeign"] = "F_FOREIGN";
    AccountCatAccountHolderType["IIndividual"] = "I_INDIVIDUAL";
    AccountCatAccountHolderType["OMarketMaking"] = "O_MARKET_MAKING";
    AccountCatAccountHolderType["VAgencyAveragePriceAccount"] = "V_AGENCY_AVERAGE_PRICE_ACCOUNT";
    AccountCatAccountHolderType["POtherProprietary"] = "P_OTHER_PROPRIETARY";
    AccountCatAccountHolderType["XErrorAccount"] = "X_ERROR_ACCOUNT";
})(AccountCatAccountHolderType || (exports.AccountCatAccountHolderType = AccountCatAccountHolderType = {}));
/**
 * Indicates if the account is `DOMESTIC` or `FOREIGN`
 */
var Domicile;
(function (Domicile) {
    Domicile["DomicileUnspecified"] = "DOMICILE_UNSPECIFIED";
    Domicile["Domestic"] = "DOMESTIC";
    Domicile["Foreign"] = "FOREIGN";
})(Domicile || (exports.Domicile = Domicile = {}));
/**
 * The FINRA COA code associated with the account
 */
var FinraCoaCode;
(function (FinraCoaCode) {
    FinraCoaCode["FinraCoaCodeUnspecified"] = "FINRA_COA_CODE_UNSPECIFIED";
    FinraCoaCode["Cat01CustomerDvpRvp"] = "CAT_01_CUSTOMER_DVP_RVP";
    FinraCoaCode["Cat02CustomerManagedAccounts"] = "CAT_02_CUSTOMER_MANAGED_ACCOUNTS";
    FinraCoaCode["Cat03CustomerIraAccounts"] = "CAT_03_CUSTOMER_IRA_ACCOUNTS";
    FinraCoaCode["Cat04CustomerEmployee"] = "CAT_04_CUSTOMER_EMPLOYEE";
    FinraCoaCode["Cat05CustomerPrimeBroker"] = "CAT_05_CUSTOMER_PRIME_BROKER";
    FinraCoaCode["Cat06CustomerAffiliateNonBd"] = "CAT_06_CUSTOMER_AFFILIATE_NON_BD";
    FinraCoaCode["Cat07CustomerOmnibus"] = "CAT_07_CUSTOMER_OMNIBUS";
    FinraCoaCode["Cat08Customer"] = "CAT_08_CUSTOMER";
    FinraCoaCode["Cat09NonCustomerOfficerDirector"] = "CAT_09_NON_CUSTOMER_OFFICER_DIRECTOR";
    FinraCoaCode["Cat10NonCustomerOfficerDirectorOrFamilyMembers"] = "CAT_10_NON_CUSTOMER_OFFICER_DIRECTOR_OR_FAMILY_MEMBERS";
    FinraCoaCode["Cat11NonCustomerAffiliateBd"] = "CAT_11_NON_CUSTOMER_AFFILIATE_BD";
    FinraCoaCode["Cat12NonCustomerOmnibus"] = "CAT_12_NON_CUSTOMER_OMNIBUS";
    FinraCoaCode["Cat13NonCustomer"] = "CAT_13_NON_CUSTOMER";
    FinraCoaCode["Cat14Paib"] = "CAT_14_PAIB";
    FinraCoaCode["Cat15FirmInventory"] = "CAT_15_FIRM_INVENTORY";
    FinraCoaCode["Cat16CnsFails"] = "CAT_16_CNS_FAILS";
    FinraCoaCode["Cat17OtherClearingCorpFails"] = "CAT_17_OTHER_CLEARING_CORP_FAILS";
    FinraCoaCode["Cat18ExecutingPrimeBroker"] = "CAT_18_EXECUTING_PRIME_BROKER";
    FinraCoaCode["Cat19BrokerFailsToReceive"] = "CAT_19_BROKER_FAILS_TO_RECEIVE";
    FinraCoaCode["Cat20BrokerFailsToDeliver"] = "CAT_20_BROKER_FAILS_TO_DELIVER";
    FinraCoaCode["Cat21BrokerFails"] = "CAT_21_BROKER_FAILS";
    FinraCoaCode["Cat22FailToDeliverGreaterThan30Days"] = "CAT_22_FAIL_TO_DELIVER_GREATER_THAN_30_DAYS";
    FinraCoaCode["Cat23SecuritiesBorrowed"] = "CAT_23_SECURITIES_BORROWED";
    FinraCoaCode["Cat24SecuritiesBorrowedNonCash"] = "CAT_24_SECURITIES_BORROWED_NON_CASH";
    FinraCoaCode["Cat25SecuritiesBorrowedConduit"] = "CAT_25_SECURITIES_BORROWED_CONDUIT";
    FinraCoaCode["Cat26SecuritiesLoaned"] = "CAT_26_SECURITIES_LOANED";
    FinraCoaCode["Cat27SecuritiesLoanedNonCash"] = "CAT_27_SECURITIES_LOANED_NON_CASH";
    FinraCoaCode["Cat28SecuritiesLoanedConduit"] = "CAT_28_SECURITIES_LOANED_CONDUIT";
    FinraCoaCode["Cat29SecuritiesLoanedCns"] = "CAT_29_SECURITIES_LOANED_CNS";
    FinraCoaCode["Cat30ReverseRepo"] = "CAT_30_REVERSE_REPO";
    FinraCoaCode["Cat31ReverseRepoTriParty"] = "CAT_31_REVERSE_REPO_TRI_PARTY";
    FinraCoaCode["Cat32Repo"] = "CAT_32_REPO";
    FinraCoaCode["Cat33RepoHoldInCustody"] = "CAT_33_REPO_HOLD_IN_CUSTODY";
    FinraCoaCode["Cat34RepoTriParty"] = "CAT_34_REPO_TRI_PARTY";
    FinraCoaCode["Cat35BankLoanFirm"] = "CAT_35_BANK_LOAN_FIRM";
    FinraCoaCode["Cat36BankLoanCustomer"] = "CAT_36_BANK_LOAN_CUSTOMER";
    FinraCoaCode["Cat37BankLoanNonCustomer"] = "CAT_37_BANK_LOAN_NON_CUSTOMER";
    FinraCoaCode["Cat38BankLoanPaib"] = "CAT_38_BANK_LOAN_PAIB";
    FinraCoaCode["Cat39Suspense"] = "CAT_39_SUSPENSE";
    FinraCoaCode["Cat40Reorganizations"] = "CAT_40_REORGANIZATIONS";
    FinraCoaCode["Cat41StockDividends"] = "CAT_41_STOCK_DIVIDENDS";
    FinraCoaCode["Cat42AbandonedProperty"] = "CAT_42_ABANDONED_PROPERTY";
    FinraCoaCode["Cat43PhysicalBox"] = "CAT_43_PHYSICAL_BOX";
    FinraCoaCode["Cat44LegalBox"] = "CAT_44_LEGAL_BOX";
    FinraCoaCode["Cat45Safekeeping"] = "CAT_45_SAFEKEEPING";
    FinraCoaCode["Cat4615C33Deposit"] = "CAT_46_15C3_3_DEPOSIT";
    FinraCoaCode["Cat47DomesticDepositoryControl"] = "CAT_47_DOMESTIC_DEPOSITORY_CONTROL";
    FinraCoaCode["Cat48ForeignDepositoryControl"] = "CAT_48_FOREIGN_DEPOSITORY_CONTROL";
    FinraCoaCode["Cat49DomesticDepositoryNonControl"] = "CAT_49_DOMESTIC_DEPOSITORY_NON_CONTROL";
    FinraCoaCode["Cat50ForeignDepositoryNonControl"] = "CAT_50_FOREIGN_DEPOSITORY_NON_CONTROL";
    FinraCoaCode["Cat51TransferControl"] = "CAT_51_TRANSFER_CONTROL";
    FinraCoaCode["Cat52TransferNonControl"] = "CAT_52_TRANSFER_NON_CONTROL";
    FinraCoaCode["Cat53TransferLegal"] = "CAT_53_TRANSFER_LEGAL";
    FinraCoaCode["Cat54InTransitControl"] = "CAT_54_IN_TRANSIT_CONTROL";
    FinraCoaCode["Cat55InTransitNonControl"] = "CAT_55_IN_TRANSIT_NON_CONTROL";
    FinraCoaCode["Cat56ClearingDomestic"] = "CAT_56_CLEARING_DOMESTIC";
    FinraCoaCode["Cat57ClearingForeign"] = "CAT_57_CLEARING_FOREIGN";
    FinraCoaCode["Cat58TestAccount"] = "CAT_58_TEST_ACCOUNT";
    FinraCoaCode["Cat59OutOfBalance"] = "CAT_59_OUT_OF_BALANCE";
    FinraCoaCode["Cat60Conversion"] = "CAT_60_CONVERSION";
    FinraCoaCode["Cat61DepositsOccMargin"] = "CAT_61_DEPOSITS_OCC_MARGIN";
    FinraCoaCode["Cat62DepositsOther"] = "CAT_62_DEPOSITS_OTHER";
    FinraCoaCode["Cat63Other"] = "CAT_63_OTHER";
})(FinraCoaCode || (exports.FinraCoaCode = FinraCoaCode = {}));
/**
 * Describes if the account is cash-only or has access to a form of margin
 */
var FundingType;
(function (FundingType) {
    FundingType["FundingTypeUnspecified"] = "FUNDING_TYPE_UNSPECIFIED";
    FundingType["Cash"] = "CASH";
    FundingType["MarginLimitedPurpose"] = "MARGIN_LIMITED_PURPOSE";
    FundingType["MarginRegT"] = "MARGIN_REG_T";
    FundingType["MarginPortfolio"] = "MARGIN_PORTFOLIO";
})(FundingType || (exports.FundingType = FundingType = {}));
/**
 * The financial goal or purpose that an investor has in mind when making investment decisions; firms often ask investors to specify their investment objectives when opening an account, in order to provide appropriate investment recommendations and manage risk appropriately
 */
var AccountInvestmentObjective;
(function (AccountInvestmentObjective) {
    AccountInvestmentObjective["InvestmentObjectiveUnspecified"] = "INVESTMENT_OBJECTIVE_UNSPECIFIED";
    AccountInvestmentObjective["Balanced"] = "BALANCED";
    AccountInvestmentObjective["CapitalAppreciation"] = "CAPITAL_APPRECIATION";
    AccountInvestmentObjective["CapitalPreservation"] = "CAPITAL_PRESERVATION";
    AccountInvestmentObjective["Growth"] = "GROWTH";
    AccountInvestmentObjective["GrowthAndIncome"] = "GROWTH_AND_INCOME";
    AccountInvestmentObjective["GrowthIncome"] = "GROWTH_INCOME";
    AccountInvestmentObjective["Income"] = "INCOME";
    AccountInvestmentObjective["LongTermGrowthWithGreaterRisk"] = "LONG_TERM_GROWTH_WITH_GREATER_RISK";
    AccountInvestmentObjective["LongTermGrowthWithSafety"] = "LONG_TERM_GROWTH_WITH_SAFETY";
    AccountInvestmentObjective["MaximumGrowth"] = "MAXIMUM_GROWTH";
    AccountInvestmentObjective["ShortTermGrowthWithRisk"] = "SHORT_TERM_GROWTH_WITH_RISK";
    AccountInvestmentObjective["Speculation"] = "SPECULATION";
    AccountInvestmentObjective["Other"] = "OTHER";
})(AccountInvestmentObjective || (exports.AccountInvestmentObjective = AccountInvestmentObjective = {}));
/**
 * An investor’s short-term cash requirements or the need to access funds quickly; it is important to consider an investor’s liquidity needs to ensure that they have sufficient cash or easily liquidated assets available to meet their financial obligations - this may include holding cash or cash equivalents
 */
var AccountLiquidityNeeds;
(function (AccountLiquidityNeeds) {
    AccountLiquidityNeeds["LiquidityNeedsUnspecified"] = "LIQUIDITY_NEEDS_UNSPECIFIED";
    AccountLiquidityNeeds["VeryImportant"] = "VERY_IMPORTANT";
    AccountLiquidityNeeds["SomewhatImportant"] = "SOMEWHAT_IMPORTANT";
    AccountLiquidityNeeds["NotImportant"] = "NOT_IMPORTANT";
})(AccountLiquidityNeeds || (exports.AccountLiquidityNeeds = AccountLiquidityNeeds = {}));
/**
 * An investor’s willingness and ability to tolerate risk when making investment decisions; reflects the investor’s comfort level with the potential ups and downs of the market and their ability to withstand potential losses
 */
var AccountRiskTolerance;
(function (AccountRiskTolerance) {
    AccountRiskTolerance["RiskToleranceUnspecified"] = "RISK_TOLERANCE_UNSPECIFIED";
    AccountRiskTolerance["Low"] = "LOW";
    AccountRiskTolerance["Medium"] = "MEDIUM";
    AccountRiskTolerance["High"] = "HIGH";
})(AccountRiskTolerance || (exports.AccountRiskTolerance = AccountRiskTolerance = {}));
/**
 * TThe length of time an investor expects to hold an investment before selling it; this can affect the appropriate asset allocation and risk level for the portfolio
 */
var AccountTimeHorizon;
(function (AccountTimeHorizon) {
    AccountTimeHorizon["TimeHorizonUnspecified"] = "TIME_HORIZON_UNSPECIFIED";
    AccountTimeHorizon["Short"] = "SHORT";
    AccountTimeHorizon["Average"] = "AVERAGE";
    AccountTimeHorizon["Long"] = "LONG";
})(AccountTimeHorizon || (exports.AccountTimeHorizon = AccountTimeHorizon = {}));
/**
 * Annual income range; the low number is exclusive, the high number is inclusive
 */
var AccountAnnualIncomeRangeUsd;
(function (AccountAnnualIncomeRangeUsd) {
    AccountAnnualIncomeRangeUsd["UsdRangeUnspecified"] = "USD_RANGE_UNSPECIFIED";
    AccountAnnualIncomeRangeUsd["Under25K"] = "UNDER_25K";
    AccountAnnualIncomeRangeUsd["From25KTo50K"] = "FROM_25K_TO_50K";
    AccountAnnualIncomeRangeUsd["From50KTo100K"] = "FROM_50K_TO_100K";
    AccountAnnualIncomeRangeUsd["From100KTo200K"] = "FROM_100K_TO_200K";
    AccountAnnualIncomeRangeUsd["From200KTo300K"] = "FROM_200K_TO_300K";
    AccountAnnualIncomeRangeUsd["From300KTo500K"] = "FROM_300K_TO_500K";
    AccountAnnualIncomeRangeUsd["From500KTo1M"] = "FROM_500K_TO_1M";
    AccountAnnualIncomeRangeUsd["From1MTo5M"] = "FROM_1M_TO_5M";
    AccountAnnualIncomeRangeUsd["Over5M"] = "OVER_5M";
})(AccountAnnualIncomeRangeUsd || (exports.AccountAnnualIncomeRangeUsd = AccountAnnualIncomeRangeUsd = {}));
/**
 * Investment experience.
 */
var AccountInvestmentExperience;
(function (AccountInvestmentExperience) {
    AccountInvestmentExperience["InvestmentExperienceUnspecified"] = "INVESTMENT_EXPERIENCE_UNSPECIFIED";
    AccountInvestmentExperience["None"] = "NONE";
    AccountInvestmentExperience["Limited"] = "LIMITED";
    AccountInvestmentExperience["Good"] = "GOOD";
    AccountInvestmentExperience["Extensive"] = "EXTENSIVE";
})(AccountInvestmentExperience || (exports.AccountInvestmentExperience = AccountInvestmentExperience = {}));
/**
 * Liquid net worth range; the low number is exclusive, the high number is inclusive
 */
var AccountLiquidNetWorthRangeUsd;
(function (AccountLiquidNetWorthRangeUsd) {
    AccountLiquidNetWorthRangeUsd["UsdRangeUnspecified"] = "USD_RANGE_UNSPECIFIED";
    AccountLiquidNetWorthRangeUsd["Under25K"] = "UNDER_25K";
    AccountLiquidNetWorthRangeUsd["From25KTo50K"] = "FROM_25K_TO_50K";
    AccountLiquidNetWorthRangeUsd["From50KTo100K"] = "FROM_50K_TO_100K";
    AccountLiquidNetWorthRangeUsd["From100KTo200K"] = "FROM_100K_TO_200K";
    AccountLiquidNetWorthRangeUsd["From200KTo300K"] = "FROM_200K_TO_300K";
    AccountLiquidNetWorthRangeUsd["From300KTo500K"] = "FROM_300K_TO_500K";
    AccountLiquidNetWorthRangeUsd["From500KTo1M"] = "FROM_500K_TO_1M";
    AccountLiquidNetWorthRangeUsd["From1MTo5M"] = "FROM_1M_TO_5M";
    AccountLiquidNetWorthRangeUsd["Over5M"] = "OVER_5M";
})(AccountLiquidNetWorthRangeUsd || (exports.AccountLiquidNetWorthRangeUsd = AccountLiquidNetWorthRangeUsd = {}));
/**
 * Total net worth range; the low number is exclusive, the high number is inclusive
 */
var AccountTotalNetWorthRangeUsd;
(function (AccountTotalNetWorthRangeUsd) {
    AccountTotalNetWorthRangeUsd["UsdRangeUnspecified"] = "USD_RANGE_UNSPECIFIED";
    AccountTotalNetWorthRangeUsd["Under25K"] = "UNDER_25K";
    AccountTotalNetWorthRangeUsd["From25KTo50K"] = "FROM_25K_TO_50K";
    AccountTotalNetWorthRangeUsd["From50KTo100K"] = "FROM_50K_TO_100K";
    AccountTotalNetWorthRangeUsd["From100KTo200K"] = "FROM_100K_TO_200K";
    AccountTotalNetWorthRangeUsd["From200KTo300K"] = "FROM_200K_TO_300K";
    AccountTotalNetWorthRangeUsd["From300KTo500K"] = "FROM_300K_TO_500K";
    AccountTotalNetWorthRangeUsd["From500KTo1M"] = "FROM_500K_TO_1M";
    AccountTotalNetWorthRangeUsd["From1MTo5M"] = "FROM_1M_TO_5M";
    AccountTotalNetWorthRangeUsd["Over5M"] = "OVER_5M";
})(AccountTotalNetWorthRangeUsd || (exports.AccountTotalNetWorthRangeUsd = AccountTotalNetWorthRangeUsd = {}));
/**
 * A roll-up account classification based on the `registration_type`; Indicates what owns the account and/or if it is a special type (e.g., Joint, Estate, Retirement, etc.); Used primarily for reporting and high-level type identification
 */
var OwnershipType;
(function (OwnershipType) {
    OwnershipType["OwnershipTypeUnspecified"] = "OWNERSHIP_TYPE_UNSPECIFIED";
    OwnershipType["Individual"] = "INDIVIDUAL";
    OwnershipType["Joint"] = "JOINT";
    OwnershipType["Estate"] = "ESTATE";
    OwnershipType["Retirement"] = "RETIREMENT";
    OwnershipType["Trust"] = "TRUST";
    OwnershipType["Entity"] = "ENTITY";
    OwnershipType["Minor"] = "MINOR";
})(OwnershipType || (exports.OwnershipType = OwnershipType = {}));
/**
 * The registration of the account (e.g. Individual, Joint, IRA, etc.)
 */
var RegistrationType;
(function (RegistrationType) {
    RegistrationType["RegistrationTypeUnspecified"] = "REGISTRATION_TYPE_UNSPECIFIED";
    RegistrationType["IndividualRegistration"] = "INDIVIDUAL_REGISTRATION";
    RegistrationType["EstateRegistration"] = "ESTATE_REGISTRATION";
    RegistrationType["TraditionalIraRegistration"] = "TRADITIONAL_IRA_REGISTRATION";
    RegistrationType["SimpleIraRegistration"] = "SIMPLE_IRA_REGISTRATION";
    RegistrationType["SepIraRegistration"] = "SEP_IRA_REGISTRATION";
    RegistrationType["RothIraRegistration"] = "ROTH_IRA_REGISTRATION";
    RegistrationType["RolloverIraRegistration"] = "ROLLOVER_IRA_REGISTRATION";
    RegistrationType["JointWithRightsOfSurvivorshipRegistration"] = "JOINT_WITH_RIGHTS_OF_SURVIVORSHIP_REGISTRATION";
    RegistrationType["JointTenantsInCommonRegistration"] = "JOINT_TENANTS_IN_COMMON_REGISTRATION";
    RegistrationType["JointTenantsByEntiretyRegistration"] = "JOINT_TENANTS_BY_ENTIRETY_REGISTRATION";
    RegistrationType["JointCommunityPropertyRegistration"] = "JOINT_COMMUNITY_PROPERTY_REGISTRATION";
    RegistrationType["TrustRegistration"] = "TRUST_REGISTRATION";
    RegistrationType["CorporationRegistration"] = "CORPORATION_REGISTRATION";
    RegistrationType["LlcRegistration"] = "LLC_REGISTRATION";
    RegistrationType["PartnershipRegistration"] = "PARTNERSHIP_REGISTRATION";
    RegistrationType["OperatingRegistration"] = "OPERATING_REGISTRATION";
    RegistrationType["IraBeneficiaryTraditionalRegistration"] = "IRA_BENEFICIARY_TRADITIONAL_REGISTRATION";
    RegistrationType["IraBeneficiaryRothRegistration"] = "IRA_BENEFICIARY_ROTH_REGISTRATION";
    RegistrationType["ForeignIndividualRegistration"] = "FOREIGN_INDIVIDUAL_REGISTRATION";
    RegistrationType["CustodialRegistration"] = "CUSTODIAL_REGISTRATION";
})(RegistrationType || (exports.RegistrationType = RegistrationType = {}));
/**
 * The Reserve Class associated with the account
 */
var ReserveClass;
(function (ReserveClass) {
    ReserveClass["ReserveClassUnspecified"] = "RESERVE_CLASS_UNSPECIFIED";
    ReserveClass["Customer"] = "CUSTOMER";
    ReserveClass["Pab"] = "PAB";
    ReserveClass["Firm"] = "FIRM";
    ReserveClass["Street"] = "STREET";
    ReserveClass["GL"] = "G_L";
})(ReserveClass || (exports.ReserveClass = ReserveClass = {}));
/**
 * Indicates if the account is `OPEN`, `PENDING`, or `CLOSED`
 */
var AccountState;
(function (AccountState) {
    AccountState["StateUnspecified"] = "STATE_UNSPECIFIED";
    AccountState["Pending"] = "PENDING";
    AccountState["Open"] = "OPEN";
    AccountState["Closed"] = "CLOSED";
})(AccountState || (exports.AccountState = AccountState = {}));
/**
 * A method of determining the cost basis of an asset that has been sold or disposed of, by identifying which specific lot of the asset was sold and using the cost of that lot to calculate the cost basis; this method is commonly used for tax purposes to determine the amount of reportable capital gains or losses By default, this is set to `COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM`
 */
var AccountCostBasisLotDisposalMethod;
(function (AccountCostBasisLotDisposalMethod) {
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalMethodUnspecified"] = "COST_BASIS_LOT_DISPOSAL_METHOD_UNSPECIFIED";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalFifo"] = "COST_BASIS_LOT_DISPOSAL_FIFO";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalLifo"] = "COST_BASIS_LOT_DISPOSAL_LIFO";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalHighCost"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalHighCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_LONG_TERM";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalHighCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_SHORT_TERM";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalLowCost"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalLowCostLongTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_LONG_TERM";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalLowCostShortTerm"] = "COST_BASIS_LOT_DISPOSAL_LOW_COST_SHORT_TERM";
    AccountCostBasisLotDisposalMethod["CostBasisLotDisposalMinTaxTerm"] = "COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM";
})(AccountCostBasisLotDisposalMethod || (exports.AccountCostBasisLotDisposalMethod = AccountCostBasisLotDisposalMethod = {}));
/** @internal */
exports.AccountCatAccountHolderType$inboundSchema = z
    .union([
    z.nativeEnum(AccountCatAccountHolderType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountCatAccountHolderType$outboundSchema = z.union([
    z.nativeEnum(AccountCatAccountHolderType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountCatAccountHolderType$;
(function (AccountCatAccountHolderType$) {
    /** @deprecated use `AccountCatAccountHolderType$inboundSchema` instead. */
    AccountCatAccountHolderType$.inboundSchema = exports.AccountCatAccountHolderType$inboundSchema;
    /** @deprecated use `AccountCatAccountHolderType$outboundSchema` instead. */
    AccountCatAccountHolderType$.outboundSchema = exports.AccountCatAccountHolderType$outboundSchema;
})(AccountCatAccountHolderType$ || (exports.AccountCatAccountHolderType$ = AccountCatAccountHolderType$ = {}));
/** @internal */
exports.Domicile$inboundSchema = z
    .union([
    z.nativeEnum(Domicile),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.Domicile$outboundSchema = z.union([
    z.nativeEnum(Domicile),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Domicile$;
(function (Domicile$) {
    /** @deprecated use `Domicile$inboundSchema` instead. */
    Domicile$.inboundSchema = exports.Domicile$inboundSchema;
    /** @deprecated use `Domicile$outboundSchema` instead. */
    Domicile$.outboundSchema = exports.Domicile$outboundSchema;
})(Domicile$ || (exports.Domicile$ = Domicile$ = {}));
/** @internal */
exports.FinraCoaCode$inboundSchema = z
    .union([
    z.nativeEnum(FinraCoaCode),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.FinraCoaCode$outboundSchema = z.union([
    z.nativeEnum(FinraCoaCode),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FinraCoaCode$;
(function (FinraCoaCode$) {
    /** @deprecated use `FinraCoaCode$inboundSchema` instead. */
    FinraCoaCode$.inboundSchema = exports.FinraCoaCode$inboundSchema;
    /** @deprecated use `FinraCoaCode$outboundSchema` instead. */
    FinraCoaCode$.outboundSchema = exports.FinraCoaCode$outboundSchema;
})(FinraCoaCode$ || (exports.FinraCoaCode$ = FinraCoaCode$ = {}));
/** @internal */
exports.FundingType$inboundSchema = z
    .union([
    z.nativeEnum(FundingType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.FundingType$outboundSchema = z.union([
    z.nativeEnum(FundingType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FundingType$;
(function (FundingType$) {
    /** @deprecated use `FundingType$inboundSchema` instead. */
    FundingType$.inboundSchema = exports.FundingType$inboundSchema;
    /** @deprecated use `FundingType$outboundSchema` instead. */
    FundingType$.outboundSchema = exports.FundingType$outboundSchema;
})(FundingType$ || (exports.FundingType$ = FundingType$ = {}));
/** @internal */
exports.AccountInvestmentObjective$inboundSchema = z
    .union([
    z.nativeEnum(AccountInvestmentObjective),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountInvestmentObjective$outboundSchema = z.union([
    z.nativeEnum(AccountInvestmentObjective),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountInvestmentObjective$;
(function (AccountInvestmentObjective$) {
    /** @deprecated use `AccountInvestmentObjective$inboundSchema` instead. */
    AccountInvestmentObjective$.inboundSchema = exports.AccountInvestmentObjective$inboundSchema;
    /** @deprecated use `AccountInvestmentObjective$outboundSchema` instead. */
    AccountInvestmentObjective$.outboundSchema = exports.AccountInvestmentObjective$outboundSchema;
})(AccountInvestmentObjective$ || (exports.AccountInvestmentObjective$ = AccountInvestmentObjective$ = {}));
/** @internal */
exports.AccountLiquidityNeeds$inboundSchema = z
    .union([
    z.nativeEnum(AccountLiquidityNeeds),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountLiquidityNeeds$outboundSchema = z.union([
    z.nativeEnum(AccountLiquidityNeeds),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountLiquidityNeeds$;
(function (AccountLiquidityNeeds$) {
    /** @deprecated use `AccountLiquidityNeeds$inboundSchema` instead. */
    AccountLiquidityNeeds$.inboundSchema = exports.AccountLiquidityNeeds$inboundSchema;
    /** @deprecated use `AccountLiquidityNeeds$outboundSchema` instead. */
    AccountLiquidityNeeds$.outboundSchema = exports.AccountLiquidityNeeds$outboundSchema;
})(AccountLiquidityNeeds$ || (exports.AccountLiquidityNeeds$ = AccountLiquidityNeeds$ = {}));
/** @internal */
exports.AccountRiskTolerance$inboundSchema = z
    .union([
    z.nativeEnum(AccountRiskTolerance),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountRiskTolerance$outboundSchema = z.union([
    z.nativeEnum(AccountRiskTolerance),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountRiskTolerance$;
(function (AccountRiskTolerance$) {
    /** @deprecated use `AccountRiskTolerance$inboundSchema` instead. */
    AccountRiskTolerance$.inboundSchema = exports.AccountRiskTolerance$inboundSchema;
    /** @deprecated use `AccountRiskTolerance$outboundSchema` instead. */
    AccountRiskTolerance$.outboundSchema = exports.AccountRiskTolerance$outboundSchema;
})(AccountRiskTolerance$ || (exports.AccountRiskTolerance$ = AccountRiskTolerance$ = {}));
/** @internal */
exports.AccountTimeHorizon$inboundSchema = z
    .union([
    z.nativeEnum(AccountTimeHorizon),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountTimeHorizon$outboundSchema = z.union([
    z.nativeEnum(AccountTimeHorizon),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountTimeHorizon$;
(function (AccountTimeHorizon$) {
    /** @deprecated use `AccountTimeHorizon$inboundSchema` instead. */
    AccountTimeHorizon$.inboundSchema = exports.AccountTimeHorizon$inboundSchema;
    /** @deprecated use `AccountTimeHorizon$outboundSchema` instead. */
    AccountTimeHorizon$.outboundSchema = exports.AccountTimeHorizon$outboundSchema;
})(AccountTimeHorizon$ || (exports.AccountTimeHorizon$ = AccountTimeHorizon$ = {}));
/** @internal */
exports.AccountGoals$inboundSchema = z.object({
    investment_objective: exports.AccountInvestmentObjective$inboundSchema.optional(),
    liquidity_needs: exports.AccountLiquidityNeeds$inboundSchema.optional(),
    risk_tolerance: exports.AccountRiskTolerance$inboundSchema.optional(),
    time_horizon: exports.AccountTimeHorizon$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "investment_objective": "investmentObjective",
        "liquidity_needs": "liquidityNeeds",
        "risk_tolerance": "riskTolerance",
        "time_horizon": "timeHorizon",
    });
});
/** @internal */
exports.AccountGoals$outboundSchema = z.object({
    investmentObjective: exports.AccountInvestmentObjective$outboundSchema.optional(),
    liquidityNeeds: exports.AccountLiquidityNeeds$outboundSchema.optional(),
    riskTolerance: exports.AccountRiskTolerance$outboundSchema.optional(),
    timeHorizon: exports.AccountTimeHorizon$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        investmentObjective: "investment_objective",
        liquidityNeeds: "liquidity_needs",
        riskTolerance: "risk_tolerance",
        timeHorizon: "time_horizon",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountGoals$;
(function (AccountGoals$) {
    /** @deprecated use `AccountGoals$inboundSchema` instead. */
    AccountGoals$.inboundSchema = exports.AccountGoals$inboundSchema;
    /** @deprecated use `AccountGoals$outboundSchema` instead. */
    AccountGoals$.outboundSchema = exports.AccountGoals$outboundSchema;
})(AccountGoals$ || (exports.AccountGoals$ = AccountGoals$ = {}));
/** @internal */
exports.AccountAnnualIncomeRangeUsd$inboundSchema = z
    .union([
    z.nativeEnum(AccountAnnualIncomeRangeUsd),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountAnnualIncomeRangeUsd$outboundSchema = z.union([
    z.nativeEnum(AccountAnnualIncomeRangeUsd),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountAnnualIncomeRangeUsd$;
(function (AccountAnnualIncomeRangeUsd$) {
    /** @deprecated use `AccountAnnualIncomeRangeUsd$inboundSchema` instead. */
    AccountAnnualIncomeRangeUsd$.inboundSchema = exports.AccountAnnualIncomeRangeUsd$inboundSchema;
    /** @deprecated use `AccountAnnualIncomeRangeUsd$outboundSchema` instead. */
    AccountAnnualIncomeRangeUsd$.outboundSchema = exports.AccountAnnualIncomeRangeUsd$outboundSchema;
})(AccountAnnualIncomeRangeUsd$ || (exports.AccountAnnualIncomeRangeUsd$ = AccountAnnualIncomeRangeUsd$ = {}));
/** @internal */
exports.AccountInvestmentExperience$inboundSchema = z
    .union([
    z.nativeEnum(AccountInvestmentExperience),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountInvestmentExperience$outboundSchema = z.union([
    z.nativeEnum(AccountInvestmentExperience),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountInvestmentExperience$;
(function (AccountInvestmentExperience$) {
    /** @deprecated use `AccountInvestmentExperience$inboundSchema` instead. */
    AccountInvestmentExperience$.inboundSchema = exports.AccountInvestmentExperience$inboundSchema;
    /** @deprecated use `AccountInvestmentExperience$outboundSchema` instead. */
    AccountInvestmentExperience$.outboundSchema = exports.AccountInvestmentExperience$outboundSchema;
})(AccountInvestmentExperience$ || (exports.AccountInvestmentExperience$ = AccountInvestmentExperience$ = {}));
/** @internal */
exports.AccountLiquidNetWorthRangeUsd$inboundSchema = z
    .union([
    z.nativeEnum(AccountLiquidNetWorthRangeUsd),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountLiquidNetWorthRangeUsd$outboundSchema = z.union([
    z.nativeEnum(AccountLiquidNetWorthRangeUsd),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountLiquidNetWorthRangeUsd$;
(function (AccountLiquidNetWorthRangeUsd$) {
    /** @deprecated use `AccountLiquidNetWorthRangeUsd$inboundSchema` instead. */
    AccountLiquidNetWorthRangeUsd$.inboundSchema = exports.AccountLiquidNetWorthRangeUsd$inboundSchema;
    /** @deprecated use `AccountLiquidNetWorthRangeUsd$outboundSchema` instead. */
    AccountLiquidNetWorthRangeUsd$.outboundSchema = exports.AccountLiquidNetWorthRangeUsd$outboundSchema;
})(AccountLiquidNetWorthRangeUsd$ || (exports.AccountLiquidNetWorthRangeUsd$ = AccountLiquidNetWorthRangeUsd$ = {}));
/** @internal */
exports.AccountTotalNetWorthRangeUsd$inboundSchema = z
    .union([
    z.nativeEnum(AccountTotalNetWorthRangeUsd),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountTotalNetWorthRangeUsd$outboundSchema = z.union([
    z.nativeEnum(AccountTotalNetWorthRangeUsd),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountTotalNetWorthRangeUsd$;
(function (AccountTotalNetWorthRangeUsd$) {
    /** @deprecated use `AccountTotalNetWorthRangeUsd$inboundSchema` instead. */
    AccountTotalNetWorthRangeUsd$.inboundSchema = exports.AccountTotalNetWorthRangeUsd$inboundSchema;
    /** @deprecated use `AccountTotalNetWorthRangeUsd$outboundSchema` instead. */
    AccountTotalNetWorthRangeUsd$.outboundSchema = exports.AccountTotalNetWorthRangeUsd$outboundSchema;
})(AccountTotalNetWorthRangeUsd$ || (exports.AccountTotalNetWorthRangeUsd$ = AccountTotalNetWorthRangeUsd$ = {}));
/** @internal */
exports.CustomerProfile$inboundSchema = z.object({
    annual_income_range_usd: exports.AccountAnnualIncomeRangeUsd$inboundSchema.optional(),
    federal_tax_bracket: z.number().optional(),
    investment_experience: exports.AccountInvestmentExperience$inboundSchema.optional(),
    liquid_net_worth_range_usd: exports.AccountLiquidNetWorthRangeUsd$inboundSchema
        .optional(),
    total_net_worth_range_usd: exports.AccountTotalNetWorthRangeUsd$inboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "annual_income_range_usd": "annualIncomeRangeUsd",
        "federal_tax_bracket": "federalTaxBracket",
        "investment_experience": "investmentExperience",
        "liquid_net_worth_range_usd": "liquidNetWorthRangeUsd",
        "total_net_worth_range_usd": "totalNetWorthRangeUsd",
    });
});
/** @internal */
exports.CustomerProfile$outboundSchema = z.object({
    annualIncomeRangeUsd: exports.AccountAnnualIncomeRangeUsd$outboundSchema.optional(),
    federalTaxBracket: z.number().optional(),
    investmentExperience: exports.AccountInvestmentExperience$outboundSchema.optional(),
    liquidNetWorthRangeUsd: exports.AccountLiquidNetWorthRangeUsd$outboundSchema
        .optional(),
    totalNetWorthRangeUsd: exports.AccountTotalNetWorthRangeUsd$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        annualIncomeRangeUsd: "annual_income_range_usd",
        federalTaxBracket: "federal_tax_bracket",
        investmentExperience: "investment_experience",
        liquidNetWorthRangeUsd: "liquid_net_worth_range_usd",
        totalNetWorthRangeUsd: "total_net_worth_range_usd",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerProfile$;
(function (CustomerProfile$) {
    /** @deprecated use `CustomerProfile$inboundSchema` instead. */
    CustomerProfile$.inboundSchema = exports.CustomerProfile$inboundSchema;
    /** @deprecated use `CustomerProfile$outboundSchema` instead. */
    CustomerProfile$.outboundSchema = exports.CustomerProfile$outboundSchema;
})(CustomerProfile$ || (exports.CustomerProfile$ = CustomerProfile$ = {}));
/** @internal */
exports.InvestmentProfile$inboundSchema = z.object({
    account_goals: z.nullable(z.lazy(() => exports.AccountGoals$inboundSchema))
        .optional(),
    customer_profile: z.nullable(z.lazy(() => exports.CustomerProfile$inboundSchema))
        .optional(),
    investment_profile_id: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_goals": "accountGoals",
        "customer_profile": "customerProfile",
        "investment_profile_id": "investmentProfileId",
    });
});
/** @internal */
exports.InvestmentProfile$outboundSchema = z.object({
    accountGoals: z.nullable(z.lazy(() => exports.AccountGoals$outboundSchema))
        .optional(),
    customerProfile: z.nullable(z.lazy(() => exports.CustomerProfile$outboundSchema))
        .optional(),
    investmentProfileId: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountGoals: "account_goals",
        customerProfile: "customer_profile",
        investmentProfileId: "investment_profile_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestmentProfile$;
(function (InvestmentProfile$) {
    /** @deprecated use `InvestmentProfile$inboundSchema` instead. */
    InvestmentProfile$.inboundSchema = exports.InvestmentProfile$inboundSchema;
    /** @deprecated use `InvestmentProfile$outboundSchema` instead. */
    InvestmentProfile$.outboundSchema = exports.InvestmentProfile$outboundSchema;
})(InvestmentProfile$ || (exports.InvestmentProfile$ = InvestmentProfile$ = {}));
/** @internal */
exports.OwnershipType$inboundSchema = z
    .union([
    z.nativeEnum(OwnershipType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.OwnershipType$outboundSchema = z.union([
    z.nativeEnum(OwnershipType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OwnershipType$;
(function (OwnershipType$) {
    /** @deprecated use `OwnershipType$inboundSchema` instead. */
    OwnershipType$.inboundSchema = exports.OwnershipType$inboundSchema;
    /** @deprecated use `OwnershipType$outboundSchema` instead. */
    OwnershipType$.outboundSchema = exports.OwnershipType$outboundSchema;
})(OwnershipType$ || (exports.OwnershipType$ = OwnershipType$ = {}));
/** @internal */
exports.RegistrationType$inboundSchema = z
    .union([
    z.nativeEnum(RegistrationType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.RegistrationType$outboundSchema = z.union([
    z.nativeEnum(RegistrationType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RegistrationType$;
(function (RegistrationType$) {
    /** @deprecated use `RegistrationType$inboundSchema` instead. */
    RegistrationType$.inboundSchema = exports.RegistrationType$inboundSchema;
    /** @deprecated use `RegistrationType$outboundSchema` instead. */
    RegistrationType$.outboundSchema = exports.RegistrationType$outboundSchema;
})(RegistrationType$ || (exports.RegistrationType$ = RegistrationType$ = {}));
/** @internal */
exports.ReserveClass$inboundSchema = z
    .union([
    z.nativeEnum(ReserveClass),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.ReserveClass$outboundSchema = z.union([
    z.nativeEnum(ReserveClass),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ReserveClass$;
(function (ReserveClass$) {
    /** @deprecated use `ReserveClass$inboundSchema` instead. */
    ReserveClass$.inboundSchema = exports.ReserveClass$inboundSchema;
    /** @deprecated use `ReserveClass$outboundSchema` instead. */
    ReserveClass$.outboundSchema = exports.ReserveClass$outboundSchema;
})(ReserveClass$ || (exports.ReserveClass$ = ReserveClass$ = {}));
/** @internal */
exports.AccountState$inboundSchema = z
    .union([
    z.nativeEnum(AccountState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountState$outboundSchema = z.union([
    z.nativeEnum(AccountState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountState$;
(function (AccountState$) {
    /** @deprecated use `AccountState$inboundSchema` instead. */
    AccountState$.inboundSchema = exports.AccountState$inboundSchema;
    /** @deprecated use `AccountState$outboundSchema` instead. */
    AccountState$.outboundSchema = exports.AccountState$outboundSchema;
})(AccountState$ || (exports.AccountState$ = AccountState$ = {}));
/** @internal */
exports.AccountCostBasisLotDisposalMethod$inboundSchema = z
    .union([
    z.nativeEnum(AccountCostBasisLotDisposalMethod),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.AccountCostBasisLotDisposalMethod$outboundSchema = z.union([
    z.nativeEnum(AccountCostBasisLotDisposalMethod),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountCostBasisLotDisposalMethod$;
(function (AccountCostBasisLotDisposalMethod$) {
    /** @deprecated use `AccountCostBasisLotDisposalMethod$inboundSchema` instead. */
    AccountCostBasisLotDisposalMethod$.inboundSchema = exports.AccountCostBasisLotDisposalMethod$inboundSchema;
    /** @deprecated use `AccountCostBasisLotDisposalMethod$outboundSchema` instead. */
    AccountCostBasisLotDisposalMethod$.outboundSchema = exports.AccountCostBasisLotDisposalMethod$outboundSchema;
})(AccountCostBasisLotDisposalMethod$ || (exports.AccountCostBasisLotDisposalMethod$ = AccountCostBasisLotDisposalMethod$ = {}));
/** @internal */
exports.AccountTaxProfile$inboundSchema = z.object({
    cost_basis_lot_disposal_method: exports.AccountCostBasisLotDisposalMethod$inboundSchema.optional(),
    section_475_election: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "cost_basis_lot_disposal_method": "costBasisLotDisposalMethod",
        "section_475_election": "section475Election",
    });
});
/** @internal */
exports.AccountTaxProfile$outboundSchema = z.object({
    costBasisLotDisposalMethod: exports.AccountCostBasisLotDisposalMethod$outboundSchema
        .optional(),
    section475Election: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        costBasisLotDisposalMethod: "cost_basis_lot_disposal_method",
        section475Election: "section_475_election",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccountTaxProfile$;
(function (AccountTaxProfile$) {
    /** @deprecated use `AccountTaxProfile$inboundSchema` instead. */
    AccountTaxProfile$.inboundSchema = exports.AccountTaxProfile$inboundSchema;
    /** @deprecated use `AccountTaxProfile$outboundSchema` instead. */
    AccountTaxProfile$.outboundSchema = exports.AccountTaxProfile$outboundSchema;
})(AccountTaxProfile$ || (exports.AccountTaxProfile$ = AccountTaxProfile$ = {}));
/** @internal */
exports.Account$inboundSchema = z.object({
    accepts_issuer_direct_communication: z.boolean().optional(),
    account_group_id: z.string().optional(),
    account_id: z.string().optional(),
    account_number: z.string().optional(),
    active_restrictions: z.array(z.string()).optional(),
    advised: z.boolean().optional(),
    agreements: z.array(agreement_js_1.Agreement$inboundSchema).optional(),
    cat_account_holder_type: exports.AccountCatAccountHolderType$inboundSchema
        .optional(),
    close_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    correspondent_id: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    domicile: exports.Domicile$inboundSchema.optional(),
    enrollments: z.array(enrollment_js_1.Enrollment$inboundSchema).optional(),
    fdid: z.string().optional(),
    finra_coa_code: exports.FinraCoaCode$inboundSchema.optional(),
    funding_type: exports.FundingType$inboundSchema.optional(),
    identifiers: z.array(identifier_js_1.Identifier$inboundSchema).optional(),
    interested_parties: z.array(interestedparty_js_1.InterestedParty$inboundSchema).optional(),
    investment_profile: z.nullable(z.lazy(() => exports.InvestmentProfile$inboundSchema)).optional(),
    managed: z.boolean().optional(),
    margin_group_id: z.string().optional(),
    name: z.string().optional(),
    open_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    ownership_type: exports.OwnershipType$inboundSchema.optional(),
    parties: z.array(party_js_1.Party$inboundSchema).optional(),
    pattern_day_trader: z.boolean().optional(),
    primary_registered_rep_id: z.string().optional(),
    registration_type: exports.RegistrationType$inboundSchema.optional(),
    reserve_class: exports.ReserveClass$inboundSchema.optional(),
    state: exports.AccountState$inboundSchema.optional(),
    tax_profile: z.nullable(z.lazy(() => exports.AccountTaxProfile$inboundSchema))
        .optional(),
    title: z.string().optional(),
    trusted_contacts: z.array(trustedcontact_js_1.TrustedContact$inboundSchema).optional(),
    wrap_fee_billed: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accepts_issuer_direct_communication": "acceptsIssuerDirectCommunication",
        "account_group_id": "accountGroupId",
        "account_id": "accountId",
        "account_number": "accountNumber",
        "active_restrictions": "activeRestrictions",
        "cat_account_holder_type": "catAccountHolderType",
        "close_time": "closeTime",
        "correspondent_id": "correspondentId",
        "create_time": "createTime",
        "finra_coa_code": "finraCoaCode",
        "funding_type": "fundingType",
        "interested_parties": "interestedParties",
        "investment_profile": "investmentProfile",
        "margin_group_id": "marginGroupId",
        "open_time": "openTime",
        "ownership_type": "ownershipType",
        "pattern_day_trader": "patternDayTrader",
        "primary_registered_rep_id": "primaryRegisteredRepId",
        "registration_type": "registrationType",
        "reserve_class": "reserveClass",
        "tax_profile": "taxProfile",
        "trusted_contacts": "trustedContacts",
        "wrap_fee_billed": "wrapFeeBilled",
    });
});
/** @internal */
exports.Account$outboundSchema = z.object({
    acceptsIssuerDirectCommunication: z.boolean().optional(),
    accountGroupId: z.string().optional(),
    accountId: z.string().optional(),
    accountNumber: z.string().optional(),
    activeRestrictions: z.array(z.string()).optional(),
    advised: z.boolean().optional(),
    agreements: z.array(agreement_js_1.Agreement$outboundSchema).optional(),
    catAccountHolderType: exports.AccountCatAccountHolderType$outboundSchema.optional(),
    closeTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    correspondentId: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    domicile: exports.Domicile$outboundSchema.optional(),
    enrollments: z.array(enrollment_js_1.Enrollment$outboundSchema).optional(),
    fdid: z.string().optional(),
    finraCoaCode: exports.FinraCoaCode$outboundSchema.optional(),
    fundingType: exports.FundingType$outboundSchema.optional(),
    identifiers: z.array(identifier_js_1.Identifier$outboundSchema).optional(),
    interestedParties: z.array(interestedparty_js_1.InterestedParty$outboundSchema).optional(),
    investmentProfile: z.nullable(z.lazy(() => exports.InvestmentProfile$outboundSchema))
        .optional(),
    managed: z.boolean().optional(),
    marginGroupId: z.string().optional(),
    name: z.string().optional(),
    openTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    ownershipType: exports.OwnershipType$outboundSchema.optional(),
    parties: z.array(party_js_1.Party$outboundSchema).optional(),
    patternDayTrader: z.boolean().optional(),
    primaryRegisteredRepId: z.string().optional(),
    registrationType: exports.RegistrationType$outboundSchema.optional(),
    reserveClass: exports.ReserveClass$outboundSchema.optional(),
    state: exports.AccountState$outboundSchema.optional(),
    taxProfile: z.nullable(z.lazy(() => exports.AccountTaxProfile$outboundSchema))
        .optional(),
    title: z.string().optional(),
    trustedContacts: z.array(trustedcontact_js_1.TrustedContact$outboundSchema).optional(),
    wrapFeeBilled: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        acceptsIssuerDirectCommunication: "accepts_issuer_direct_communication",
        accountGroupId: "account_group_id",
        accountId: "account_id",
        accountNumber: "account_number",
        activeRestrictions: "active_restrictions",
        catAccountHolderType: "cat_account_holder_type",
        closeTime: "close_time",
        correspondentId: "correspondent_id",
        createTime: "create_time",
        finraCoaCode: "finra_coa_code",
        fundingType: "funding_type",
        interestedParties: "interested_parties",
        investmentProfile: "investment_profile",
        marginGroupId: "margin_group_id",
        openTime: "open_time",
        ownershipType: "ownership_type",
        patternDayTrader: "pattern_day_trader",
        primaryRegisteredRepId: "primary_registered_rep_id",
        registrationType: "registration_type",
        reserveClass: "reserve_class",
        taxProfile: "tax_profile",
        trustedContacts: "trusted_contacts",
        wrapFeeBilled: "wrap_fee_billed",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Account$;
(function (Account$) {
    /** @deprecated use `Account$inboundSchema` instead. */
    Account$.inboundSchema = exports.Account$inboundSchema;
    /** @deprecated use `Account$outboundSchema` instead. */
    Account$.outboundSchema = exports.Account$outboundSchema;
})(Account$ || (exports.Account$ = Account$ = {}));
//# sourceMappingURL=account.js.map