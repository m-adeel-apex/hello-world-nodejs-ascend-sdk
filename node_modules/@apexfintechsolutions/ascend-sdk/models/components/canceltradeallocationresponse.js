"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancelTradeAllocationResponseSideModifier$outboundSchema = exports.CancelTradeAllocationResponseSideModifier$inboundSchema = exports.CancelTradeAllocationResponseSettlementDate$ = exports.CancelTradeAllocationResponseSettlementDate$outboundSchema = exports.CancelTradeAllocationResponseSettlementDate$inboundSchema = exports.CancelTradeAllocationResponseQuantity$ = exports.CancelTradeAllocationResponseQuantity$outboundSchema = exports.CancelTradeAllocationResponseQuantity$inboundSchema = exports.CancelTradeAllocationResponsePriceAdjustment$ = exports.CancelTradeAllocationResponsePriceAdjustment$outboundSchema = exports.CancelTradeAllocationResponsePriceAdjustment$inboundSchema = exports.CancelTradeAllocationResponsePriceAdjustmentType$ = exports.CancelTradeAllocationResponsePriceAdjustmentType$outboundSchema = exports.CancelTradeAllocationResponsePriceAdjustmentType$inboundSchema = exports.CancelTradeAllocationResponsePriceAdjustmentAmount$ = exports.CancelTradeAllocationResponsePriceAdjustmentAmount$outboundSchema = exports.CancelTradeAllocationResponsePriceAdjustmentAmount$inboundSchema = exports.CancelTradeAllocationResponsePrice$ = exports.CancelTradeAllocationResponsePrice$outboundSchema = exports.CancelTradeAllocationResponsePrice$inboundSchema = exports.CancelTradeAllocationResponsePrevailingMarketPrice$ = exports.CancelTradeAllocationResponsePrevailingMarketPrice$outboundSchema = exports.CancelTradeAllocationResponsePrevailingMarketPrice$inboundSchema = exports.CancelTradeAllocationResponseIdentifierType$ = exports.CancelTradeAllocationResponseIdentifierType$outboundSchema = exports.CancelTradeAllocationResponseIdentifierType$inboundSchema = exports.CancelTradeAllocationResponseGrossAmount$ = exports.CancelTradeAllocationResponseGrossAmount$outboundSchema = exports.CancelTradeAllocationResponseGrossAmount$inboundSchema = exports.CancelTradeAllocationResponseCommissionAmount$ = exports.CancelTradeAllocationResponseCommissionAmount$outboundSchema = exports.CancelTradeAllocationResponseCommissionAmount$inboundSchema = exports.CancelTradeAllocationResponseBrokerCapacity$ = exports.CancelTradeAllocationResponseBrokerCapacity$outboundSchema = exports.CancelTradeAllocationResponseBrokerCapacity$inboundSchema = exports.CancelTradeAllocationResponseAssetType$ = exports.CancelTradeAllocationResponseAssetType$outboundSchema = exports.CancelTradeAllocationResponseAssetType$inboundSchema = exports.CancelTradeAllocationResponseAccruedInterestAmount$ = exports.CancelTradeAllocationResponseAccruedInterestAmount$outboundSchema = exports.CancelTradeAllocationResponseAccruedInterestAmount$inboundSchema = exports.CancelTradeAllocationResponseWhenIssued = exports.CancelTradeAllocationResponseToSide = exports.CancelTradeAllocationResponseState = exports.CancelTradeAllocationResponseSpecialInstructions = exports.CancelTradeAllocationResponseSideModifier = exports.CancelTradeAllocationResponsePriceAdjustmentType = exports.CancelTradeAllocationResponseIdentifierType = exports.CancelTradeAllocationResponseBrokerCapacity = exports.CancelTradeAllocationResponseAssetType = void 0;
exports.CancelTradeAllocationResponse$ = exports.CancelTradeAllocationResponse$outboundSchema = exports.CancelTradeAllocationResponse$inboundSchema = exports.CancelTradeAllocationResponseTradeAllocation$ = exports.CancelTradeAllocationResponseTradeAllocation$outboundSchema = exports.CancelTradeAllocationResponseTradeAllocation$inboundSchema = exports.CancelTradeAllocationResponseWhenIssued$ = exports.CancelTradeAllocationResponseWhenIssued$outboundSchema = exports.CancelTradeAllocationResponseWhenIssued$inboundSchema = exports.CancelTradeAllocationResponseToSide$ = exports.CancelTradeAllocationResponseToSide$outboundSchema = exports.CancelTradeAllocationResponseToSide$inboundSchema = exports.CancelTradeAllocationResponseState$ = exports.CancelTradeAllocationResponseState$outboundSchema = exports.CancelTradeAllocationResponseState$inboundSchema = exports.CancelTradeAllocationResponseSpecialInstructions$ = exports.CancelTradeAllocationResponseSpecialInstructions$outboundSchema = exports.CancelTradeAllocationResponseSpecialInstructions$inboundSchema = exports.CancelTradeAllocationResponseSideModifier$ = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const bondyield_js_1 = require("./bondyield.js");
const fee_js_1 = require("./fee.js");
const lot_js_1 = require("./lot.js");
/**
 * Type of the asset being traded. Required for SYMBOL and CUSIP.
 */
var CancelTradeAllocationResponseAssetType;
(function (CancelTradeAllocationResponseAssetType) {
    CancelTradeAllocationResponseAssetType["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    CancelTradeAllocationResponseAssetType["Equity"] = "EQUITY";
    CancelTradeAllocationResponseAssetType["FixedIncome"] = "FIXED_INCOME";
})(CancelTradeAllocationResponseAssetType || (exports.CancelTradeAllocationResponseAssetType = CancelTradeAllocationResponseAssetType = {}));
/**
 * Broker capacity for the trade.
 */
var CancelTradeAllocationResponseBrokerCapacity;
(function (CancelTradeAllocationResponseBrokerCapacity) {
    CancelTradeAllocationResponseBrokerCapacity["CapacityUnspecified"] = "CAPACITY_UNSPECIFIED";
    CancelTradeAllocationResponseBrokerCapacity["Agency"] = "AGENCY";
    CancelTradeAllocationResponseBrokerCapacity["Principal"] = "PRINCIPAL";
    CancelTradeAllocationResponseBrokerCapacity["Mixed"] = "MIXED";
})(CancelTradeAllocationResponseBrokerCapacity || (exports.CancelTradeAllocationResponseBrokerCapacity = CancelTradeAllocationResponseBrokerCapacity = {}));
/**
 * Identifier type for the asset being traded.
 */
var CancelTradeAllocationResponseIdentifierType;
(function (CancelTradeAllocationResponseIdentifierType) {
    CancelTradeAllocationResponseIdentifierType["IdentifierTypeUnspecified"] = "IDENTIFIER_TYPE_UNSPECIFIED";
    CancelTradeAllocationResponseIdentifierType["AssetId"] = "ASSET_ID";
    CancelTradeAllocationResponseIdentifierType["Symbol"] = "SYMBOL";
    CancelTradeAllocationResponseIdentifierType["Cusip"] = "CUSIP";
    CancelTradeAllocationResponseIdentifierType["Isin"] = "ISIN";
})(CancelTradeAllocationResponseIdentifierType || (exports.CancelTradeAllocationResponseIdentifierType = CancelTradeAllocationResponseIdentifierType = {}));
/**
 * The type of price adjustment being applied by the broker to the net price of the security.
 */
var CancelTradeAllocationResponsePriceAdjustmentType;
(function (CancelTradeAllocationResponsePriceAdjustmentType) {
    CancelTradeAllocationResponsePriceAdjustmentType["PriceAdjustmentTypeUnspecified"] = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED";
    CancelTradeAllocationResponsePriceAdjustmentType["Markup"] = "MARKUP";
    CancelTradeAllocationResponsePriceAdjustmentType["Markdown"] = "MARKDOWN";
    CancelTradeAllocationResponsePriceAdjustmentType["GrossCredit"] = "GROSS_CREDIT";
})(CancelTradeAllocationResponsePriceAdjustmentType || (exports.CancelTradeAllocationResponsePriceAdjustmentType = CancelTradeAllocationResponsePriceAdjustmentType = {}));
/**
 * Side modifier for the trade allocation.
 */
var CancelTradeAllocationResponseSideModifier;
(function (CancelTradeAllocationResponseSideModifier) {
    CancelTradeAllocationResponseSideModifier["SideModifierUnspecified"] = "SIDE_MODIFIER_UNSPECIFIED";
    CancelTradeAllocationResponseSideModifier["Short"] = "SHORT";
    CancelTradeAllocationResponseSideModifier["ShortExempt"] = "SHORT_EXEMPT";
    CancelTradeAllocationResponseSideModifier["ShortCover"] = "SHORT_COVER";
    CancelTradeAllocationResponseSideModifier["Open"] = "OPEN";
    CancelTradeAllocationResponseSideModifier["Close"] = "CLOSE";
})(CancelTradeAllocationResponseSideModifier || (exports.CancelTradeAllocationResponseSideModifier = CancelTradeAllocationResponseSideModifier = {}));
var CancelTradeAllocationResponseSpecialInstructions;
(function (CancelTradeAllocationResponseSpecialInstructions) {
    CancelTradeAllocationResponseSpecialInstructions["SpecialInstructionsUnspecified"] = "SPECIAL_INSTRUCTIONS_UNSPECIFIED";
    CancelTradeAllocationResponseSpecialInstructions["Rule144"] = "RULE_144";
    CancelTradeAllocationResponseSpecialInstructions["WithDividend"] = "WITH_DIVIDEND";
    CancelTradeAllocationResponseSpecialInstructions["WithRights"] = "WITH_RIGHTS";
    CancelTradeAllocationResponseSpecialInstructions["CloseContract"] = "CLOSE_CONTRACT";
    CancelTradeAllocationResponseSpecialInstructions["CoverShort"] = "COVER_SHORT";
    CancelTradeAllocationResponseSpecialInstructions["CrossTrade"] = "CROSS_TRADE";
    CancelTradeAllocationResponseSpecialInstructions["OpenContractCovered"] = "OPEN_CONTRACT_COVERED";
    CancelTradeAllocationResponseSpecialInstructions["DiscretionExercised"] = "DISCRETION_EXERCISED";
    CancelTradeAllocationResponseSpecialInstructions["DiscretionNotExercised"] = "DISCRETION_NOT_EXERCISED";
    CancelTradeAllocationResponseSpecialInstructions["OptionAssignment"] = "OPTION_ASSIGNMENT";
    CancelTradeAllocationResponseSpecialInstructions["EmployeeStockOption"] = "EMPLOYEE_STOCK_OPTION";
    CancelTradeAllocationResponseSpecialInstructions["InvestmentBanking"] = "INVESTMENT_BANKING";
    CancelTradeAllocationResponseSpecialInstructions["BrokerDealerOrder"] = "BROKER_DEALER_ORDER";
    CancelTradeAllocationResponseSpecialInstructions["MakeMarketInSecurity"] = "MAKE_MARKET_IN_SECURITY";
    CancelTradeAllocationResponseSpecialInstructions["MakeMarketSolicited"] = "MAKE_MARKET_SOLICITED";
    CancelTradeAllocationResponseSpecialInstructions["MakeMarketUnsolicited"] = "MAKE_MARKET_UNSOLICITED";
    CancelTradeAllocationResponseSpecialInstructions["CustomerDirected"] = "CUSTOMER_DIRECTED";
    CancelTradeAllocationResponseSpecialInstructions["FullyRegistered"] = "FULLY_REGISTERED";
    CancelTradeAllocationResponseSpecialInstructions["OpenContract"] = "OPEN_CONTRACT";
    CancelTradeAllocationResponseSpecialInstructions["OddlotDiffOnRequest"] = "ODDLOT_DIFF_ON_REQUEST";
    CancelTradeAllocationResponseSpecialInstructions["ProspectusEnclosed"] = "PROSPECTUS_ENCLOSED";
    CancelTradeAllocationResponseSpecialInstructions["ProspectusSeparateMail"] = "PROSPECTUS_SEPARATE_MAIL";
    CancelTradeAllocationResponseSpecialInstructions["Solicited"] = "SOLICITED";
    CancelTradeAllocationResponseSpecialInstructions["Unsolicited"] = "UNSOLICITED";
    CancelTradeAllocationResponseSpecialInstructions["XDividend"] = "X_DIVIDEND";
    CancelTradeAllocationResponseSpecialInstructions["ActingAsPrincipal"] = "ACTING_AS_PRINCIPAL";
    CancelTradeAllocationResponseSpecialInstructions["AveragePrice"] = "AVERAGE_PRICE";
    CancelTradeAllocationResponseSpecialInstructions["BrokerLiquidation"] = "BROKER_LIQUIDATION";
    CancelTradeAllocationResponseSpecialInstructions["CouponBooks"] = "COUPON_BOOKS";
    CancelTradeAllocationResponseSpecialInstructions["HasPostageFee"] = "HAS_POSTAGE_FEE";
    CancelTradeAllocationResponseSpecialInstructions["InternetOrder"] = "INTERNET_ORDER";
    CancelTradeAllocationResponseSpecialInstructions["MarginSellout"] = "MARGIN_SELLOUT";
    CancelTradeAllocationResponseSpecialInstructions["MarketMakersAsPrincipal"] = "MARKET_MAKERS_AS_PRINCIPAL";
    CancelTradeAllocationResponseSpecialInstructions["NegativeNetProceed"] = "NEGATIVE_NET_PROCEED";
    CancelTradeAllocationResponseSpecialInstructions["PreFigIndicator"] = "PRE_FIG_INDICATOR";
    CancelTradeAllocationResponseSpecialInstructions["RisklessPrincipalInstruction"] = "RISKLESS_PRINCIPAL_INSTRUCTION";
    CancelTradeAllocationResponseSpecialInstructions["ShortInstruction"] = "SHORT_INSTRUCTION";
    CancelTradeAllocationResponseSpecialInstructions["ThirdMarket"] = "THIRD_MARKET";
    CancelTradeAllocationResponseSpecialInstructions["SuppressMsrbTransmission"] = "SUPPRESS_MSRB_TRANSMISSION";
    CancelTradeAllocationResponseSpecialInstructions["SuppressTraceReporting"] = "SUPPRESS_TRACE_REPORTING";
    CancelTradeAllocationResponseSpecialInstructions["SuppressEmailNotification"] = "SUPPRESS_EMAIL_NOTIFICATION";
    CancelTradeAllocationResponseSpecialInstructions["StockReward"] = "STOCK_REWARD";
    CancelTradeAllocationResponseSpecialInstructions["SuppressRegFees"] = "SUPPRESS_REG_FEES";
    CancelTradeAllocationResponseSpecialInstructions["SuppressSecFee"] = "SUPPRESS_SEC_FEE";
    CancelTradeAllocationResponseSpecialInstructions["SuppressTafFee"] = "SUPPRESS_TAF_FEE";
    CancelTradeAllocationResponseSpecialInstructions["DividendReinvestment"] = "DIVIDEND_REINVESTMENT";
})(CancelTradeAllocationResponseSpecialInstructions || (exports.CancelTradeAllocationResponseSpecialInstructions = CancelTradeAllocationResponseSpecialInstructions = {}));
/**
 * The state that the trade allocation is in.
 */
var CancelTradeAllocationResponseState;
(function (CancelTradeAllocationResponseState) {
    CancelTradeAllocationResponseState["StateUnspecified"] = "STATE_UNSPECIFIED";
    CancelTradeAllocationResponseState["Creating"] = "CREATING";
    CancelTradeAllocationResponseState["Rebooking"] = "REBOOKING";
    CancelTradeAllocationResponseState["Canceling"] = "CANCELING";
    CancelTradeAllocationResponseState["Booked"] = "BOOKED";
    CancelTradeAllocationResponseState["Rebooked"] = "REBOOKED";
    CancelTradeAllocationResponseState["Canceled"] = "CANCELED";
    CancelTradeAllocationResponseState["Failed"] = "FAILED";
})(CancelTradeAllocationResponseState || (exports.CancelTradeAllocationResponseState = CancelTradeAllocationResponseState = {}));
/**
 * Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
 */
var CancelTradeAllocationResponseToSide;
(function (CancelTradeAllocationResponseToSide) {
    CancelTradeAllocationResponseToSide["SideUnspecified"] = "SIDE_UNSPECIFIED";
    CancelTradeAllocationResponseToSide["Buy"] = "BUY";
    CancelTradeAllocationResponseToSide["Sell"] = "SELL";
})(CancelTradeAllocationResponseToSide || (exports.CancelTradeAllocationResponseToSide = CancelTradeAllocationResponseToSide = {}));
/**
 * Denotes that this trade allocation was either when_issued or when_distributed.
 */
var CancelTradeAllocationResponseWhenIssued;
(function (CancelTradeAllocationResponseWhenIssued) {
    CancelTradeAllocationResponseWhenIssued["WhenIssuedTypeUnspecified"] = "WHEN_ISSUED_TYPE_UNSPECIFIED";
    CancelTradeAllocationResponseWhenIssued["WhenIssued"] = "WHEN_ISSUED";
    CancelTradeAllocationResponseWhenIssued["WhenDistributed"] = "WHEN_DISTRIBUTED";
})(CancelTradeAllocationResponseWhenIssued || (exports.CancelTradeAllocationResponseWhenIssued = CancelTradeAllocationResponseWhenIssued = {}));
/** @internal */
exports.CancelTradeAllocationResponseAccruedInterestAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CancelTradeAllocationResponseAccruedInterestAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseAccruedInterestAmount$;
(function (CancelTradeAllocationResponseAccruedInterestAmount$) {
    /** @deprecated use `CancelTradeAllocationResponseAccruedInterestAmount$inboundSchema` instead. */
    CancelTradeAllocationResponseAccruedInterestAmount$.inboundSchema = exports.CancelTradeAllocationResponseAccruedInterestAmount$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseAccruedInterestAmount$outboundSchema` instead. */
    CancelTradeAllocationResponseAccruedInterestAmount$.outboundSchema = exports.CancelTradeAllocationResponseAccruedInterestAmount$outboundSchema;
})(CancelTradeAllocationResponseAccruedInterestAmount$ || (exports.CancelTradeAllocationResponseAccruedInterestAmount$ = CancelTradeAllocationResponseAccruedInterestAmount$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseAssetType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponseAssetType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponseAssetType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponseAssetType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseAssetType$;
(function (CancelTradeAllocationResponseAssetType$) {
    /** @deprecated use `CancelTradeAllocationResponseAssetType$inboundSchema` instead. */
    CancelTradeAllocationResponseAssetType$.inboundSchema = exports.CancelTradeAllocationResponseAssetType$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseAssetType$outboundSchema` instead. */
    CancelTradeAllocationResponseAssetType$.outboundSchema = exports.CancelTradeAllocationResponseAssetType$outboundSchema;
})(CancelTradeAllocationResponseAssetType$ || (exports.CancelTradeAllocationResponseAssetType$ = CancelTradeAllocationResponseAssetType$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseBrokerCapacity$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponseBrokerCapacity),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponseBrokerCapacity$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponseBrokerCapacity),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseBrokerCapacity$;
(function (CancelTradeAllocationResponseBrokerCapacity$) {
    /** @deprecated use `CancelTradeAllocationResponseBrokerCapacity$inboundSchema` instead. */
    CancelTradeAllocationResponseBrokerCapacity$.inboundSchema = exports.CancelTradeAllocationResponseBrokerCapacity$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseBrokerCapacity$outboundSchema` instead. */
    CancelTradeAllocationResponseBrokerCapacity$.outboundSchema = exports.CancelTradeAllocationResponseBrokerCapacity$outboundSchema;
})(CancelTradeAllocationResponseBrokerCapacity$ || (exports.CancelTradeAllocationResponseBrokerCapacity$ = CancelTradeAllocationResponseBrokerCapacity$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseCommissionAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CancelTradeAllocationResponseCommissionAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseCommissionAmount$;
(function (CancelTradeAllocationResponseCommissionAmount$) {
    /** @deprecated use `CancelTradeAllocationResponseCommissionAmount$inboundSchema` instead. */
    CancelTradeAllocationResponseCommissionAmount$.inboundSchema = exports.CancelTradeAllocationResponseCommissionAmount$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseCommissionAmount$outboundSchema` instead. */
    CancelTradeAllocationResponseCommissionAmount$.outboundSchema = exports.CancelTradeAllocationResponseCommissionAmount$outboundSchema;
})(CancelTradeAllocationResponseCommissionAmount$ || (exports.CancelTradeAllocationResponseCommissionAmount$ = CancelTradeAllocationResponseCommissionAmount$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseGrossAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CancelTradeAllocationResponseGrossAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseGrossAmount$;
(function (CancelTradeAllocationResponseGrossAmount$) {
    /** @deprecated use `CancelTradeAllocationResponseGrossAmount$inboundSchema` instead. */
    CancelTradeAllocationResponseGrossAmount$.inboundSchema = exports.CancelTradeAllocationResponseGrossAmount$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseGrossAmount$outboundSchema` instead. */
    CancelTradeAllocationResponseGrossAmount$.outboundSchema = exports.CancelTradeAllocationResponseGrossAmount$outboundSchema;
})(CancelTradeAllocationResponseGrossAmount$ || (exports.CancelTradeAllocationResponseGrossAmount$ = CancelTradeAllocationResponseGrossAmount$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseIdentifierType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponseIdentifierType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponseIdentifierType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponseIdentifierType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseIdentifierType$;
(function (CancelTradeAllocationResponseIdentifierType$) {
    /** @deprecated use `CancelTradeAllocationResponseIdentifierType$inboundSchema` instead. */
    CancelTradeAllocationResponseIdentifierType$.inboundSchema = exports.CancelTradeAllocationResponseIdentifierType$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseIdentifierType$outboundSchema` instead. */
    CancelTradeAllocationResponseIdentifierType$.outboundSchema = exports.CancelTradeAllocationResponseIdentifierType$outboundSchema;
})(CancelTradeAllocationResponseIdentifierType$ || (exports.CancelTradeAllocationResponseIdentifierType$ = CancelTradeAllocationResponseIdentifierType$ = {}));
/** @internal */
exports.CancelTradeAllocationResponsePrevailingMarketPrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CancelTradeAllocationResponsePrevailingMarketPrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponsePrevailingMarketPrice$;
(function (CancelTradeAllocationResponsePrevailingMarketPrice$) {
    /** @deprecated use `CancelTradeAllocationResponsePrevailingMarketPrice$inboundSchema` instead. */
    CancelTradeAllocationResponsePrevailingMarketPrice$.inboundSchema = exports.CancelTradeAllocationResponsePrevailingMarketPrice$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponsePrevailingMarketPrice$outboundSchema` instead. */
    CancelTradeAllocationResponsePrevailingMarketPrice$.outboundSchema = exports.CancelTradeAllocationResponsePrevailingMarketPrice$outboundSchema;
})(CancelTradeAllocationResponsePrevailingMarketPrice$ || (exports.CancelTradeAllocationResponsePrevailingMarketPrice$ = CancelTradeAllocationResponsePrevailingMarketPrice$ = {}));
/** @internal */
exports.CancelTradeAllocationResponsePrice$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CancelTradeAllocationResponsePrice$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponsePrice$;
(function (CancelTradeAllocationResponsePrice$) {
    /** @deprecated use `CancelTradeAllocationResponsePrice$inboundSchema` instead. */
    CancelTradeAllocationResponsePrice$.inboundSchema = exports.CancelTradeAllocationResponsePrice$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponsePrice$outboundSchema` instead. */
    CancelTradeAllocationResponsePrice$.outboundSchema = exports.CancelTradeAllocationResponsePrice$outboundSchema;
})(CancelTradeAllocationResponsePrice$ || (exports.CancelTradeAllocationResponsePrice$ = CancelTradeAllocationResponsePrice$ = {}));
/** @internal */
exports.CancelTradeAllocationResponsePriceAdjustmentAmount$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CancelTradeAllocationResponsePriceAdjustmentAmount$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponsePriceAdjustmentAmount$;
(function (CancelTradeAllocationResponsePriceAdjustmentAmount$) {
    /** @deprecated use `CancelTradeAllocationResponsePriceAdjustmentAmount$inboundSchema` instead. */
    CancelTradeAllocationResponsePriceAdjustmentAmount$.inboundSchema = exports.CancelTradeAllocationResponsePriceAdjustmentAmount$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponsePriceAdjustmentAmount$outboundSchema` instead. */
    CancelTradeAllocationResponsePriceAdjustmentAmount$.outboundSchema = exports.CancelTradeAllocationResponsePriceAdjustmentAmount$outboundSchema;
})(CancelTradeAllocationResponsePriceAdjustmentAmount$ || (exports.CancelTradeAllocationResponsePriceAdjustmentAmount$ = CancelTradeAllocationResponsePriceAdjustmentAmount$ = {}));
/** @internal */
exports.CancelTradeAllocationResponsePriceAdjustmentType$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponsePriceAdjustmentType),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponsePriceAdjustmentType$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponsePriceAdjustmentType),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponsePriceAdjustmentType$;
(function (CancelTradeAllocationResponsePriceAdjustmentType$) {
    /** @deprecated use `CancelTradeAllocationResponsePriceAdjustmentType$inboundSchema` instead. */
    CancelTradeAllocationResponsePriceAdjustmentType$.inboundSchema = exports.CancelTradeAllocationResponsePriceAdjustmentType$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponsePriceAdjustmentType$outboundSchema` instead. */
    CancelTradeAllocationResponsePriceAdjustmentType$.outboundSchema = exports.CancelTradeAllocationResponsePriceAdjustmentType$outboundSchema;
})(CancelTradeAllocationResponsePriceAdjustmentType$ || (exports.CancelTradeAllocationResponsePriceAdjustmentType$ = CancelTradeAllocationResponsePriceAdjustmentType$ = {}));
/** @internal */
exports.CancelTradeAllocationResponsePriceAdjustment$inboundSchema = z.object({
    price_adjustment_amount: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponsePriceAdjustmentAmount$inboundSchema)).optional(),
    price_adjustment_type: exports.CancelTradeAllocationResponsePriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_type": "priceAdjustmentType",
    });
});
/** @internal */
exports.CancelTradeAllocationResponsePriceAdjustment$outboundSchema = z.object({
    priceAdjustmentAmount: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponsePriceAdjustmentAmount$outboundSchema)).optional(),
    priceAdjustmentType: exports.CancelTradeAllocationResponsePriceAdjustmentType$outboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        priceAdjustmentAmount: "price_adjustment_amount",
        priceAdjustmentType: "price_adjustment_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponsePriceAdjustment$;
(function (CancelTradeAllocationResponsePriceAdjustment$) {
    /** @deprecated use `CancelTradeAllocationResponsePriceAdjustment$inboundSchema` instead. */
    CancelTradeAllocationResponsePriceAdjustment$.inboundSchema = exports.CancelTradeAllocationResponsePriceAdjustment$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponsePriceAdjustment$outboundSchema` instead. */
    CancelTradeAllocationResponsePriceAdjustment$.outboundSchema = exports.CancelTradeAllocationResponsePriceAdjustment$outboundSchema;
})(CancelTradeAllocationResponsePriceAdjustment$ || (exports.CancelTradeAllocationResponsePriceAdjustment$ = CancelTradeAllocationResponsePriceAdjustment$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseQuantity$inboundSchema = z.object({
    value: z.string().optional(),
});
/** @internal */
exports.CancelTradeAllocationResponseQuantity$outboundSchema = z.object({
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseQuantity$;
(function (CancelTradeAllocationResponseQuantity$) {
    /** @deprecated use `CancelTradeAllocationResponseQuantity$inboundSchema` instead. */
    CancelTradeAllocationResponseQuantity$.inboundSchema = exports.CancelTradeAllocationResponseQuantity$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseQuantity$outboundSchema` instead. */
    CancelTradeAllocationResponseQuantity$.outboundSchema = exports.CancelTradeAllocationResponseQuantity$outboundSchema;
})(CancelTradeAllocationResponseQuantity$ || (exports.CancelTradeAllocationResponseQuantity$ = CancelTradeAllocationResponseQuantity$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseSettlementDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.CancelTradeAllocationResponseSettlementDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseSettlementDate$;
(function (CancelTradeAllocationResponseSettlementDate$) {
    /** @deprecated use `CancelTradeAllocationResponseSettlementDate$inboundSchema` instead. */
    CancelTradeAllocationResponseSettlementDate$.inboundSchema = exports.CancelTradeAllocationResponseSettlementDate$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseSettlementDate$outboundSchema` instead. */
    CancelTradeAllocationResponseSettlementDate$.outboundSchema = exports.CancelTradeAllocationResponseSettlementDate$outboundSchema;
})(CancelTradeAllocationResponseSettlementDate$ || (exports.CancelTradeAllocationResponseSettlementDate$ = CancelTradeAllocationResponseSettlementDate$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseSideModifier$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponseSideModifier),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponseSideModifier$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponseSideModifier),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseSideModifier$;
(function (CancelTradeAllocationResponseSideModifier$) {
    /** @deprecated use `CancelTradeAllocationResponseSideModifier$inboundSchema` instead. */
    CancelTradeAllocationResponseSideModifier$.inboundSchema = exports.CancelTradeAllocationResponseSideModifier$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseSideModifier$outboundSchema` instead. */
    CancelTradeAllocationResponseSideModifier$.outboundSchema = exports.CancelTradeAllocationResponseSideModifier$outboundSchema;
})(CancelTradeAllocationResponseSideModifier$ || (exports.CancelTradeAllocationResponseSideModifier$ = CancelTradeAllocationResponseSideModifier$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseSpecialInstructions$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponseSpecialInstructions),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponseSpecialInstructions$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponseSpecialInstructions),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseSpecialInstructions$;
(function (CancelTradeAllocationResponseSpecialInstructions$) {
    /** @deprecated use `CancelTradeAllocationResponseSpecialInstructions$inboundSchema` instead. */
    CancelTradeAllocationResponseSpecialInstructions$.inboundSchema = exports.CancelTradeAllocationResponseSpecialInstructions$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseSpecialInstructions$outboundSchema` instead. */
    CancelTradeAllocationResponseSpecialInstructions$.outboundSchema = exports.CancelTradeAllocationResponseSpecialInstructions$outboundSchema;
})(CancelTradeAllocationResponseSpecialInstructions$ || (exports.CancelTradeAllocationResponseSpecialInstructions$ = CancelTradeAllocationResponseSpecialInstructions$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseState$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponseState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponseState$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponseState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseState$;
(function (CancelTradeAllocationResponseState$) {
    /** @deprecated use `CancelTradeAllocationResponseState$inboundSchema` instead. */
    CancelTradeAllocationResponseState$.inboundSchema = exports.CancelTradeAllocationResponseState$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseState$outboundSchema` instead. */
    CancelTradeAllocationResponseState$.outboundSchema = exports.CancelTradeAllocationResponseState$outboundSchema;
})(CancelTradeAllocationResponseState$ || (exports.CancelTradeAllocationResponseState$ = CancelTradeAllocationResponseState$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseToSide$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponseToSide),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponseToSide$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponseToSide),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseToSide$;
(function (CancelTradeAllocationResponseToSide$) {
    /** @deprecated use `CancelTradeAllocationResponseToSide$inboundSchema` instead. */
    CancelTradeAllocationResponseToSide$.inboundSchema = exports.CancelTradeAllocationResponseToSide$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseToSide$outboundSchema` instead. */
    CancelTradeAllocationResponseToSide$.outboundSchema = exports.CancelTradeAllocationResponseToSide$outboundSchema;
})(CancelTradeAllocationResponseToSide$ || (exports.CancelTradeAllocationResponseToSide$ = CancelTradeAllocationResponseToSide$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseWhenIssued$inboundSchema = z
    .union([
    z.nativeEnum(CancelTradeAllocationResponseWhenIssued),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.CancelTradeAllocationResponseWhenIssued$outboundSchema = z.union([
    z.nativeEnum(CancelTradeAllocationResponseWhenIssued),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseWhenIssued$;
(function (CancelTradeAllocationResponseWhenIssued$) {
    /** @deprecated use `CancelTradeAllocationResponseWhenIssued$inboundSchema` instead. */
    CancelTradeAllocationResponseWhenIssued$.inboundSchema = exports.CancelTradeAllocationResponseWhenIssued$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseWhenIssued$outboundSchema` instead. */
    CancelTradeAllocationResponseWhenIssued$.outboundSchema = exports.CancelTradeAllocationResponseWhenIssued$outboundSchema;
})(CancelTradeAllocationResponseWhenIssued$ || (exports.CancelTradeAllocationResponseWhenIssued$ = CancelTradeAllocationResponseWhenIssued$ = {}));
/** @internal */
exports.CancelTradeAllocationResponseTradeAllocation$inboundSchema = z.object({
    accrued_interest_amount: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseAccruedInterestAmount$inboundSchema)).optional(),
    additional_instructions: z.string().optional(),
    asset_type: exports.CancelTradeAllocationResponseAssetType$inboundSchema.optional(),
    bond_yield: z.array(bondyield_js_1.BondYield$inboundSchema).optional(),
    broker_capacity: exports.CancelTradeAllocationResponseBrokerCapacity$inboundSchema
        .optional(),
    client_order_id: z.string().optional(),
    commission_amount: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseCommissionAmount$inboundSchema)).optional(),
    execution_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    fees: z.array(fee_js_1.Fee$inboundSchema).optional(),
    from_account_id: z.string().optional(),
    from_activity_id: z.string().optional(),
    gross_amount: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseGrossAmount$inboundSchema)).optional(),
    identifier: z.string().optional(),
    identifier_type: exports.CancelTradeAllocationResponseIdentifierType$inboundSchema
        .optional(),
    issuing_region_code: z.string().optional(),
    lot_matching_instructions: z.array(lot_js_1.Lot$inboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailing_market_price: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponsePrevailingMarketPrice$inboundSchema)).optional(),
    price: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponsePrice$inboundSchema)).optional(),
    price_adjustment: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponsePriceAdjustment$inboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseQuantity$inboundSchema)).optional(),
    settlement_date: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseSettlementDate$inboundSchema)).optional(),
    side_modifier: exports.CancelTradeAllocationResponseSideModifier$inboundSchema
        .optional(),
    source_application: z.string().optional(),
    special_instructions: z.array(exports.CancelTradeAllocationResponseSpecialInstructions$inboundSchema).optional(),
    state: exports.CancelTradeAllocationResponseState$inboundSchema.optional(),
    to_account_id: z.string().optional(),
    to_activity_id: z.string().optional(),
    to_side: exports.CancelTradeAllocationResponseToSide$inboundSchema.optional(),
    trade_allocation_id: z.string().optional(),
    when_issued: exports.CancelTradeAllocationResponseWhenIssued$inboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "accrued_interest_amount": "accruedInterestAmount",
        "additional_instructions": "additionalInstructions",
        "asset_type": "assetType",
        "bond_yield": "bondYield",
        "broker_capacity": "brokerCapacity",
        "client_order_id": "clientOrderId",
        "commission_amount": "commissionAmount",
        "execution_time": "executionTime",
        "from_account_id": "fromAccountId",
        "from_activity_id": "fromActivityId",
        "gross_amount": "grossAmount",
        "identifier_type": "identifierType",
        "issuing_region_code": "issuingRegionCode",
        "lot_matching_instructions": "lotMatchingInstructions",
        "prevailing_market_price": "prevailingMarketPrice",
        "price_adjustment": "priceAdjustment",
        "settlement_date": "settlementDate",
        "side_modifier": "sideModifier",
        "source_application": "sourceApplication",
        "special_instructions": "specialInstructions",
        "to_account_id": "toAccountId",
        "to_activity_id": "toActivityId",
        "to_side": "toSide",
        "trade_allocation_id": "tradeAllocationId",
        "when_issued": "whenIssued",
    });
});
/** @internal */
exports.CancelTradeAllocationResponseTradeAllocation$outboundSchema = z.object({
    accruedInterestAmount: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseAccruedInterestAmount$outboundSchema)).optional(),
    additionalInstructions: z.string().optional(),
    assetType: exports.CancelTradeAllocationResponseAssetType$outboundSchema.optional(),
    bondYield: z.array(bondyield_js_1.BondYield$outboundSchema).optional(),
    brokerCapacity: exports.CancelTradeAllocationResponseBrokerCapacity$outboundSchema
        .optional(),
    clientOrderId: z.string().optional(),
    commissionAmount: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseCommissionAmount$outboundSchema)).optional(),
    executionTime: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    fees: z.array(fee_js_1.Fee$outboundSchema).optional(),
    fromAccountId: z.string().optional(),
    fromActivityId: z.string().optional(),
    grossAmount: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseGrossAmount$outboundSchema)).optional(),
    identifier: z.string().optional(),
    identifierType: exports.CancelTradeAllocationResponseIdentifierType$outboundSchema
        .optional(),
    issuingRegionCode: z.string().optional(),
    lotMatchingInstructions: z.array(lot_js_1.Lot$outboundSchema).optional(),
    memo: z.string().optional(),
    name: z.string().optional(),
    prevailingMarketPrice: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponsePrevailingMarketPrice$outboundSchema)).optional(),
    price: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponsePrice$outboundSchema)).optional(),
    priceAdjustment: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponsePriceAdjustment$outboundSchema)).optional(),
    quantity: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseQuantity$outboundSchema)).optional(),
    settlementDate: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseSettlementDate$outboundSchema)).optional(),
    sideModifier: exports.CancelTradeAllocationResponseSideModifier$outboundSchema
        .optional(),
    sourceApplication: z.string().optional(),
    specialInstructions: z.array(exports.CancelTradeAllocationResponseSpecialInstructions$outboundSchema).optional(),
    state: exports.CancelTradeAllocationResponseState$outboundSchema.optional(),
    toAccountId: z.string().optional(),
    toActivityId: z.string().optional(),
    toSide: exports.CancelTradeAllocationResponseToSide$outboundSchema.optional(),
    tradeAllocationId: z.string().optional(),
    whenIssued: exports.CancelTradeAllocationResponseWhenIssued$outboundSchema
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accruedInterestAmount: "accrued_interest_amount",
        additionalInstructions: "additional_instructions",
        assetType: "asset_type",
        bondYield: "bond_yield",
        brokerCapacity: "broker_capacity",
        clientOrderId: "client_order_id",
        commissionAmount: "commission_amount",
        executionTime: "execution_time",
        fromAccountId: "from_account_id",
        fromActivityId: "from_activity_id",
        grossAmount: "gross_amount",
        identifierType: "identifier_type",
        issuingRegionCode: "issuing_region_code",
        lotMatchingInstructions: "lot_matching_instructions",
        prevailingMarketPrice: "prevailing_market_price",
        priceAdjustment: "price_adjustment",
        settlementDate: "settlement_date",
        sideModifier: "side_modifier",
        sourceApplication: "source_application",
        specialInstructions: "special_instructions",
        toAccountId: "to_account_id",
        toActivityId: "to_activity_id",
        toSide: "to_side",
        tradeAllocationId: "trade_allocation_id",
        whenIssued: "when_issued",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponseTradeAllocation$;
(function (CancelTradeAllocationResponseTradeAllocation$) {
    /** @deprecated use `CancelTradeAllocationResponseTradeAllocation$inboundSchema` instead. */
    CancelTradeAllocationResponseTradeAllocation$.inboundSchema = exports.CancelTradeAllocationResponseTradeAllocation$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponseTradeAllocation$outboundSchema` instead. */
    CancelTradeAllocationResponseTradeAllocation$.outboundSchema = exports.CancelTradeAllocationResponseTradeAllocation$outboundSchema;
})(CancelTradeAllocationResponseTradeAllocation$ || (exports.CancelTradeAllocationResponseTradeAllocation$ = CancelTradeAllocationResponseTradeAllocation$ = {}));
/** @internal */
exports.CancelTradeAllocationResponse$inboundSchema = z.object({
    trade_allocation: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseTradeAllocation$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "trade_allocation": "tradeAllocation",
    });
});
/** @internal */
exports.CancelTradeAllocationResponse$outboundSchema = z.object({
    tradeAllocation: z.nullable(z.lazy(() => exports.CancelTradeAllocationResponseTradeAllocation$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        tradeAllocation: "trade_allocation",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CancelTradeAllocationResponse$;
(function (CancelTradeAllocationResponse$) {
    /** @deprecated use `CancelTradeAllocationResponse$inboundSchema` instead. */
    CancelTradeAllocationResponse$.inboundSchema = exports.CancelTradeAllocationResponse$inboundSchema;
    /** @deprecated use `CancelTradeAllocationResponse$outboundSchema` instead. */
    CancelTradeAllocationResponse$.outboundSchema = exports.CancelTradeAllocationResponse$outboundSchema;
})(CancelTradeAllocationResponse$ || (exports.CancelTradeAllocationResponse$ = CancelTradeAllocationResponse$ = {}));
//# sourceMappingURL=canceltradeallocationresponse.js.map