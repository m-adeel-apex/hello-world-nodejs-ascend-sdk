"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Investigation$ = exports.Investigation$outboundSchema = exports.Investigation$inboundSchema = exports.WatchlistScreen$ = exports.WatchlistScreen$outboundSchema = exports.WatchlistScreen$inboundSchema = exports.Person$ = exports.Person$outboundSchema = exports.Person$inboundSchema = exports.ProvidedIdentityVerification$ = exports.ProvidedIdentityVerification$outboundSchema = exports.ProvidedIdentityVerification$inboundSchema = exports.InvestigationExecutionDate$ = exports.InvestigationExecutionDate$outboundSchema = exports.InvestigationExecutionDate$inboundSchema = exports.InvestigationNameSuffix$ = exports.InvestigationNameSuffix$outboundSchema = exports.InvestigationNameSuffix$inboundSchema = exports.InvestigationPersonLegalAddress$ = exports.InvestigationPersonLegalAddress$outboundSchema = exports.InvestigationPersonLegalAddress$inboundSchema = exports.InvestigationBirthDate$ = exports.InvestigationBirthDate$outboundSchema = exports.InvestigationBirthDate$inboundSchema = exports.InvestigationRequestState$ = exports.InvestigationRequestState$outboundSchema = exports.InvestigationRequestState$inboundSchema = exports.IdentityVerificationScope$ = exports.IdentityVerificationScope$outboundSchema = exports.IdentityVerificationScope$inboundSchema = exports.IdentityVerification$ = exports.IdentityVerification$outboundSchema = exports.IdentityVerification$inboundSchema = exports.Entity$ = exports.Entity$outboundSchema = exports.Entity$inboundSchema = exports.InvestigationLegalAddress$ = exports.InvestigationLegalAddress$outboundSchema = exports.InvestigationLegalAddress$inboundSchema = exports.WatchlistScreen = exports.InvestigationNameSuffix = exports.InvestigationRequestState = exports.IdentityVerificationScope = exports.IdentityVerification = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const enums_js_1 = require("../../types/enums.js");
const audittrail_js_1 = require("./audittrail.js");
const entityidentification_js_1 = require("./entityidentification.js");
const identityverificationresult_js_1 = require("./identityverificationresult.js");
const personidentification_js_1 = require("./personidentification.js");
const postaladdress_js_1 = require("./postaladdress.js");
const watchlistmatch_js_1 = require("./watchlistmatch.js");
/**
 * Indicates the current state of identity verification
 */
var IdentityVerification;
(function (IdentityVerification) {
    IdentityVerification["ScreenStateUnspecified"] = "SCREEN_STATE_UNSPECIFIED";
    IdentityVerification["Pending"] = "PENDING";
    IdentityVerification["Passed"] = "PASSED";
    IdentityVerification["Failed"] = "FAILED";
    IdentityVerification["NeedsReview"] = "NEEDS_REVIEW";
    IdentityVerification["DeferredReview"] = "DEFERRED_REVIEW";
    IdentityVerification["OutOfScope"] = "OUT_OF_SCOPE";
})(IdentityVerification || (exports.IdentityVerification = IdentityVerification = {}));
/**
 * Used to determine who is responsible for running identity verification checks
 */
var IdentityVerificationScope;
(function (IdentityVerificationScope) {
    IdentityVerificationScope["IdentityVerificationScopeUnspecified"] = "IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED";
    IdentityVerificationScope["PerformedByApex"] = "PERFORMED_BY_APEX";
    IdentityVerificationScope["ProvidedByClient"] = "PROVIDED_BY_CLIENT";
})(IdentityVerificationScope || (exports.IdentityVerificationScope = IdentityVerificationScope = {}));
/**
 * Current state of investigation request
 */
var InvestigationRequestState;
(function (InvestigationRequestState) {
    InvestigationRequestState["InvestigationRequestStateUnspecified"] = "INVESTIGATION_REQUEST_STATE_UNSPECIFIED";
    InvestigationRequestState["Open"] = "OPEN";
    InvestigationRequestState["Closed"] = "CLOSED";
})(InvestigationRequestState || (exports.InvestigationRequestState = InvestigationRequestState = {}));
/**
 * Suffix of the person's name
 */
var InvestigationNameSuffix;
(function (InvestigationNameSuffix) {
    InvestigationNameSuffix["NameSuffixUnspecified"] = "NAME_SUFFIX_UNSPECIFIED";
    InvestigationNameSuffix["Sr"] = "SR";
    InvestigationNameSuffix["Jr"] = "JR";
    InvestigationNameSuffix["Iii"] = "III";
    InvestigationNameSuffix["Iv"] = "IV";
    InvestigationNameSuffix["V"] = "V";
})(InvestigationNameSuffix || (exports.InvestigationNameSuffix = InvestigationNameSuffix = {}));
/**
 * Indicates the current state of the watchlist screen
 */
var WatchlistScreen;
(function (WatchlistScreen) {
    WatchlistScreen["ScreenStateUnspecified"] = "SCREEN_STATE_UNSPECIFIED";
    WatchlistScreen["Pending"] = "PENDING";
    WatchlistScreen["Passed"] = "PASSED";
    WatchlistScreen["Failed"] = "FAILED";
    WatchlistScreen["NeedsReview"] = "NEEDS_REVIEW";
    WatchlistScreen["DeferredReview"] = "DEFERRED_REVIEW";
    WatchlistScreen["OutOfScope"] = "OUT_OF_SCOPE";
})(WatchlistScreen || (exports.WatchlistScreen = WatchlistScreen = {}));
/** @internal */
exports.InvestigationLegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.InvestigationLegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationLegalAddress$;
(function (InvestigationLegalAddress$) {
    /** @deprecated use `InvestigationLegalAddress$inboundSchema` instead. */
    InvestigationLegalAddress$.inboundSchema = exports.InvestigationLegalAddress$inboundSchema;
    /** @deprecated use `InvestigationLegalAddress$outboundSchema` instead. */
    InvestigationLegalAddress$.outboundSchema = exports.InvestigationLegalAddress$outboundSchema;
})(InvestigationLegalAddress$ || (exports.InvestigationLegalAddress$ = InvestigationLegalAddress$ = {}));
/** @internal */
exports.Entity$inboundSchema = z
    .object({
    dba_names: z.array(z.string()).optional(),
    email_addresses: z.array(z.string()).optional(),
    identifications: z.array(entityidentification_js_1.EntityIdentification$inboundSchema).optional(),
    legal_address: z.nullable(z.lazy(() => exports.InvestigationLegalAddress$inboundSchema)).optional(),
    legal_name: z.string().optional(),
    mailing_addresses: z.array(postaladdress_js_1.PostalAddress$inboundSchema).optional(),
    operating_region_codes: z.array(z.string()).optional(),
    phone_numbers: z.array(z.string()).optional(),
    registration_region: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "dba_names": "dbaNames",
        "email_addresses": "emailAddresses",
        "legal_address": "legalAddress",
        "legal_name": "legalName",
        "mailing_addresses": "mailingAddresses",
        "operating_region_codes": "operatingRegionCodes",
        "phone_numbers": "phoneNumbers",
        "registration_region": "registrationRegion",
    });
});
/** @internal */
exports.Entity$outboundSchema = z.object({
    dbaNames: z.array(z.string()).optional(),
    emailAddresses: z.array(z.string()).optional(),
    identifications: z.array(entityidentification_js_1.EntityIdentification$outboundSchema).optional(),
    legalAddress: z.nullable(z.lazy(() => exports.InvestigationLegalAddress$outboundSchema)).optional(),
    legalName: z.string().optional(),
    mailingAddresses: z.array(postaladdress_js_1.PostalAddress$outboundSchema).optional(),
    operatingRegionCodes: z.array(z.string()).optional(),
    phoneNumbers: z.array(z.string()).optional(),
    registrationRegion: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        dbaNames: "dba_names",
        emailAddresses: "email_addresses",
        legalAddress: "legal_address",
        legalName: "legal_name",
        mailingAddresses: "mailing_addresses",
        operatingRegionCodes: "operating_region_codes",
        phoneNumbers: "phone_numbers",
        registrationRegion: "registration_region",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Entity$;
(function (Entity$) {
    /** @deprecated use `Entity$inboundSchema` instead. */
    Entity$.inboundSchema = exports.Entity$inboundSchema;
    /** @deprecated use `Entity$outboundSchema` instead. */
    Entity$.outboundSchema = exports.Entity$outboundSchema;
})(Entity$ || (exports.Entity$ = Entity$ = {}));
/** @internal */
exports.IdentityVerification$inboundSchema = z
    .union([
    z.nativeEnum(IdentityVerification),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.IdentityVerification$outboundSchema = z.union([
    z.nativeEnum(IdentityVerification),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IdentityVerification$;
(function (IdentityVerification$) {
    /** @deprecated use `IdentityVerification$inboundSchema` instead. */
    IdentityVerification$.inboundSchema = exports.IdentityVerification$inboundSchema;
    /** @deprecated use `IdentityVerification$outboundSchema` instead. */
    IdentityVerification$.outboundSchema = exports.IdentityVerification$outboundSchema;
})(IdentityVerification$ || (exports.IdentityVerification$ = IdentityVerification$ = {}));
/** @internal */
exports.IdentityVerificationScope$inboundSchema = z
    .union([
    z.nativeEnum(IdentityVerificationScope),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.IdentityVerificationScope$outboundSchema = z.union([
    z.nativeEnum(IdentityVerificationScope),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IdentityVerificationScope$;
(function (IdentityVerificationScope$) {
    /** @deprecated use `IdentityVerificationScope$inboundSchema` instead. */
    IdentityVerificationScope$.inboundSchema = exports.IdentityVerificationScope$inboundSchema;
    /** @deprecated use `IdentityVerificationScope$outboundSchema` instead. */
    IdentityVerificationScope$.outboundSchema = exports.IdentityVerificationScope$outboundSchema;
})(IdentityVerificationScope$ || (exports.IdentityVerificationScope$ = IdentityVerificationScope$ = {}));
/** @internal */
exports.InvestigationRequestState$inboundSchema = z
    .union([
    z.nativeEnum(InvestigationRequestState),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.InvestigationRequestState$outboundSchema = z.union([
    z.nativeEnum(InvestigationRequestState),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationRequestState$;
(function (InvestigationRequestState$) {
    /** @deprecated use `InvestigationRequestState$inboundSchema` instead. */
    InvestigationRequestState$.inboundSchema = exports.InvestigationRequestState$inboundSchema;
    /** @deprecated use `InvestigationRequestState$outboundSchema` instead. */
    InvestigationRequestState$.outboundSchema = exports.InvestigationRequestState$outboundSchema;
})(InvestigationRequestState$ || (exports.InvestigationRequestState$ = InvestigationRequestState$ = {}));
/** @internal */
exports.InvestigationBirthDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.InvestigationBirthDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationBirthDate$;
(function (InvestigationBirthDate$) {
    /** @deprecated use `InvestigationBirthDate$inboundSchema` instead. */
    InvestigationBirthDate$.inboundSchema = exports.InvestigationBirthDate$inboundSchema;
    /** @deprecated use `InvestigationBirthDate$outboundSchema` instead. */
    InvestigationBirthDate$.outboundSchema = exports.InvestigationBirthDate$outboundSchema;
})(InvestigationBirthDate$ || (exports.InvestigationBirthDate$ = InvestigationBirthDate$ = {}));
/** @internal */
exports.InvestigationPersonLegalAddress$inboundSchema = z.object({
    address_lines: z.array(z.string()).optional(),
    administrative_area: z.string().optional(),
    language_code: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postal_code: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    region_code: z.string().optional(),
    revision: z.number().int().optional(),
    sorting_code: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_lines": "addressLines",
        "administrative_area": "administrativeArea",
        "language_code": "languageCode",
        "postal_code": "postalCode",
        "region_code": "regionCode",
        "sorting_code": "sortingCode",
    });
});
/** @internal */
exports.InvestigationPersonLegalAddress$outboundSchema = z.object({
    addressLines: z.array(z.string()).optional(),
    administrativeArea: z.string().optional(),
    languageCode: z.string().optional(),
    locality: z.string().optional(),
    organization: z.string().optional(),
    postalCode: z.string().optional(),
    recipients: z.array(z.string()).optional(),
    regionCode: z.string().optional(),
    revision: z.number().int().optional(),
    sortingCode: z.string().optional(),
    sublocality: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressLines: "address_lines",
        administrativeArea: "administrative_area",
        languageCode: "language_code",
        postalCode: "postal_code",
        regionCode: "region_code",
        sortingCode: "sorting_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationPersonLegalAddress$;
(function (InvestigationPersonLegalAddress$) {
    /** @deprecated use `InvestigationPersonLegalAddress$inboundSchema` instead. */
    InvestigationPersonLegalAddress$.inboundSchema = exports.InvestigationPersonLegalAddress$inboundSchema;
    /** @deprecated use `InvestigationPersonLegalAddress$outboundSchema` instead. */
    InvestigationPersonLegalAddress$.outboundSchema = exports.InvestigationPersonLegalAddress$outboundSchema;
})(InvestigationPersonLegalAddress$ || (exports.InvestigationPersonLegalAddress$ = InvestigationPersonLegalAddress$ = {}));
/** @internal */
exports.InvestigationNameSuffix$inboundSchema = z
    .union([
    z.nativeEnum(InvestigationNameSuffix),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.InvestigationNameSuffix$outboundSchema = z.union([
    z.nativeEnum(InvestigationNameSuffix),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationNameSuffix$;
(function (InvestigationNameSuffix$) {
    /** @deprecated use `InvestigationNameSuffix$inboundSchema` instead. */
    InvestigationNameSuffix$.inboundSchema = exports.InvestigationNameSuffix$inboundSchema;
    /** @deprecated use `InvestigationNameSuffix$outboundSchema` instead. */
    InvestigationNameSuffix$.outboundSchema = exports.InvestigationNameSuffix$outboundSchema;
})(InvestigationNameSuffix$ || (exports.InvestigationNameSuffix$ = InvestigationNameSuffix$ = {}));
/** @internal */
exports.InvestigationExecutionDate$inboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/** @internal */
exports.InvestigationExecutionDate$outboundSchema = z.object({
    day: z.number().int().optional(),
    month: z.number().int().optional(),
    year: z.number().int().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InvestigationExecutionDate$;
(function (InvestigationExecutionDate$) {
    /** @deprecated use `InvestigationExecutionDate$inboundSchema` instead. */
    InvestigationExecutionDate$.inboundSchema = exports.InvestigationExecutionDate$inboundSchema;
    /** @deprecated use `InvestigationExecutionDate$outboundSchema` instead. */
    InvestigationExecutionDate$.outboundSchema = exports.InvestigationExecutionDate$outboundSchema;
})(InvestigationExecutionDate$ || (exports.InvestigationExecutionDate$ = InvestigationExecutionDate$ = {}));
/** @internal */
exports.ProvidedIdentityVerification$inboundSchema = z.object({
    address_verified: z.boolean().optional(),
    birth_date_verified: z.boolean().optional(),
    execution_date: z.nullable(z.lazy(() => exports.InvestigationExecutionDate$inboundSchema)).optional(),
    external_case_id: z.string().optional(),
    identity_verification_document_ids: z.array(z.string()).optional(),
    name_verified: z.boolean().optional(),
    provided_identity_verification_id: z.string().optional(),
    raw_vendor_data_document_id: z.string().optional(),
    tax_id_verified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_verified": "addressVerified",
        "birth_date_verified": "birthDateVerified",
        "execution_date": "executionDate",
        "external_case_id": "externalCaseId",
        "identity_verification_document_ids": "identityVerificationDocumentIds",
        "name_verified": "nameVerified",
        "provided_identity_verification_id": "providedIdentityVerificationId",
        "raw_vendor_data_document_id": "rawVendorDataDocumentId",
        "tax_id_verified": "taxIdVerified",
    });
});
/** @internal */
exports.ProvidedIdentityVerification$outboundSchema = z.object({
    addressVerified: z.boolean().optional(),
    birthDateVerified: z.boolean().optional(),
    executionDate: z.nullable(z.lazy(() => exports.InvestigationExecutionDate$outboundSchema)).optional(),
    externalCaseId: z.string().optional(),
    identityVerificationDocumentIds: z.array(z.string()).optional(),
    nameVerified: z.boolean().optional(),
    providedIdentityVerificationId: z.string().optional(),
    rawVendorDataDocumentId: z.string().optional(),
    taxIdVerified: z.boolean().optional(),
    vendor: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressVerified: "address_verified",
        birthDateVerified: "birth_date_verified",
        executionDate: "execution_date",
        externalCaseId: "external_case_id",
        identityVerificationDocumentIds: "identity_verification_document_ids",
        nameVerified: "name_verified",
        providedIdentityVerificationId: "provided_identity_verification_id",
        rawVendorDataDocumentId: "raw_vendor_data_document_id",
        taxIdVerified: "tax_id_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ProvidedIdentityVerification$;
(function (ProvidedIdentityVerification$) {
    /** @deprecated use `ProvidedIdentityVerification$inboundSchema` instead. */
    ProvidedIdentityVerification$.inboundSchema = exports.ProvidedIdentityVerification$inboundSchema;
    /** @deprecated use `ProvidedIdentityVerification$outboundSchema` instead. */
    ProvidedIdentityVerification$.outboundSchema = exports.ProvidedIdentityVerification$outboundSchema;
})(ProvidedIdentityVerification$ || (exports.ProvidedIdentityVerification$ = ProvidedIdentityVerification$ = {}));
/** @internal */
exports.Person$inboundSchema = z
    .object({
    birth_date: z.nullable(z.lazy(() => exports.InvestigationBirthDate$inboundSchema))
        .optional(),
    birth_region_code: z.string().optional(),
    citizenship_region_codes: z.array(z.string()).optional(),
    document_ids: z.array(z.string()).optional(),
    email_addresses: z.array(z.string()).optional(),
    family_name: z.string().optional(),
    given_name: z.string().optional(),
    identifications: z.array(personidentification_js_1.PersonIdentification$inboundSchema).optional(),
    legal_address: z.nullable(z.lazy(() => exports.InvestigationPersonLegalAddress$inboundSchema)).optional(),
    mailing_addresses: z.array(postaladdress_js_1.PostalAddress$inboundSchema).optional(),
    middle_names: z.string().optional(),
    name_suffix: exports.InvestigationNameSuffix$inboundSchema.optional(),
    phone_numbers: z.array(z.string()).optional(),
    provided_identity_verification: z.nullable(z.lazy(() => exports.ProvidedIdentityVerification$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "birth_date": "birthDate",
        "birth_region_code": "birthRegionCode",
        "citizenship_region_codes": "citizenshipRegionCodes",
        "document_ids": "documentIds",
        "email_addresses": "emailAddresses",
        "family_name": "familyName",
        "given_name": "givenName",
        "legal_address": "legalAddress",
        "mailing_addresses": "mailingAddresses",
        "middle_names": "middleNames",
        "name_suffix": "nameSuffix",
        "phone_numbers": "phoneNumbers",
        "provided_identity_verification": "providedIdentityVerification",
    });
});
/** @internal */
exports.Person$outboundSchema = z.object({
    birthDate: z.nullable(z.lazy(() => exports.InvestigationBirthDate$outboundSchema))
        .optional(),
    birthRegionCode: z.string().optional(),
    citizenshipRegionCodes: z.array(z.string()).optional(),
    documentIds: z.array(z.string()).optional(),
    emailAddresses: z.array(z.string()).optional(),
    familyName: z.string().optional(),
    givenName: z.string().optional(),
    identifications: z.array(personidentification_js_1.PersonIdentification$outboundSchema).optional(),
    legalAddress: z.nullable(z.lazy(() => exports.InvestigationPersonLegalAddress$outboundSchema)).optional(),
    mailingAddresses: z.array(postaladdress_js_1.PostalAddress$outboundSchema).optional(),
    middleNames: z.string().optional(),
    nameSuffix: exports.InvestigationNameSuffix$outboundSchema.optional(),
    phoneNumbers: z.array(z.string()).optional(),
    providedIdentityVerification: z.nullable(z.lazy(() => exports.ProvidedIdentityVerification$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        birthDate: "birth_date",
        birthRegionCode: "birth_region_code",
        citizenshipRegionCodes: "citizenship_region_codes",
        documentIds: "document_ids",
        emailAddresses: "email_addresses",
        familyName: "family_name",
        givenName: "given_name",
        legalAddress: "legal_address",
        mailingAddresses: "mailing_addresses",
        middleNames: "middle_names",
        nameSuffix: "name_suffix",
        phoneNumbers: "phone_numbers",
        providedIdentityVerification: "provided_identity_verification",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Person$;
(function (Person$) {
    /** @deprecated use `Person$inboundSchema` instead. */
    Person$.inboundSchema = exports.Person$inboundSchema;
    /** @deprecated use `Person$outboundSchema` instead. */
    Person$.outboundSchema = exports.Person$outboundSchema;
})(Person$ || (exports.Person$ = Person$ = {}));
/** @internal */
exports.WatchlistScreen$inboundSchema = z
    .union([
    z.nativeEnum(WatchlistScreen),
    z.string().transform(enums_js_1.catchUnrecognizedEnum),
]);
/** @internal */
exports.WatchlistScreen$outboundSchema = z.union([
    z.nativeEnum(WatchlistScreen),
    z.string().and(z.custom()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WatchlistScreen$;
(function (WatchlistScreen$) {
    /** @deprecated use `WatchlistScreen$inboundSchema` instead. */
    WatchlistScreen$.inboundSchema = exports.WatchlistScreen$inboundSchema;
    /** @deprecated use `WatchlistScreen$outboundSchema` instead. */
    WatchlistScreen$.outboundSchema = exports.WatchlistScreen$outboundSchema;
})(WatchlistScreen$ || (exports.WatchlistScreen$ = WatchlistScreen$ = {}));
/** @internal */
exports.Investigation$inboundSchema = z.object({
    audit_trail: z.array(audittrail_js_1.AuditTrail$inboundSchema).optional(),
    correspondent_id: z.string().optional(),
    create_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    entity: z.nullable(z.lazy(() => exports.Entity$inboundSchema)).optional(),
    identity_verification: exports.IdentityVerification$inboundSchema.optional(),
    identity_verification_results: z.array(identityverificationresult_js_1.IdentityVerificationResult$inboundSchema).optional(),
    identity_verification_scope: exports.IdentityVerificationScope$inboundSchema
        .optional(),
    investigation_request_state: exports.InvestigationRequestState$inboundSchema
        .optional(),
    name: z.string().optional(),
    person: z.nullable(z.lazy(() => exports.Person$inboundSchema)).optional(),
    update_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    watchlist_matches: z.array(watchlistmatch_js_1.WatchlistMatch$inboundSchema).optional(),
    watchlist_screen: exports.WatchlistScreen$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "audit_trail": "auditTrail",
        "correspondent_id": "correspondentId",
        "create_time": "createTime",
        "identity_verification": "identityVerification",
        "identity_verification_results": "identityVerificationResults",
        "identity_verification_scope": "identityVerificationScope",
        "investigation_request_state": "investigationRequestState",
        "update_time": "updateTime",
        "watchlist_matches": "watchlistMatches",
        "watchlist_screen": "watchlistScreen",
    });
});
/** @internal */
exports.Investigation$outboundSchema = z.object({
    auditTrail: z.array(audittrail_js_1.AuditTrail$outboundSchema).optional(),
    correspondentId: z.string().optional(),
    createTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    entity: z.nullable(z.lazy(() => exports.Entity$outboundSchema)).optional(),
    identityVerification: exports.IdentityVerification$outboundSchema.optional(),
    identityVerificationResults: z.array(identityverificationresult_js_1.IdentityVerificationResult$outboundSchema).optional(),
    identityVerificationScope: exports.IdentityVerificationScope$outboundSchema
        .optional(),
    investigationRequestState: exports.InvestigationRequestState$outboundSchema
        .optional(),
    name: z.string().optional(),
    person: z.nullable(z.lazy(() => exports.Person$outboundSchema)).optional(),
    updateTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    watchlistMatches: z.array(watchlistmatch_js_1.WatchlistMatch$outboundSchema).optional(),
    watchlistScreen: exports.WatchlistScreen$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        auditTrail: "audit_trail",
        correspondentId: "correspondent_id",
        createTime: "create_time",
        identityVerification: "identity_verification",
        identityVerificationResults: "identity_verification_results",
        identityVerificationScope: "identity_verification_scope",
        investigationRequestState: "investigation_request_state",
        updateTime: "update_time",
        watchlistMatches: "watchlist_matches",
        watchlistScreen: "watchlist_screen",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Investigation$;
(function (Investigation$) {
    /** @deprecated use `Investigation$inboundSchema` instead. */
    Investigation$.inboundSchema = exports.Investigation$inboundSchema;
    /** @deprecated use `Investigation$outboundSchema` instead. */
    Investigation$.outboundSchema = exports.Investigation$outboundSchema;
})(Investigation$ || (exports.Investigation$ = Investigation$ = {}));
//# sourceMappingURL=investigation.js.map