/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountsUpdateTrustedContactRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The trustedContact id.
   */
  trustedContactId: string;
  /**
   * The list of fields to update. Updatable Fields  `given_name`  `middle_names`  `family_name`  `phone_number`  `email_address`  `mailing_address.region_code`  `mailing_address.postal_code`  `mailing_address.administrative_area`  `mailing_address.locality`  `mailing_address.address_lines`
   */
  updateMask?: string | undefined;
  trustedContactUpdate: components.TrustedContactUpdate;
};

export type AccountsUpdateTrustedContactResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  trustedContact?: components.TrustedContact | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsUpdateTrustedContactRequest$inboundSchema: z.ZodType<
  AccountsUpdateTrustedContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  trustedContact_id: z.string(),
  update_mask: z.string().optional(),
  TrustedContactUpdate: components.TrustedContactUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "trustedContact_id": "trustedContactId",
    "update_mask": "updateMask",
    "TrustedContactUpdate": "trustedContactUpdate",
  });
});

/** @internal */
export type AccountsUpdateTrustedContactRequest$Outbound = {
  account_id: string;
  trustedContact_id: string;
  update_mask?: string | undefined;
  TrustedContactUpdate: components.TrustedContactUpdate$Outbound;
};

/** @internal */
export const AccountsUpdateTrustedContactRequest$outboundSchema: z.ZodType<
  AccountsUpdateTrustedContactRequest$Outbound,
  z.ZodTypeDef,
  AccountsUpdateTrustedContactRequest
> = z.object({
  accountId: z.string(),
  trustedContactId: z.string(),
  updateMask: z.string().optional(),
  trustedContactUpdate: components.TrustedContactUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    trustedContactId: "trustedContact_id",
    updateMask: "update_mask",
    trustedContactUpdate: "TrustedContactUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsUpdateTrustedContactRequest$ {
  /** @deprecated use `AccountsUpdateTrustedContactRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountsUpdateTrustedContactRequest$inboundSchema;
  /** @deprecated use `AccountsUpdateTrustedContactRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountsUpdateTrustedContactRequest$outboundSchema;
  /** @deprecated use `AccountsUpdateTrustedContactRequest$Outbound` instead. */
  export type Outbound = AccountsUpdateTrustedContactRequest$Outbound;
}

/** @internal */
export const AccountsUpdateTrustedContactResponse$inboundSchema: z.ZodType<
  AccountsUpdateTrustedContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  TrustedContact: components.TrustedContact$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "TrustedContact": "trustedContact",
    "Status": "status",
  });
});

/** @internal */
export type AccountsUpdateTrustedContactResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  TrustedContact?: components.TrustedContact$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsUpdateTrustedContactResponse$outboundSchema: z.ZodType<
  AccountsUpdateTrustedContactResponse$Outbound,
  z.ZodTypeDef,
  AccountsUpdateTrustedContactResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  trustedContact: components.TrustedContact$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    trustedContact: "TrustedContact",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsUpdateTrustedContactResponse$ {
  /** @deprecated use `AccountsUpdateTrustedContactResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountsUpdateTrustedContactResponse$inboundSchema;
  /** @deprecated use `AccountsUpdateTrustedContactResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountsUpdateTrustedContactResponse$outboundSchema;
  /** @deprecated use `AccountsUpdateTrustedContactResponse$Outbound` instead. */
  export type Outbound = AccountsUpdateTrustedContactResponse$Outbound;
}
