/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountsDeleteTrustedContactRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The trustedContact id.
   */
  trustedContactId: string;
};

export type AccountsDeleteTrustedContactResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsDeleteTrustedContactRequest$inboundSchema: z.ZodType<
  AccountsDeleteTrustedContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  trustedContact_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "trustedContact_id": "trustedContactId",
  });
});

/** @internal */
export type AccountsDeleteTrustedContactRequest$Outbound = {
  account_id: string;
  trustedContact_id: string;
};

/** @internal */
export const AccountsDeleteTrustedContactRequest$outboundSchema: z.ZodType<
  AccountsDeleteTrustedContactRequest$Outbound,
  z.ZodTypeDef,
  AccountsDeleteTrustedContactRequest
> = z.object({
  accountId: z.string(),
  trustedContactId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    trustedContactId: "trustedContact_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsDeleteTrustedContactRequest$ {
  /** @deprecated use `AccountsDeleteTrustedContactRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountsDeleteTrustedContactRequest$inboundSchema;
  /** @deprecated use `AccountsDeleteTrustedContactRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountsDeleteTrustedContactRequest$outboundSchema;
  /** @deprecated use `AccountsDeleteTrustedContactRequest$Outbound` instead. */
  export type Outbound = AccountsDeleteTrustedContactRequest$Outbound;
}

/** @internal */
export const AccountsDeleteTrustedContactResponse$inboundSchema: z.ZodType<
  AccountsDeleteTrustedContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Status": "status",
  });
});

/** @internal */
export type AccountsDeleteTrustedContactResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsDeleteTrustedContactResponse$outboundSchema: z.ZodType<
  AccountsDeleteTrustedContactResponse$Outbound,
  z.ZodTypeDef,
  AccountsDeleteTrustedContactResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsDeleteTrustedContactResponse$ {
  /** @deprecated use `AccountsDeleteTrustedContactResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountsDeleteTrustedContactResponse$inboundSchema;
  /** @deprecated use `AccountsDeleteTrustedContactResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountsDeleteTrustedContactResponse$outboundSchema;
  /** @deprecated use `AccountsDeleteTrustedContactResponse$Outbound` instead. */
  export type Outbound = AccountsDeleteTrustedContactResponse$Outbound;
}
