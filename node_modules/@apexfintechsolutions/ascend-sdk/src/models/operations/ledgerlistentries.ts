/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type LedgerListEntriesRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The maximum number of entries to return. The service may return fewer than this value Default is 100 (subject to change) The maximum is 1000, values exceeding this will be set to 1000 (subject to change)
   */
  pageSize?: number | undefined;
  /**
   * A page token, received from a previous `ListEntries` call. Provide this to retrieve the subsequent page When paginating, all other parameters provided to `ListEntries` must match the call that provided the page token in order to maintain a stable result set
   */
  pageToken?: string | undefined;
  /**
   * A CEL string to filter results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information;
   */
  filter?: string | undefined;
};

export type LedgerListEntriesResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  listEntriesResponse?: components.ListEntriesResponse | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const LedgerListEntriesRequest$inboundSchema: z.ZodType<
  LedgerListEntriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  page_size: z.number().int().optional(),
  page_token: z.string().optional(),
  filter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "page_size": "pageSize",
    "page_token": "pageToken",
  });
});

/** @internal */
export type LedgerListEntriesRequest$Outbound = {
  account_id: string;
  page_size?: number | undefined;
  page_token?: string | undefined;
  filter?: string | undefined;
};

/** @internal */
export const LedgerListEntriesRequest$outboundSchema: z.ZodType<
  LedgerListEntriesRequest$Outbound,
  z.ZodTypeDef,
  LedgerListEntriesRequest
> = z.object({
  accountId: z.string(),
  pageSize: z.number().int().optional(),
  pageToken: z.string().optional(),
  filter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    pageSize: "page_size",
    pageToken: "page_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LedgerListEntriesRequest$ {
  /** @deprecated use `LedgerListEntriesRequest$inboundSchema` instead. */
  export const inboundSchema = LedgerListEntriesRequest$inboundSchema;
  /** @deprecated use `LedgerListEntriesRequest$outboundSchema` instead. */
  export const outboundSchema = LedgerListEntriesRequest$outboundSchema;
  /** @deprecated use `LedgerListEntriesRequest$Outbound` instead. */
  export type Outbound = LedgerListEntriesRequest$Outbound;
}

/** @internal */
export const LedgerListEntriesResponse$inboundSchema: z.ZodType<
  LedgerListEntriesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ListEntriesResponse: components.ListEntriesResponse$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ListEntriesResponse": "listEntriesResponse",
    "Status": "status",
  });
});

/** @internal */
export type LedgerListEntriesResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ListEntriesResponse?: components.ListEntriesResponse$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const LedgerListEntriesResponse$outboundSchema: z.ZodType<
  LedgerListEntriesResponse$Outbound,
  z.ZodTypeDef,
  LedgerListEntriesResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  listEntriesResponse: components.ListEntriesResponse$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    listEntriesResponse: "ListEntriesResponse",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LedgerListEntriesResponse$ {
  /** @deprecated use `LedgerListEntriesResponse$inboundSchema` instead. */
  export const inboundSchema = LedgerListEntriesResponse$inboundSchema;
  /** @deprecated use `LedgerListEntriesResponse$outboundSchema` instead. */
  export const outboundSchema = LedgerListEntriesResponse$outboundSchema;
  /** @deprecated use `LedgerListEntriesResponse$Outbound` instead. */
  export type Outbound = LedgerListEntriesResponse$Outbound;
}
