/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type SubscriberDeletePushSubscriptionRequest = {
  /**
   * The subscription id.
   */
  subscriptionId: string;
};

export type SubscriberDeletePushSubscriptionResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * INVALID_ARGUMENT: The request was not well formed.
   *
   * @remarks
   * FAILED_PRECONDITION: The subscription cannot be deleted in its current state.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const SubscriberDeletePushSubscriptionRequest$inboundSchema: z.ZodType<
  SubscriberDeletePushSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
  });
});

/** @internal */
export type SubscriberDeletePushSubscriptionRequest$Outbound = {
  subscription_id: string;
};

/** @internal */
export const SubscriberDeletePushSubscriptionRequest$outboundSchema: z.ZodType<
  SubscriberDeletePushSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  SubscriberDeletePushSubscriptionRequest
> = z.object({
  subscriptionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberDeletePushSubscriptionRequest$ {
  /** @deprecated use `SubscriberDeletePushSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberDeletePushSubscriptionRequest$inboundSchema;
  /** @deprecated use `SubscriberDeletePushSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberDeletePushSubscriptionRequest$outboundSchema;
  /** @deprecated use `SubscriberDeletePushSubscriptionRequest$Outbound` instead. */
  export type Outbound = SubscriberDeletePushSubscriptionRequest$Outbound;
}

/** @internal */
export const SubscriberDeletePushSubscriptionResponse$inboundSchema: z.ZodType<
  SubscriberDeletePushSubscriptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Status": "status",
  });
});

/** @internal */
export type SubscriberDeletePushSubscriptionResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const SubscriberDeletePushSubscriptionResponse$outboundSchema: z.ZodType<
  SubscriberDeletePushSubscriptionResponse$Outbound,
  z.ZodTypeDef,
  SubscriberDeletePushSubscriptionResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberDeletePushSubscriptionResponse$ {
  /** @deprecated use `SubscriberDeletePushSubscriptionResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberDeletePushSubscriptionResponse$inboundSchema;
  /** @deprecated use `SubscriberDeletePushSubscriptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberDeletePushSubscriptionResponse$outboundSchema;
  /** @deprecated use `SubscriberDeletePushSubscriptionResponse$Outbound` instead. */
  export type Outbound = SubscriberDeletePushSubscriptionResponse$Outbound;
}
