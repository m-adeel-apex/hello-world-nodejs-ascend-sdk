/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type ReaderGetEventMessageRequest = {
  /**
   * The message id.
   */
  messageId: string;
};

export type ReaderGetEventMessageResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  eventMessage?: components.EventMessage | undefined;
  /**
   * INVALID_ARGUMENT: The request was not well formed.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const ReaderGetEventMessageRequest$inboundSchema: z.ZodType<
  ReaderGetEventMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  message_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "message_id": "messageId",
  });
});

/** @internal */
export type ReaderGetEventMessageRequest$Outbound = {
  message_id: string;
};

/** @internal */
export const ReaderGetEventMessageRequest$outboundSchema: z.ZodType<
  ReaderGetEventMessageRequest$Outbound,
  z.ZodTypeDef,
  ReaderGetEventMessageRequest
> = z.object({
  messageId: z.string(),
}).transform((v) => {
  return remap$(v, {
    messageId: "message_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReaderGetEventMessageRequest$ {
  /** @deprecated use `ReaderGetEventMessageRequest$inboundSchema` instead. */
  export const inboundSchema = ReaderGetEventMessageRequest$inboundSchema;
  /** @deprecated use `ReaderGetEventMessageRequest$outboundSchema` instead. */
  export const outboundSchema = ReaderGetEventMessageRequest$outboundSchema;
  /** @deprecated use `ReaderGetEventMessageRequest$Outbound` instead. */
  export type Outbound = ReaderGetEventMessageRequest$Outbound;
}

/** @internal */
export const ReaderGetEventMessageResponse$inboundSchema: z.ZodType<
  ReaderGetEventMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  EventMessage: components.EventMessage$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "EventMessage": "eventMessage",
    "Status": "status",
  });
});

/** @internal */
export type ReaderGetEventMessageResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  EventMessage?: components.EventMessage$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const ReaderGetEventMessageResponse$outboundSchema: z.ZodType<
  ReaderGetEventMessageResponse$Outbound,
  z.ZodTypeDef,
  ReaderGetEventMessageResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  eventMessage: components.EventMessage$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    eventMessage: "EventMessage",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReaderGetEventMessageResponse$ {
  /** @deprecated use `ReaderGetEventMessageResponse$inboundSchema` instead. */
  export const inboundSchema = ReaderGetEventMessageResponse$inboundSchema;
  /** @deprecated use `ReaderGetEventMessageResponse$outboundSchema` instead. */
  export const outboundSchema = ReaderGetEventMessageResponse$outboundSchema;
  /** @deprecated use `ReaderGetEventMessageResponse$Outbound` instead. */
  export type Outbound = ReaderGetEventMessageResponse$Outbound;
}
