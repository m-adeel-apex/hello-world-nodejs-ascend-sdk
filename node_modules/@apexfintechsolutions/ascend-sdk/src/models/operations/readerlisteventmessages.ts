/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type ReaderListEventMessagesRequest = {
  /**
   * A CEL string to filter results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information; If left empty, all events the user has permission to view are returned; Filter options include:
   *
   * @remarks
   *  `name`
   *  `message_id`
   *  `event_type`
   *  `publish_time`
   *  `partition_key`
   *  `client_id`
   *  `correspondent_id`
   *  `account_id`
   */
  filter?: string | undefined;
  /**
   * The number of entries to return in a single page; Default = 100; Maximum = 1000
   */
  pageSize?: number | undefined;
  /**
   * Page token used for pagination; Supplying a page token returns the next page of results
   */
  pageToken?: string | undefined;
};

export type ReaderListEventMessagesResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  listEventMessagesResponse?: components.ListEventMessagesResponse | undefined;
  /**
   * INVALID_ARGUMENT: The request was not well formed.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const ReaderListEventMessagesRequest$inboundSchema: z.ZodType<
  ReaderListEventMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string().optional(),
  page_size: z.number().int().optional(),
  page_token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "page_size": "pageSize",
    "page_token": "pageToken",
  });
});

/** @internal */
export type ReaderListEventMessagesRequest$Outbound = {
  filter?: string | undefined;
  page_size?: number | undefined;
  page_token?: string | undefined;
};

/** @internal */
export const ReaderListEventMessagesRequest$outboundSchema: z.ZodType<
  ReaderListEventMessagesRequest$Outbound,
  z.ZodTypeDef,
  ReaderListEventMessagesRequest
> = z.object({
  filter: z.string().optional(),
  pageSize: z.number().int().optional(),
  pageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    pageSize: "page_size",
    pageToken: "page_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReaderListEventMessagesRequest$ {
  /** @deprecated use `ReaderListEventMessagesRequest$inboundSchema` instead. */
  export const inboundSchema = ReaderListEventMessagesRequest$inboundSchema;
  /** @deprecated use `ReaderListEventMessagesRequest$outboundSchema` instead. */
  export const outboundSchema = ReaderListEventMessagesRequest$outboundSchema;
  /** @deprecated use `ReaderListEventMessagesRequest$Outbound` instead. */
  export type Outbound = ReaderListEventMessagesRequest$Outbound;
}

/** @internal */
export const ReaderListEventMessagesResponse$inboundSchema: z.ZodType<
  ReaderListEventMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ListEventMessagesResponse: components.ListEventMessagesResponse$inboundSchema
    .optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ListEventMessagesResponse": "listEventMessagesResponse",
    "Status": "status",
  });
});

/** @internal */
export type ReaderListEventMessagesResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ListEventMessagesResponse?:
    | components.ListEventMessagesResponse$Outbound
    | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const ReaderListEventMessagesResponse$outboundSchema: z.ZodType<
  ReaderListEventMessagesResponse$Outbound,
  z.ZodTypeDef,
  ReaderListEventMessagesResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  listEventMessagesResponse: components.ListEventMessagesResponse$outboundSchema
    .optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    listEventMessagesResponse: "ListEventMessagesResponse",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReaderListEventMessagesResponse$ {
  /** @deprecated use `ReaderListEventMessagesResponse$inboundSchema` instead. */
  export const inboundSchema = ReaderListEventMessagesResponse$inboundSchema;
  /** @deprecated use `ReaderListEventMessagesResponse$outboundSchema` instead. */
  export const outboundSchema = ReaderListEventMessagesResponse$outboundSchema;
  /** @deprecated use `ReaderListEventMessagesResponse$Outbound` instead. */
  export type Outbound = ReaderListEventMessagesResponse$Outbound;
}
