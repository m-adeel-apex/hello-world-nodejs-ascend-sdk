/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type SubscriberGetPushSubscriptionRequest = {
  /**
   * The subscription id.
   */
  subscriptionId: string;
};

export type SubscriberGetPushSubscriptionResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  pushSubscription?: components.PushSubscription | undefined;
  /**
   * INVALID_ARGUMENT: The request was not well formed.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const SubscriberGetPushSubscriptionRequest$inboundSchema: z.ZodType<
  SubscriberGetPushSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
  });
});

/** @internal */
export type SubscriberGetPushSubscriptionRequest$Outbound = {
  subscription_id: string;
};

/** @internal */
export const SubscriberGetPushSubscriptionRequest$outboundSchema: z.ZodType<
  SubscriberGetPushSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  SubscriberGetPushSubscriptionRequest
> = z.object({
  subscriptionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberGetPushSubscriptionRequest$ {
  /** @deprecated use `SubscriberGetPushSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberGetPushSubscriptionRequest$inboundSchema;
  /** @deprecated use `SubscriberGetPushSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberGetPushSubscriptionRequest$outboundSchema;
  /** @deprecated use `SubscriberGetPushSubscriptionRequest$Outbound` instead. */
  export type Outbound = SubscriberGetPushSubscriptionRequest$Outbound;
}

/** @internal */
export const SubscriberGetPushSubscriptionResponse$inboundSchema: z.ZodType<
  SubscriberGetPushSubscriptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  PushSubscription: components.PushSubscription$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "PushSubscription": "pushSubscription",
    "Status": "status",
  });
});

/** @internal */
export type SubscriberGetPushSubscriptionResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  PushSubscription?: components.PushSubscription$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const SubscriberGetPushSubscriptionResponse$outboundSchema: z.ZodType<
  SubscriberGetPushSubscriptionResponse$Outbound,
  z.ZodTypeDef,
  SubscriberGetPushSubscriptionResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  pushSubscription: components.PushSubscription$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    pushSubscription: "PushSubscription",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberGetPushSubscriptionResponse$ {
  /** @deprecated use `SubscriberGetPushSubscriptionResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberGetPushSubscriptionResponse$inboundSchema;
  /** @deprecated use `SubscriberGetPushSubscriptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberGetPushSubscriptionResponse$outboundSchema;
  /** @deprecated use `SubscriberGetPushSubscriptionResponse$Outbound` instead. */
  export type Outbound = SubscriberGetPushSubscriptionResponse$Outbound;
}
