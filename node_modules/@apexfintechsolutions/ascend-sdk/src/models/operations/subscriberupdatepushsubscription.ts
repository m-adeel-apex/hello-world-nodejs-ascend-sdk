/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type SubscriberUpdatePushSubscriptionRequest = {
  /**
   * The subscription id.
   */
  subscriptionId: string;
  /**
   * The fields to update in subscription
   */
  updateMask?: string | undefined;
  pushSubscriptionUpdate: components.PushSubscriptionUpdate;
};

export type SubscriberUpdatePushSubscriptionResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  pushSubscription?: components.PushSubscription | undefined;
  /**
   * INVALID_ARGUMENT: The request was not well formed.
   *
   * @remarks
   * FAILED_PRECONDITION: The subscription cannot be updated in its current state.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const SubscriberUpdatePushSubscriptionRequest$inboundSchema: z.ZodType<
  SubscriberUpdatePushSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
  update_mask: z.string().optional(),
  PushSubscriptionUpdate: components.PushSubscriptionUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "update_mask": "updateMask",
    "PushSubscriptionUpdate": "pushSubscriptionUpdate",
  });
});

/** @internal */
export type SubscriberUpdatePushSubscriptionRequest$Outbound = {
  subscription_id: string;
  update_mask?: string | undefined;
  PushSubscriptionUpdate: components.PushSubscriptionUpdate$Outbound;
};

/** @internal */
export const SubscriberUpdatePushSubscriptionRequest$outboundSchema: z.ZodType<
  SubscriberUpdatePushSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  SubscriberUpdatePushSubscriptionRequest
> = z.object({
  subscriptionId: z.string(),
  updateMask: z.string().optional(),
  pushSubscriptionUpdate: components.PushSubscriptionUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    updateMask: "update_mask",
    pushSubscriptionUpdate: "PushSubscriptionUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberUpdatePushSubscriptionRequest$ {
  /** @deprecated use `SubscriberUpdatePushSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberUpdatePushSubscriptionRequest$inboundSchema;
  /** @deprecated use `SubscriberUpdatePushSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberUpdatePushSubscriptionRequest$outboundSchema;
  /** @deprecated use `SubscriberUpdatePushSubscriptionRequest$Outbound` instead. */
  export type Outbound = SubscriberUpdatePushSubscriptionRequest$Outbound;
}

/** @internal */
export const SubscriberUpdatePushSubscriptionResponse$inboundSchema: z.ZodType<
  SubscriberUpdatePushSubscriptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  PushSubscription: components.PushSubscription$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "PushSubscription": "pushSubscription",
    "Status": "status",
  });
});

/** @internal */
export type SubscriberUpdatePushSubscriptionResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  PushSubscription?: components.PushSubscription$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const SubscriberUpdatePushSubscriptionResponse$outboundSchema: z.ZodType<
  SubscriberUpdatePushSubscriptionResponse$Outbound,
  z.ZodTypeDef,
  SubscriberUpdatePushSubscriptionResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  pushSubscription: components.PushSubscription$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    pushSubscription: "PushSubscription",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberUpdatePushSubscriptionResponse$ {
  /** @deprecated use `SubscriberUpdatePushSubscriptionResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberUpdatePushSubscriptionResponse$inboundSchema;
  /** @deprecated use `SubscriberUpdatePushSubscriptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberUpdatePushSubscriptionResponse$outboundSchema;
  /** @deprecated use `SubscriberUpdatePushSubscriptionResponse$Outbound` instead. */
  export type Outbound = SubscriberUpdatePushSubscriptionResponse$Outbound;
}
