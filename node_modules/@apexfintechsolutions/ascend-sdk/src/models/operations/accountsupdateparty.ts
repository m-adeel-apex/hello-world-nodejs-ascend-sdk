/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountsUpdatePartyRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The party id.
   */
  partyId: string;
  /**
   * The list of fields to update. Updatable Fields  `phone_number`  `email_address`  `statement_delivery_preference`  `trade_confirmation_delivery_preference`  `tax_document_delivery_preference`  `proxy_delivery_preference`  `prospectus_delivery_preference`  `mailing_address.region_code`  `mailing_address.postal_code`  `mailing_address.administrative_area`  `mailing_address.locality`  `mailing_address.address_lines`
   */
  updateMask?: string | undefined;
  partyRequestUpdate: components.PartyRequestUpdate;
};

export type AccountsUpdatePartyResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  party?: components.Party | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsUpdatePartyRequest$inboundSchema: z.ZodType<
  AccountsUpdatePartyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  party_id: z.string(),
  update_mask: z.string().optional(),
  PartyRequestUpdate: components.PartyRequestUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "party_id": "partyId",
    "update_mask": "updateMask",
    "PartyRequestUpdate": "partyRequestUpdate",
  });
});

/** @internal */
export type AccountsUpdatePartyRequest$Outbound = {
  account_id: string;
  party_id: string;
  update_mask?: string | undefined;
  PartyRequestUpdate: components.PartyRequestUpdate$Outbound;
};

/** @internal */
export const AccountsUpdatePartyRequest$outboundSchema: z.ZodType<
  AccountsUpdatePartyRequest$Outbound,
  z.ZodTypeDef,
  AccountsUpdatePartyRequest
> = z.object({
  accountId: z.string(),
  partyId: z.string(),
  updateMask: z.string().optional(),
  partyRequestUpdate: components.PartyRequestUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    partyId: "party_id",
    updateMask: "update_mask",
    partyRequestUpdate: "PartyRequestUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsUpdatePartyRequest$ {
  /** @deprecated use `AccountsUpdatePartyRequest$inboundSchema` instead. */
  export const inboundSchema = AccountsUpdatePartyRequest$inboundSchema;
  /** @deprecated use `AccountsUpdatePartyRequest$outboundSchema` instead. */
  export const outboundSchema = AccountsUpdatePartyRequest$outboundSchema;
  /** @deprecated use `AccountsUpdatePartyRequest$Outbound` instead. */
  export type Outbound = AccountsUpdatePartyRequest$Outbound;
}

/** @internal */
export const AccountsUpdatePartyResponse$inboundSchema: z.ZodType<
  AccountsUpdatePartyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Party: components.Party$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Party": "party",
    "Status": "status",
  });
});

/** @internal */
export type AccountsUpdatePartyResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Party?: components.Party$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsUpdatePartyResponse$outboundSchema: z.ZodType<
  AccountsUpdatePartyResponse$Outbound,
  z.ZodTypeDef,
  AccountsUpdatePartyResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  party: components.Party$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    party: "Party",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsUpdatePartyResponse$ {
  /** @deprecated use `AccountsUpdatePartyResponse$inboundSchema` instead. */
  export const inboundSchema = AccountsUpdatePartyResponse$inboundSchema;
  /** @deprecated use `AccountsUpdatePartyResponse$outboundSchema` instead. */
  export const outboundSchema = AccountsUpdatePartyResponse$outboundSchema;
  /** @deprecated use `AccountsUpdatePartyResponse$Outbound` instead. */
  export type Outbound = AccountsUpdatePartyResponse$Outbound;
}
