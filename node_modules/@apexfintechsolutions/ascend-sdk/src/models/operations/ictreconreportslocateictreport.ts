/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

/**
 * The ICT program for which to locate the report.
 */
export enum ProgramDateFilterProgram {
  IctProgramUnspecified = "ICT_PROGRAM_UNSPECIFIED",
  BrokerPartner = "BROKER_PARTNER",
  DepositOnly = "DEPOSIT_ONLY",
  BankingPartner = "BANKING_PARTNER",
  MoneyTransmitter = "MONEY_TRANSMITTER",
  WithdrawalOnly = "WITHDRAWAL_ONLY",
  DigitalPartner = "DIGITAL_PARTNER",
}

export type IctReconReportsLocateIctReportRequest = {
  /**
   * The correspondent id.
   */
  correspondentId: string;
  /**
   * The id of the ICT batch for which to locate the report.
   */
  batchId?: string | undefined;
  /**
   * The ICT program for which to locate the report.
   */
  programDateFilterProgram?: ProgramDateFilterProgram | undefined;
  /**
   * The process date for which to locate the report.
   */
  programDateFilterProcessDate?: components.DateCreate | undefined;
};

export type IctReconReportsLocateIctReportResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  locateIctReportResponse?: components.LocateIctReportResponse | undefined;
  /**
   * INVALID_ARGUMENT: The request has an invalid argument.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const ProgramDateFilterProgram$inboundSchema: z.ZodNativeEnum<
  typeof ProgramDateFilterProgram
> = z.nativeEnum(ProgramDateFilterProgram);

/** @internal */
export const ProgramDateFilterProgram$outboundSchema: z.ZodNativeEnum<
  typeof ProgramDateFilterProgram
> = ProgramDateFilterProgram$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProgramDateFilterProgram$ {
  /** @deprecated use `ProgramDateFilterProgram$inboundSchema` instead. */
  export const inboundSchema = ProgramDateFilterProgram$inboundSchema;
  /** @deprecated use `ProgramDateFilterProgram$outboundSchema` instead. */
  export const outboundSchema = ProgramDateFilterProgram$outboundSchema;
}

/** @internal */
export const IctReconReportsLocateIctReportRequest$inboundSchema: z.ZodType<
  IctReconReportsLocateIctReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  correspondent_id: z.string(),
  batch_id: z.string().optional(),
  "program_date_filter.program": ProgramDateFilterProgram$inboundSchema
    .optional(),
  "program_date_filter.process_date": components.DateCreate$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "correspondent_id": "correspondentId",
    "batch_id": "batchId",
    "program_date_filter.program": "programDateFilterProgram",
    "program_date_filter.process_date": "programDateFilterProcessDate",
  });
});

/** @internal */
export type IctReconReportsLocateIctReportRequest$Outbound = {
  correspondent_id: string;
  batch_id?: string | undefined;
  "program_date_filter.program"?: string | undefined;
  "program_date_filter.process_date"?:
    | components.DateCreate$Outbound
    | undefined;
};

/** @internal */
export const IctReconReportsLocateIctReportRequest$outboundSchema: z.ZodType<
  IctReconReportsLocateIctReportRequest$Outbound,
  z.ZodTypeDef,
  IctReconReportsLocateIctReportRequest
> = z.object({
  correspondentId: z.string(),
  batchId: z.string().optional(),
  programDateFilterProgram: ProgramDateFilterProgram$outboundSchema.optional(),
  programDateFilterProcessDate: components.DateCreate$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    correspondentId: "correspondent_id",
    batchId: "batch_id",
    programDateFilterProgram: "program_date_filter.program",
    programDateFilterProcessDate: "program_date_filter.process_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IctReconReportsLocateIctReportRequest$ {
  /** @deprecated use `IctReconReportsLocateIctReportRequest$inboundSchema` instead. */
  export const inboundSchema =
    IctReconReportsLocateIctReportRequest$inboundSchema;
  /** @deprecated use `IctReconReportsLocateIctReportRequest$outboundSchema` instead. */
  export const outboundSchema =
    IctReconReportsLocateIctReportRequest$outboundSchema;
  /** @deprecated use `IctReconReportsLocateIctReportRequest$Outbound` instead. */
  export type Outbound = IctReconReportsLocateIctReportRequest$Outbound;
}

/** @internal */
export const IctReconReportsLocateIctReportResponse$inboundSchema: z.ZodType<
  IctReconReportsLocateIctReportResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  LocateIctReportResponse: components.LocateIctReportResponse$inboundSchema
    .optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "LocateIctReportResponse": "locateIctReportResponse",
    "Status": "status",
  });
});

/** @internal */
export type IctReconReportsLocateIctReportResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  LocateIctReportResponse?:
    | components.LocateIctReportResponse$Outbound
    | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const IctReconReportsLocateIctReportResponse$outboundSchema: z.ZodType<
  IctReconReportsLocateIctReportResponse$Outbound,
  z.ZodTypeDef,
  IctReconReportsLocateIctReportResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  locateIctReportResponse: components.LocateIctReportResponse$outboundSchema
    .optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    locateIctReportResponse: "LocateIctReportResponse",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IctReconReportsLocateIctReportResponse$ {
  /** @deprecated use `IctReconReportsLocateIctReportResponse$inboundSchema` instead. */
  export const inboundSchema =
    IctReconReportsLocateIctReportResponse$inboundSchema;
  /** @deprecated use `IctReconReportsLocateIctReportResponse$outboundSchema` instead. */
  export const outboundSchema =
    IctReconReportsLocateIctReportResponse$outboundSchema;
  /** @deprecated use `IctReconReportsLocateIctReportResponse$Outbound` instead. */
  export type Outbound = IctReconReportsLocateIctReportResponse$Outbound;
}
