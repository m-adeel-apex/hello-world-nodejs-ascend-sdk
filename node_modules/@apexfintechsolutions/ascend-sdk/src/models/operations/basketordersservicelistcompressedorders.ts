/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type BasketOrdersServiceListCompressedOrdersRequest = {
  /**
   * The correspondent id.
   */
  correspondentId: string;
  /**
   * The basket id.
   */
  basketId: string;
  /**
   * The maximum number of compressed orders to return. The service may return fewer than this value. If unspecified, at most 1000 compressed orders will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize?: number | undefined;
  /**
   * A page token, received from a previous `ListCompressedOrders` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCompressedOrders` must match the call that provided the page token.
   */
  pageToken?: string | undefined;
};

export type BasketOrdersServiceListCompressedOrdersResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  listCompressedOrdersResponse?:
    | components.ListCompressedOrdersResponse
    | undefined;
  /**
   * INVALID_ARGUMENT: The correspondent_id or the basket_id could not be determined for the request.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const BasketOrdersServiceListCompressedOrdersRequest$inboundSchema:
  z.ZodType<
    BasketOrdersServiceListCompressedOrdersRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    correspondent_id: z.string(),
    basket_id: z.string(),
    page_size: z.number().int().optional(),
    page_token: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "correspondent_id": "correspondentId",
      "basket_id": "basketId",
      "page_size": "pageSize",
      "page_token": "pageToken",
    });
  });

/** @internal */
export type BasketOrdersServiceListCompressedOrdersRequest$Outbound = {
  correspondent_id: string;
  basket_id: string;
  page_size?: number | undefined;
  page_token?: string | undefined;
};

/** @internal */
export const BasketOrdersServiceListCompressedOrdersRequest$outboundSchema:
  z.ZodType<
    BasketOrdersServiceListCompressedOrdersRequest$Outbound,
    z.ZodTypeDef,
    BasketOrdersServiceListCompressedOrdersRequest
  > = z.object({
    correspondentId: z.string(),
    basketId: z.string(),
    pageSize: z.number().int().optional(),
    pageToken: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      correspondentId: "correspondent_id",
      basketId: "basket_id",
      pageSize: "page_size",
      pageToken: "page_token",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasketOrdersServiceListCompressedOrdersRequest$ {
  /** @deprecated use `BasketOrdersServiceListCompressedOrdersRequest$inboundSchema` instead. */
  export const inboundSchema =
    BasketOrdersServiceListCompressedOrdersRequest$inboundSchema;
  /** @deprecated use `BasketOrdersServiceListCompressedOrdersRequest$outboundSchema` instead. */
  export const outboundSchema =
    BasketOrdersServiceListCompressedOrdersRequest$outboundSchema;
  /** @deprecated use `BasketOrdersServiceListCompressedOrdersRequest$Outbound` instead. */
  export type Outbound =
    BasketOrdersServiceListCompressedOrdersRequest$Outbound;
}

/** @internal */
export const BasketOrdersServiceListCompressedOrdersResponse$inboundSchema:
  z.ZodType<
    BasketOrdersServiceListCompressedOrdersResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    ListCompressedOrdersResponse: components
      .ListCompressedOrdersResponse$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "ListCompressedOrdersResponse": "listCompressedOrdersResponse",
      "Status": "status",
    });
  });

/** @internal */
export type BasketOrdersServiceListCompressedOrdersResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ListCompressedOrdersResponse?:
    | components.ListCompressedOrdersResponse$Outbound
    | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const BasketOrdersServiceListCompressedOrdersResponse$outboundSchema:
  z.ZodType<
    BasketOrdersServiceListCompressedOrdersResponse$Outbound,
    z.ZodTypeDef,
    BasketOrdersServiceListCompressedOrdersResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    listCompressedOrdersResponse: components
      .ListCompressedOrdersResponse$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      listCompressedOrdersResponse: "ListCompressedOrdersResponse",
      status: "Status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasketOrdersServiceListCompressedOrdersResponse$ {
  /** @deprecated use `BasketOrdersServiceListCompressedOrdersResponse$inboundSchema` instead. */
  export const inboundSchema =
    BasketOrdersServiceListCompressedOrdersResponse$inboundSchema;
  /** @deprecated use `BasketOrdersServiceListCompressedOrdersResponse$outboundSchema` instead. */
  export const outboundSchema =
    BasketOrdersServiceListCompressedOrdersResponse$outboundSchema;
  /** @deprecated use `BasketOrdersServiceListCompressedOrdersResponse$Outbound` instead. */
  export type Outbound =
    BasketOrdersServiceListCompressedOrdersResponse$Outbound;
}
