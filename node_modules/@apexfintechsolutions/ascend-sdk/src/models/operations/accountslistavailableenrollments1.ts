/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountsListAvailableEnrollments1Request = {
  /**
   * The accountGroup id.
   */
  accountGroupId: string;
  /**
   * The maximum number of available enrollments to return. The service may return fewer than this value. The maximum value is 100; values above 100 will be coerced to 100.
   */
  pageSize?: number | undefined;
  /**
   * A page token, received from a previous `ListAvailableEnrollments` call. Provide this to retrieve the subsequent page.
   *
   * @remarks
   *
   *  When paginating, all other parameters provided to `ListAvailableEnrollments` must match the call that provided the page token.
   */
  pageToken?: string | undefined;
  /**
   * A CEL string to filter results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information; Filter options include:
   *
   * @remarks
   *  `enrollment_type`
   */
  filter?: string | undefined;
};

export type AccountsListAvailableEnrollments1Response = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  listAvailableEnrollmentsResponse?:
    | components.ListAvailableEnrollmentsResponse
    | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const AccountsListAvailableEnrollments1Request$inboundSchema: z.ZodType<
  AccountsListAvailableEnrollments1Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountGroup_id: z.string(),
  page_size: z.number().int().optional(),
  page_token: z.string().optional(),
  filter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "accountGroup_id": "accountGroupId",
    "page_size": "pageSize",
    "page_token": "pageToken",
  });
});

/** @internal */
export type AccountsListAvailableEnrollments1Request$Outbound = {
  accountGroup_id: string;
  page_size?: number | undefined;
  page_token?: string | undefined;
  filter?: string | undefined;
};

/** @internal */
export const AccountsListAvailableEnrollments1Request$outboundSchema: z.ZodType<
  AccountsListAvailableEnrollments1Request$Outbound,
  z.ZodTypeDef,
  AccountsListAvailableEnrollments1Request
> = z.object({
  accountGroupId: z.string(),
  pageSize: z.number().int().optional(),
  pageToken: z.string().optional(),
  filter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accountGroupId: "accountGroup_id",
    pageSize: "page_size",
    pageToken: "page_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsListAvailableEnrollments1Request$ {
  /** @deprecated use `AccountsListAvailableEnrollments1Request$inboundSchema` instead. */
  export const inboundSchema =
    AccountsListAvailableEnrollments1Request$inboundSchema;
  /** @deprecated use `AccountsListAvailableEnrollments1Request$outboundSchema` instead. */
  export const outboundSchema =
    AccountsListAvailableEnrollments1Request$outboundSchema;
  /** @deprecated use `AccountsListAvailableEnrollments1Request$Outbound` instead. */
  export type Outbound = AccountsListAvailableEnrollments1Request$Outbound;
}

/** @internal */
export const AccountsListAvailableEnrollments1Response$inboundSchema: z.ZodType<
  AccountsListAvailableEnrollments1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ListAvailableEnrollmentsResponse: components
    .ListAvailableEnrollmentsResponse$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ListAvailableEnrollmentsResponse": "listAvailableEnrollmentsResponse",
    "Status": "status",
  });
});

/** @internal */
export type AccountsListAvailableEnrollments1Response$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ListAvailableEnrollmentsResponse?:
    | components.ListAvailableEnrollmentsResponse$Outbound
    | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const AccountsListAvailableEnrollments1Response$outboundSchema:
  z.ZodType<
    AccountsListAvailableEnrollments1Response$Outbound,
    z.ZodTypeDef,
    AccountsListAvailableEnrollments1Response
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    listAvailableEnrollmentsResponse: components
      .ListAvailableEnrollmentsResponse$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      listAvailableEnrollmentsResponse: "ListAvailableEnrollmentsResponse",
      status: "Status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsListAvailableEnrollments1Response$ {
  /** @deprecated use `AccountsListAvailableEnrollments1Response$inboundSchema` instead. */
  export const inboundSchema =
    AccountsListAvailableEnrollments1Response$inboundSchema;
  /** @deprecated use `AccountsListAvailableEnrollments1Response$outboundSchema` instead. */
  export const outboundSchema =
    AccountsListAvailableEnrollments1Response$outboundSchema;
  /** @deprecated use `AccountsListAvailableEnrollments1Response$Outbound` instead. */
  export type Outbound = AccountsListAvailableEnrollments1Response$Outbound;
}
