/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type SubscriberListPushSubscriptionDeliveriesRequest = {
  /**
   * The subscription id.
   */
  subscriptionId: string;
  /**
   * A CEL string to filter results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information; If left empty, all deliveries the user has permission to view are returned; Filter options include:
   *
   * @remarks
   *  `name`
   *  `delivery_id`
   *  `event`
   *  `event_publish_time`
   *  `result`
   *  `last_response`
   *  `last_send_time`
   *  `duration`
   */
  filter?: string | undefined;
  /**
   * The number of entries to return in a single page; Default = 100; Maximum = 1000
   */
  pageSize?: number | undefined;
  /**
   * Page token used for pagination; Supplying a page token returns the next page of results
   */
  pageToken?: string | undefined;
};

export type SubscriberListPushSubscriptionDeliveriesResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  listPushSubscriptionDeliveriesResponse?:
    | components.ListPushSubscriptionDeliveriesResponse
    | undefined;
  /**
   * INVALID_ARGUMENT: The request was not well formed.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const SubscriberListPushSubscriptionDeliveriesRequest$inboundSchema:
  z.ZodType<
    SubscriberListPushSubscriptionDeliveriesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscription_id: z.string(),
    filter: z.string().optional(),
    page_size: z.number().int().optional(),
    page_token: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "page_size": "pageSize",
      "page_token": "pageToken",
    });
  });

/** @internal */
export type SubscriberListPushSubscriptionDeliveriesRequest$Outbound = {
  subscription_id: string;
  filter?: string | undefined;
  page_size?: number | undefined;
  page_token?: string | undefined;
};

/** @internal */
export const SubscriberListPushSubscriptionDeliveriesRequest$outboundSchema:
  z.ZodType<
    SubscriberListPushSubscriptionDeliveriesRequest$Outbound,
    z.ZodTypeDef,
    SubscriberListPushSubscriptionDeliveriesRequest
  > = z.object({
    subscriptionId: z.string(),
    filter: z.string().optional(),
    pageSize: z.number().int().optional(),
    pageToken: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      pageSize: "page_size",
      pageToken: "page_token",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberListPushSubscriptionDeliveriesRequest$ {
  /** @deprecated use `SubscriberListPushSubscriptionDeliveriesRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberListPushSubscriptionDeliveriesRequest$inboundSchema;
  /** @deprecated use `SubscriberListPushSubscriptionDeliveriesRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberListPushSubscriptionDeliveriesRequest$outboundSchema;
  /** @deprecated use `SubscriberListPushSubscriptionDeliveriesRequest$Outbound` instead. */
  export type Outbound =
    SubscriberListPushSubscriptionDeliveriesRequest$Outbound;
}

/** @internal */
export const SubscriberListPushSubscriptionDeliveriesResponse$inboundSchema:
  z.ZodType<
    SubscriberListPushSubscriptionDeliveriesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    ListPushSubscriptionDeliveriesResponse: components
      .ListPushSubscriptionDeliveriesResponse$inboundSchema.optional(),
    Status: components.Status$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "ListPushSubscriptionDeliveriesResponse":
        "listPushSubscriptionDeliveriesResponse",
      "Status": "status",
    });
  });

/** @internal */
export type SubscriberListPushSubscriptionDeliveriesResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ListPushSubscriptionDeliveriesResponse?:
    | components.ListPushSubscriptionDeliveriesResponse$Outbound
    | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const SubscriberListPushSubscriptionDeliveriesResponse$outboundSchema:
  z.ZodType<
    SubscriberListPushSubscriptionDeliveriesResponse$Outbound,
    z.ZodTypeDef,
    SubscriberListPushSubscriptionDeliveriesResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    listPushSubscriptionDeliveriesResponse: components
      .ListPushSubscriptionDeliveriesResponse$outboundSchema.optional(),
    status: components.Status$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      listPushSubscriptionDeliveriesResponse:
        "ListPushSubscriptionDeliveriesResponse",
      status: "Status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberListPushSubscriptionDeliveriesResponse$ {
  /** @deprecated use `SubscriberListPushSubscriptionDeliveriesResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberListPushSubscriptionDeliveriesResponse$inboundSchema;
  /** @deprecated use `SubscriberListPushSubscriptionDeliveriesResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberListPushSubscriptionDeliveriesResponse$outboundSchema;
  /** @deprecated use `SubscriberListPushSubscriptionDeliveriesResponse$Outbound` instead. */
  export type Outbound =
    SubscriberListPushSubscriptionDeliveriesResponse$Outbound;
}
