/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type BookingRebookTradeRequest = {
  /**
   * The account id.
   */
  accountId: string;
  /**
   * The trade id.
   */
  tradeId: string;
  rebookTradeRequestCreate: components.RebookTradeRequestCreate;
};

export type BookingRebookTradeResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  rebookTradeResponse?: components.RebookTradeResponse | undefined;
  /**
   * INVALID_ARGUMENT: The request is not valid.
   *
   * @remarks
   * FAILED_PRECONDITION: The operation was rejected because the system is not in a state required for the operation's processing.
   */
  status?: components.Status | undefined;
};

/** @internal */
export const BookingRebookTradeRequest$inboundSchema: z.ZodType<
  BookingRebookTradeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  trade_id: z.string(),
  RebookTradeRequestCreate: components.RebookTradeRequestCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "trade_id": "tradeId",
    "RebookTradeRequestCreate": "rebookTradeRequestCreate",
  });
});

/** @internal */
export type BookingRebookTradeRequest$Outbound = {
  account_id: string;
  trade_id: string;
  RebookTradeRequestCreate: components.RebookTradeRequestCreate$Outbound;
};

/** @internal */
export const BookingRebookTradeRequest$outboundSchema: z.ZodType<
  BookingRebookTradeRequest$Outbound,
  z.ZodTypeDef,
  BookingRebookTradeRequest
> = z.object({
  accountId: z.string(),
  tradeId: z.string(),
  rebookTradeRequestCreate: components.RebookTradeRequestCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    tradeId: "trade_id",
    rebookTradeRequestCreate: "RebookTradeRequestCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookingRebookTradeRequest$ {
  /** @deprecated use `BookingRebookTradeRequest$inboundSchema` instead. */
  export const inboundSchema = BookingRebookTradeRequest$inboundSchema;
  /** @deprecated use `BookingRebookTradeRequest$outboundSchema` instead. */
  export const outboundSchema = BookingRebookTradeRequest$outboundSchema;
  /** @deprecated use `BookingRebookTradeRequest$Outbound` instead. */
  export type Outbound = BookingRebookTradeRequest$Outbound;
}

/** @internal */
export const BookingRebookTradeResponse$inboundSchema: z.ZodType<
  BookingRebookTradeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  RebookTradeResponse: components.RebookTradeResponse$inboundSchema.optional(),
  Status: components.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "RebookTradeResponse": "rebookTradeResponse",
    "Status": "status",
  });
});

/** @internal */
export type BookingRebookTradeResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  RebookTradeResponse?: components.RebookTradeResponse$Outbound | undefined;
  Status?: components.Status$Outbound | undefined;
};

/** @internal */
export const BookingRebookTradeResponse$outboundSchema: z.ZodType<
  BookingRebookTradeResponse$Outbound,
  z.ZodTypeDef,
  BookingRebookTradeResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  rebookTradeResponse: components.RebookTradeResponse$outboundSchema.optional(),
  status: components.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    rebookTradeResponse: "RebookTradeResponse",
    status: "Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookingRebookTradeResponse$ {
  /** @deprecated use `BookingRebookTradeResponse$inboundSchema` instead. */
  export const inboundSchema = BookingRebookTradeResponse$inboundSchema;
  /** @deprecated use `BookingRebookTradeResponse$outboundSchema` instead. */
  export const outboundSchema = BookingRebookTradeResponse$outboundSchema;
  /** @deprecated use `BookingRebookTradeResponse$Outbound` instead. */
  export type Outbound = BookingRebookTradeResponse$Outbound;
}
