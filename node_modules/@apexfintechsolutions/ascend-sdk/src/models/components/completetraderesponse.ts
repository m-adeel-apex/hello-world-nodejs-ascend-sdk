/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import {
  Lot,
  Lot$inboundSchema,
  Lot$Outbound,
  Lot$outboundSchema,
} from "./lot.js";
import {
  YieldRecord,
  YieldRecord$inboundSchema,
  YieldRecord$Outbound,
  YieldRecord$outboundSchema,
} from "./yieldrecord.js";

/**
 * Used to calculate broadridge blotter code
 */
export enum CompleteTradeResponseBrokerCapacity {
  CapacityUnspecified = "CAPACITY_UNSPECIFIED",
  Agency = "AGENCY",
  Principal = "PRINCIPAL",
  Mixed = "MIXED",
}
/**
 * Used to calculate broadridge blotter code
 */
export type CompleteTradeResponseBrokerCapacityOpen = OpenEnum<
  typeof CompleteTradeResponseBrokerCapacity
>;

/**
 * The price for the instrument that is prevailing in the market.
 */
export type CompleteTradeResponsePrevailingMarketPrice = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Total monetary value of the price_adjustment
 */
export type CompleteTradeResponsePriceAdjustmentAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type CompleteTradeResponsePriceAdjustmentPercent = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export enum CompleteTradeResponsePriceAdjustmentType {
  PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
  Markup = "MARKUP",
  Markdown = "MARKDOWN",
  SalesLoad = "SALES_LOAD",
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type CompleteTradeResponsePriceAdjustmentTypeOpen = OpenEnum<
  typeof CompleteTradeResponsePriceAdjustmentType
>;

/**
 * Information about any price adjustments applied to the security
 */
export type CompleteTradeResponsePriceAdjustmentRecord = {
  /**
   * Total monetary value of the price_adjustment
   */
  priceAdjustmentAmount?:
    | CompleteTradeResponsePriceAdjustmentAmount
    | null
    | undefined;
  /**
   * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
   */
  priceAdjustmentPercent?:
    | CompleteTradeResponsePriceAdjustmentPercent
    | null
    | undefined;
  /**
   * The type of price adjustment being applied by the broker to the net price of the security
   */
  priceAdjustmentType?:
    | CompleteTradeResponsePriceAdjustmentTypeOpen
    | undefined;
};

/**
 * The completed trade.
 */
export type CompleteTradeResponseTrade = {
  /**
   * Free form text field containing additional information for a trade
   */
  additionalInstructions?: Array<string> | undefined;
  /**
   * Max Length 100 characters. Alternate order id from the street used for FRAC trades
   */
  alternateOrderId?: string | undefined;
  /**
   * uuid assigned by the Booking API if a trade belongs to an allocation
   */
  bookingApiTradeAllocationId?: string | undefined;
  /**
   * uuid assigned by the Booking API to all trades
   */
  bookingApiTradeId?: string | undefined;
  /**
   * Executing broker of the trade
   */
  broker?: string | undefined;
  /**
   * Used to calculate broadridge blotter code
   */
  brokerCapacity?: CompleteTradeResponseBrokerCapacityOpen | undefined;
  /**
   * Free form text submitted by the client for internal purposes
   */
  clientMemos?: Array<string> | undefined;
  /**
   * 32 characters. The client order ID from the order submitted
   */
  clientOrderId?: string | undefined;
  /**
   * MIC code for the exchange
   */
  exchange?: string | undefined;
  /**
   * Execution id from the street
   */
  executionId?: string | undefined;
  /**
   * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
   */
  executionOnly?: boolean | undefined;
  /**
   * Max Length 100 characters. External system id provided by a client
   */
  externalId?: string | undefined;
  /**
   * The confirmation number associated with a mutual fund trade
   */
  fundConfirmationNumber?: string | undefined;
  /**
   * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
   */
  gatewayClientOrderId?: string | undefined;
  /**
   * If set to true, indicates the trade should be omitted from client billing
   */
  internalError?: boolean | undefined;
  /**
   * Set on penny-for-the-lot trades
   */
  isWriteoff?: boolean | undefined;
  /**
   * Repeated record containing information about the tax lots, if specified
   */
  lots?: Array<Lot> | undefined;
  /**
   * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
   */
  orderId?: string | undefined;
  /**
   * The price for the instrument that is prevailing in the market.
   */
  prevailingMarketPrice?:
    | CompleteTradeResponsePrevailingMarketPrice
    | null
    | undefined;
  /**
   * Information about any price adjustments applied to the security
   */
  priceAdjustmentRecord?:
    | CompleteTradeResponsePriceAdjustmentRecord
    | null
    | undefined;
  /**
   * Used to calculate broadridge blotter code
   */
  route?: string | undefined;
  /**
   * The special instructions for a trade
   */
  specialInstructions?: Array<string> | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the particular issue
   */
  symbolDescription?: string | undefined;
  /**
   * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
   */
  whenIssued?: boolean | undefined;
  /**
   * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
   */
  yieldRecords?: Array<YieldRecord> | undefined;
};

/**
 * A response to the complete trade method.
 */
export type CompleteTradeResponse = {
  /**
   * The completed trade.
   */
  trade?: CompleteTradeResponseTrade | null | undefined;
};

/** @internal */
export const CompleteTradeResponseBrokerCapacity$inboundSchema: z.ZodType<
  CompleteTradeResponseBrokerCapacityOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CompleteTradeResponseBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CompleteTradeResponseBrokerCapacity$outboundSchema: z.ZodType<
  CompleteTradeResponseBrokerCapacityOpen,
  z.ZodTypeDef,
  CompleteTradeResponseBrokerCapacityOpen
> = z.union([
  z.nativeEnum(CompleteTradeResponseBrokerCapacity),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeResponseBrokerCapacity$ {
  /** @deprecated use `CompleteTradeResponseBrokerCapacity$inboundSchema` instead. */
  export const inboundSchema =
    CompleteTradeResponseBrokerCapacity$inboundSchema;
  /** @deprecated use `CompleteTradeResponseBrokerCapacity$outboundSchema` instead. */
  export const outboundSchema =
    CompleteTradeResponseBrokerCapacity$outboundSchema;
}

/** @internal */
export const CompleteTradeResponsePrevailingMarketPrice$inboundSchema:
  z.ZodType<CompleteTradeResponsePrevailingMarketPrice, z.ZodTypeDef, unknown> =
    z.object({
      value: z.string().optional(),
    });

/** @internal */
export type CompleteTradeResponsePrevailingMarketPrice$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const CompleteTradeResponsePrevailingMarketPrice$outboundSchema:
  z.ZodType<
    CompleteTradeResponsePrevailingMarketPrice$Outbound,
    z.ZodTypeDef,
    CompleteTradeResponsePrevailingMarketPrice
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeResponsePrevailingMarketPrice$ {
  /** @deprecated use `CompleteTradeResponsePrevailingMarketPrice$inboundSchema` instead. */
  export const inboundSchema =
    CompleteTradeResponsePrevailingMarketPrice$inboundSchema;
  /** @deprecated use `CompleteTradeResponsePrevailingMarketPrice$outboundSchema` instead. */
  export const outboundSchema =
    CompleteTradeResponsePrevailingMarketPrice$outboundSchema;
  /** @deprecated use `CompleteTradeResponsePrevailingMarketPrice$Outbound` instead. */
  export type Outbound = CompleteTradeResponsePrevailingMarketPrice$Outbound;
}

/** @internal */
export const CompleteTradeResponsePriceAdjustmentAmount$inboundSchema:
  z.ZodType<CompleteTradeResponsePriceAdjustmentAmount, z.ZodTypeDef, unknown> =
    z.object({
      value: z.string().optional(),
    });

/** @internal */
export type CompleteTradeResponsePriceAdjustmentAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const CompleteTradeResponsePriceAdjustmentAmount$outboundSchema:
  z.ZodType<
    CompleteTradeResponsePriceAdjustmentAmount$Outbound,
    z.ZodTypeDef,
    CompleteTradeResponsePriceAdjustmentAmount
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeResponsePriceAdjustmentAmount$ {
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentAmount$inboundSchema` instead. */
  export const inboundSchema =
    CompleteTradeResponsePriceAdjustmentAmount$inboundSchema;
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentAmount$outboundSchema` instead. */
  export const outboundSchema =
    CompleteTradeResponsePriceAdjustmentAmount$outboundSchema;
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentAmount$Outbound` instead. */
  export type Outbound = CompleteTradeResponsePriceAdjustmentAmount$Outbound;
}

/** @internal */
export const CompleteTradeResponsePriceAdjustmentPercent$inboundSchema:
  z.ZodType<
    CompleteTradeResponsePriceAdjustmentPercent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
  });

/** @internal */
export type CompleteTradeResponsePriceAdjustmentPercent$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const CompleteTradeResponsePriceAdjustmentPercent$outboundSchema:
  z.ZodType<
    CompleteTradeResponsePriceAdjustmentPercent$Outbound,
    z.ZodTypeDef,
    CompleteTradeResponsePriceAdjustmentPercent
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeResponsePriceAdjustmentPercent$ {
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentPercent$inboundSchema` instead. */
  export const inboundSchema =
    CompleteTradeResponsePriceAdjustmentPercent$inboundSchema;
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentPercent$outboundSchema` instead. */
  export const outboundSchema =
    CompleteTradeResponsePriceAdjustmentPercent$outboundSchema;
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentPercent$Outbound` instead. */
  export type Outbound = CompleteTradeResponsePriceAdjustmentPercent$Outbound;
}

/** @internal */
export const CompleteTradeResponsePriceAdjustmentType$inboundSchema: z.ZodType<
  CompleteTradeResponsePriceAdjustmentTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CompleteTradeResponsePriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CompleteTradeResponsePriceAdjustmentType$outboundSchema: z.ZodType<
  CompleteTradeResponsePriceAdjustmentTypeOpen,
  z.ZodTypeDef,
  CompleteTradeResponsePriceAdjustmentTypeOpen
> = z.union([
  z.nativeEnum(CompleteTradeResponsePriceAdjustmentType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeResponsePriceAdjustmentType$ {
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentType$inboundSchema` instead. */
  export const inboundSchema =
    CompleteTradeResponsePriceAdjustmentType$inboundSchema;
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentType$outboundSchema` instead. */
  export const outboundSchema =
    CompleteTradeResponsePriceAdjustmentType$outboundSchema;
}

/** @internal */
export const CompleteTradeResponsePriceAdjustmentRecord$inboundSchema:
  z.ZodType<CompleteTradeResponsePriceAdjustmentRecord, z.ZodTypeDef, unknown> =
    z.object({
      price_adjustment_amount: z.nullable(
        z.lazy(() => CompleteTradeResponsePriceAdjustmentAmount$inboundSchema),
      ).optional(),
      price_adjustment_percent: z.nullable(
        z.lazy(() => CompleteTradeResponsePriceAdjustmentPercent$inboundSchema),
      ).optional(),
      price_adjustment_type:
        CompleteTradeResponsePriceAdjustmentType$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "price_adjustment_amount": "priceAdjustmentAmount",
        "price_adjustment_percent": "priceAdjustmentPercent",
        "price_adjustment_type": "priceAdjustmentType",
      });
    });

/** @internal */
export type CompleteTradeResponsePriceAdjustmentRecord$Outbound = {
  price_adjustment_amount?:
    | CompleteTradeResponsePriceAdjustmentAmount$Outbound
    | null
    | undefined;
  price_adjustment_percent?:
    | CompleteTradeResponsePriceAdjustmentPercent$Outbound
    | null
    | undefined;
  price_adjustment_type?: string | undefined;
};

/** @internal */
export const CompleteTradeResponsePriceAdjustmentRecord$outboundSchema:
  z.ZodType<
    CompleteTradeResponsePriceAdjustmentRecord$Outbound,
    z.ZodTypeDef,
    CompleteTradeResponsePriceAdjustmentRecord
  > = z.object({
    priceAdjustmentAmount: z.nullable(
      z.lazy(() => CompleteTradeResponsePriceAdjustmentAmount$outboundSchema),
    ).optional(),
    priceAdjustmentPercent: z.nullable(
      z.lazy(() => CompleteTradeResponsePriceAdjustmentPercent$outboundSchema),
    ).optional(),
    priceAdjustmentType: CompleteTradeResponsePriceAdjustmentType$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      priceAdjustmentAmount: "price_adjustment_amount",
      priceAdjustmentPercent: "price_adjustment_percent",
      priceAdjustmentType: "price_adjustment_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeResponsePriceAdjustmentRecord$ {
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentRecord$inboundSchema` instead. */
  export const inboundSchema =
    CompleteTradeResponsePriceAdjustmentRecord$inboundSchema;
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentRecord$outboundSchema` instead. */
  export const outboundSchema =
    CompleteTradeResponsePriceAdjustmentRecord$outboundSchema;
  /** @deprecated use `CompleteTradeResponsePriceAdjustmentRecord$Outbound` instead. */
  export type Outbound = CompleteTradeResponsePriceAdjustmentRecord$Outbound;
}

/** @internal */
export const CompleteTradeResponseTrade$inboundSchema: z.ZodType<
  CompleteTradeResponseTrade,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.array(z.string()).optional(),
  alternate_order_id: z.string().optional(),
  booking_api_trade_allocation_id: z.string().optional(),
  booking_api_trade_id: z.string().optional(),
  broker: z.string().optional(),
  broker_capacity: CompleteTradeResponseBrokerCapacity$inboundSchema.optional(),
  client_memos: z.array(z.string()).optional(),
  client_order_id: z.string().optional(),
  exchange: z.string().optional(),
  execution_id: z.string().optional(),
  execution_only: z.boolean().optional(),
  external_id: z.string().optional(),
  fund_confirmation_number: z.string().optional(),
  gateway_client_order_id: z.string().optional(),
  internal_error: z.boolean().optional(),
  is_writeoff: z.boolean().optional(),
  lots: z.array(Lot$inboundSchema).optional(),
  order_id: z.string().optional(),
  prevailing_market_price: z.nullable(
    z.lazy(() => CompleteTradeResponsePrevailingMarketPrice$inboundSchema),
  ).optional(),
  price_adjustment_record: z.nullable(
    z.lazy(() => CompleteTradeResponsePriceAdjustmentRecord$inboundSchema),
  ).optional(),
  route: z.string().optional(),
  special_instructions: z.array(z.string()).optional(),
  symbol_description: z.string().optional(),
  when_issued: z.boolean().optional(),
  yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
    "alternate_order_id": "alternateOrderId",
    "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
    "booking_api_trade_id": "bookingApiTradeId",
    "broker_capacity": "brokerCapacity",
    "client_memos": "clientMemos",
    "client_order_id": "clientOrderId",
    "execution_id": "executionId",
    "execution_only": "executionOnly",
    "external_id": "externalId",
    "fund_confirmation_number": "fundConfirmationNumber",
    "gateway_client_order_id": "gatewayClientOrderId",
    "internal_error": "internalError",
    "is_writeoff": "isWriteoff",
    "order_id": "orderId",
    "prevailing_market_price": "prevailingMarketPrice",
    "price_adjustment_record": "priceAdjustmentRecord",
    "special_instructions": "specialInstructions",
    "symbol_description": "symbolDescription",
    "when_issued": "whenIssued",
    "yield_records": "yieldRecords",
  });
});

/** @internal */
export type CompleteTradeResponseTrade$Outbound = {
  additional_instructions?: Array<string> | undefined;
  alternate_order_id?: string | undefined;
  booking_api_trade_allocation_id?: string | undefined;
  booking_api_trade_id?: string | undefined;
  broker?: string | undefined;
  broker_capacity?: string | undefined;
  client_memos?: Array<string> | undefined;
  client_order_id?: string | undefined;
  exchange?: string | undefined;
  execution_id?: string | undefined;
  execution_only?: boolean | undefined;
  external_id?: string | undefined;
  fund_confirmation_number?: string | undefined;
  gateway_client_order_id?: string | undefined;
  internal_error?: boolean | undefined;
  is_writeoff?: boolean | undefined;
  lots?: Array<Lot$Outbound> | undefined;
  order_id?: string | undefined;
  prevailing_market_price?:
    | CompleteTradeResponsePrevailingMarketPrice$Outbound
    | null
    | undefined;
  price_adjustment_record?:
    | CompleteTradeResponsePriceAdjustmentRecord$Outbound
    | null
    | undefined;
  route?: string | undefined;
  special_instructions?: Array<string> | undefined;
  symbol_description?: string | undefined;
  when_issued?: boolean | undefined;
  yield_records?: Array<YieldRecord$Outbound> | undefined;
};

/** @internal */
export const CompleteTradeResponseTrade$outboundSchema: z.ZodType<
  CompleteTradeResponseTrade$Outbound,
  z.ZodTypeDef,
  CompleteTradeResponseTrade
> = z.object({
  additionalInstructions: z.array(z.string()).optional(),
  alternateOrderId: z.string().optional(),
  bookingApiTradeAllocationId: z.string().optional(),
  bookingApiTradeId: z.string().optional(),
  broker: z.string().optional(),
  brokerCapacity: CompleteTradeResponseBrokerCapacity$outboundSchema.optional(),
  clientMemos: z.array(z.string()).optional(),
  clientOrderId: z.string().optional(),
  exchange: z.string().optional(),
  executionId: z.string().optional(),
  executionOnly: z.boolean().optional(),
  externalId: z.string().optional(),
  fundConfirmationNumber: z.string().optional(),
  gatewayClientOrderId: z.string().optional(),
  internalError: z.boolean().optional(),
  isWriteoff: z.boolean().optional(),
  lots: z.array(Lot$outboundSchema).optional(),
  orderId: z.string().optional(),
  prevailingMarketPrice: z.nullable(
    z.lazy(() => CompleteTradeResponsePrevailingMarketPrice$outboundSchema),
  ).optional(),
  priceAdjustmentRecord: z.nullable(
    z.lazy(() => CompleteTradeResponsePriceAdjustmentRecord$outboundSchema),
  ).optional(),
  route: z.string().optional(),
  specialInstructions: z.array(z.string()).optional(),
  symbolDescription: z.string().optional(),
  whenIssued: z.boolean().optional(),
  yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
    alternateOrderId: "alternate_order_id",
    bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
    bookingApiTradeId: "booking_api_trade_id",
    brokerCapacity: "broker_capacity",
    clientMemos: "client_memos",
    clientOrderId: "client_order_id",
    executionId: "execution_id",
    executionOnly: "execution_only",
    externalId: "external_id",
    fundConfirmationNumber: "fund_confirmation_number",
    gatewayClientOrderId: "gateway_client_order_id",
    internalError: "internal_error",
    isWriteoff: "is_writeoff",
    orderId: "order_id",
    prevailingMarketPrice: "prevailing_market_price",
    priceAdjustmentRecord: "price_adjustment_record",
    specialInstructions: "special_instructions",
    symbolDescription: "symbol_description",
    whenIssued: "when_issued",
    yieldRecords: "yield_records",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeResponseTrade$ {
  /** @deprecated use `CompleteTradeResponseTrade$inboundSchema` instead. */
  export const inboundSchema = CompleteTradeResponseTrade$inboundSchema;
  /** @deprecated use `CompleteTradeResponseTrade$outboundSchema` instead. */
  export const outboundSchema = CompleteTradeResponseTrade$outboundSchema;
  /** @deprecated use `CompleteTradeResponseTrade$Outbound` instead. */
  export type Outbound = CompleteTradeResponseTrade$Outbound;
}

/** @internal */
export const CompleteTradeResponse$inboundSchema: z.ZodType<
  CompleteTradeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  trade: z.nullable(z.lazy(() => CompleteTradeResponseTrade$inboundSchema))
    .optional(),
});

/** @internal */
export type CompleteTradeResponse$Outbound = {
  trade?: CompleteTradeResponseTrade$Outbound | null | undefined;
};

/** @internal */
export const CompleteTradeResponse$outboundSchema: z.ZodType<
  CompleteTradeResponse$Outbound,
  z.ZodTypeDef,
  CompleteTradeResponse
> = z.object({
  trade: z.nullable(z.lazy(() => CompleteTradeResponseTrade$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTradeResponse$ {
  /** @deprecated use `CompleteTradeResponse$inboundSchema` instead. */
  export const inboundSchema = CompleteTradeResponse$inboundSchema;
  /** @deprecated use `CompleteTradeResponse$outboundSchema` instead. */
  export const outboundSchema = CompleteTradeResponse$outboundSchema;
  /** @deprecated use `CompleteTradeResponse$Outbound` instead. */
  export type Outbound = CompleteTradeResponse$Outbound;
}
