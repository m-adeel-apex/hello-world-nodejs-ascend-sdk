/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  EventMessage,
  EventMessage$inboundSchema,
  EventMessage$Outbound,
  EventMessage$outboundSchema,
} from "./eventmessage.js";

/**
 * A response to a list events method
 */
export type ListEventMessagesResponse = {
  /**
   * The returned collection of events
   */
  eventMessages?: Array<EventMessage> | undefined;
  /**
   * Page token used for pagination; Supplying a page token returns the next page of results
   */
  nextPageToken?: string | undefined;
};

/** @internal */
export const ListEventMessagesResponse$inboundSchema: z.ZodType<
  ListEventMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_messages: z.array(EventMessage$inboundSchema).optional(),
  next_page_token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "event_messages": "eventMessages",
    "next_page_token": "nextPageToken",
  });
});

/** @internal */
export type ListEventMessagesResponse$Outbound = {
  event_messages?: Array<EventMessage$Outbound> | undefined;
  next_page_token?: string | undefined;
};

/** @internal */
export const ListEventMessagesResponse$outboundSchema: z.ZodType<
  ListEventMessagesResponse$Outbound,
  z.ZodTypeDef,
  ListEventMessagesResponse
> = z.object({
  eventMessages: z.array(EventMessage$outboundSchema).optional(),
  nextPageToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    eventMessages: "event_messages",
    nextPageToken: "next_page_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventMessagesResponse$ {
  /** @deprecated use `ListEventMessagesResponse$inboundSchema` instead. */
  export const inboundSchema = ListEventMessagesResponse$inboundSchema;
  /** @deprecated use `ListEventMessagesResponse$outboundSchema` instead. */
  export const outboundSchema = ListEventMessagesResponse$outboundSchema;
  /** @deprecated use `ListEventMessagesResponse$Outbound` instead. */
  export type Outbound = ListEventMessagesResponse$Outbound;
}
