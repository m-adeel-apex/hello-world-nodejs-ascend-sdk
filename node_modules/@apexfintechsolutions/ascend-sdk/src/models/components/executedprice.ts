/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

/**
 * The limit price which must be greater than zero if provided. For equity orders in the USD currency, up to 2 decimal places are allowed for prices above $1 and up to 4 decimal places for prices at or below $1. For fixed income orders this is expressed as a percentage of par, which allows up to 5 decimal places in the USD currency.
 */
export type Price = {
  /**
   * The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The type of this price, which must be PRICE_PER_UNIT for equity orders, or PERCENTAGE_OF_PAR for fixed income orders.
 */
export enum ExecutedPriceType {
  PricePerUnit = "PRICE_PER_UNIT",
  PercentageOfPar = "PERCENTAGE_OF_PAR",
  YieldToWorst = "YIELD_TO_WORST",
  YieldToMaturity = "YIELD_TO_MATURITY",
}
/**
 * The type of this price, which must be PRICE_PER_UNIT for equity orders, or PERCENTAGE_OF_PAR for fixed income orders.
 */
export type ExecutedPriceTypeOpen = OpenEnum<typeof ExecutedPriceType>;

/**
 * An average price definition
 */
export type ExecutedPrice = {
  /**
   * The limit price which must be greater than zero if provided. For equity orders in the USD currency, up to 2 decimal places are allowed for prices above $1 and up to 4 decimal places for prices at or below $1. For fixed income orders this is expressed as a percentage of par, which allows up to 5 decimal places in the USD currency.
   */
  price?: Price | null | undefined;
  /**
   * The type of this price, which must be PRICE_PER_UNIT for equity orders, or PERCENTAGE_OF_PAR for fixed income orders.
   */
  type?: ExecutedPriceTypeOpen | undefined;
};

/** @internal */
export const Price$inboundSchema: z.ZodType<Price, z.ZodTypeDef, unknown> = z
  .object({
    value: z.string().optional(),
  });

/** @internal */
export type Price$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const Price$outboundSchema: z.ZodType<
  Price$Outbound,
  z.ZodTypeDef,
  Price
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Price$ {
  /** @deprecated use `Price$inboundSchema` instead. */
  export const inboundSchema = Price$inboundSchema;
  /** @deprecated use `Price$outboundSchema` instead. */
  export const outboundSchema = Price$outboundSchema;
  /** @deprecated use `Price$Outbound` instead. */
  export type Outbound = Price$Outbound;
}

/** @internal */
export const ExecutedPriceType$inboundSchema: z.ZodType<
  ExecutedPriceTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ExecutedPriceType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ExecutedPriceType$outboundSchema: z.ZodType<
  ExecutedPriceTypeOpen,
  z.ZodTypeDef,
  ExecutedPriceTypeOpen
> = z.union([
  z.nativeEnum(ExecutedPriceType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecutedPriceType$ {
  /** @deprecated use `ExecutedPriceType$inboundSchema` instead. */
  export const inboundSchema = ExecutedPriceType$inboundSchema;
  /** @deprecated use `ExecutedPriceType$outboundSchema` instead. */
  export const outboundSchema = ExecutedPriceType$outboundSchema;
}

/** @internal */
export const ExecutedPrice$inboundSchema: z.ZodType<
  ExecutedPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.nullable(z.lazy(() => Price$inboundSchema)).optional(),
  type: ExecutedPriceType$inboundSchema.optional(),
});

/** @internal */
export type ExecutedPrice$Outbound = {
  price?: Price$Outbound | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const ExecutedPrice$outboundSchema: z.ZodType<
  ExecutedPrice$Outbound,
  z.ZodTypeDef,
  ExecutedPrice
> = z.object({
  price: z.nullable(z.lazy(() => Price$outboundSchema)).optional(),
  type: ExecutedPriceType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecutedPrice$ {
  /** @deprecated use `ExecutedPrice$inboundSchema` instead. */
  export const inboundSchema = ExecutedPrice$inboundSchema;
  /** @deprecated use `ExecutedPrice$outboundSchema` instead. */
  export const outboundSchema = ExecutedPrice$outboundSchema;
  /** @deprecated use `ExecutedPrice$Outbound` instead. */
  export type Outbound = ExecutedPrice$Outbound;
}
