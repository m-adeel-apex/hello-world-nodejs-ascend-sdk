/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import {
  Beneficiary,
  Beneficiary$inboundSchema,
  Beneficiary$Outbound,
  Beneficiary$outboundSchema,
} from "./beneficiary.js";
import {
  ForeignBondTradingDetail,
  ForeignBondTradingDetail$inboundSchema,
  ForeignBondTradingDetail$Outbound,
  ForeignBondTradingDetail$outboundSchema,
} from "./foreignbondtradingdetail.js";
import {
  RelatedPep,
  RelatedPep$inboundSchema,
  RelatedPep$Outbound,
  RelatedPep$outboundSchema,
} from "./relatedpep.js";

/**
 * Metadata for the BENEFICIARY_DESIGNATION enrollment type.
 */
export type BeneficiaryEnrollmentMetadata = {
  /**
   * Contingent Beneficiary list is optional, with a maximum of five contingent beneficiaries.
   */
  contingentBeneficiaries?: Array<Beneficiary> | undefined;
  /**
   * At least one primary beneficiary must be provided, with a maximum of five primary beneficiaries.
   */
  primaryBeneficiaries?: Array<Beneficiary> | undefined;
};

/**
 * The consent method for the enrollment. Defaults to ESIGNATURE.
 */
export enum ConsentMethod {
  ConsentMethodUnspecified = "CONSENT_METHOD_UNSPECIFIED",
  Esignature = "ESIGNATURE",
  WetSignature = "WET_SIGNATURE",
  NegativeConsentConversion = "NEGATIVE_CONSENT_CONVERSION",
  InternalConversion = "INTERNAL_CONVERSION",
}
/**
 * The consent method for the enrollment. Defaults to ESIGNATURE.
 */
export type ConsentMethodOpen = OpenEnum<typeof ConsentMethod>;

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * The initial deposit amount in USD
 */
export type InitialDepositAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The initial amount of money placed into the account by the customer upon or after the account's establishment.
 */
export type DepositedFunds = {
  /**
   * The initial deposit amount in USD
   */
  initialDepositAmount?: InitialDepositAmount | null | undefined;
  /**
   * The source of the initial deposit
   */
  initialDepositSource?: string | undefined;
};

/**
 * The client determined account risk rating of the entity customer
 */
export enum EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating {
  DeterminedAccountRiskRatingUnspecified =
    "DETERMINED_ACCOUNT_RISK_RATING_UNSPECIFIED",
  Low = "LOW",
  Medium = "MEDIUM",
  High = "HIGH",
}
/**
 * The client determined account risk rating of the entity customer
 */
export type EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRatingOpen =
  OpenEnum<
    typeof EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating
  >;

/**
 * A customer-disclosed list of other Apex-held accounts owned by the Entity applicant at the time of this account's application; expressed as zero, one, or many account numbers
 */
export type OtherAccounts = {
  /**
   * Other account names held at Apex
   */
  accountNames?: Array<string> | undefined;
  /**
   * Other account numbers held at Apex
   */
  accountNumbers?: Array<string> | undefined;
  /**
   * The owner has other accounts at Apex
   */
  ownerHasOtherAccountsAtApex?: boolean | undefined;
};

/**
 * Disclosure of the account owner's financial relationships and source of brokerage funds; facilitates the creation of the overall customer risk profile
 */
export type FinancialProfile = {
  /**
   * Bank names with whom the entity maintains a relationship with (e.g., accounts held with the bank)
   */
  bankingRelationships?: Array<string> | undefined;
  /**
   * A customer-disclosed list of other Apex-held accounts owned by the Entity applicant at the time of this account's application; expressed as zero, one, or many account numbers
   */
  otherAccounts?: OtherAccounts | null | undefined;
  /**
   * The primary source of funds that will be deposited to this account
   */
  primarySourceOfDepositedFunds?: string | undefined;
};

/**
 * The foreign bond trading countries details
 */
export type ForeignBondTradingDetails = {
  /**
   * Does the account anticipate trading in foreign bonds
   */
  foreignBondTrading?: boolean | undefined;
  /**
   * The foreign bond trading countries details. If yes, than please provide details
   */
  foreignBondTradingDetail?: Array<ForeignBondTradingDetail> | undefined;
};

/**
 * The percentage, by volume, of the account's trades which will involve low priced securities
 */
export type LowPricedSecuritiesPercentage = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
 */
export type LowPricedSecurities = {
  /**
   * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
   */
  lowPricedSecurities?: boolean | undefined;
  /**
   * The percentage, by volume, of the account's trades which will involve low priced securities
   */
  lowPricedSecuritiesPercentage?:
    | LowPricedSecuritiesPercentage
    | null
    | undefined;
};

/**
 * The primary account activity type
 */
export enum EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType {
  PrimaryAccountActivityTypeUnspecified =
    "PRIMARY_ACCOUNT_ACTIVITY_TYPE_UNSPECIFIED",
  ActiveTrading = "ACTIVE_TRADING",
  ShortTermInvesting = "SHORT_TERM_INVESTING",
  LongTermInvesting = "LONG_TERM_INVESTING",
}
/**
 * The primary account activity type
 */
export type EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityTypeOpen =
  OpenEnum<
    typeof EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType
  >;

/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export enum EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency {
  WithdrawalFrequencyUnspecified = "WITHDRAWAL_FREQUENCY_UNSPECIFIED",
  Frequent = "FREQUENT",
  Occasional = "OCCASIONAL",
  Rare = "RARE",
}
/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export type EnrollmentCorporationEnrollmentMetadataWithdrawalFrequencyOpen =
  OpenEnum<typeof EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency>;

/**
 * Details the customer's intended trading and banking-related activities at the time of account application; informs risk checks and forms a baseline for anomalous activity detection
 */
export type PlannedActivity = {
  /**
   * The foreign bond trading countries details
   */
  foreignBondTradingDetails?: ForeignBondTradingDetails | null | undefined;
  /**
   * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
   */
  lowPricedSecurities?: LowPricedSecurities | null | undefined;
  /**
   * The primary account activity type
   */
  primaryAccountActivityType?:
    | EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityTypeOpen
    | undefined;
  /**
   * The frequency by which cash is anticipated to be withdrawn from the account
   */
  withdrawalFrequency?:
    | EnrollmentCorporationEnrollmentMetadataWithdrawalFrequencyOpen
    | undefined;
};

/**
 * Information about the related politically exposed persons
 */
export type RelatedPepDetails = {
  /**
   * Indication as to whether or not an account has direct or indirect related politically exposed persons
   */
  directOrIndirectRelatedPeps?: boolean | undefined;
  /**
   * Related Peps
   */
  relatedPeps?: Array<RelatedPep> | undefined;
};

/**
 * Enrollment metadata for entity accounts
 */
export type EddAccountEnrollmentMetadata = {
  /**
   * The initial amount of money placed into the account by the customer upon or after the account's establishment.
   */
  depositedFunds?: DepositedFunds | null | undefined;
  /**
   * The client determined account risk rating of the entity customer
   */
  determinedAccountRiskRating?:
    | EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRatingOpen
    | undefined;
  /**
   * Disclosure of the account owner's financial relationships and source of brokerage funds; facilitates the creation of the overall customer risk profile
   */
  financialProfile?: FinancialProfile | null | undefined;
  /**
   * Details the customer's intended trading and banking-related activities at the time of account application; informs risk checks and forms a baseline for anomalous activity detection
   */
  plannedActivity?: PlannedActivity | null | undefined;
  /**
   * Information about the related politically exposed persons
   */
  relatedPepDetails?: RelatedPepDetails | null | undefined;
  /**
   * The scope of the business for the entity customer
   */
  scopeOfBusiness?: string | undefined;
};

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentCorporationEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentCorporationEnrollmentMetadataFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentCorporationEnrollmentMetadataFdicCashSweep
>;

/**
 * Metadata for the REGISTRATION_CORPORATION type
 */
export type CorporationEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Enrollment metadata for entity accounts
   */
  eddAccountEnrollmentMetadata?:
    | EddAccountEnrollmentMetadata
    | null
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentCorporationEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentDividendReinvestmentPlanOpen = OpenEnum<
  typeof EnrollmentDividendReinvestmentPlan
>;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentFdicCashSweep
>;

/**
 * Metadata for the REGISTRATION_CUSTODIAL type
 */
export type CustodialEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?: EnrollmentDividendReinvestmentPlanOpen | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?: EnrollmentFdicCashSweepOpen | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<typeof EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan>;

/**
 * Metadata for the REGISTRATION_ESTATE enrollment type
 */
export type EstateEnrollmentMetadata = {
  /**
   * The document id for the certificate of appointment
   */
  certificateOfAppointmentDocumentId?: string | undefined;
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweepOpen =
  OpenEnum<
    typeof EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep
  >;

/**
 * The initial deposit amount in USD
 */
export type EnrollmentInitialDepositAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The initial amount of money placed into the account by the entity upon or after the account's establishment.
 */
export type EnrollmentDepositedFunds = {
  /**
   * The initial deposit amount in USD
   */
  initialDepositAmount?: EnrollmentInitialDepositAmount | null | undefined;
  /**
   * The source of the initial deposit
   */
  initialDepositSource?: string | undefined;
};

/**
 * A customer-disclosed list of other Apex-held accounts owned by the Entity applicant at the time of this account's application; expressed as zero, one, or many account numbers
 */
export type EnrollmentOtherAccounts = {
  /**
   * Other account names held at Apex
   */
  accountNames?: Array<string> | undefined;
  /**
   * Other account numbers held at Apex
   */
  accountNumbers?: Array<string> | undefined;
  /**
   * The owner has other accounts at Apex
   */
  ownerHasOtherAccountsAtApex?: boolean | undefined;
};

/**
 * Disclosure of the entity account owner's financial relationships and source of brokerage funds; facilitates the creation of the overall customer risk profile
 */
export type EnrollmentFinancialProfile = {
  /**
   * Bank names with whom the entity maintains a relationship with (e.g., accounts held with the bank)
   */
  bankingRelationships?: Array<string> | undefined;
  /**
   * A customer-disclosed list of other Apex-held accounts owned by the Entity applicant at the time of this account's application; expressed as zero, one, or many account numbers
   */
  otherAccounts?: EnrollmentOtherAccounts | null | undefined;
  /**
   * The primary source of funds that will be deposited to this account
   */
  primarySourceOfDepositedFunds?: string | undefined;
};

/**
 * The foreign bond trading countries details
 */
export type EnrollmentForeignBondTradingDetails = {
  /**
   * Does the account anticipate trading in foreign bonds
   */
  foreignBondTrading?: boolean | undefined;
  /**
   * The foreign bond trading countries details. If yes, than please provide details
   */
  foreignBondTradingDetail?: Array<ForeignBondTradingDetail> | undefined;
};

/**
 * The percentage, by volume, of the account's trades which will involve low priced securities
 */
export type EnrollmentLowPricedSecuritiesPercentage = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
 */
export type EnrollmentLowPricedSecurities = {
  /**
   * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
   */
  lowPricedSecurities?: boolean | undefined;
  /**
   * The percentage, by volume, of the account's trades which will involve low priced securities
   */
  lowPricedSecuritiesPercentage?:
    | EnrollmentLowPricedSecuritiesPercentage
    | null
    | undefined;
};

/**
 * The primary account activity type
 */
export enum EnrollmentPrimaryAccountActivityType {
  PrimaryAccountActivityTypeUnspecified =
    "PRIMARY_ACCOUNT_ACTIVITY_TYPE_UNSPECIFIED",
  ActiveTrading = "ACTIVE_TRADING",
  ShortTermInvesting = "SHORT_TERM_INVESTING",
  LongTermInvesting = "LONG_TERM_INVESTING",
}
/**
 * The primary account activity type
 */
export type EnrollmentPrimaryAccountActivityTypeOpen = OpenEnum<
  typeof EnrollmentPrimaryAccountActivityType
>;

/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export enum EnrollmentWithdrawalFrequency {
  WithdrawalFrequencyUnspecified = "WITHDRAWAL_FREQUENCY_UNSPECIFIED",
  Frequent = "FREQUENT",
  Occasional = "OCCASIONAL",
  Rare = "RARE",
}
/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export type EnrollmentWithdrawalFrequencyOpen = OpenEnum<
  typeof EnrollmentWithdrawalFrequency
>;

/**
 * Details the customer's intended trading and banking-related activities at the time of account application; informs risk checks and forms a baseline for anomalous activity detection
 */
export type EnrollmentPlannedActivity = {
  /**
   * The foreign bond trading countries details
   */
  foreignBondTradingDetails?:
    | EnrollmentForeignBondTradingDetails
    | null
    | undefined;
  /**
   * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
   */
  lowPricedSecurities?: EnrollmentLowPricedSecurities | null | undefined;
  /**
   * The primary account activity type
   */
  primaryAccountActivityType?:
    | EnrollmentPrimaryAccountActivityTypeOpen
    | undefined;
  /**
   * The frequency by which cash is anticipated to be withdrawn from the account
   */
  withdrawalFrequency?: EnrollmentWithdrawalFrequencyOpen | undefined;
};

/**
 * Information about the related politically exposed persons
 */
export type EnrollmentRelatedPepDetails = {
  /**
   * Indication as to whether or not an account has direct or indirect related politically exposed persons
   */
  directOrIndirectRelatedPeps?: boolean | undefined;
  /**
   * Related Peps
   */
  relatedPeps?: Array<RelatedPep> | undefined;
};

/**
 * Enrollment metadata for Accounts that have a foreign Legal Natural Person owner.
 */
export type ForeignNaturalPersonAccountEnrollmentMetadata = {
  /**
   * The initial amount of money placed into the account by the entity upon or after the account's establishment.
   */
  depositedFunds?: EnrollmentDepositedFunds | null | undefined;
  /**
   * Disclosure of the entity account owner's financial relationships and source of brokerage funds; facilitates the creation of the overall customer risk profile
   */
  financialProfile?: EnrollmentFinancialProfile | null | undefined;
  /**
   * Details the customer's intended trading and banking-related activities at the time of account application; informs risk checks and forms a baseline for anomalous activity detection
   */
  plannedActivity?: EnrollmentPlannedActivity | null | undefined;
  /**
   * Information about the related politically exposed persons
   */
  relatedPepDetails?: EnrollmentRelatedPepDetails | null | undefined;
};

/**
 * Metadata for the REGISTRATION_INDIVIDUAL_FOREIGN type
 */
export type ForeignIndividualAccountEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweepOpen
    | undefined;
  /**
   * Enrollment metadata for Accounts that have a foreign Legal Natural Person owner.
   */
  foreignNaturalPersonAccountEnrollmentMetadata?:
    | ForeignNaturalPersonAccountEnrollmentMetadata
    | null
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweepOpen =
  OpenEnum<typeof EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep>;

/**
 * The initial deposit amount in USD
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount =
  {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
  };

/**
 * The initial amount of money placed into the account by the entity upon or after the account's establishment.
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds = {
  /**
   * The initial deposit amount in USD
   */
  initialDepositAmount?:
    | EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount
    | null
    | undefined;
  /**
   * The source of the initial deposit
   */
  initialDepositSource?: string | undefined;
};

/**
 * A customer-disclosed list of other Apex-held accounts owned by the Entity applicant at the time of this account's application; expressed as zero, one, or many account numbers
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts = {
  /**
   * Other account names held at Apex
   */
  accountNames?: Array<string> | undefined;
  /**
   * Other account numbers held at Apex
   */
  accountNumbers?: Array<string> | undefined;
  /**
   * The owner has other accounts at Apex
   */
  ownerHasOtherAccountsAtApex?: boolean | undefined;
};

/**
 * Disclosure of the entity account owner's financial relationships and source of brokerage funds; facilitates the creation of the overall customer risk profile
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile = {
  /**
   * Bank names with whom the entity maintains a relationship with (e.g., accounts held with the bank)
   */
  bankingRelationships?: Array<string> | undefined;
  /**
   * A customer-disclosed list of other Apex-held accounts owned by the Entity applicant at the time of this account's application; expressed as zero, one, or many account numbers
   */
  otherAccounts?:
    | EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts
    | null
    | undefined;
  /**
   * The primary source of funds that will be deposited to this account
   */
  primarySourceOfDepositedFunds?: string | undefined;
};

/**
 * The foreign bond trading countries details
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails =
  {
    /**
     * Does the account anticipate trading in foreign bonds
     */
    foreignBondTrading?: boolean | undefined;
    /**
     * The foreign bond trading countries details. If yes, than please provide details
     */
    foreignBondTradingDetail?: Array<ForeignBondTradingDetail> | undefined;
  };

/**
 * The percentage, by volume, of the account's trades which will involve low priced securities
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage =
  {
    /**
     * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
     */
    value?: string | undefined;
  };

/**
 * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities =
  {
    /**
     * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
     */
    lowPricedSecurities?: boolean | undefined;
    /**
     * The percentage, by volume, of the account's trades which will involve low priced securities
     */
    lowPricedSecuritiesPercentage?:
      | EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage
      | null
      | undefined;
  };

/**
 * The primary account activity type
 */
export enum EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType {
  PrimaryAccountActivityTypeUnspecified =
    "PRIMARY_ACCOUNT_ACTIVITY_TYPE_UNSPECIFIED",
  ActiveTrading = "ACTIVE_TRADING",
  ShortTermInvesting = "SHORT_TERM_INVESTING",
  LongTermInvesting = "LONG_TERM_INVESTING",
}
/**
 * The primary account activity type
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityTypeOpen =
  OpenEnum<
    typeof EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType
  >;

/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export enum EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency {
  WithdrawalFrequencyUnspecified = "WITHDRAWAL_FREQUENCY_UNSPECIFIED",
  Frequent = "FREQUENT",
  Occasional = "OCCASIONAL",
  Rare = "RARE",
}
/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequencyOpen =
  OpenEnum<
    typeof EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency
  >;

/**
 * Details the customer's intended trading and banking-related activities at the time of account application; informs risk checks and forms a baseline for anomalous activity detection
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity = {
  /**
   * The foreign bond trading countries details
   */
  foreignBondTradingDetails?:
    | EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails
    | null
    | undefined;
  /**
   * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
   */
  lowPricedSecurities?:
    | EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities
    | null
    | undefined;
  /**
   * The primary account activity type
   */
  primaryAccountActivityType?:
    | EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityTypeOpen
    | undefined;
  /**
   * The frequency by which cash is anticipated to be withdrawn from the account
   */
  withdrawalFrequency?:
    | EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequencyOpen
    | undefined;
};

/**
 * Information about the related politically exposed persons
 */
export type EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails = {
  /**
   * Indication as to whether or not an account has direct or indirect related politically exposed persons
   */
  directOrIndirectRelatedPeps?: boolean | undefined;
  /**
   * Related Peps
   */
  relatedPeps?: Array<RelatedPep> | undefined;
};

/**
 * Enrollment metadata for Accounts that have a foreign Legal Natural Person owner.
 */
export type EnrollmentForeignNaturalPersonAccountEnrollmentMetadata = {
  /**
   * The initial amount of money placed into the account by the entity upon or after the account's establishment.
   */
  depositedFunds?:
    | EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds
    | null
    | undefined;
  /**
   * Disclosure of the entity account owner's financial relationships and source of brokerage funds; facilitates the creation of the overall customer risk profile
   */
  financialProfile?:
    | EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile
    | null
    | undefined;
  /**
   * Details the customer's intended trading and banking-related activities at the time of account application; informs risk checks and forms a baseline for anomalous activity detection
   */
  plannedActivity?:
    | EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity
    | null
    | undefined;
  /**
   * Information about the related politically exposed persons
   */
  relatedPepDetails?:
    | EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails
    | null
    | undefined;
};

/**
 * Metadata for the REGISTRATION_JOINT_FOREIGN_WROS type
 */
export type ForeignJointAccountEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweepOpen
    | undefined;
  /**
   * Enrollment metadata for Accounts that have a foreign Legal Natural Person owner.
   */
  foreignNaturalPersonAccountEnrollmentMetadata?:
    | EnrollmentForeignNaturalPersonAccountEnrollmentMetadata
    | null
    | undefined;
};

/**
 * Metadata for the FULLY_PAID_STOCK_LENDING enrollment type
 */
export type FpslEnrollmentMetadata = {
  /**
   * Customer Percentage for FPSL Enrollment.
   */
  customerPercentage?: number | undefined;
  /**
   * Firm Percentage for FPSL Enrollment.
   */
  firmPercentage?: number | undefined;
  /**
   * FPSL MSLA minimum rate determines which MSLA split agreement to display
   */
  fpslMslaMinimumRate?: number | undefined;
  /**
   * Introducing Broker Percentage for FPSL Enrollment.
   */
  introducingBrokerPercentage?: number | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentIndividualEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentIndividualEnrollmentMetadataFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentIndividualEnrollmentMetadataFdicCashSweep
>;

/**
 * Metadata for the INDIVIDUAL enrollment type
 */
export type IndividualEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentIndividualEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweepOpen =
  OpenEnum<typeof EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep>;

/**
 * The birth date of the owner from whom the account is inherited
 */
export type InheritedFromOwnerBirthDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The death date of the owner from whom the account is inherited
 */
export type InheritedFromOwnerDeathDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Metadata for the REGISTRATION_IRA_BENEFICIARY_ROTH and REGISTRATION_IRA_BENEFICIARY_TRADITIONAL enrollment type
 */
export type IraBeneficiaryEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweepOpen
    | undefined;
  /**
   * The birth date of the owner from whom the account is inherited
   */
  inheritedFromOwnerBirthDate?: InheritedFromOwnerBirthDate | null | undefined;
  /**
   * The death date of the owner from whom the account is inherited
   */
  inheritedFromOwnerDeathDate?: InheritedFromOwnerDeathDate | null | undefined;
  /**
   * The name of the owner from whom the account is inherited
   */
  inheritedFromOwnerName?: string | undefined;
  /**
   * Indicates if the customer is the spouse of the decedent
   */
  inheritorIsDecedentsSpouse?: boolean | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentIraRolloverEnrollmentMetadataFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep
>;

/**
 * Metadata for the ROLLOVER_IRA_REGISTRATION enrollment type
 */
export type IraRolloverEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentIraRolloverEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<typeof EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan>;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentIraRothEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentIraRothEnrollmentMetadataFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentIraRothEnrollmentMetadataFdicCashSweep
>;

/**
 * Metadata for the ROTH_IRA_REGISTRATION enrollment type
 */
export type IraRothEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentIraRothEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<typeof EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan>;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentIraSepEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentIraSepEnrollmentMetadataFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentIraSepEnrollmentMetadataFdicCashSweep
>;

/**
 * Metadata for the SEP_IRA_REGISTRATION enrollment type
 */
export type IraSepEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentIraSepEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentIraSimpleEnrollmentMetadataFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep
>;

/**
 * Metadata for the SIMPLE_IRA_REGISTRATION enrollment type
 */
export type IraSimpleEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentIraSimpleEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweepOpen =
  OpenEnum<typeof EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep>;

/**
 * Metadata for the TRADITIONAL_IRA_REGISTRATION enrollment type
 */
export type IraTraditionalEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweepOpen =
  OpenEnum<
    typeof EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep
  >;

/**
 * The legal residency state of a married couple
 */
export enum EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple {
  LegalResidencyStateOfMarriedCoupleUnspecified =
    "LEGAL_RESIDENCY_STATE_OF_MARRIED_COUPLE_UNSPECIFIED",
  Ak = "AK",
  Az = "AZ",
  Ar = "AR",
  Ca = "CA",
  De = "DE",
  Fl = "FL",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ky = "KY",
  La = "LA",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Ms = "MS",
  Mo = "MO",
  Nv = "NV",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Ri = "RI",
  Tn = "TN",
  Tx = "TX",
  Vt = "VT",
  Va = "VA",
  Wa = "WA",
  Wi = "WI",
  Wy = "WY",
}
/**
 * The legal residency state of a married couple
 */
export type EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCoupleOpen =
  OpenEnum<
    typeof EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple
  >;

/**
 * Metadata for the JOINT_COMMUNITY_PROPERTY_REGISTRATION enrollment type
 */
export type JointCommunityPropertyEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweepOpen
    | undefined;
  /**
   * The legal residency state of a married couple
   */
  legalResidencyStateOfMarriedCouple?:
    | EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCoupleOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweepOpen =
  OpenEnum<
    typeof EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep
  >;

/**
 * The legal residency state of a married couple
 */
export enum EnrollmentLegalResidencyStateOfMarriedCouple {
  LegalResidencyStateOfMarriedCoupleUnspecified =
    "LEGAL_RESIDENCY_STATE_OF_MARRIED_COUPLE_UNSPECIFIED",
  Ak = "AK",
  Az = "AZ",
  Ar = "AR",
  Ca = "CA",
  De = "DE",
  Fl = "FL",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ky = "KY",
  La = "LA",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Ms = "MS",
  Mo = "MO",
  Nv = "NV",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Ri = "RI",
  Tn = "TN",
  Tx = "TX",
  Vt = "VT",
  Va = "VA",
  Wa = "WA",
  Wi = "WI",
  Wy = "WY",
}
/**
 * The legal residency state of a married couple
 */
export type EnrollmentLegalResidencyStateOfMarriedCoupleOpen = OpenEnum<
  typeof EnrollmentLegalResidencyStateOfMarriedCouple
>;

/**
 * Metadata for the JOINT_TENANTS_BY_ENTIRETY_REGISTRATION enrollment type
 */
export type JointTenantsByEntiretyEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweepOpen
    | undefined;
  /**
   * The legal residency state of a married couple
   */
  legalResidencyStateOfMarriedCouple?:
    | EnrollmentLegalResidencyStateOfMarriedCoupleOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweepOpen =
  OpenEnum<
    typeof EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep
  >;

/**
 * Metadata for the JOINT_TENANTS_IN_COMMON_REGISTRATION enrollment type
 */
export type JointTenantsInCommonEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweepOpen =
  OpenEnum<
    typeof EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep
  >;

/**
 * Metadata for the JOINT_WITH_RIGHTS_OF_SURVIVORSHIP_REGISTRATION enrollment type
 */
export type JointWithRightsOfSurvivorshipEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweepOpen
    | undefined;
};

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<typeof EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan>;

/**
 * The initial deposit amount in USD
 */
export type EnrollmentLlcEnrollmentMetadataInitialDepositAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The initial amount of money placed into the account by the customer upon or after the account's establishment.
 */
export type EnrollmentLlcEnrollmentMetadataDepositedFunds = {
  /**
   * The initial deposit amount in USD
   */
  initialDepositAmount?:
    | EnrollmentLlcEnrollmentMetadataInitialDepositAmount
    | null
    | undefined;
  /**
   * The source of the initial deposit
   */
  initialDepositSource?: string | undefined;
};

/**
 * The client determined account risk rating of the entity customer
 */
export enum EnrollmentDeterminedAccountRiskRating {
  DeterminedAccountRiskRatingUnspecified =
    "DETERMINED_ACCOUNT_RISK_RATING_UNSPECIFIED",
  Low = "LOW",
  Medium = "MEDIUM",
  High = "HIGH",
}
/**
 * The client determined account risk rating of the entity customer
 */
export type EnrollmentDeterminedAccountRiskRatingOpen = OpenEnum<
  typeof EnrollmentDeterminedAccountRiskRating
>;

/**
 * A customer-disclosed list of other Apex-held accounts owned by the Entity applicant at the time of this account's application; expressed as zero, one, or many account numbers
 */
export type EnrollmentLlcEnrollmentMetadataOtherAccounts = {
  /**
   * Other account names held at Apex
   */
  accountNames?: Array<string> | undefined;
  /**
   * Other account numbers held at Apex
   */
  accountNumbers?: Array<string> | undefined;
  /**
   * The owner has other accounts at Apex
   */
  ownerHasOtherAccountsAtApex?: boolean | undefined;
};

/**
 * Disclosure of the account owner's financial relationships and source of brokerage funds; facilitates the creation of the overall customer risk profile
 */
export type EnrollmentLlcEnrollmentMetadataFinancialProfile = {
  /**
   * Bank names with whom the entity maintains a relationship with (e.g., accounts held with the bank)
   */
  bankingRelationships?: Array<string> | undefined;
  /**
   * A customer-disclosed list of other Apex-held accounts owned by the Entity applicant at the time of this account's application; expressed as zero, one, or many account numbers
   */
  otherAccounts?:
    | EnrollmentLlcEnrollmentMetadataOtherAccounts
    | null
    | undefined;
  /**
   * The primary source of funds that will be deposited to this account
   */
  primarySourceOfDepositedFunds?: string | undefined;
};

/**
 * The foreign bond trading countries details
 */
export type EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails = {
  /**
   * Does the account anticipate trading in foreign bonds
   */
  foreignBondTrading?: boolean | undefined;
  /**
   * The foreign bond trading countries details. If yes, than please provide details
   */
  foreignBondTradingDetail?: Array<ForeignBondTradingDetail> | undefined;
};

/**
 * The percentage, by volume, of the account's trades which will involve low priced securities
 */
export type EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
 */
export type EnrollmentLlcEnrollmentMetadataLowPricedSecurities = {
  /**
   * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
   */
  lowPricedSecurities?: boolean | undefined;
  /**
   * The percentage, by volume, of the account's trades which will involve low priced securities
   */
  lowPricedSecuritiesPercentage?:
    | EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage
    | null
    | undefined;
};

/**
 * The primary account activity type
 */
export enum EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType {
  PrimaryAccountActivityTypeUnspecified =
    "PRIMARY_ACCOUNT_ACTIVITY_TYPE_UNSPECIFIED",
  ActiveTrading = "ACTIVE_TRADING",
  ShortTermInvesting = "SHORT_TERM_INVESTING",
  LongTermInvesting = "LONG_TERM_INVESTING",
}
/**
 * The primary account activity type
 */
export type EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityTypeOpen =
  OpenEnum<typeof EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType>;

/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export enum EnrollmentLlcEnrollmentMetadataWithdrawalFrequency {
  WithdrawalFrequencyUnspecified = "WITHDRAWAL_FREQUENCY_UNSPECIFIED",
  Frequent = "FREQUENT",
  Occasional = "OCCASIONAL",
  Rare = "RARE",
}
/**
 * The frequency by which cash is anticipated to be withdrawn from the account
 */
export type EnrollmentLlcEnrollmentMetadataWithdrawalFrequencyOpen = OpenEnum<
  typeof EnrollmentLlcEnrollmentMetadataWithdrawalFrequency
>;

/**
 * Details the customer's intended trading and banking-related activities at the time of account application; informs risk checks and forms a baseline for anomalous activity detection
 */
export type EnrollmentLlcEnrollmentMetadataPlannedActivity = {
  /**
   * The foreign bond trading countries details
   */
  foreignBondTradingDetails?:
    | EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails
    | null
    | undefined;
  /**
   * The account anticipates trading in securities trading for less than $5 per share and are typically traded over-the-counter (OTC) or through pink sheets
   */
  lowPricedSecurities?:
    | EnrollmentLlcEnrollmentMetadataLowPricedSecurities
    | null
    | undefined;
  /**
   * The primary account activity type
   */
  primaryAccountActivityType?:
    | EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityTypeOpen
    | undefined;
  /**
   * The frequency by which cash is anticipated to be withdrawn from the account
   */
  withdrawalFrequency?:
    | EnrollmentLlcEnrollmentMetadataWithdrawalFrequencyOpen
    | undefined;
};

/**
 * Information about the related politically exposed persons
 */
export type EnrollmentLlcEnrollmentMetadataRelatedPepDetails = {
  /**
   * Indication as to whether or not an account has direct or indirect related politically exposed persons
   */
  directOrIndirectRelatedPeps?: boolean | undefined;
  /**
   * Related Peps
   */
  relatedPeps?: Array<RelatedPep> | undefined;
};

/**
 * Enrollment metadata for entity accounts
 */
export type EnrollmentEddAccountEnrollmentMetadata = {
  /**
   * The initial amount of money placed into the account by the customer upon or after the account's establishment.
   */
  depositedFunds?:
    | EnrollmentLlcEnrollmentMetadataDepositedFunds
    | null
    | undefined;
  /**
   * The client determined account risk rating of the entity customer
   */
  determinedAccountRiskRating?:
    | EnrollmentDeterminedAccountRiskRatingOpen
    | undefined;
  /**
   * Disclosure of the account owner's financial relationships and source of brokerage funds; facilitates the creation of the overall customer risk profile
   */
  financialProfile?:
    | EnrollmentLlcEnrollmentMetadataFinancialProfile
    | null
    | undefined;
  /**
   * Details the customer's intended trading and banking-related activities at the time of account application; informs risk checks and forms a baseline for anomalous activity detection
   */
  plannedActivity?:
    | EnrollmentLlcEnrollmentMetadataPlannedActivity
    | null
    | undefined;
  /**
   * Information about the related politically exposed persons
   */
  relatedPepDetails?:
    | EnrollmentLlcEnrollmentMetadataRelatedPepDetails
    | null
    | undefined;
  /**
   * The scope of the business for the entity customer
   */
  scopeOfBusiness?: string | undefined;
};

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentLlcEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentLlcEnrollmentMetadataFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentLlcEnrollmentMetadataFdicCashSweep
>;

/**
 * Metadata for the REGISTRATION_LLC type
 */
export type LlcEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Enrollment metadata for entity accounts
   */
  eddAccountEnrollmentMetadata?:
    | EnrollmentEddAccountEnrollmentMetadata
    | null
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?: EnrollmentLlcEnrollmentMetadataFdicCashSweepOpen | undefined;
};

/**
 * The purpose of the operating account.
 */
export enum EnrollmentOperatingPurpose {
  OperatingPurposeUnspecified = "OPERATING_PURPOSE_UNSPECIFIED",
  Custody = "CUSTODY",
  SecFee = "SEC_FEE",
  TafFee = "TAF_FEE",
  TefraWithholding = "TEFRA_WITHHOLDING",
  Suspense = "SUSPENSE",
  Allocation = "ALLOCATION",
  Error = "ERROR",
  Deposit = "DEPOSIT",
  WriteOff = "WRITE_OFF",
  UnsecuredReserve = "UNSECURED_RESERVE",
  Payable = "PAYABLE",
  Commission = "COMMISSION",
  Escheatment = "ESCHEATMENT",
  InterestRevenue = "INTEREST_REVENUE",
  StreetDepository = "STREET_DEPOSITORY",
  Inventory = "INVENTORY",
  TaxWithholding = "TAX_WITHHOLDING",
  Fee = "FEE",
  PrincipalTrading = "PRINCIPAL_TRADING",
}
/**
 * The purpose of the operating account.
 */
export type EnrollmentOperatingPurposeOpen = OpenEnum<
  typeof EnrollmentOperatingPurpose
>;

/**
 * Tax Authority for Enrollment
 */
export enum EnrollmentTaxAuthority {
  TaxAuthorityUnspecified = "TAX_AUTHORITY_UNSPECIFIED",
  Al = "AL",
  Ak = "AK",
  Az = "AZ",
  Ar = "AR",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Fl = "FL",
  Ga = "GA",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
  Irs = "IRS",
}
/**
 * Tax Authority for Enrollment
 */
export type EnrollmentTaxAuthorityOpen = OpenEnum<
  typeof EnrollmentTaxAuthority
>;

/**
 * A designation used by the custodian to determine how much federal income tax should be withheld from the proceeds of a sale
 */
export enum EnrollmentWithholdingType {
  WithholdingTypeUnspecified = "WITHHOLDING_TYPE_UNSPECIFIED",
  Backup = "BACKUP",
  BackupProceeds = "BACKUP_PROCEEDS",
  BackupDividendsAndInterest = "BACKUP_DIVIDENDS_AND_INTEREST",
  Ira = "IRA",
}
/**
 * A designation used by the custodian to determine how much federal income tax should be withheld from the proceeds of a sale
 */
export type EnrollmentWithholdingTypeOpen = OpenEnum<
  typeof EnrollmentWithholdingType
>;

/**
 * Optional tax withholding metadata for TAX_WITHHOLDING operating purpose
 */
export type TaxWithholdingMetadata = {
  /**
   * Tax Authority for Enrollment
   */
  taxAuthority?: EnrollmentTaxAuthorityOpen | undefined;
  /**
   * A designation used by the custodian to determine how much federal income tax should be withheld from the proceeds of a sale
   */
  withholdingType?: EnrollmentWithholdingTypeOpen | undefined;
};

/**
 * Metadata for the REGISTRATION_OPERATING enrollment type.
 */
export type OperatingEnrollmentMetadata = {
  /**
   * The purpose of the operating account.
   */
  operatingPurpose?: EnrollmentOperatingPurposeOpen | undefined;
  /**
   * Optional subtitle for the operating purpose
   */
  subtitle?: string | undefined;
  /**
   * Optional tax withholding metadata for TAX_WITHHOLDING operating purpose
   */
  taxWithholdingMetadata?: TaxWithholdingMetadata | null | undefined;
};

/**
 * This captures a user's experience with investment vehicles. It includes details such as the user's average annual trade count for various investment vehicles
 */
export type InvestmentVehicleExperience = {
  /**
   * The number of average annual trades of commodities
   */
  commoditiesAverageAnnualTradeCount?: number | undefined;
  /**
   * The number of average annual trades of corporate bonds
   */
  corporateBondsAverageAnnualTradeCount?: number | undefined;
  /**
   * The number of average annual trades of funds
   */
  fundsAverageAnnualTradeCount?: number | undefined;
  /**
   * The number of average annual trades of government bonds
   */
  governmentBondsAverageAnnualTradeCount?: number | undefined;
  /**
   * The number of average annual trades in margin accounts
   */
  marginAverageAnnualTradeCount?: number | undefined;
  /**
   * The number of average annual trades of municipal bonds
   */
  municipalBondsAverageAnnualTradeCount?: number | undefined;
  /**
   * The number of average annual trades of options
   */
  optionsAverageAnnualTradeCount?: number | undefined;
  /**
   * The number of average annual trades of stocks
   */
  stocksAverageAnnualTradeCount?: number | undefined;
  /**
   * The number of average annual trades in tax sheltered accounts
   */
  taxSheltersAverageAnnualTradeCount?: number | undefined;
};

/**
 * Requested options level
 */
export enum EnrollmentOptionsLevel {
  OptionsLevelUnspecified = "OPTIONS_LEVEL_UNSPECIFIED",
  Level1BasicDirectionalTrades = "LEVEL_1_BASIC_DIRECTIONAL_TRADES",
}
/**
 * Requested options level
 */
export type EnrollmentOptionsLevelOpen = OpenEnum<
  typeof EnrollmentOptionsLevel
>;

/**
 * Metadata for the ORDERS_OPTIONS_TRADING enrollment type
 */
export type OrdersOptionsTradingEnrollmentMetadata = {
  /**
   * This captures a user's experience with investment vehicles. It includes details such as the user's average annual trade count for various investment vehicles
   */
  investmentVehicleExperience?: InvestmentVehicleExperience | null | undefined;
  /**
   * Requested options level
   */
  optionsLevel?: EnrollmentOptionsLevelOpen | undefined;
  /**
   * Total years of options trading experience
   */
  totalYearsOptionsTradingExperience?: number | undefined;
};

/**
 * Indicates where in the enrollment is in the process; May be `PENDING_AGREEMENT`, `ACTIVE`, `INACTIVE`, `PROCESSING`, or `EXPIRED`
 */
export enum EnrollmentState {
  EnrollmentStateUnspecified = "ENROLLMENT_STATE_UNSPECIFIED",
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  PendingAgreement = "PENDING_AGREEMENT",
  Processing = "PROCESSING",
  Expired = "EXPIRED",
}
/**
 * Indicates where in the enrollment is in the process; May be `PENDING_AGREEMENT`, `ACTIVE`, `INACTIVE`, `PROCESSING`, or `EXPIRED`
 */
export type EnrollmentStateOpen = OpenEnum<typeof EnrollmentState>;

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlanOpen =
  OpenEnum<typeof EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan>;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum EnrollmentTrustEnrollmentMetadataFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type EnrollmentTrustEnrollmentMetadataFdicCashSweepOpen = OpenEnum<
  typeof EnrollmentTrustEnrollmentMetadataFdicCashSweep
>;

/**
 * Trust account is opened on behalf of
 */
export enum EnrollmentOpenedOnBehalfOf {
  OpenedOnBehalfOfUnspecified = "OPENED_ON_BEHALF_OF_UNSPECIFIED",
  PersonalTrust = "PERSONAL_TRUST",
  BusinessTrust = "BUSINESS_TRUST",
  ThirdPartyAdministrator = "THIRD_PARTY_ADMINISTRATOR",
}
/**
 * Trust account is opened on behalf of
 */
export type EnrollmentOpenedOnBehalfOfOpen = OpenEnum<
  typeof EnrollmentOpenedOnBehalfOf
>;

/**
 * Metadata for the REGISTRATION_TRUST type
 */
export type TrustEnrollmentMetadata = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | EnrollmentTrustEnrollmentMetadataFdicCashSweepOpen
    | undefined;
  /**
   * Trust account is opened on behalf of
   */
  openedOnBehalfOf?: EnrollmentOpenedOnBehalfOfOpen | undefined;
};

/**
 * Describes the name of the enrollment; Expressed as an enum
 */
export enum EnrollmentType1 {
  EnrollmentTypeUnspecified = "ENROLLMENT_TYPE_UNSPECIFIED",
  RegistrationIndividual = "REGISTRATION_INDIVIDUAL",
  LendingFullyPaidStockLoan = "LENDING_FULLY_PAID_STOCK_LOAN",
  BeneficiaryDesignation = "BENEFICIARY_DESIGNATION",
  RegistrationJointWros = "REGISTRATION_JOINT_WROS",
  RegistrationJointTic = "REGISTRATION_JOINT_TIC",
  RegistrationJointTbe = "REGISTRATION_JOINT_TBE",
  RegistrationJointCp = "REGISTRATION_JOINT_CP",
  RegistrationEstate = "REGISTRATION_ESTATE",
  RegistrationIraTraditional = "REGISTRATION_IRA_TRADITIONAL",
  RegistrationIraSimple = "REGISTRATION_IRA_SIMPLE",
  RegistrationIraSep = "REGISTRATION_IRA_SEP",
  RegistrationIraRoth = "REGISTRATION_IRA_ROTH",
  RegistrationIraRollover = "REGISTRATION_IRA_ROLLOVER",
  RegistrationTrust = "REGISTRATION_TRUST",
  RegistrationCorporation = "REGISTRATION_CORPORATION",
  RegistrationLlc = "REGISTRATION_LLC",
  CashFdicCashSweep = "CASH_FDIC_CASH_SWEEP",
  RetirementBeneficiaryDesignation = "RETIREMENT_BENEFICIARY_DESIGNATION",
  DividendReinvestmentPlan = "DIVIDEND_REINVESTMENT_PLAN",
  RegistrationIraBeneficiaryTraditional =
    "REGISTRATION_IRA_BENEFICIARY_TRADITIONAL",
  RegistrationIraBeneficiaryRoth = "REGISTRATION_IRA_BENEFICIARY_ROTH",
  RegistrationIndividualForeign = "REGISTRATION_INDIVIDUAL_FOREIGN",
  RegistrationCustodial = "REGISTRATION_CUSTODIAL",
  VirtualAccountNumber = "VIRTUAL_ACCOUNT_NUMBER",
}
/**
 * Describes the name of the enrollment; Expressed as an enum
 */
export type EnrollmentType1Open = OpenEnum<typeof EnrollmentType1>;

/**
 * Metadata for the VIRTUAL_ACCOUNT_NUMBER type
 */
export type VirtualAccountNumberEnrollmentMetadata = {
  /**
   * The routing number for the account. This value is system-generated
   */
  routingNumber?: string | undefined;
  /**
   * The virtual account number for the account. This value is system-generated
   */
  virtualAccountNumber?: string | undefined;
};

/**
 * An Enrollment represents programs the account may enroll in.
 */
export type Enrollment = {
  /**
   * Metadata for the BENEFICIARY_DESIGNATION enrollment type.
   */
  beneficiaryEnrollmentMetadata?:
    | BeneficiaryEnrollmentMetadata
    | null
    | undefined;
  /**
   * The consent method for the enrollment. Defaults to ESIGNATURE.
   */
  consentMethod?: ConsentMethodOpen | undefined;
  /**
   * Metadata for the REGISTRATION_CORPORATION type
   */
  corporationEnrollmentMetadata?:
    | CorporationEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the REGISTRATION_CUSTODIAL type
   */
  custodialEnrollmentMetadata?: CustodialEnrollmentMetadata | null | undefined;
  /**
   * A system-generated unique identifier referencing a single instance of an enrollment; Used to access the record after creation
   */
  enrollmentId?: string | undefined;
  /**
   * The time all enrollment requirements were satisfied and the enrollment transitioned to `ACTIVE`
   */
  enrollmentTime?: Date | null | undefined;
  /**
   * Metadata for the REGISTRATION_ESTATE enrollment type
   */
  estateEnrollmentMetadata?: EstateEnrollmentMetadata | null | undefined;
  /**
   * Metadata for the REGISTRATION_INDIVIDUAL_FOREIGN type
   */
  foreignIndividualAccountEnrollmentMetadata?:
    | ForeignIndividualAccountEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the REGISTRATION_JOINT_FOREIGN_WROS type
   */
  foreignJointAccountEnrollmentMetadata?:
    | ForeignJointAccountEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the FULLY_PAID_STOCK_LENDING enrollment type
   */
  fpslEnrollmentMetadata?: FpslEnrollmentMetadata | null | undefined;
  /**
   * Metadata for the INDIVIDUAL enrollment type
   */
  individualEnrollmentMetadata?:
    | IndividualEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the REGISTRATION_IRA_BENEFICIARY_ROTH and REGISTRATION_IRA_BENEFICIARY_TRADITIONAL enrollment type
   */
  iraBeneficiaryEnrollmentMetadata?:
    | IraBeneficiaryEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the ROLLOVER_IRA_REGISTRATION enrollment type
   */
  iraRolloverEnrollmentMetadata?:
    | IraRolloverEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the ROTH_IRA_REGISTRATION enrollment type
   */
  iraRothEnrollmentMetadata?: IraRothEnrollmentMetadata | null | undefined;
  /**
   * Metadata for the SEP_IRA_REGISTRATION enrollment type
   */
  iraSepEnrollmentMetadata?: IraSepEnrollmentMetadata | null | undefined;
  /**
   * Metadata for the SIMPLE_IRA_REGISTRATION enrollment type
   */
  iraSimpleEnrollmentMetadata?: IraSimpleEnrollmentMetadata | null | undefined;
  /**
   * Metadata for the TRADITIONAL_IRA_REGISTRATION enrollment type
   */
  iraTraditionalEnrollmentMetadata?:
    | IraTraditionalEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the JOINT_COMMUNITY_PROPERTY_REGISTRATION enrollment type
   */
  jointCommunityPropertyEnrollmentMetadata?:
    | JointCommunityPropertyEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the JOINT_TENANTS_BY_ENTIRETY_REGISTRATION enrollment type
   */
  jointTenantsByEntiretyEnrollmentMetadata?:
    | JointTenantsByEntiretyEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the JOINT_TENANTS_IN_COMMON_REGISTRATION enrollment type
   */
  jointTenantsInCommonEnrollmentMetadata?:
    | JointTenantsInCommonEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the JOINT_WITH_RIGHTS_OF_SURVIVORSHIP_REGISTRATION enrollment type
   */
  jointWithRightsOfSurvivorshipEnrollmentMetadata?:
    | JointWithRightsOfSurvivorshipEnrollmentMetadata
    | null
    | undefined;
  /**
   * Metadata for the REGISTRATION_LLC type
   */
  llcEnrollmentMetadata?: LlcEnrollmentMetadata | null | undefined;
  /**
   * The name field Format: accounts/{account}/enrollments/{enrollment}
   */
  name?: string | undefined;
  /**
   * Metadata for the REGISTRATION_OPERATING enrollment type.
   */
  operatingEnrollmentMetadata?: OperatingEnrollmentMetadata | null | undefined;
  /**
   * Metadata for the ORDERS_OPTIONS_TRADING enrollment type
   */
  ordersOptionsTradingEnrollmentMetadata?:
    | OrdersOptionsTradingEnrollmentMetadata
    | null
    | undefined;
  /**
   * The ULID is associated with the approver of a given enrollment. The approver you create will contain the CRD Number issued to the person by FINRA. As an RIA, you should use the ULID associated with Apex's approver.
   */
  principalApproverId?: string | undefined;
  /**
   * Indicates where in the enrollment is in the process; May be `PENDING_AGREEMENT`, `ACTIVE`, `INACTIVE`, `PROCESSING`, or `EXPIRED`
   */
  state?: EnrollmentStateOpen | undefined;
  /**
   * Metadata for the REGISTRATION_TRUST type
   */
  trustEnrollmentMetadata?: TrustEnrollmentMetadata | null | undefined;
  /**
   * Describes the name of the enrollment; Expressed as an enum
   */
  type?: EnrollmentType1Open | undefined;
  /**
   * The time an unenrollment request was processed and the enrollment transitioned to `INACTIVE`
   */
  unenrollmentTime?: Date | null | undefined;
  /**
   * Metadata for the VIRTUAL_ACCOUNT_NUMBER type
   */
  virtualAccountNumberEnrollmentMetadata?:
    | VirtualAccountNumberEnrollmentMetadata
    | null
    | undefined;
};

/** @internal */
export const BeneficiaryEnrollmentMetadata$inboundSchema: z.ZodType<
  BeneficiaryEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  contingent_beneficiaries: z.array(Beneficiary$inboundSchema).optional(),
  primary_beneficiaries: z.array(Beneficiary$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "contingent_beneficiaries": "contingentBeneficiaries",
    "primary_beneficiaries": "primaryBeneficiaries",
  });
});

/** @internal */
export type BeneficiaryEnrollmentMetadata$Outbound = {
  contingent_beneficiaries?: Array<Beneficiary$Outbound> | undefined;
  primary_beneficiaries?: Array<Beneficiary$Outbound> | undefined;
};

/** @internal */
export const BeneficiaryEnrollmentMetadata$outboundSchema: z.ZodType<
  BeneficiaryEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  BeneficiaryEnrollmentMetadata
> = z.object({
  contingentBeneficiaries: z.array(Beneficiary$outboundSchema).optional(),
  primaryBeneficiaries: z.array(Beneficiary$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contingentBeneficiaries: "contingent_beneficiaries",
    primaryBeneficiaries: "primary_beneficiaries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BeneficiaryEnrollmentMetadata$ {
  /** @deprecated use `BeneficiaryEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = BeneficiaryEnrollmentMetadata$inboundSchema;
  /** @deprecated use `BeneficiaryEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = BeneficiaryEnrollmentMetadata$outboundSchema;
  /** @deprecated use `BeneficiaryEnrollmentMetadata$Outbound` instead. */
  export type Outbound = BeneficiaryEnrollmentMetadata$Outbound;
}

/** @internal */
export const ConsentMethod$inboundSchema: z.ZodType<
  ConsentMethodOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ConsentMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ConsentMethod$outboundSchema: z.ZodType<
  ConsentMethodOpen,
  z.ZodTypeDef,
  ConsentMethodOpen
> = z.union([
  z.nativeEnum(ConsentMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsentMethod$ {
  /** @deprecated use `ConsentMethod$inboundSchema` instead. */
  export const inboundSchema = ConsentMethod$inboundSchema;
  /** @deprecated use `ConsentMethod$outboundSchema` instead. */
  export const outboundSchema = ConsentMethod$outboundSchema;
}

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const InitialDepositAmount$inboundSchema: z.ZodType<
  InitialDepositAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type InitialDepositAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const InitialDepositAmount$outboundSchema: z.ZodType<
  InitialDepositAmount$Outbound,
  z.ZodTypeDef,
  InitialDepositAmount
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitialDepositAmount$ {
  /** @deprecated use `InitialDepositAmount$inboundSchema` instead. */
  export const inboundSchema = InitialDepositAmount$inboundSchema;
  /** @deprecated use `InitialDepositAmount$outboundSchema` instead. */
  export const outboundSchema = InitialDepositAmount$outboundSchema;
  /** @deprecated use `InitialDepositAmount$Outbound` instead. */
  export type Outbound = InitialDepositAmount$Outbound;
}

/** @internal */
export const DepositedFunds$inboundSchema: z.ZodType<
  DepositedFunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  initial_deposit_amount: z.nullable(
    z.lazy(() => InitialDepositAmount$inboundSchema),
  ).optional(),
  initial_deposit_source: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "initial_deposit_amount": "initialDepositAmount",
    "initial_deposit_source": "initialDepositSource",
  });
});

/** @internal */
export type DepositedFunds$Outbound = {
  initial_deposit_amount?: InitialDepositAmount$Outbound | null | undefined;
  initial_deposit_source?: string | undefined;
};

/** @internal */
export const DepositedFunds$outboundSchema: z.ZodType<
  DepositedFunds$Outbound,
  z.ZodTypeDef,
  DepositedFunds
> = z.object({
  initialDepositAmount: z.nullable(
    z.lazy(() => InitialDepositAmount$outboundSchema),
  ).optional(),
  initialDepositSource: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    initialDepositAmount: "initial_deposit_amount",
    initialDepositSource: "initial_deposit_source",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepositedFunds$ {
  /** @deprecated use `DepositedFunds$inboundSchema` instead. */
  export const inboundSchema = DepositedFunds$inboundSchema;
  /** @deprecated use `DepositedFunds$outboundSchema` instead. */
  export const outboundSchema = DepositedFunds$outboundSchema;
  /** @deprecated use `DepositedFunds$Outbound` instead. */
  export type Outbound = DepositedFunds$Outbound;
}

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$inboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRatingOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$outboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRatingOpen,
    z.ZodTypeDef,
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRatingOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$ {
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$inboundSchema;
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$outboundSchema;
}

/** @internal */
export const OtherAccounts$inboundSchema: z.ZodType<
  OtherAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_names: z.array(z.string()).optional(),
  account_numbers: z.array(z.string()).optional(),
  owner_has_other_accounts_at_apex: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_names": "accountNames",
    "account_numbers": "accountNumbers",
    "owner_has_other_accounts_at_apex": "ownerHasOtherAccountsAtApex",
  });
});

/** @internal */
export type OtherAccounts$Outbound = {
  account_names?: Array<string> | undefined;
  account_numbers?: Array<string> | undefined;
  owner_has_other_accounts_at_apex?: boolean | undefined;
};

/** @internal */
export const OtherAccounts$outboundSchema: z.ZodType<
  OtherAccounts$Outbound,
  z.ZodTypeDef,
  OtherAccounts
> = z.object({
  accountNames: z.array(z.string()).optional(),
  accountNumbers: z.array(z.string()).optional(),
  ownerHasOtherAccountsAtApex: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    accountNames: "account_names",
    accountNumbers: "account_numbers",
    ownerHasOtherAccountsAtApex: "owner_has_other_accounts_at_apex",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OtherAccounts$ {
  /** @deprecated use `OtherAccounts$inboundSchema` instead. */
  export const inboundSchema = OtherAccounts$inboundSchema;
  /** @deprecated use `OtherAccounts$outboundSchema` instead. */
  export const outboundSchema = OtherAccounts$outboundSchema;
  /** @deprecated use `OtherAccounts$Outbound` instead. */
  export type Outbound = OtherAccounts$Outbound;
}

/** @internal */
export const FinancialProfile$inboundSchema: z.ZodType<
  FinancialProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  banking_relationships: z.array(z.string()).optional(),
  other_accounts: z.nullable(z.lazy(() => OtherAccounts$inboundSchema))
    .optional(),
  primary_source_of_deposited_funds: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "banking_relationships": "bankingRelationships",
    "other_accounts": "otherAccounts",
    "primary_source_of_deposited_funds": "primarySourceOfDepositedFunds",
  });
});

/** @internal */
export type FinancialProfile$Outbound = {
  banking_relationships?: Array<string> | undefined;
  other_accounts?: OtherAccounts$Outbound | null | undefined;
  primary_source_of_deposited_funds?: string | undefined;
};

/** @internal */
export const FinancialProfile$outboundSchema: z.ZodType<
  FinancialProfile$Outbound,
  z.ZodTypeDef,
  FinancialProfile
> = z.object({
  bankingRelationships: z.array(z.string()).optional(),
  otherAccounts: z.nullable(z.lazy(() => OtherAccounts$outboundSchema))
    .optional(),
  primarySourceOfDepositedFunds: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bankingRelationships: "banking_relationships",
    otherAccounts: "other_accounts",
    primarySourceOfDepositedFunds: "primary_source_of_deposited_funds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinancialProfile$ {
  /** @deprecated use `FinancialProfile$inboundSchema` instead. */
  export const inboundSchema = FinancialProfile$inboundSchema;
  /** @deprecated use `FinancialProfile$outboundSchema` instead. */
  export const outboundSchema = FinancialProfile$outboundSchema;
  /** @deprecated use `FinancialProfile$Outbound` instead. */
  export type Outbound = FinancialProfile$Outbound;
}

/** @internal */
export const ForeignBondTradingDetails$inboundSchema: z.ZodType<
  ForeignBondTradingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  foreign_bond_trading: z.boolean().optional(),
  foreign_bond_trading_detail: z.array(ForeignBondTradingDetail$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "foreign_bond_trading": "foreignBondTrading",
    "foreign_bond_trading_detail": "foreignBondTradingDetail",
  });
});

/** @internal */
export type ForeignBondTradingDetails$Outbound = {
  foreign_bond_trading?: boolean | undefined;
  foreign_bond_trading_detail?:
    | Array<ForeignBondTradingDetail$Outbound>
    | undefined;
};

/** @internal */
export const ForeignBondTradingDetails$outboundSchema: z.ZodType<
  ForeignBondTradingDetails$Outbound,
  z.ZodTypeDef,
  ForeignBondTradingDetails
> = z.object({
  foreignBondTrading: z.boolean().optional(),
  foreignBondTradingDetail: z.array(ForeignBondTradingDetail$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    foreignBondTrading: "foreign_bond_trading",
    foreignBondTradingDetail: "foreign_bond_trading_detail",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForeignBondTradingDetails$ {
  /** @deprecated use `ForeignBondTradingDetails$inboundSchema` instead. */
  export const inboundSchema = ForeignBondTradingDetails$inboundSchema;
  /** @deprecated use `ForeignBondTradingDetails$outboundSchema` instead. */
  export const outboundSchema = ForeignBondTradingDetails$outboundSchema;
  /** @deprecated use `ForeignBondTradingDetails$Outbound` instead. */
  export type Outbound = ForeignBondTradingDetails$Outbound;
}

/** @internal */
export const LowPricedSecuritiesPercentage$inboundSchema: z.ZodType<
  LowPricedSecuritiesPercentage,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type LowPricedSecuritiesPercentage$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const LowPricedSecuritiesPercentage$outboundSchema: z.ZodType<
  LowPricedSecuritiesPercentage$Outbound,
  z.ZodTypeDef,
  LowPricedSecuritiesPercentage
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LowPricedSecuritiesPercentage$ {
  /** @deprecated use `LowPricedSecuritiesPercentage$inboundSchema` instead. */
  export const inboundSchema = LowPricedSecuritiesPercentage$inboundSchema;
  /** @deprecated use `LowPricedSecuritiesPercentage$outboundSchema` instead. */
  export const outboundSchema = LowPricedSecuritiesPercentage$outboundSchema;
  /** @deprecated use `LowPricedSecuritiesPercentage$Outbound` instead. */
  export type Outbound = LowPricedSecuritiesPercentage$Outbound;
}

/** @internal */
export const LowPricedSecurities$inboundSchema: z.ZodType<
  LowPricedSecurities,
  z.ZodTypeDef,
  unknown
> = z.object({
  low_priced_securities: z.boolean().optional(),
  low_priced_securities_percentage: z.nullable(
    z.lazy(() => LowPricedSecuritiesPercentage$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "low_priced_securities": "lowPricedSecurities",
    "low_priced_securities_percentage": "lowPricedSecuritiesPercentage",
  });
});

/** @internal */
export type LowPricedSecurities$Outbound = {
  low_priced_securities?: boolean | undefined;
  low_priced_securities_percentage?:
    | LowPricedSecuritiesPercentage$Outbound
    | null
    | undefined;
};

/** @internal */
export const LowPricedSecurities$outboundSchema: z.ZodType<
  LowPricedSecurities$Outbound,
  z.ZodTypeDef,
  LowPricedSecurities
> = z.object({
  lowPricedSecurities: z.boolean().optional(),
  lowPricedSecuritiesPercentage: z.nullable(
    z.lazy(() => LowPricedSecuritiesPercentage$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lowPricedSecurities: "low_priced_securities",
    lowPricedSecuritiesPercentage: "low_priced_securities_percentage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LowPricedSecurities$ {
  /** @deprecated use `LowPricedSecurities$inboundSchema` instead. */
  export const inboundSchema = LowPricedSecurities$inboundSchema;
  /** @deprecated use `LowPricedSecurities$outboundSchema` instead. */
  export const outboundSchema = LowPricedSecurities$outboundSchema;
  /** @deprecated use `LowPricedSecurities$Outbound` instead. */
  export type Outbound = LowPricedSecurities$Outbound;
}

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$inboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityTypeOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$outboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityTypeOpen,
    z.ZodTypeDef,
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityTypeOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$ {
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$inboundSchema;
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$outboundSchema;
}

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$inboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequencyOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$outboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequencyOpen,
    z.ZodTypeDef,
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequencyOpen
  > = z.union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$ {
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$inboundSchema;
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$outboundSchema;
}

/** @internal */
export const PlannedActivity$inboundSchema: z.ZodType<
  PlannedActivity,
  z.ZodTypeDef,
  unknown
> = z.object({
  foreign_bond_trading_details: z.nullable(
    z.lazy(() => ForeignBondTradingDetails$inboundSchema),
  ).optional(),
  low_priced_securities: z.nullable(
    z.lazy(() => LowPricedSecurities$inboundSchema),
  ).optional(),
  primary_account_activity_type:
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$inboundSchema
      .optional(),
  withdrawal_frequency:
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "foreign_bond_trading_details": "foreignBondTradingDetails",
    "low_priced_securities": "lowPricedSecurities",
    "primary_account_activity_type": "primaryAccountActivityType",
    "withdrawal_frequency": "withdrawalFrequency",
  });
});

/** @internal */
export type PlannedActivity$Outbound = {
  foreign_bond_trading_details?:
    | ForeignBondTradingDetails$Outbound
    | null
    | undefined;
  low_priced_securities?: LowPricedSecurities$Outbound | null | undefined;
  primary_account_activity_type?: string | undefined;
  withdrawal_frequency?: string | undefined;
};

/** @internal */
export const PlannedActivity$outboundSchema: z.ZodType<
  PlannedActivity$Outbound,
  z.ZodTypeDef,
  PlannedActivity
> = z.object({
  foreignBondTradingDetails: z.nullable(
    z.lazy(() => ForeignBondTradingDetails$outboundSchema),
  ).optional(),
  lowPricedSecurities: z.nullable(
    z.lazy(() => LowPricedSecurities$outboundSchema),
  ).optional(),
  primaryAccountActivityType:
    EnrollmentCorporationEnrollmentMetadataPrimaryAccountActivityType$outboundSchema
      .optional(),
  withdrawalFrequency:
    EnrollmentCorporationEnrollmentMetadataWithdrawalFrequency$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    foreignBondTradingDetails: "foreign_bond_trading_details",
    lowPricedSecurities: "low_priced_securities",
    primaryAccountActivityType: "primary_account_activity_type",
    withdrawalFrequency: "withdrawal_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlannedActivity$ {
  /** @deprecated use `PlannedActivity$inboundSchema` instead. */
  export const inboundSchema = PlannedActivity$inboundSchema;
  /** @deprecated use `PlannedActivity$outboundSchema` instead. */
  export const outboundSchema = PlannedActivity$outboundSchema;
  /** @deprecated use `PlannedActivity$Outbound` instead. */
  export type Outbound = PlannedActivity$Outbound;
}

/** @internal */
export const RelatedPepDetails$inboundSchema: z.ZodType<
  RelatedPepDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  direct_or_indirect_related_peps: z.boolean().optional(),
  related_peps: z.array(RelatedPep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "direct_or_indirect_related_peps": "directOrIndirectRelatedPeps",
    "related_peps": "relatedPeps",
  });
});

/** @internal */
export type RelatedPepDetails$Outbound = {
  direct_or_indirect_related_peps?: boolean | undefined;
  related_peps?: Array<RelatedPep$Outbound> | undefined;
};

/** @internal */
export const RelatedPepDetails$outboundSchema: z.ZodType<
  RelatedPepDetails$Outbound,
  z.ZodTypeDef,
  RelatedPepDetails
> = z.object({
  directOrIndirectRelatedPeps: z.boolean().optional(),
  relatedPeps: z.array(RelatedPep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    directOrIndirectRelatedPeps: "direct_or_indirect_related_peps",
    relatedPeps: "related_peps",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedPepDetails$ {
  /** @deprecated use `RelatedPepDetails$inboundSchema` instead. */
  export const inboundSchema = RelatedPepDetails$inboundSchema;
  /** @deprecated use `RelatedPepDetails$outboundSchema` instead. */
  export const outboundSchema = RelatedPepDetails$outboundSchema;
  /** @deprecated use `RelatedPepDetails$Outbound` instead. */
  export type Outbound = RelatedPepDetails$Outbound;
}

/** @internal */
export const EddAccountEnrollmentMetadata$inboundSchema: z.ZodType<
  EddAccountEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  deposited_funds: z.nullable(z.lazy(() => DepositedFunds$inboundSchema))
    .optional(),
  determined_account_risk_rating:
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$inboundSchema
      .optional(),
  financial_profile: z.nullable(z.lazy(() => FinancialProfile$inboundSchema))
    .optional(),
  planned_activity: z.nullable(z.lazy(() => PlannedActivity$inboundSchema))
    .optional(),
  related_pep_details: z.nullable(z.lazy(() => RelatedPepDetails$inboundSchema))
    .optional(),
  scope_of_business: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "deposited_funds": "depositedFunds",
    "determined_account_risk_rating": "determinedAccountRiskRating",
    "financial_profile": "financialProfile",
    "planned_activity": "plannedActivity",
    "related_pep_details": "relatedPepDetails",
    "scope_of_business": "scopeOfBusiness",
  });
});

/** @internal */
export type EddAccountEnrollmentMetadata$Outbound = {
  deposited_funds?: DepositedFunds$Outbound | null | undefined;
  determined_account_risk_rating?: string | undefined;
  financial_profile?: FinancialProfile$Outbound | null | undefined;
  planned_activity?: PlannedActivity$Outbound | null | undefined;
  related_pep_details?: RelatedPepDetails$Outbound | null | undefined;
  scope_of_business?: string | undefined;
};

/** @internal */
export const EddAccountEnrollmentMetadata$outboundSchema: z.ZodType<
  EddAccountEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  EddAccountEnrollmentMetadata
> = z.object({
  depositedFunds: z.nullable(z.lazy(() => DepositedFunds$outboundSchema))
    .optional(),
  determinedAccountRiskRating:
    EnrollmentCorporationEnrollmentMetadataDeterminedAccountRiskRating$outboundSchema
      .optional(),
  financialProfile: z.nullable(z.lazy(() => FinancialProfile$outboundSchema))
    .optional(),
  plannedActivity: z.nullable(z.lazy(() => PlannedActivity$outboundSchema))
    .optional(),
  relatedPepDetails: z.nullable(z.lazy(() => RelatedPepDetails$outboundSchema))
    .optional(),
  scopeOfBusiness: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    depositedFunds: "deposited_funds",
    determinedAccountRiskRating: "determined_account_risk_rating",
    financialProfile: "financial_profile",
    plannedActivity: "planned_activity",
    relatedPepDetails: "related_pep_details",
    scopeOfBusiness: "scope_of_business",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EddAccountEnrollmentMetadata$ {
  /** @deprecated use `EddAccountEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = EddAccountEnrollmentMetadata$inboundSchema;
  /** @deprecated use `EddAccountEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = EddAccountEnrollmentMetadata$outboundSchema;
  /** @deprecated use `EddAccountEnrollmentMetadata$Outbound` instead. */
  export type Outbound = EddAccountEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentCorporationEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentCorporationEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentCorporationEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentCorporationEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentCorporationEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentCorporationEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentCorporationEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const CorporationEnrollmentMetadata$inboundSchema: z.ZodType<
  CorporationEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  edd_account_enrollment_metadata: z.nullable(
    z.lazy(() => EddAccountEnrollmentMetadata$inboundSchema),
  ).optional(),
  fdic_cash_sweep:
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "edd_account_enrollment_metadata": "eddAccountEnrollmentMetadata",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type CorporationEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  edd_account_enrollment_metadata?:
    | EddAccountEnrollmentMetadata$Outbound
    | null
    | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const CorporationEnrollmentMetadata$outboundSchema: z.ZodType<
  CorporationEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  CorporationEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentCorporationEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  eddAccountEnrollmentMetadata: z.nullable(
    z.lazy(() => EddAccountEnrollmentMetadata$outboundSchema),
  ).optional(),
  fdicCashSweep:
    EnrollmentCorporationEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    eddAccountEnrollmentMetadata: "edd_account_enrollment_metadata",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorporationEnrollmentMetadata$ {
  /** @deprecated use `CorporationEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = CorporationEnrollmentMetadata$inboundSchema;
  /** @deprecated use `CorporationEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = CorporationEnrollmentMetadata$outboundSchema;
  /** @deprecated use `CorporationEnrollmentMetadata$Outbound` instead. */
  export type Outbound = CorporationEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentDividendReinvestmentPlan$inboundSchema: z.ZodType<
  EnrollmentDividendReinvestmentPlanOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentDividendReinvestmentPlan),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentDividendReinvestmentPlan$outboundSchema: z.ZodType<
  EnrollmentDividendReinvestmentPlanOpen,
  z.ZodTypeDef,
  EnrollmentDividendReinvestmentPlanOpen
> = z.union([
  z.nativeEnum(EnrollmentDividendReinvestmentPlan),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema = EnrollmentDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentFdicCashSweep$inboundSchema: z.ZodType<
  EnrollmentFdicCashSweepOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentFdicCashSweep),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentFdicCashSweep$outboundSchema: z.ZodType<
  EnrollmentFdicCashSweepOpen,
  z.ZodTypeDef,
  EnrollmentFdicCashSweepOpen
> = z.union([
  z.nativeEnum(EnrollmentFdicCashSweep),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentFdicCashSweep$ {
  /** @deprecated use `EnrollmentFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema = EnrollmentFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema = EnrollmentFdicCashSweep$outboundSchema;
}

/** @internal */
export const CustodialEnrollmentMetadata$inboundSchema: z.ZodType<
  CustodialEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan: EnrollmentDividendReinvestmentPlan$inboundSchema
    .optional(),
  fdic_cash_sweep: EnrollmentFdicCashSweep$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type CustodialEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const CustodialEnrollmentMetadata$outboundSchema: z.ZodType<
  CustodialEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  CustodialEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan: EnrollmentDividendReinvestmentPlan$outboundSchema
    .optional(),
  fdicCashSweep: EnrollmentFdicCashSweep$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustodialEnrollmentMetadata$ {
  /** @deprecated use `CustodialEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = CustodialEnrollmentMetadata$inboundSchema;
  /** @deprecated use `CustodialEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = CustodialEnrollmentMetadata$outboundSchema;
  /** @deprecated use `CustodialEnrollmentMetadata$Outbound` instead. */
  export type Outbound = CustodialEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EstateEnrollmentMetadata$inboundSchema: z.ZodType<
  EstateEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificate_of_appointment_document_id: z.string().optional(),
  dividend_reinvestment_plan:
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "certificate_of_appointment_document_id":
      "certificateOfAppointmentDocumentId",
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
  });
});

/** @internal */
export type EstateEnrollmentMetadata$Outbound = {
  certificate_of_appointment_document_id?: string | undefined;
  dividend_reinvestment_plan?: string | undefined;
};

/** @internal */
export const EstateEnrollmentMetadata$outboundSchema: z.ZodType<
  EstateEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  EstateEnrollmentMetadata
> = z.object({
  certificateOfAppointmentDocumentId: z.string().optional(),
  dividendReinvestmentPlan:
    EnrollmentEstateEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    certificateOfAppointmentDocumentId:
      "certificate_of_appointment_document_id",
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EstateEnrollmentMetadata$ {
  /** @deprecated use `EstateEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = EstateEnrollmentMetadata$inboundSchema;
  /** @deprecated use `EstateEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = EstateEnrollmentMetadata$outboundSchema;
  /** @deprecated use `EstateEnrollmentMetadata$Outbound` instead. */
  export type Outbound = EstateEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const EnrollmentInitialDepositAmount$inboundSchema: z.ZodType<
  EnrollmentInitialDepositAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type EnrollmentInitialDepositAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const EnrollmentInitialDepositAmount$outboundSchema: z.ZodType<
  EnrollmentInitialDepositAmount$Outbound,
  z.ZodTypeDef,
  EnrollmentInitialDepositAmount
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentInitialDepositAmount$ {
  /** @deprecated use `EnrollmentInitialDepositAmount$inboundSchema` instead. */
  export const inboundSchema = EnrollmentInitialDepositAmount$inboundSchema;
  /** @deprecated use `EnrollmentInitialDepositAmount$outboundSchema` instead. */
  export const outboundSchema = EnrollmentInitialDepositAmount$outboundSchema;
  /** @deprecated use `EnrollmentInitialDepositAmount$Outbound` instead. */
  export type Outbound = EnrollmentInitialDepositAmount$Outbound;
}

/** @internal */
export const EnrollmentDepositedFunds$inboundSchema: z.ZodType<
  EnrollmentDepositedFunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  initial_deposit_amount: z.nullable(
    z.lazy(() => EnrollmentInitialDepositAmount$inboundSchema),
  ).optional(),
  initial_deposit_source: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "initial_deposit_amount": "initialDepositAmount",
    "initial_deposit_source": "initialDepositSource",
  });
});

/** @internal */
export type EnrollmentDepositedFunds$Outbound = {
  initial_deposit_amount?:
    | EnrollmentInitialDepositAmount$Outbound
    | null
    | undefined;
  initial_deposit_source?: string | undefined;
};

/** @internal */
export const EnrollmentDepositedFunds$outboundSchema: z.ZodType<
  EnrollmentDepositedFunds$Outbound,
  z.ZodTypeDef,
  EnrollmentDepositedFunds
> = z.object({
  initialDepositAmount: z.nullable(
    z.lazy(() => EnrollmentInitialDepositAmount$outboundSchema),
  ).optional(),
  initialDepositSource: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    initialDepositAmount: "initial_deposit_amount",
    initialDepositSource: "initial_deposit_source",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentDepositedFunds$ {
  /** @deprecated use `EnrollmentDepositedFunds$inboundSchema` instead. */
  export const inboundSchema = EnrollmentDepositedFunds$inboundSchema;
  /** @deprecated use `EnrollmentDepositedFunds$outboundSchema` instead. */
  export const outboundSchema = EnrollmentDepositedFunds$outboundSchema;
  /** @deprecated use `EnrollmentDepositedFunds$Outbound` instead. */
  export type Outbound = EnrollmentDepositedFunds$Outbound;
}

/** @internal */
export const EnrollmentOtherAccounts$inboundSchema: z.ZodType<
  EnrollmentOtherAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_names: z.array(z.string()).optional(),
  account_numbers: z.array(z.string()).optional(),
  owner_has_other_accounts_at_apex: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_names": "accountNames",
    "account_numbers": "accountNumbers",
    "owner_has_other_accounts_at_apex": "ownerHasOtherAccountsAtApex",
  });
});

/** @internal */
export type EnrollmentOtherAccounts$Outbound = {
  account_names?: Array<string> | undefined;
  account_numbers?: Array<string> | undefined;
  owner_has_other_accounts_at_apex?: boolean | undefined;
};

/** @internal */
export const EnrollmentOtherAccounts$outboundSchema: z.ZodType<
  EnrollmentOtherAccounts$Outbound,
  z.ZodTypeDef,
  EnrollmentOtherAccounts
> = z.object({
  accountNames: z.array(z.string()).optional(),
  accountNumbers: z.array(z.string()).optional(),
  ownerHasOtherAccountsAtApex: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    accountNames: "account_names",
    accountNumbers: "account_numbers",
    ownerHasOtherAccountsAtApex: "owner_has_other_accounts_at_apex",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentOtherAccounts$ {
  /** @deprecated use `EnrollmentOtherAccounts$inboundSchema` instead. */
  export const inboundSchema = EnrollmentOtherAccounts$inboundSchema;
  /** @deprecated use `EnrollmentOtherAccounts$outboundSchema` instead. */
  export const outboundSchema = EnrollmentOtherAccounts$outboundSchema;
  /** @deprecated use `EnrollmentOtherAccounts$Outbound` instead. */
  export type Outbound = EnrollmentOtherAccounts$Outbound;
}

/** @internal */
export const EnrollmentFinancialProfile$inboundSchema: z.ZodType<
  EnrollmentFinancialProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  banking_relationships: z.array(z.string()).optional(),
  other_accounts: z.nullable(
    z.lazy(() => EnrollmentOtherAccounts$inboundSchema),
  ).optional(),
  primary_source_of_deposited_funds: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "banking_relationships": "bankingRelationships",
    "other_accounts": "otherAccounts",
    "primary_source_of_deposited_funds": "primarySourceOfDepositedFunds",
  });
});

/** @internal */
export type EnrollmentFinancialProfile$Outbound = {
  banking_relationships?: Array<string> | undefined;
  other_accounts?: EnrollmentOtherAccounts$Outbound | null | undefined;
  primary_source_of_deposited_funds?: string | undefined;
};

/** @internal */
export const EnrollmentFinancialProfile$outboundSchema: z.ZodType<
  EnrollmentFinancialProfile$Outbound,
  z.ZodTypeDef,
  EnrollmentFinancialProfile
> = z.object({
  bankingRelationships: z.array(z.string()).optional(),
  otherAccounts: z.nullable(
    z.lazy(() => EnrollmentOtherAccounts$outboundSchema),
  ).optional(),
  primarySourceOfDepositedFunds: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bankingRelationships: "banking_relationships",
    otherAccounts: "other_accounts",
    primarySourceOfDepositedFunds: "primary_source_of_deposited_funds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentFinancialProfile$ {
  /** @deprecated use `EnrollmentFinancialProfile$inboundSchema` instead. */
  export const inboundSchema = EnrollmentFinancialProfile$inboundSchema;
  /** @deprecated use `EnrollmentFinancialProfile$outboundSchema` instead. */
  export const outboundSchema = EnrollmentFinancialProfile$outboundSchema;
  /** @deprecated use `EnrollmentFinancialProfile$Outbound` instead. */
  export type Outbound = EnrollmentFinancialProfile$Outbound;
}

/** @internal */
export const EnrollmentForeignBondTradingDetails$inboundSchema: z.ZodType<
  EnrollmentForeignBondTradingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  foreign_bond_trading: z.boolean().optional(),
  foreign_bond_trading_detail: z.array(ForeignBondTradingDetail$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "foreign_bond_trading": "foreignBondTrading",
    "foreign_bond_trading_detail": "foreignBondTradingDetail",
  });
});

/** @internal */
export type EnrollmentForeignBondTradingDetails$Outbound = {
  foreign_bond_trading?: boolean | undefined;
  foreign_bond_trading_detail?:
    | Array<ForeignBondTradingDetail$Outbound>
    | undefined;
};

/** @internal */
export const EnrollmentForeignBondTradingDetails$outboundSchema: z.ZodType<
  EnrollmentForeignBondTradingDetails$Outbound,
  z.ZodTypeDef,
  EnrollmentForeignBondTradingDetails
> = z.object({
  foreignBondTrading: z.boolean().optional(),
  foreignBondTradingDetail: z.array(ForeignBondTradingDetail$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    foreignBondTrading: "foreign_bond_trading",
    foreignBondTradingDetail: "foreign_bond_trading_detail",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignBondTradingDetails$ {
  /** @deprecated use `EnrollmentForeignBondTradingDetails$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignBondTradingDetails$inboundSchema;
  /** @deprecated use `EnrollmentForeignBondTradingDetails$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignBondTradingDetails$outboundSchema;
  /** @deprecated use `EnrollmentForeignBondTradingDetails$Outbound` instead. */
  export type Outbound = EnrollmentForeignBondTradingDetails$Outbound;
}

/** @internal */
export const EnrollmentLowPricedSecuritiesPercentage$inboundSchema: z.ZodType<
  EnrollmentLowPricedSecuritiesPercentage,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type EnrollmentLowPricedSecuritiesPercentage$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const EnrollmentLowPricedSecuritiesPercentage$outboundSchema: z.ZodType<
  EnrollmentLowPricedSecuritiesPercentage$Outbound,
  z.ZodTypeDef,
  EnrollmentLowPricedSecuritiesPercentage
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLowPricedSecuritiesPercentage$ {
  /** @deprecated use `EnrollmentLowPricedSecuritiesPercentage$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLowPricedSecuritiesPercentage$inboundSchema;
  /** @deprecated use `EnrollmentLowPricedSecuritiesPercentage$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLowPricedSecuritiesPercentage$outboundSchema;
  /** @deprecated use `EnrollmentLowPricedSecuritiesPercentage$Outbound` instead. */
  export type Outbound = EnrollmentLowPricedSecuritiesPercentage$Outbound;
}

/** @internal */
export const EnrollmentLowPricedSecurities$inboundSchema: z.ZodType<
  EnrollmentLowPricedSecurities,
  z.ZodTypeDef,
  unknown
> = z.object({
  low_priced_securities: z.boolean().optional(),
  low_priced_securities_percentage: z.nullable(
    z.lazy(() => EnrollmentLowPricedSecuritiesPercentage$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "low_priced_securities": "lowPricedSecurities",
    "low_priced_securities_percentage": "lowPricedSecuritiesPercentage",
  });
});

/** @internal */
export type EnrollmentLowPricedSecurities$Outbound = {
  low_priced_securities?: boolean | undefined;
  low_priced_securities_percentage?:
    | EnrollmentLowPricedSecuritiesPercentage$Outbound
    | null
    | undefined;
};

/** @internal */
export const EnrollmentLowPricedSecurities$outboundSchema: z.ZodType<
  EnrollmentLowPricedSecurities$Outbound,
  z.ZodTypeDef,
  EnrollmentLowPricedSecurities
> = z.object({
  lowPricedSecurities: z.boolean().optional(),
  lowPricedSecuritiesPercentage: z.nullable(
    z.lazy(() => EnrollmentLowPricedSecuritiesPercentage$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lowPricedSecurities: "low_priced_securities",
    lowPricedSecuritiesPercentage: "low_priced_securities_percentage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLowPricedSecurities$ {
  /** @deprecated use `EnrollmentLowPricedSecurities$inboundSchema` instead. */
  export const inboundSchema = EnrollmentLowPricedSecurities$inboundSchema;
  /** @deprecated use `EnrollmentLowPricedSecurities$outboundSchema` instead. */
  export const outboundSchema = EnrollmentLowPricedSecurities$outboundSchema;
  /** @deprecated use `EnrollmentLowPricedSecurities$Outbound` instead. */
  export type Outbound = EnrollmentLowPricedSecurities$Outbound;
}

/** @internal */
export const EnrollmentPrimaryAccountActivityType$inboundSchema: z.ZodType<
  EnrollmentPrimaryAccountActivityTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentPrimaryAccountActivityType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentPrimaryAccountActivityType$outboundSchema: z.ZodType<
  EnrollmentPrimaryAccountActivityTypeOpen,
  z.ZodTypeDef,
  EnrollmentPrimaryAccountActivityTypeOpen
> = z.union([
  z.nativeEnum(EnrollmentPrimaryAccountActivityType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentPrimaryAccountActivityType$ {
  /** @deprecated use `EnrollmentPrimaryAccountActivityType$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentPrimaryAccountActivityType$inboundSchema;
  /** @deprecated use `EnrollmentPrimaryAccountActivityType$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentPrimaryAccountActivityType$outboundSchema;
}

/** @internal */
export const EnrollmentWithdrawalFrequency$inboundSchema: z.ZodType<
  EnrollmentWithdrawalFrequencyOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentWithdrawalFrequency),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentWithdrawalFrequency$outboundSchema: z.ZodType<
  EnrollmentWithdrawalFrequencyOpen,
  z.ZodTypeDef,
  EnrollmentWithdrawalFrequencyOpen
> = z.union([
  z.nativeEnum(EnrollmentWithdrawalFrequency),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentWithdrawalFrequency$ {
  /** @deprecated use `EnrollmentWithdrawalFrequency$inboundSchema` instead. */
  export const inboundSchema = EnrollmentWithdrawalFrequency$inboundSchema;
  /** @deprecated use `EnrollmentWithdrawalFrequency$outboundSchema` instead. */
  export const outboundSchema = EnrollmentWithdrawalFrequency$outboundSchema;
}

/** @internal */
export const EnrollmentPlannedActivity$inboundSchema: z.ZodType<
  EnrollmentPlannedActivity,
  z.ZodTypeDef,
  unknown
> = z.object({
  foreign_bond_trading_details: z.nullable(
    z.lazy(() => EnrollmentForeignBondTradingDetails$inboundSchema),
  ).optional(),
  low_priced_securities: z.nullable(
    z.lazy(() => EnrollmentLowPricedSecurities$inboundSchema),
  ).optional(),
  primary_account_activity_type:
    EnrollmentPrimaryAccountActivityType$inboundSchema.optional(),
  withdrawal_frequency: EnrollmentWithdrawalFrequency$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "foreign_bond_trading_details": "foreignBondTradingDetails",
    "low_priced_securities": "lowPricedSecurities",
    "primary_account_activity_type": "primaryAccountActivityType",
    "withdrawal_frequency": "withdrawalFrequency",
  });
});

/** @internal */
export type EnrollmentPlannedActivity$Outbound = {
  foreign_bond_trading_details?:
    | EnrollmentForeignBondTradingDetails$Outbound
    | null
    | undefined;
  low_priced_securities?:
    | EnrollmentLowPricedSecurities$Outbound
    | null
    | undefined;
  primary_account_activity_type?: string | undefined;
  withdrawal_frequency?: string | undefined;
};

/** @internal */
export const EnrollmentPlannedActivity$outboundSchema: z.ZodType<
  EnrollmentPlannedActivity$Outbound,
  z.ZodTypeDef,
  EnrollmentPlannedActivity
> = z.object({
  foreignBondTradingDetails: z.nullable(
    z.lazy(() => EnrollmentForeignBondTradingDetails$outboundSchema),
  ).optional(),
  lowPricedSecurities: z.nullable(
    z.lazy(() => EnrollmentLowPricedSecurities$outboundSchema),
  ).optional(),
  primaryAccountActivityType:
    EnrollmentPrimaryAccountActivityType$outboundSchema.optional(),
  withdrawalFrequency: EnrollmentWithdrawalFrequency$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    foreignBondTradingDetails: "foreign_bond_trading_details",
    lowPricedSecurities: "low_priced_securities",
    primaryAccountActivityType: "primary_account_activity_type",
    withdrawalFrequency: "withdrawal_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentPlannedActivity$ {
  /** @deprecated use `EnrollmentPlannedActivity$inboundSchema` instead. */
  export const inboundSchema = EnrollmentPlannedActivity$inboundSchema;
  /** @deprecated use `EnrollmentPlannedActivity$outboundSchema` instead. */
  export const outboundSchema = EnrollmentPlannedActivity$outboundSchema;
  /** @deprecated use `EnrollmentPlannedActivity$Outbound` instead. */
  export type Outbound = EnrollmentPlannedActivity$Outbound;
}

/** @internal */
export const EnrollmentRelatedPepDetails$inboundSchema: z.ZodType<
  EnrollmentRelatedPepDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  direct_or_indirect_related_peps: z.boolean().optional(),
  related_peps: z.array(RelatedPep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "direct_or_indirect_related_peps": "directOrIndirectRelatedPeps",
    "related_peps": "relatedPeps",
  });
});

/** @internal */
export type EnrollmentRelatedPepDetails$Outbound = {
  direct_or_indirect_related_peps?: boolean | undefined;
  related_peps?: Array<RelatedPep$Outbound> | undefined;
};

/** @internal */
export const EnrollmentRelatedPepDetails$outboundSchema: z.ZodType<
  EnrollmentRelatedPepDetails$Outbound,
  z.ZodTypeDef,
  EnrollmentRelatedPepDetails
> = z.object({
  directOrIndirectRelatedPeps: z.boolean().optional(),
  relatedPeps: z.array(RelatedPep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    directOrIndirectRelatedPeps: "direct_or_indirect_related_peps",
    relatedPeps: "related_peps",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentRelatedPepDetails$ {
  /** @deprecated use `EnrollmentRelatedPepDetails$inboundSchema` instead. */
  export const inboundSchema = EnrollmentRelatedPepDetails$inboundSchema;
  /** @deprecated use `EnrollmentRelatedPepDetails$outboundSchema` instead. */
  export const outboundSchema = EnrollmentRelatedPepDetails$outboundSchema;
  /** @deprecated use `EnrollmentRelatedPepDetails$Outbound` instead. */
  export type Outbound = EnrollmentRelatedPepDetails$Outbound;
}

/** @internal */
export const ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema:
  z.ZodType<
    ForeignNaturalPersonAccountEnrollmentMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    deposited_funds: z.nullable(
      z.lazy(() => EnrollmentDepositedFunds$inboundSchema),
    ).optional(),
    financial_profile: z.nullable(
      z.lazy(() => EnrollmentFinancialProfile$inboundSchema),
    ).optional(),
    planned_activity: z.nullable(
      z.lazy(() => EnrollmentPlannedActivity$inboundSchema),
    ).optional(),
    related_pep_details: z.nullable(
      z.lazy(() => EnrollmentRelatedPepDetails$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "deposited_funds": "depositedFunds",
      "financial_profile": "financialProfile",
      "planned_activity": "plannedActivity",
      "related_pep_details": "relatedPepDetails",
    });
  });

/** @internal */
export type ForeignNaturalPersonAccountEnrollmentMetadata$Outbound = {
  deposited_funds?: EnrollmentDepositedFunds$Outbound | null | undefined;
  financial_profile?: EnrollmentFinancialProfile$Outbound | null | undefined;
  planned_activity?: EnrollmentPlannedActivity$Outbound | null | undefined;
  related_pep_details?: EnrollmentRelatedPepDetails$Outbound | null | undefined;
};

/** @internal */
export const ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema:
  z.ZodType<
    ForeignNaturalPersonAccountEnrollmentMetadata$Outbound,
    z.ZodTypeDef,
    ForeignNaturalPersonAccountEnrollmentMetadata
  > = z.object({
    depositedFunds: z.nullable(
      z.lazy(() => EnrollmentDepositedFunds$outboundSchema),
    ).optional(),
    financialProfile: z.nullable(
      z.lazy(() => EnrollmentFinancialProfile$outboundSchema),
    ).optional(),
    plannedActivity: z.nullable(
      z.lazy(() => EnrollmentPlannedActivity$outboundSchema),
    ).optional(),
    relatedPepDetails: z.nullable(
      z.lazy(() => EnrollmentRelatedPepDetails$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      depositedFunds: "deposited_funds",
      financialProfile: "financial_profile",
      plannedActivity: "planned_activity",
      relatedPepDetails: "related_pep_details",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForeignNaturalPersonAccountEnrollmentMetadata$ {
  /** @deprecated use `ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema;
  /** @deprecated use `ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema;
  /** @deprecated use `ForeignNaturalPersonAccountEnrollmentMetadata$Outbound` instead. */
  export type Outbound = ForeignNaturalPersonAccountEnrollmentMetadata$Outbound;
}

/** @internal */
export const ForeignIndividualAccountEnrollmentMetadata$inboundSchema:
  z.ZodType<ForeignIndividualAccountEnrollmentMetadata, z.ZodTypeDef, unknown> =
    z.object({
      dividend_reinvestment_plan:
        EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
          .optional(),
      fdic_cash_sweep:
        EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$inboundSchema
          .optional(),
      foreign_natural_person_account_enrollment_metadata: z.nullable(
        z.lazy(() =>
          ForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema
        ),
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "dividend_reinvestment_plan": "dividendReinvestmentPlan",
        "fdic_cash_sweep": "fdicCashSweep",
        "foreign_natural_person_account_enrollment_metadata":
          "foreignNaturalPersonAccountEnrollmentMetadata",
      });
    });

/** @internal */
export type ForeignIndividualAccountEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
  foreign_natural_person_account_enrollment_metadata?:
    | ForeignNaturalPersonAccountEnrollmentMetadata$Outbound
    | null
    | undefined;
};

/** @internal */
export const ForeignIndividualAccountEnrollmentMetadata$outboundSchema:
  z.ZodType<
    ForeignIndividualAccountEnrollmentMetadata$Outbound,
    z.ZodTypeDef,
    ForeignIndividualAccountEnrollmentMetadata
  > = z.object({
    dividendReinvestmentPlan:
      EnrollmentForeignIndividualAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep:
      EnrollmentForeignIndividualAccountEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
    foreignNaturalPersonAccountEnrollmentMetadata: z.nullable(
      z.lazy(() =>
        ForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      dividendReinvestmentPlan: "dividend_reinvestment_plan",
      fdicCashSweep: "fdic_cash_sweep",
      foreignNaturalPersonAccountEnrollmentMetadata:
        "foreign_natural_person_account_enrollment_metadata",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForeignIndividualAccountEnrollmentMetadata$ {
  /** @deprecated use `ForeignIndividualAccountEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    ForeignIndividualAccountEnrollmentMetadata$inboundSchema;
  /** @deprecated use `ForeignIndividualAccountEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    ForeignIndividualAccountEnrollmentMetadata$outboundSchema;
  /** @deprecated use `ForeignIndividualAccountEnrollmentMetadata$Outbound` instead. */
  export type Outbound = ForeignIndividualAccountEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$Outbound =
  {
    value?: string | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds,
    z.ZodTypeDef,
    unknown
  > = z.object({
    initial_deposit_amount: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$inboundSchema
      ),
    ).optional(),
    initial_deposit_source: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "initial_deposit_amount": "initialDepositAmount",
      "initial_deposit_source": "initialDepositSource",
    });
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$Outbound =
  {
    initial_deposit_amount?:
      | EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$Outbound
      | null
      | undefined;
    initial_deposit_source?: string | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds
  > = z.object({
    initialDepositAmount: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataInitialDepositAmount$outboundSchema
      ),
    ).optional(),
    initialDepositSource: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      initialDepositAmount: "initial_deposit_amount",
      initialDepositSource: "initial_deposit_source",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts,
    z.ZodTypeDef,
    unknown
  > = z.object({
    account_names: z.array(z.string()).optional(),
    account_numbers: z.array(z.string()).optional(),
    owner_has_other_accounts_at_apex: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "account_names": "accountNames",
      "account_numbers": "accountNumbers",
      "owner_has_other_accounts_at_apex": "ownerHasOtherAccountsAtApex",
    });
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$Outbound =
  {
    account_names?: Array<string> | undefined;
    account_numbers?: Array<string> | undefined;
    owner_has_other_accounts_at_apex?: boolean | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts
  > = z.object({
    accountNames: z.array(z.string()).optional(),
    accountNumbers: z.array(z.string()).optional(),
    ownerHasOtherAccountsAtApex: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      accountNames: "account_names",
      accountNumbers: "account_numbers",
      ownerHasOtherAccountsAtApex: "owner_has_other_accounts_at_apex",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile,
    z.ZodTypeDef,
    unknown
  > = z.object({
    banking_relationships: z.array(z.string()).optional(),
    other_accounts: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$inboundSchema
      ),
    ).optional(),
    primary_source_of_deposited_funds: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "banking_relationships": "bankingRelationships",
      "other_accounts": "otherAccounts",
      "primary_source_of_deposited_funds": "primarySourceOfDepositedFunds",
    });
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$Outbound =
  {
    banking_relationships?: Array<string> | undefined;
    other_accounts?:
      | EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$Outbound
      | null
      | undefined;
    primary_source_of_deposited_funds?: string | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile
  > = z.object({
    bankingRelationships: z.array(z.string()).optional(),
    otherAccounts: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataOtherAccounts$outboundSchema
      ),
    ).optional(),
    primarySourceOfDepositedFunds: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      bankingRelationships: "banking_relationships",
      otherAccounts: "other_accounts",
      primarySourceOfDepositedFunds: "primary_source_of_deposited_funds",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    foreign_bond_trading: z.boolean().optional(),
    foreign_bond_trading_detail: z.array(ForeignBondTradingDetail$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "foreign_bond_trading": "foreignBondTrading",
      "foreign_bond_trading_detail": "foreignBondTradingDetail",
    });
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$Outbound =
  {
    foreign_bond_trading?: boolean | undefined;
    foreign_bond_trading_detail?:
      | Array<ForeignBondTradingDetail$Outbound>
      | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails
  > = z.object({
    foreignBondTrading: z.boolean().optional(),
    foreignBondTradingDetail: z.array(ForeignBondTradingDetail$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      foreignBondTrading: "foreign_bond_trading",
      foreignBondTradingDetail: "foreign_bond_trading_detail",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound =
  {
    value?: string | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    low_priced_securities: z.boolean().optional(),
    low_priced_securities_percentage: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "low_priced_securities": "lowPricedSecurities",
      "low_priced_securities_percentage": "lowPricedSecuritiesPercentage",
    });
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$Outbound =
  {
    low_priced_securities?: boolean | undefined;
    low_priced_securities_percentage?:
      | EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound
      | null
      | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities
  > = z.object({
    lowPricedSecurities: z.boolean().optional(),
    lowPricedSecuritiesPercentage: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      lowPricedSecurities: "low_priced_securities",
      lowPricedSecuritiesPercentage: "low_priced_securities_percentage",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityTypeOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityTypeOpen,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityTypeOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$outboundSchema;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequencyOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequencyOpen,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequencyOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$outboundSchema;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    foreign_bond_trading_details: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$inboundSchema
      ),
    ).optional(),
    low_priced_securities: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$inboundSchema
      ),
    ).optional(),
    primary_account_activity_type:
      EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$inboundSchema
        .optional(),
    withdrawal_frequency:
      EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "foreign_bond_trading_details": "foreignBondTradingDetails",
      "low_priced_securities": "lowPricedSecurities",
      "primary_account_activity_type": "primaryAccountActivityType",
      "withdrawal_frequency": "withdrawalFrequency",
    });
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$Outbound =
  {
    foreign_bond_trading_details?:
      | EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$Outbound
      | null
      | undefined;
    low_priced_securities?:
      | EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$Outbound
      | null
      | undefined;
    primary_account_activity_type?: string | undefined;
    withdrawal_frequency?: string | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity
  > = z.object({
    foreignBondTradingDetails: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataForeignBondTradingDetails$outboundSchema
      ),
    ).optional(),
    lowPricedSecurities: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataLowPricedSecurities$outboundSchema
      ),
    ).optional(),
    primaryAccountActivityType:
      EnrollmentForeignJointAccountEnrollmentMetadataPrimaryAccountActivityType$outboundSchema
        .optional(),
    withdrawalFrequency:
      EnrollmentForeignJointAccountEnrollmentMetadataWithdrawalFrequency$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      foreignBondTradingDetails: "foreign_bond_trading_details",
      lowPricedSecurities: "low_priced_securities",
      primaryAccountActivityType: "primary_account_activity_type",
      withdrawalFrequency: "withdrawal_frequency",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$Outbound;
}

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    direct_or_indirect_related_peps: z.boolean().optional(),
    related_peps: z.array(RelatedPep$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "direct_or_indirect_related_peps": "directOrIndirectRelatedPeps",
      "related_peps": "relatedPeps",
    });
  });

/** @internal */
export type EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$Outbound =
  {
    direct_or_indirect_related_peps?: boolean | undefined;
    related_peps?: Array<RelatedPep$Outbound> | undefined;
  };

/** @internal */
export const EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema:
  z.ZodType<
    EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails
  > = z.object({
    directOrIndirectRelatedPeps: z.boolean().optional(),
    relatedPeps: z.array(RelatedPep$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      directOrIndirectRelatedPeps: "direct_or_indirect_related_peps",
      relatedPeps: "related_peps",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$ {
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema;
  /** @deprecated use `EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$Outbound;
}

/** @internal */
export const EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema:
  z.ZodType<
    EnrollmentForeignNaturalPersonAccountEnrollmentMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    deposited_funds: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$inboundSchema
      ),
    ).optional(),
    financial_profile: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$inboundSchema
      ),
    ).optional(),
    planned_activity: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$inboundSchema
      ),
    ).optional(),
    related_pep_details: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "deposited_funds": "depositedFunds",
      "financial_profile": "financialProfile",
      "planned_activity": "plannedActivity",
      "related_pep_details": "relatedPepDetails",
    });
  });

/** @internal */
export type EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$Outbound = {
  deposited_funds?:
    | EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$Outbound
    | null
    | undefined;
  financial_profile?:
    | EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$Outbound
    | null
    | undefined;
  planned_activity?:
    | EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$Outbound
    | null
    | undefined;
  related_pep_details?:
    | EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$Outbound
    | null
    | undefined;
};

/** @internal */
export const EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema:
  z.ZodType<
    EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$Outbound,
    z.ZodTypeDef,
    EnrollmentForeignNaturalPersonAccountEnrollmentMetadata
  > = z.object({
    depositedFunds: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataDepositedFunds$outboundSchema
      ),
    ).optional(),
    financialProfile: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataFinancialProfile$outboundSchema
      ),
    ).optional(),
    plannedActivity: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataPlannedActivity$outboundSchema
      ),
    ).optional(),
    relatedPepDetails: z.nullable(
      z.lazy(() =>
        EnrollmentForeignJointAccountEnrollmentMetadataRelatedPepDetails$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      depositedFunds: "deposited_funds",
      financialProfile: "financial_profile",
      plannedActivity: "planned_activity",
      relatedPepDetails: "related_pep_details",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$ {
  /** @deprecated use `EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema;
  /** @deprecated use `EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema;
  /** @deprecated use `EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$Outbound` instead. */
  export type Outbound =
    EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$Outbound;
}

/** @internal */
export const ForeignJointAccountEnrollmentMetadata$inboundSchema: z.ZodType<
  ForeignJointAccountEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
  foreign_natural_person_account_enrollment_metadata: z.nullable(
    z.lazy(() =>
      EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$inboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
    "foreign_natural_person_account_enrollment_metadata":
      "foreignNaturalPersonAccountEnrollmentMetadata",
  });
});

/** @internal */
export type ForeignJointAccountEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
  foreign_natural_person_account_enrollment_metadata?:
    | EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$Outbound
    | null
    | undefined;
};

/** @internal */
export const ForeignJointAccountEnrollmentMetadata$outboundSchema: z.ZodType<
  ForeignJointAccountEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  ForeignJointAccountEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentForeignJointAccountEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentForeignJointAccountEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
  foreignNaturalPersonAccountEnrollmentMetadata: z.nullable(
    z.lazy(() =>
      EnrollmentForeignNaturalPersonAccountEnrollmentMetadata$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
    foreignNaturalPersonAccountEnrollmentMetadata:
      "foreign_natural_person_account_enrollment_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForeignJointAccountEnrollmentMetadata$ {
  /** @deprecated use `ForeignJointAccountEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    ForeignJointAccountEnrollmentMetadata$inboundSchema;
  /** @deprecated use `ForeignJointAccountEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    ForeignJointAccountEnrollmentMetadata$outboundSchema;
  /** @deprecated use `ForeignJointAccountEnrollmentMetadata$Outbound` instead. */
  export type Outbound = ForeignJointAccountEnrollmentMetadata$Outbound;
}

/** @internal */
export const FpslEnrollmentMetadata$inboundSchema: z.ZodType<
  FpslEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_percentage: z.number().optional(),
  firm_percentage: z.number().optional(),
  fpsl_msla_minimum_rate: z.number().optional(),
  introducing_broker_percentage: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_percentage": "customerPercentage",
    "firm_percentage": "firmPercentage",
    "fpsl_msla_minimum_rate": "fpslMslaMinimumRate",
    "introducing_broker_percentage": "introducingBrokerPercentage",
  });
});

/** @internal */
export type FpslEnrollmentMetadata$Outbound = {
  customer_percentage?: number | undefined;
  firm_percentage?: number | undefined;
  fpsl_msla_minimum_rate?: number | undefined;
  introducing_broker_percentage?: number | undefined;
};

/** @internal */
export const FpslEnrollmentMetadata$outboundSchema: z.ZodType<
  FpslEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  FpslEnrollmentMetadata
> = z.object({
  customerPercentage: z.number().optional(),
  firmPercentage: z.number().optional(),
  fpslMslaMinimumRate: z.number().optional(),
  introducingBrokerPercentage: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    customerPercentage: "customer_percentage",
    firmPercentage: "firm_percentage",
    fpslMslaMinimumRate: "fpsl_msla_minimum_rate",
    introducingBrokerPercentage: "introducing_broker_percentage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FpslEnrollmentMetadata$ {
  /** @deprecated use `FpslEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = FpslEnrollmentMetadata$inboundSchema;
  /** @deprecated use `FpslEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = FpslEnrollmentMetadata$outboundSchema;
  /** @deprecated use `FpslEnrollmentMetadata$Outbound` instead. */
  export type Outbound = FpslEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentIndividualEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentIndividualEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIndividualEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIndividualEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentIndividualEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentIndividualEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentIndividualEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIndividualEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentIndividualEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentIndividualEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const IndividualEnrollmentMetadata$inboundSchema: z.ZodType<
  IndividualEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type IndividualEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const IndividualEnrollmentMetadata$outboundSchema: z.ZodType<
  IndividualEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  IndividualEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentIndividualEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentIndividualEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndividualEnrollmentMetadata$ {
  /** @deprecated use `IndividualEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = IndividualEnrollmentMetadata$inboundSchema;
  /** @deprecated use `IndividualEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = IndividualEnrollmentMetadata$outboundSchema;
  /** @deprecated use `IndividualEnrollmentMetadata$Outbound` instead. */
  export type Outbound = IndividualEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const InheritedFromOwnerBirthDate$inboundSchema: z.ZodType<
  InheritedFromOwnerBirthDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type InheritedFromOwnerBirthDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const InheritedFromOwnerBirthDate$outboundSchema: z.ZodType<
  InheritedFromOwnerBirthDate$Outbound,
  z.ZodTypeDef,
  InheritedFromOwnerBirthDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InheritedFromOwnerBirthDate$ {
  /** @deprecated use `InheritedFromOwnerBirthDate$inboundSchema` instead. */
  export const inboundSchema = InheritedFromOwnerBirthDate$inboundSchema;
  /** @deprecated use `InheritedFromOwnerBirthDate$outboundSchema` instead. */
  export const outboundSchema = InheritedFromOwnerBirthDate$outboundSchema;
  /** @deprecated use `InheritedFromOwnerBirthDate$Outbound` instead. */
  export type Outbound = InheritedFromOwnerBirthDate$Outbound;
}

/** @internal */
export const InheritedFromOwnerDeathDate$inboundSchema: z.ZodType<
  InheritedFromOwnerDeathDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type InheritedFromOwnerDeathDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const InheritedFromOwnerDeathDate$outboundSchema: z.ZodType<
  InheritedFromOwnerDeathDate$Outbound,
  z.ZodTypeDef,
  InheritedFromOwnerDeathDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InheritedFromOwnerDeathDate$ {
  /** @deprecated use `InheritedFromOwnerDeathDate$inboundSchema` instead. */
  export const inboundSchema = InheritedFromOwnerDeathDate$inboundSchema;
  /** @deprecated use `InheritedFromOwnerDeathDate$outboundSchema` instead. */
  export const outboundSchema = InheritedFromOwnerDeathDate$outboundSchema;
  /** @deprecated use `InheritedFromOwnerDeathDate$Outbound` instead. */
  export type Outbound = InheritedFromOwnerDeathDate$Outbound;
}

/** @internal */
export const IraBeneficiaryEnrollmentMetadata$inboundSchema: z.ZodType<
  IraBeneficiaryEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
  inherited_from_owner_birth_date: z.nullable(
    z.lazy(() => InheritedFromOwnerBirthDate$inboundSchema),
  ).optional(),
  inherited_from_owner_death_date: z.nullable(
    z.lazy(() => InheritedFromOwnerDeathDate$inboundSchema),
  ).optional(),
  inherited_from_owner_name: z.string().optional(),
  inheritor_is_decedents_spouse: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
    "inherited_from_owner_birth_date": "inheritedFromOwnerBirthDate",
    "inherited_from_owner_death_date": "inheritedFromOwnerDeathDate",
    "inherited_from_owner_name": "inheritedFromOwnerName",
    "inheritor_is_decedents_spouse": "inheritorIsDecedentsSpouse",
  });
});

/** @internal */
export type IraBeneficiaryEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
  inherited_from_owner_birth_date?:
    | InheritedFromOwnerBirthDate$Outbound
    | null
    | undefined;
  inherited_from_owner_death_date?:
    | InheritedFromOwnerDeathDate$Outbound
    | null
    | undefined;
  inherited_from_owner_name?: string | undefined;
  inheritor_is_decedents_spouse?: boolean | undefined;
};

/** @internal */
export const IraBeneficiaryEnrollmentMetadata$outboundSchema: z.ZodType<
  IraBeneficiaryEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  IraBeneficiaryEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentIraBeneficiaryEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentIraBeneficiaryEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
  inheritedFromOwnerBirthDate: z.nullable(
    z.lazy(() => InheritedFromOwnerBirthDate$outboundSchema),
  ).optional(),
  inheritedFromOwnerDeathDate: z.nullable(
    z.lazy(() => InheritedFromOwnerDeathDate$outboundSchema),
  ).optional(),
  inheritedFromOwnerName: z.string().optional(),
  inheritorIsDecedentsSpouse: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
    inheritedFromOwnerBirthDate: "inherited_from_owner_birth_date",
    inheritedFromOwnerDeathDate: "inherited_from_owner_death_date",
    inheritedFromOwnerName: "inherited_from_owner_name",
    inheritorIsDecedentsSpouse: "inheritor_is_decedents_spouse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IraBeneficiaryEnrollmentMetadata$ {
  /** @deprecated use `IraBeneficiaryEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = IraBeneficiaryEnrollmentMetadata$inboundSchema;
  /** @deprecated use `IraBeneficiaryEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = IraBeneficiaryEnrollmentMetadata$outboundSchema;
  /** @deprecated use `IraBeneficiaryEnrollmentMetadata$Outbound` instead. */
  export type Outbound = IraBeneficiaryEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const IraRolloverEnrollmentMetadata$inboundSchema: z.ZodType<
  IraRolloverEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type IraRolloverEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const IraRolloverEnrollmentMetadata$outboundSchema: z.ZodType<
  IraRolloverEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  IraRolloverEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentIraRolloverEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentIraRolloverEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IraRolloverEnrollmentMetadata$ {
  /** @deprecated use `IraRolloverEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = IraRolloverEnrollmentMetadata$inboundSchema;
  /** @deprecated use `IraRolloverEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = IraRolloverEnrollmentMetadata$outboundSchema;
  /** @deprecated use `IraRolloverEnrollmentMetadata$Outbound` instead. */
  export type Outbound = IraRolloverEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentIraRothEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentIraRothEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIraRothEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraRothEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentIraRothEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentIraRothEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraRothEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraRothEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentIraRothEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraRothEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentIraRothEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraRothEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const IraRothEnrollmentMetadata$inboundSchema: z.ZodType<
  IraRothEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentIraRothEnrollmentMetadataFdicCashSweep$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type IraRothEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const IraRothEnrollmentMetadata$outboundSchema: z.ZodType<
  IraRothEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  IraRothEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentIraRothEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep: EnrollmentIraRothEnrollmentMetadataFdicCashSweep$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IraRothEnrollmentMetadata$ {
  /** @deprecated use `IraRothEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = IraRothEnrollmentMetadata$inboundSchema;
  /** @deprecated use `IraRothEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = IraRothEnrollmentMetadata$outboundSchema;
  /** @deprecated use `IraRothEnrollmentMetadata$Outbound` instead. */
  export type Outbound = IraRothEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentIraSepEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentIraSepEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIraSepEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraSepEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentIraSepEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentIraSepEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraSepEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraSepEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentIraSepEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraSepEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentIraSepEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraSepEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const IraSepEnrollmentMetadata$inboundSchema: z.ZodType<
  IraSepEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep: EnrollmentIraSepEnrollmentMetadataFdicCashSweep$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type IraSepEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const IraSepEnrollmentMetadata$outboundSchema: z.ZodType<
  IraSepEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  IraSepEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentIraSepEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep: EnrollmentIraSepEnrollmentMetadataFdicCashSweep$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IraSepEnrollmentMetadata$ {
  /** @deprecated use `IraSepEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = IraSepEnrollmentMetadata$inboundSchema;
  /** @deprecated use `IraSepEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = IraSepEnrollmentMetadata$outboundSchema;
  /** @deprecated use `IraSepEnrollmentMetadata$Outbound` instead. */
  export type Outbound = IraSepEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const IraSimpleEnrollmentMetadata$inboundSchema: z.ZodType<
  IraSimpleEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type IraSimpleEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const IraSimpleEnrollmentMetadata$outboundSchema: z.ZodType<
  IraSimpleEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  IraSimpleEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentIraSimpleEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentIraSimpleEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IraSimpleEnrollmentMetadata$ {
  /** @deprecated use `IraSimpleEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = IraSimpleEnrollmentMetadata$inboundSchema;
  /** @deprecated use `IraSimpleEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = IraSimpleEnrollmentMetadata$outboundSchema;
  /** @deprecated use `IraSimpleEnrollmentMetadata$Outbound` instead. */
  export type Outbound = IraSimpleEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const IraTraditionalEnrollmentMetadata$inboundSchema: z.ZodType<
  IraTraditionalEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type IraTraditionalEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const IraTraditionalEnrollmentMetadata$outboundSchema: z.ZodType<
  IraTraditionalEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  IraTraditionalEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentIraTraditionalEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentIraTraditionalEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IraTraditionalEnrollmentMetadata$ {
  /** @deprecated use `IraTraditionalEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = IraTraditionalEnrollmentMetadata$inboundSchema;
  /** @deprecated use `IraTraditionalEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = IraTraditionalEnrollmentMetadata$outboundSchema;
  /** @deprecated use `IraTraditionalEnrollmentMetadata$Outbound` instead. */
  export type Outbound = IraTraditionalEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$inboundSchema:
  z.ZodType<
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCoupleOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$outboundSchema:
  z.ZodType<
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCoupleOpen,
    z.ZodTypeDef,
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCoupleOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$ {
  /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$inboundSchema;
  /** @deprecated use `EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$outboundSchema;
}

/** @internal */
export const JointCommunityPropertyEnrollmentMetadata$inboundSchema: z.ZodType<
  JointCommunityPropertyEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
  legal_residency_state_of_married_couple:
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
    "legal_residency_state_of_married_couple":
      "legalResidencyStateOfMarriedCouple",
  });
});

/** @internal */
export type JointCommunityPropertyEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
  legal_residency_state_of_married_couple?: string | undefined;
};

/** @internal */
export const JointCommunityPropertyEnrollmentMetadata$outboundSchema: z.ZodType<
  JointCommunityPropertyEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  JointCommunityPropertyEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentJointCommunityPropertyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentJointCommunityPropertyEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
  legalResidencyStateOfMarriedCouple:
    EnrollmentJointCommunityPropertyEnrollmentMetadataLegalResidencyStateOfMarriedCouple$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
    legalResidencyStateOfMarriedCouple:
      "legal_residency_state_of_married_couple",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JointCommunityPropertyEnrollmentMetadata$ {
  /** @deprecated use `JointCommunityPropertyEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    JointCommunityPropertyEnrollmentMetadata$inboundSchema;
  /** @deprecated use `JointCommunityPropertyEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    JointCommunityPropertyEnrollmentMetadata$outboundSchema;
  /** @deprecated use `JointCommunityPropertyEnrollmentMetadata$Outbound` instead. */
  export type Outbound = JointCommunityPropertyEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const EnrollmentLegalResidencyStateOfMarriedCouple$inboundSchema:
  z.ZodType<
    EnrollmentLegalResidencyStateOfMarriedCoupleOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentLegalResidencyStateOfMarriedCouple),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentLegalResidencyStateOfMarriedCouple$outboundSchema:
  z.ZodType<
    EnrollmentLegalResidencyStateOfMarriedCoupleOpen,
    z.ZodTypeDef,
    EnrollmentLegalResidencyStateOfMarriedCoupleOpen
  > = z.union([
    z.nativeEnum(EnrollmentLegalResidencyStateOfMarriedCouple),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLegalResidencyStateOfMarriedCouple$ {
  /** @deprecated use `EnrollmentLegalResidencyStateOfMarriedCouple$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLegalResidencyStateOfMarriedCouple$inboundSchema;
  /** @deprecated use `EnrollmentLegalResidencyStateOfMarriedCouple$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLegalResidencyStateOfMarriedCouple$outboundSchema;
}

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadata$inboundSchema: z.ZodType<
  JointTenantsByEntiretyEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
  legal_residency_state_of_married_couple:
    EnrollmentLegalResidencyStateOfMarriedCouple$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
    "legal_residency_state_of_married_couple":
      "legalResidencyStateOfMarriedCouple",
  });
});

/** @internal */
export type JointTenantsByEntiretyEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
  legal_residency_state_of_married_couple?: string | undefined;
};

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadata$outboundSchema: z.ZodType<
  JointTenantsByEntiretyEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  JointTenantsByEntiretyEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentJointTenantsByEntiretyEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
  legalResidencyStateOfMarriedCouple:
    EnrollmentLegalResidencyStateOfMarriedCouple$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
    legalResidencyStateOfMarriedCouple:
      "legal_residency_state_of_married_couple",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JointTenantsByEntiretyEnrollmentMetadata$ {
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    JointTenantsByEntiretyEnrollmentMetadata$inboundSchema;
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    JointTenantsByEntiretyEnrollmentMetadata$outboundSchema;
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadata$Outbound` instead. */
  export type Outbound = JointTenantsByEntiretyEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const JointTenantsInCommonEnrollmentMetadata$inboundSchema: z.ZodType<
  JointTenantsInCommonEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep:
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type JointTenantsInCommonEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const JointTenantsInCommonEnrollmentMetadata$outboundSchema: z.ZodType<
  JointTenantsInCommonEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  JointTenantsInCommonEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentJointTenantsInCommonEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep:
    EnrollmentJointTenantsInCommonEnrollmentMetadataFdicCashSweep$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JointTenantsInCommonEnrollmentMetadata$ {
  /** @deprecated use `JointTenantsInCommonEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    JointTenantsInCommonEnrollmentMetadata$inboundSchema;
  /** @deprecated use `JointTenantsInCommonEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    JointTenantsInCommonEnrollmentMetadata$outboundSchema;
  /** @deprecated use `JointTenantsInCommonEnrollmentMetadata$Outbound` instead. */
  export type Outbound = JointTenantsInCommonEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(
      EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema:
  z.ZodType<
    JointWithRightsOfSurvivorshipEnrollmentMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    dividend_reinvestment_plan:
      EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep:
      EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "dividend_reinvestment_plan": "dividendReinvestmentPlan",
      "fdic_cash_sweep": "fdicCashSweep",
    });
  });

/** @internal */
export type JointWithRightsOfSurvivorshipEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema:
  z.ZodType<
    JointWithRightsOfSurvivorshipEnrollmentMetadata$Outbound,
    z.ZodTypeDef,
    JointWithRightsOfSurvivorshipEnrollmentMetadata
  > = z.object({
    dividendReinvestmentPlan:
      EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep:
      EnrollmentJointWithRightsOfSurvivorshipEnrollmentMetadataFdicCashSweep$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      dividendReinvestmentPlan: "dividend_reinvestment_plan",
      fdicCashSweep: "fdic_cash_sweep",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JointWithRightsOfSurvivorshipEnrollmentMetadata$ {
  /** @deprecated use `JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema;
  /** @deprecated use `JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema;
  /** @deprecated use `JointWithRightsOfSurvivorshipEnrollmentMetadata$Outbound` instead. */
  export type Outbound =
    JointWithRightsOfSurvivorshipEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataInitialDepositAmount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataInitialDepositAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataInitialDepositAmount$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataInitialDepositAmount
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataInitialDepositAmount$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataInitialDepositAmount$Outbound` instead. */
  export type Outbound =
    EnrollmentLlcEnrollmentMetadataInitialDepositAmount$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataDepositedFunds,
    z.ZodTypeDef,
    unknown
  > = z.object({
    initial_deposit_amount: z.nullable(
      z.lazy(() =>
        EnrollmentLlcEnrollmentMetadataInitialDepositAmount$inboundSchema
      ),
    ).optional(),
    initial_deposit_source: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "initial_deposit_amount": "initialDepositAmount",
      "initial_deposit_source": "initialDepositSource",
    });
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataDepositedFunds$Outbound = {
  initial_deposit_amount?:
    | EnrollmentLlcEnrollmentMetadataInitialDepositAmount$Outbound
    | null
    | undefined;
  initial_deposit_source?: string | undefined;
};

/** @internal */
export const EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataDepositedFunds$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataDepositedFunds
  > = z.object({
    initialDepositAmount: z.nullable(
      z.lazy(() =>
        EnrollmentLlcEnrollmentMetadataInitialDepositAmount$outboundSchema
      ),
    ).optional(),
    initialDepositSource: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      initialDepositAmount: "initial_deposit_amount",
      initialDepositSource: "initial_deposit_source",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataDepositedFunds$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataDepositedFunds$Outbound` instead. */
  export type Outbound = EnrollmentLlcEnrollmentMetadataDepositedFunds$Outbound;
}

/** @internal */
export const EnrollmentDeterminedAccountRiskRating$inboundSchema: z.ZodType<
  EnrollmentDeterminedAccountRiskRatingOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentDeterminedAccountRiskRating),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentDeterminedAccountRiskRating$outboundSchema: z.ZodType<
  EnrollmentDeterminedAccountRiskRatingOpen,
  z.ZodTypeDef,
  EnrollmentDeterminedAccountRiskRatingOpen
> = z.union([
  z.nativeEnum(EnrollmentDeterminedAccountRiskRating),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentDeterminedAccountRiskRating$ {
  /** @deprecated use `EnrollmentDeterminedAccountRiskRating$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentDeterminedAccountRiskRating$inboundSchema;
  /** @deprecated use `EnrollmentDeterminedAccountRiskRating$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentDeterminedAccountRiskRating$outboundSchema;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataOtherAccounts,
    z.ZodTypeDef,
    unknown
  > = z.object({
    account_names: z.array(z.string()).optional(),
    account_numbers: z.array(z.string()).optional(),
    owner_has_other_accounts_at_apex: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "account_names": "accountNames",
      "account_numbers": "accountNumbers",
      "owner_has_other_accounts_at_apex": "ownerHasOtherAccountsAtApex",
    });
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataOtherAccounts$Outbound = {
  account_names?: Array<string> | undefined;
  account_numbers?: Array<string> | undefined;
  owner_has_other_accounts_at_apex?: boolean | undefined;
};

/** @internal */
export const EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataOtherAccounts$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataOtherAccounts
  > = z.object({
    accountNames: z.array(z.string()).optional(),
    accountNumbers: z.array(z.string()).optional(),
    ownerHasOtherAccountsAtApex: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      accountNames: "account_names",
      accountNumbers: "account_numbers",
      ownerHasOtherAccountsAtApex: "owner_has_other_accounts_at_apex",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataOtherAccounts$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataOtherAccounts$Outbound` instead. */
  export type Outbound = EnrollmentLlcEnrollmentMetadataOtherAccounts$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataFinancialProfile,
    z.ZodTypeDef,
    unknown
  > = z.object({
    banking_relationships: z.array(z.string()).optional(),
    other_accounts: z.nullable(
      z.lazy(() => EnrollmentLlcEnrollmentMetadataOtherAccounts$inboundSchema),
    ).optional(),
    primary_source_of_deposited_funds: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "banking_relationships": "bankingRelationships",
      "other_accounts": "otherAccounts",
      "primary_source_of_deposited_funds": "primarySourceOfDepositedFunds",
    });
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataFinancialProfile$Outbound = {
  banking_relationships?: Array<string> | undefined;
  other_accounts?:
    | EnrollmentLlcEnrollmentMetadataOtherAccounts$Outbound
    | null
    | undefined;
  primary_source_of_deposited_funds?: string | undefined;
};

/** @internal */
export const EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataFinancialProfile$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataFinancialProfile
  > = z.object({
    bankingRelationships: z.array(z.string()).optional(),
    otherAccounts: z.nullable(
      z.lazy(() => EnrollmentLlcEnrollmentMetadataOtherAccounts$outboundSchema),
    ).optional(),
    primarySourceOfDepositedFunds: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      bankingRelationships: "banking_relationships",
      otherAccounts: "other_accounts",
      primarySourceOfDepositedFunds: "primary_source_of_deposited_funds",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataFinancialProfile$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataFinancialProfile$Outbound` instead. */
  export type Outbound =
    EnrollmentLlcEnrollmentMetadataFinancialProfile$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    foreign_bond_trading: z.boolean().optional(),
    foreign_bond_trading_detail: z.array(ForeignBondTradingDetail$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "foreign_bond_trading": "foreignBondTrading",
      "foreign_bond_trading_detail": "foreignBondTradingDetail",
    });
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$Outbound =
  {
    foreign_bond_trading?: boolean | undefined;
    foreign_bond_trading_detail?:
      | Array<ForeignBondTradingDetail$Outbound>
      | undefined;
  };

/** @internal */
export const EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails
  > = z.object({
    foreignBondTrading: z.boolean().optional(),
    foreignBondTradingDetail: z.array(ForeignBondTradingDetail$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      foreignBondTrading: "foreign_bond_trading",
      foreignBondTradingDetail: "foreign_bond_trading_detail",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$Outbound` instead. */
  export type Outbound =
    EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound =
  {
    value?: string | undefined;
  };

/** @internal */
export const EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound` instead. */
  export type Outbound =
    EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataLowPricedSecurities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    low_priced_securities: z.boolean().optional(),
    low_priced_securities_percentage: z.nullable(
      z.lazy(() =>
        EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "low_priced_securities": "lowPricedSecurities",
      "low_priced_securities_percentage": "lowPricedSecuritiesPercentage",
    });
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataLowPricedSecurities$Outbound = {
  low_priced_securities?: boolean | undefined;
  low_priced_securities_percentage?:
    | EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$Outbound
    | null
    | undefined;
};

/** @internal */
export const EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataLowPricedSecurities$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataLowPricedSecurities
  > = z.object({
    lowPricedSecurities: z.boolean().optional(),
    lowPricedSecuritiesPercentage: z.nullable(
      z.lazy(() =>
        EnrollmentLlcEnrollmentMetadataLowPricedSecuritiesPercentage$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      lowPricedSecurities: "low_priced_securities",
      lowPricedSecuritiesPercentage: "low_priced_securities_percentage",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataLowPricedSecurities$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataLowPricedSecurities$Outbound` instead. */
  export type Outbound =
    EnrollmentLlcEnrollmentMetadataLowPricedSecurities$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityTypeOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityTypeOpen,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityTypeOpen
  > = z.union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$outboundSchema;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequencyOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentLlcEnrollmentMetadataWithdrawalFrequency),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequencyOpen,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequencyOpen
  > = z.union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataWithdrawalFrequency),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$outboundSchema;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataPlannedActivity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    foreign_bond_trading_details: z.nullable(
      z.lazy(() =>
        EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$inboundSchema
      ),
    ).optional(),
    low_priced_securities: z.nullable(
      z.lazy(() =>
        EnrollmentLlcEnrollmentMetadataLowPricedSecurities$inboundSchema
      ),
    ).optional(),
    primary_account_activity_type:
      EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$inboundSchema
        .optional(),
    withdrawal_frequency:
      EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "foreign_bond_trading_details": "foreignBondTradingDetails",
      "low_priced_securities": "lowPricedSecurities",
      "primary_account_activity_type": "primaryAccountActivityType",
      "withdrawal_frequency": "withdrawalFrequency",
    });
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataPlannedActivity$Outbound = {
  foreign_bond_trading_details?:
    | EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$Outbound
    | null
    | undefined;
  low_priced_securities?:
    | EnrollmentLlcEnrollmentMetadataLowPricedSecurities$Outbound
    | null
    | undefined;
  primary_account_activity_type?: string | undefined;
  withdrawal_frequency?: string | undefined;
};

/** @internal */
export const EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataPlannedActivity$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataPlannedActivity
  > = z.object({
    foreignBondTradingDetails: z.nullable(
      z.lazy(() =>
        EnrollmentLlcEnrollmentMetadataForeignBondTradingDetails$outboundSchema
      ),
    ).optional(),
    lowPricedSecurities: z.nullable(
      z.lazy(() =>
        EnrollmentLlcEnrollmentMetadataLowPricedSecurities$outboundSchema
      ),
    ).optional(),
    primaryAccountActivityType:
      EnrollmentLlcEnrollmentMetadataPrimaryAccountActivityType$outboundSchema
        .optional(),
    withdrawalFrequency:
      EnrollmentLlcEnrollmentMetadataWithdrawalFrequency$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      foreignBondTradingDetails: "foreign_bond_trading_details",
      lowPricedSecurities: "low_priced_securities",
      primaryAccountActivityType: "primary_account_activity_type",
      withdrawalFrequency: "withdrawal_frequency",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataPlannedActivity$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataPlannedActivity$Outbound` instead. */
  export type Outbound =
    EnrollmentLlcEnrollmentMetadataPlannedActivity$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataRelatedPepDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    direct_or_indirect_related_peps: z.boolean().optional(),
    related_peps: z.array(RelatedPep$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "direct_or_indirect_related_peps": "directOrIndirectRelatedPeps",
      "related_peps": "relatedPeps",
    });
  });

/** @internal */
export type EnrollmentLlcEnrollmentMetadataRelatedPepDetails$Outbound = {
  direct_or_indirect_related_peps?: boolean | undefined;
  related_peps?: Array<RelatedPep$Outbound> | undefined;
};

/** @internal */
export const EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataRelatedPepDetails$Outbound,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataRelatedPepDetails
  > = z.object({
    directOrIndirectRelatedPeps: z.boolean().optional(),
    relatedPeps: z.array(RelatedPep$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      directOrIndirectRelatedPeps: "direct_or_indirect_related_peps",
      relatedPeps: "related_peps",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataRelatedPepDetails$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataRelatedPepDetails$Outbound` instead. */
  export type Outbound =
    EnrollmentLlcEnrollmentMetadataRelatedPepDetails$Outbound;
}

/** @internal */
export const EnrollmentEddAccountEnrollmentMetadata$inboundSchema: z.ZodType<
  EnrollmentEddAccountEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  deposited_funds: z.nullable(
    z.lazy(() => EnrollmentLlcEnrollmentMetadataDepositedFunds$inboundSchema),
  ).optional(),
  determined_account_risk_rating:
    EnrollmentDeterminedAccountRiskRating$inboundSchema.optional(),
  financial_profile: z.nullable(
    z.lazy(() => EnrollmentLlcEnrollmentMetadataFinancialProfile$inboundSchema),
  ).optional(),
  planned_activity: z.nullable(
    z.lazy(() => EnrollmentLlcEnrollmentMetadataPlannedActivity$inboundSchema),
  ).optional(),
  related_pep_details: z.nullable(
    z.lazy(() =>
      EnrollmentLlcEnrollmentMetadataRelatedPepDetails$inboundSchema
    ),
  ).optional(),
  scope_of_business: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "deposited_funds": "depositedFunds",
    "determined_account_risk_rating": "determinedAccountRiskRating",
    "financial_profile": "financialProfile",
    "planned_activity": "plannedActivity",
    "related_pep_details": "relatedPepDetails",
    "scope_of_business": "scopeOfBusiness",
  });
});

/** @internal */
export type EnrollmentEddAccountEnrollmentMetadata$Outbound = {
  deposited_funds?:
    | EnrollmentLlcEnrollmentMetadataDepositedFunds$Outbound
    | null
    | undefined;
  determined_account_risk_rating?: string | undefined;
  financial_profile?:
    | EnrollmentLlcEnrollmentMetadataFinancialProfile$Outbound
    | null
    | undefined;
  planned_activity?:
    | EnrollmentLlcEnrollmentMetadataPlannedActivity$Outbound
    | null
    | undefined;
  related_pep_details?:
    | EnrollmentLlcEnrollmentMetadataRelatedPepDetails$Outbound
    | null
    | undefined;
  scope_of_business?: string | undefined;
};

/** @internal */
export const EnrollmentEddAccountEnrollmentMetadata$outboundSchema: z.ZodType<
  EnrollmentEddAccountEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  EnrollmentEddAccountEnrollmentMetadata
> = z.object({
  depositedFunds: z.nullable(
    z.lazy(() => EnrollmentLlcEnrollmentMetadataDepositedFunds$outboundSchema),
  ).optional(),
  determinedAccountRiskRating:
    EnrollmentDeterminedAccountRiskRating$outboundSchema.optional(),
  financialProfile: z.nullable(
    z.lazy(() =>
      EnrollmentLlcEnrollmentMetadataFinancialProfile$outboundSchema
    ),
  ).optional(),
  plannedActivity: z.nullable(
    z.lazy(() => EnrollmentLlcEnrollmentMetadataPlannedActivity$outboundSchema),
  ).optional(),
  relatedPepDetails: z.nullable(
    z.lazy(() =>
      EnrollmentLlcEnrollmentMetadataRelatedPepDetails$outboundSchema
    ),
  ).optional(),
  scopeOfBusiness: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    depositedFunds: "deposited_funds",
    determinedAccountRiskRating: "determined_account_risk_rating",
    financialProfile: "financial_profile",
    plannedActivity: "planned_activity",
    relatedPepDetails: "related_pep_details",
    scopeOfBusiness: "scope_of_business",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentEddAccountEnrollmentMetadata$ {
  /** @deprecated use `EnrollmentEddAccountEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentEddAccountEnrollmentMetadata$inboundSchema;
  /** @deprecated use `EnrollmentEddAccountEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentEddAccountEnrollmentMetadata$outboundSchema;
  /** @deprecated use `EnrollmentEddAccountEnrollmentMetadata$Outbound` instead. */
  export type Outbound = EnrollmentEddAccountEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentLlcEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentLlcEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentLlcEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentLlcEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentLlcEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentLlcEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentLlcEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentLlcEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentLlcEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentLlcEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const LlcEnrollmentMetadata$inboundSchema: z.ZodType<
  LlcEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  edd_account_enrollment_metadata: z.nullable(
    z.lazy(() => EnrollmentEddAccountEnrollmentMetadata$inboundSchema),
  ).optional(),
  fdic_cash_sweep: EnrollmentLlcEnrollmentMetadataFdicCashSweep$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "edd_account_enrollment_metadata": "eddAccountEnrollmentMetadata",
    "fdic_cash_sweep": "fdicCashSweep",
  });
});

/** @internal */
export type LlcEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  edd_account_enrollment_metadata?:
    | EnrollmentEddAccountEnrollmentMetadata$Outbound
    | null
    | undefined;
  fdic_cash_sweep?: string | undefined;
};

/** @internal */
export const LlcEnrollmentMetadata$outboundSchema: z.ZodType<
  LlcEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  LlcEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentLlcEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  eddAccountEnrollmentMetadata: z.nullable(
    z.lazy(() => EnrollmentEddAccountEnrollmentMetadata$outboundSchema),
  ).optional(),
  fdicCashSweep: EnrollmentLlcEnrollmentMetadataFdicCashSweep$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    eddAccountEnrollmentMetadata: "edd_account_enrollment_metadata",
    fdicCashSweep: "fdic_cash_sweep",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LlcEnrollmentMetadata$ {
  /** @deprecated use `LlcEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = LlcEnrollmentMetadata$inboundSchema;
  /** @deprecated use `LlcEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = LlcEnrollmentMetadata$outboundSchema;
  /** @deprecated use `LlcEnrollmentMetadata$Outbound` instead. */
  export type Outbound = LlcEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentOperatingPurpose$inboundSchema: z.ZodType<
  EnrollmentOperatingPurposeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentOperatingPurpose),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentOperatingPurpose$outboundSchema: z.ZodType<
  EnrollmentOperatingPurposeOpen,
  z.ZodTypeDef,
  EnrollmentOperatingPurposeOpen
> = z.union([
  z.nativeEnum(EnrollmentOperatingPurpose),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentOperatingPurpose$ {
  /** @deprecated use `EnrollmentOperatingPurpose$inboundSchema` instead. */
  export const inboundSchema = EnrollmentOperatingPurpose$inboundSchema;
  /** @deprecated use `EnrollmentOperatingPurpose$outboundSchema` instead. */
  export const outboundSchema = EnrollmentOperatingPurpose$outboundSchema;
}

/** @internal */
export const EnrollmentTaxAuthority$inboundSchema: z.ZodType<
  EnrollmentTaxAuthorityOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentTaxAuthority),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentTaxAuthority$outboundSchema: z.ZodType<
  EnrollmentTaxAuthorityOpen,
  z.ZodTypeDef,
  EnrollmentTaxAuthorityOpen
> = z.union([
  z.nativeEnum(EnrollmentTaxAuthority),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentTaxAuthority$ {
  /** @deprecated use `EnrollmentTaxAuthority$inboundSchema` instead. */
  export const inboundSchema = EnrollmentTaxAuthority$inboundSchema;
  /** @deprecated use `EnrollmentTaxAuthority$outboundSchema` instead. */
  export const outboundSchema = EnrollmentTaxAuthority$outboundSchema;
}

/** @internal */
export const EnrollmentWithholdingType$inboundSchema: z.ZodType<
  EnrollmentWithholdingTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentWithholdingType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentWithholdingType$outboundSchema: z.ZodType<
  EnrollmentWithholdingTypeOpen,
  z.ZodTypeDef,
  EnrollmentWithholdingTypeOpen
> = z.union([
  z.nativeEnum(EnrollmentWithholdingType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentWithholdingType$ {
  /** @deprecated use `EnrollmentWithholdingType$inboundSchema` instead. */
  export const inboundSchema = EnrollmentWithholdingType$inboundSchema;
  /** @deprecated use `EnrollmentWithholdingType$outboundSchema` instead. */
  export const outboundSchema = EnrollmentWithholdingType$outboundSchema;
}

/** @internal */
export const TaxWithholdingMetadata$inboundSchema: z.ZodType<
  TaxWithholdingMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  tax_authority: EnrollmentTaxAuthority$inboundSchema.optional(),
  withholding_type: EnrollmentWithholdingType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "tax_authority": "taxAuthority",
    "withholding_type": "withholdingType",
  });
});

/** @internal */
export type TaxWithholdingMetadata$Outbound = {
  tax_authority?: string | undefined;
  withholding_type?: string | undefined;
};

/** @internal */
export const TaxWithholdingMetadata$outboundSchema: z.ZodType<
  TaxWithholdingMetadata$Outbound,
  z.ZodTypeDef,
  TaxWithholdingMetadata
> = z.object({
  taxAuthority: EnrollmentTaxAuthority$outboundSchema.optional(),
  withholdingType: EnrollmentWithholdingType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    taxAuthority: "tax_authority",
    withholdingType: "withholding_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxWithholdingMetadata$ {
  /** @deprecated use `TaxWithholdingMetadata$inboundSchema` instead. */
  export const inboundSchema = TaxWithholdingMetadata$inboundSchema;
  /** @deprecated use `TaxWithholdingMetadata$outboundSchema` instead. */
  export const outboundSchema = TaxWithholdingMetadata$outboundSchema;
  /** @deprecated use `TaxWithholdingMetadata$Outbound` instead. */
  export type Outbound = TaxWithholdingMetadata$Outbound;
}

/** @internal */
export const OperatingEnrollmentMetadata$inboundSchema: z.ZodType<
  OperatingEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  operating_purpose: EnrollmentOperatingPurpose$inboundSchema.optional(),
  subtitle: z.string().optional(),
  tax_withholding_metadata: z.nullable(
    z.lazy(() => TaxWithholdingMetadata$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "operating_purpose": "operatingPurpose",
    "tax_withholding_metadata": "taxWithholdingMetadata",
  });
});

/** @internal */
export type OperatingEnrollmentMetadata$Outbound = {
  operating_purpose?: string | undefined;
  subtitle?: string | undefined;
  tax_withholding_metadata?: TaxWithholdingMetadata$Outbound | null | undefined;
};

/** @internal */
export const OperatingEnrollmentMetadata$outboundSchema: z.ZodType<
  OperatingEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  OperatingEnrollmentMetadata
> = z.object({
  operatingPurpose: EnrollmentOperatingPurpose$outboundSchema.optional(),
  subtitle: z.string().optional(),
  taxWithholdingMetadata: z.nullable(
    z.lazy(() => TaxWithholdingMetadata$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    operatingPurpose: "operating_purpose",
    taxWithholdingMetadata: "tax_withholding_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperatingEnrollmentMetadata$ {
  /** @deprecated use `OperatingEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = OperatingEnrollmentMetadata$inboundSchema;
  /** @deprecated use `OperatingEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = OperatingEnrollmentMetadata$outboundSchema;
  /** @deprecated use `OperatingEnrollmentMetadata$Outbound` instead. */
  export type Outbound = OperatingEnrollmentMetadata$Outbound;
}

/** @internal */
export const InvestmentVehicleExperience$inboundSchema: z.ZodType<
  InvestmentVehicleExperience,
  z.ZodTypeDef,
  unknown
> = z.object({
  commodities_average_annual_trade_count: z.number().int().optional(),
  corporate_bonds_average_annual_trade_count: z.number().int().optional(),
  funds_average_annual_trade_count: z.number().int().optional(),
  government_bonds_average_annual_trade_count: z.number().int().optional(),
  margin_average_annual_trade_count: z.number().int().optional(),
  municipal_bonds_average_annual_trade_count: z.number().int().optional(),
  options_average_annual_trade_count: z.number().int().optional(),
  stocks_average_annual_trade_count: z.number().int().optional(),
  tax_shelters_average_annual_trade_count: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "commodities_average_annual_trade_count":
      "commoditiesAverageAnnualTradeCount",
    "corporate_bonds_average_annual_trade_count":
      "corporateBondsAverageAnnualTradeCount",
    "funds_average_annual_trade_count": "fundsAverageAnnualTradeCount",
    "government_bonds_average_annual_trade_count":
      "governmentBondsAverageAnnualTradeCount",
    "margin_average_annual_trade_count": "marginAverageAnnualTradeCount",
    "municipal_bonds_average_annual_trade_count":
      "municipalBondsAverageAnnualTradeCount",
    "options_average_annual_trade_count": "optionsAverageAnnualTradeCount",
    "stocks_average_annual_trade_count": "stocksAverageAnnualTradeCount",
    "tax_shelters_average_annual_trade_count":
      "taxSheltersAverageAnnualTradeCount",
  });
});

/** @internal */
export type InvestmentVehicleExperience$Outbound = {
  commodities_average_annual_trade_count?: number | undefined;
  corporate_bonds_average_annual_trade_count?: number | undefined;
  funds_average_annual_trade_count?: number | undefined;
  government_bonds_average_annual_trade_count?: number | undefined;
  margin_average_annual_trade_count?: number | undefined;
  municipal_bonds_average_annual_trade_count?: number | undefined;
  options_average_annual_trade_count?: number | undefined;
  stocks_average_annual_trade_count?: number | undefined;
  tax_shelters_average_annual_trade_count?: number | undefined;
};

/** @internal */
export const InvestmentVehicleExperience$outboundSchema: z.ZodType<
  InvestmentVehicleExperience$Outbound,
  z.ZodTypeDef,
  InvestmentVehicleExperience
> = z.object({
  commoditiesAverageAnnualTradeCount: z.number().int().optional(),
  corporateBondsAverageAnnualTradeCount: z.number().int().optional(),
  fundsAverageAnnualTradeCount: z.number().int().optional(),
  governmentBondsAverageAnnualTradeCount: z.number().int().optional(),
  marginAverageAnnualTradeCount: z.number().int().optional(),
  municipalBondsAverageAnnualTradeCount: z.number().int().optional(),
  optionsAverageAnnualTradeCount: z.number().int().optional(),
  stocksAverageAnnualTradeCount: z.number().int().optional(),
  taxSheltersAverageAnnualTradeCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    commoditiesAverageAnnualTradeCount:
      "commodities_average_annual_trade_count",
    corporateBondsAverageAnnualTradeCount:
      "corporate_bonds_average_annual_trade_count",
    fundsAverageAnnualTradeCount: "funds_average_annual_trade_count",
    governmentBondsAverageAnnualTradeCount:
      "government_bonds_average_annual_trade_count",
    marginAverageAnnualTradeCount: "margin_average_annual_trade_count",
    municipalBondsAverageAnnualTradeCount:
      "municipal_bonds_average_annual_trade_count",
    optionsAverageAnnualTradeCount: "options_average_annual_trade_count",
    stocksAverageAnnualTradeCount: "stocks_average_annual_trade_count",
    taxSheltersAverageAnnualTradeCount:
      "tax_shelters_average_annual_trade_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvestmentVehicleExperience$ {
  /** @deprecated use `InvestmentVehicleExperience$inboundSchema` instead. */
  export const inboundSchema = InvestmentVehicleExperience$inboundSchema;
  /** @deprecated use `InvestmentVehicleExperience$outboundSchema` instead. */
  export const outboundSchema = InvestmentVehicleExperience$outboundSchema;
  /** @deprecated use `InvestmentVehicleExperience$Outbound` instead. */
  export type Outbound = InvestmentVehicleExperience$Outbound;
}

/** @internal */
export const EnrollmentOptionsLevel$inboundSchema: z.ZodType<
  EnrollmentOptionsLevelOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentOptionsLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentOptionsLevel$outboundSchema: z.ZodType<
  EnrollmentOptionsLevelOpen,
  z.ZodTypeDef,
  EnrollmentOptionsLevelOpen
> = z.union([
  z.nativeEnum(EnrollmentOptionsLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentOptionsLevel$ {
  /** @deprecated use `EnrollmentOptionsLevel$inboundSchema` instead. */
  export const inboundSchema = EnrollmentOptionsLevel$inboundSchema;
  /** @deprecated use `EnrollmentOptionsLevel$outboundSchema` instead. */
  export const outboundSchema = EnrollmentOptionsLevel$outboundSchema;
}

/** @internal */
export const OrdersOptionsTradingEnrollmentMetadata$inboundSchema: z.ZodType<
  OrdersOptionsTradingEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  investment_vehicle_experience: z.nullable(
    z.lazy(() => InvestmentVehicleExperience$inboundSchema),
  ).optional(),
  options_level: EnrollmentOptionsLevel$inboundSchema.optional(),
  total_years_options_trading_experience: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "investment_vehicle_experience": "investmentVehicleExperience",
    "options_level": "optionsLevel",
    "total_years_options_trading_experience":
      "totalYearsOptionsTradingExperience",
  });
});

/** @internal */
export type OrdersOptionsTradingEnrollmentMetadata$Outbound = {
  investment_vehicle_experience?:
    | InvestmentVehicleExperience$Outbound
    | null
    | undefined;
  options_level?: string | undefined;
  total_years_options_trading_experience?: number | undefined;
};

/** @internal */
export const OrdersOptionsTradingEnrollmentMetadata$outboundSchema: z.ZodType<
  OrdersOptionsTradingEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  OrdersOptionsTradingEnrollmentMetadata
> = z.object({
  investmentVehicleExperience: z.nullable(
    z.lazy(() => InvestmentVehicleExperience$outboundSchema),
  ).optional(),
  optionsLevel: EnrollmentOptionsLevel$outboundSchema.optional(),
  totalYearsOptionsTradingExperience: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    investmentVehicleExperience: "investment_vehicle_experience",
    optionsLevel: "options_level",
    totalYearsOptionsTradingExperience:
      "total_years_options_trading_experience",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrdersOptionsTradingEnrollmentMetadata$ {
  /** @deprecated use `OrdersOptionsTradingEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    OrdersOptionsTradingEnrollmentMetadata$inboundSchema;
  /** @deprecated use `OrdersOptionsTradingEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    OrdersOptionsTradingEnrollmentMetadata$outboundSchema;
  /** @deprecated use `OrdersOptionsTradingEnrollmentMetadata$Outbound` instead. */
  export type Outbound = OrdersOptionsTradingEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentState$inboundSchema: z.ZodType<
  EnrollmentStateOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentState$outboundSchema: z.ZodType<
  EnrollmentStateOpen,
  z.ZodTypeDef,
  EnrollmentStateOpen
> = z.union([
  z.nativeEnum(EnrollmentState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentState$ {
  /** @deprecated use `EnrollmentState$inboundSchema` instead. */
  export const inboundSchema = EnrollmentState$inboundSchema;
  /** @deprecated use `EnrollmentState$outboundSchema` instead. */
  export const outboundSchema = EnrollmentState$outboundSchema;
}

/** @internal */
export const EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$ {
  /** @deprecated use `EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const EnrollmentTrustEnrollmentMetadataFdicCashSweep$inboundSchema:
  z.ZodType<
    EnrollmentTrustEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(EnrollmentTrustEnrollmentMetadataFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const EnrollmentTrustEnrollmentMetadataFdicCashSweep$outboundSchema:
  z.ZodType<
    EnrollmentTrustEnrollmentMetadataFdicCashSweepOpen,
    z.ZodTypeDef,
    EnrollmentTrustEnrollmentMetadataFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(EnrollmentTrustEnrollmentMetadataFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentTrustEnrollmentMetadataFdicCashSweep$ {
  /** @deprecated use `EnrollmentTrustEnrollmentMetadataFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    EnrollmentTrustEnrollmentMetadataFdicCashSweep$inboundSchema;
  /** @deprecated use `EnrollmentTrustEnrollmentMetadataFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    EnrollmentTrustEnrollmentMetadataFdicCashSweep$outboundSchema;
}

/** @internal */
export const EnrollmentOpenedOnBehalfOf$inboundSchema: z.ZodType<
  EnrollmentOpenedOnBehalfOfOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentOpenedOnBehalfOf),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentOpenedOnBehalfOf$outboundSchema: z.ZodType<
  EnrollmentOpenedOnBehalfOfOpen,
  z.ZodTypeDef,
  EnrollmentOpenedOnBehalfOfOpen
> = z.union([
  z.nativeEnum(EnrollmentOpenedOnBehalfOf),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentOpenedOnBehalfOf$ {
  /** @deprecated use `EnrollmentOpenedOnBehalfOf$inboundSchema` instead. */
  export const inboundSchema = EnrollmentOpenedOnBehalfOf$inboundSchema;
  /** @deprecated use `EnrollmentOpenedOnBehalfOf$outboundSchema` instead. */
  export const outboundSchema = EnrollmentOpenedOnBehalfOf$outboundSchema;
}

/** @internal */
export const TrustEnrollmentMetadata$inboundSchema: z.ZodType<
  TrustEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  dividend_reinvestment_plan:
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$inboundSchema
      .optional(),
  fdic_cash_sweep: EnrollmentTrustEnrollmentMetadataFdicCashSweep$inboundSchema
    .optional(),
  opened_on_behalf_of: EnrollmentOpenedOnBehalfOf$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "dividend_reinvestment_plan": "dividendReinvestmentPlan",
    "fdic_cash_sweep": "fdicCashSweep",
    "opened_on_behalf_of": "openedOnBehalfOf",
  });
});

/** @internal */
export type TrustEnrollmentMetadata$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
  opened_on_behalf_of?: string | undefined;
};

/** @internal */
export const TrustEnrollmentMetadata$outboundSchema: z.ZodType<
  TrustEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  TrustEnrollmentMetadata
> = z.object({
  dividendReinvestmentPlan:
    EnrollmentTrustEnrollmentMetadataDividendReinvestmentPlan$outboundSchema
      .optional(),
  fdicCashSweep: EnrollmentTrustEnrollmentMetadataFdicCashSweep$outboundSchema
    .optional(),
  openedOnBehalfOf: EnrollmentOpenedOnBehalfOf$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    dividendReinvestmentPlan: "dividend_reinvestment_plan",
    fdicCashSweep: "fdic_cash_sweep",
    openedOnBehalfOf: "opened_on_behalf_of",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrustEnrollmentMetadata$ {
  /** @deprecated use `TrustEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema = TrustEnrollmentMetadata$inboundSchema;
  /** @deprecated use `TrustEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema = TrustEnrollmentMetadata$outboundSchema;
  /** @deprecated use `TrustEnrollmentMetadata$Outbound` instead. */
  export type Outbound = TrustEnrollmentMetadata$Outbound;
}

/** @internal */
export const EnrollmentType1$inboundSchema: z.ZodType<
  EnrollmentType1Open,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EnrollmentType1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EnrollmentType1$outboundSchema: z.ZodType<
  EnrollmentType1Open,
  z.ZodTypeDef,
  EnrollmentType1Open
> = z.union([
  z.nativeEnum(EnrollmentType1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentType1$ {
  /** @deprecated use `EnrollmentType1$inboundSchema` instead. */
  export const inboundSchema = EnrollmentType1$inboundSchema;
  /** @deprecated use `EnrollmentType1$outboundSchema` instead. */
  export const outboundSchema = EnrollmentType1$outboundSchema;
}

/** @internal */
export const VirtualAccountNumberEnrollmentMetadata$inboundSchema: z.ZodType<
  VirtualAccountNumberEnrollmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  routing_number: z.string().optional(),
  virtual_account_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "routing_number": "routingNumber",
    "virtual_account_number": "virtualAccountNumber",
  });
});

/** @internal */
export type VirtualAccountNumberEnrollmentMetadata$Outbound = {
  routing_number?: string | undefined;
  virtual_account_number?: string | undefined;
};

/** @internal */
export const VirtualAccountNumberEnrollmentMetadata$outboundSchema: z.ZodType<
  VirtualAccountNumberEnrollmentMetadata$Outbound,
  z.ZodTypeDef,
  VirtualAccountNumberEnrollmentMetadata
> = z.object({
  routingNumber: z.string().optional(),
  virtualAccountNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    routingNumber: "routing_number",
    virtualAccountNumber: "virtual_account_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VirtualAccountNumberEnrollmentMetadata$ {
  /** @deprecated use `VirtualAccountNumberEnrollmentMetadata$inboundSchema` instead. */
  export const inboundSchema =
    VirtualAccountNumberEnrollmentMetadata$inboundSchema;
  /** @deprecated use `VirtualAccountNumberEnrollmentMetadata$outboundSchema` instead. */
  export const outboundSchema =
    VirtualAccountNumberEnrollmentMetadata$outboundSchema;
  /** @deprecated use `VirtualAccountNumberEnrollmentMetadata$Outbound` instead. */
  export type Outbound = VirtualAccountNumberEnrollmentMetadata$Outbound;
}

/** @internal */
export const Enrollment$inboundSchema: z.ZodType<
  Enrollment,
  z.ZodTypeDef,
  unknown
> = z.object({
  beneficiary_enrollment_metadata: z.nullable(
    z.lazy(() => BeneficiaryEnrollmentMetadata$inboundSchema),
  ).optional(),
  consent_method: ConsentMethod$inboundSchema.optional(),
  corporation_enrollment_metadata: z.nullable(
    z.lazy(() => CorporationEnrollmentMetadata$inboundSchema),
  ).optional(),
  custodial_enrollment_metadata: z.nullable(
    z.lazy(() => CustodialEnrollmentMetadata$inboundSchema),
  ).optional(),
  enrollment_id: z.string().optional(),
  enrollment_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  estate_enrollment_metadata: z.nullable(
    z.lazy(() => EstateEnrollmentMetadata$inboundSchema),
  ).optional(),
  foreign_individual_account_enrollment_metadata: z.nullable(
    z.lazy(() => ForeignIndividualAccountEnrollmentMetadata$inboundSchema),
  ).optional(),
  foreign_joint_account_enrollment_metadata: z.nullable(
    z.lazy(() => ForeignJointAccountEnrollmentMetadata$inboundSchema),
  ).optional(),
  fpsl_enrollment_metadata: z.nullable(
    z.lazy(() => FpslEnrollmentMetadata$inboundSchema),
  ).optional(),
  individual_enrollment_metadata: z.nullable(
    z.lazy(() => IndividualEnrollmentMetadata$inboundSchema),
  ).optional(),
  ira_beneficiary_enrollment_metadata: z.nullable(
    z.lazy(() => IraBeneficiaryEnrollmentMetadata$inboundSchema),
  ).optional(),
  ira_rollover_enrollment_metadata: z.nullable(
    z.lazy(() => IraRolloverEnrollmentMetadata$inboundSchema),
  ).optional(),
  ira_roth_enrollment_metadata: z.nullable(
    z.lazy(() => IraRothEnrollmentMetadata$inboundSchema),
  ).optional(),
  ira_sep_enrollment_metadata: z.nullable(
    z.lazy(() => IraSepEnrollmentMetadata$inboundSchema),
  ).optional(),
  ira_simple_enrollment_metadata: z.nullable(
    z.lazy(() => IraSimpleEnrollmentMetadata$inboundSchema),
  ).optional(),
  ira_traditional_enrollment_metadata: z.nullable(
    z.lazy(() => IraTraditionalEnrollmentMetadata$inboundSchema),
  ).optional(),
  joint_community_property_enrollment_metadata: z.nullable(
    z.lazy(() => JointCommunityPropertyEnrollmentMetadata$inboundSchema),
  ).optional(),
  joint_tenants_by_entirety_enrollment_metadata: z.nullable(
    z.lazy(() => JointTenantsByEntiretyEnrollmentMetadata$inboundSchema),
  ).optional(),
  joint_tenants_in_common_enrollment_metadata: z.nullable(
    z.lazy(() => JointTenantsInCommonEnrollmentMetadata$inboundSchema),
  ).optional(),
  joint_with_rights_of_survivorship_enrollment_metadata: z.nullable(
    z.lazy(() => JointWithRightsOfSurvivorshipEnrollmentMetadata$inboundSchema),
  ).optional(),
  llc_enrollment_metadata: z.nullable(
    z.lazy(() => LlcEnrollmentMetadata$inboundSchema),
  ).optional(),
  name: z.string().optional(),
  operating_enrollment_metadata: z.nullable(
    z.lazy(() => OperatingEnrollmentMetadata$inboundSchema),
  ).optional(),
  orders_options_trading_enrollment_metadata: z.nullable(
    z.lazy(() => OrdersOptionsTradingEnrollmentMetadata$inboundSchema),
  ).optional(),
  principal_approver_id: z.string().optional(),
  state: EnrollmentState$inboundSchema.optional(),
  trust_enrollment_metadata: z.nullable(
    z.lazy(() => TrustEnrollmentMetadata$inboundSchema),
  ).optional(),
  type: EnrollmentType1$inboundSchema.optional(),
  unenrollment_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  virtual_account_number_enrollment_metadata: z.nullable(
    z.lazy(() => VirtualAccountNumberEnrollmentMetadata$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "beneficiary_enrollment_metadata": "beneficiaryEnrollmentMetadata",
    "consent_method": "consentMethod",
    "corporation_enrollment_metadata": "corporationEnrollmentMetadata",
    "custodial_enrollment_metadata": "custodialEnrollmentMetadata",
    "enrollment_id": "enrollmentId",
    "enrollment_time": "enrollmentTime",
    "estate_enrollment_metadata": "estateEnrollmentMetadata",
    "foreign_individual_account_enrollment_metadata":
      "foreignIndividualAccountEnrollmentMetadata",
    "foreign_joint_account_enrollment_metadata":
      "foreignJointAccountEnrollmentMetadata",
    "fpsl_enrollment_metadata": "fpslEnrollmentMetadata",
    "individual_enrollment_metadata": "individualEnrollmentMetadata",
    "ira_beneficiary_enrollment_metadata": "iraBeneficiaryEnrollmentMetadata",
    "ira_rollover_enrollment_metadata": "iraRolloverEnrollmentMetadata",
    "ira_roth_enrollment_metadata": "iraRothEnrollmentMetadata",
    "ira_sep_enrollment_metadata": "iraSepEnrollmentMetadata",
    "ira_simple_enrollment_metadata": "iraSimpleEnrollmentMetadata",
    "ira_traditional_enrollment_metadata": "iraTraditionalEnrollmentMetadata",
    "joint_community_property_enrollment_metadata":
      "jointCommunityPropertyEnrollmentMetadata",
    "joint_tenants_by_entirety_enrollment_metadata":
      "jointTenantsByEntiretyEnrollmentMetadata",
    "joint_tenants_in_common_enrollment_metadata":
      "jointTenantsInCommonEnrollmentMetadata",
    "joint_with_rights_of_survivorship_enrollment_metadata":
      "jointWithRightsOfSurvivorshipEnrollmentMetadata",
    "llc_enrollment_metadata": "llcEnrollmentMetadata",
    "operating_enrollment_metadata": "operatingEnrollmentMetadata",
    "orders_options_trading_enrollment_metadata":
      "ordersOptionsTradingEnrollmentMetadata",
    "principal_approver_id": "principalApproverId",
    "trust_enrollment_metadata": "trustEnrollmentMetadata",
    "unenrollment_time": "unenrollmentTime",
    "virtual_account_number_enrollment_metadata":
      "virtualAccountNumberEnrollmentMetadata",
  });
});

/** @internal */
export type Enrollment$Outbound = {
  beneficiary_enrollment_metadata?:
    | BeneficiaryEnrollmentMetadata$Outbound
    | null
    | undefined;
  consent_method?: string | undefined;
  corporation_enrollment_metadata?:
    | CorporationEnrollmentMetadata$Outbound
    | null
    | undefined;
  custodial_enrollment_metadata?:
    | CustodialEnrollmentMetadata$Outbound
    | null
    | undefined;
  enrollment_id?: string | undefined;
  enrollment_time?: string | null | undefined;
  estate_enrollment_metadata?:
    | EstateEnrollmentMetadata$Outbound
    | null
    | undefined;
  foreign_individual_account_enrollment_metadata?:
    | ForeignIndividualAccountEnrollmentMetadata$Outbound
    | null
    | undefined;
  foreign_joint_account_enrollment_metadata?:
    | ForeignJointAccountEnrollmentMetadata$Outbound
    | null
    | undefined;
  fpsl_enrollment_metadata?: FpslEnrollmentMetadata$Outbound | null | undefined;
  individual_enrollment_metadata?:
    | IndividualEnrollmentMetadata$Outbound
    | null
    | undefined;
  ira_beneficiary_enrollment_metadata?:
    | IraBeneficiaryEnrollmentMetadata$Outbound
    | null
    | undefined;
  ira_rollover_enrollment_metadata?:
    | IraRolloverEnrollmentMetadata$Outbound
    | null
    | undefined;
  ira_roth_enrollment_metadata?:
    | IraRothEnrollmentMetadata$Outbound
    | null
    | undefined;
  ira_sep_enrollment_metadata?:
    | IraSepEnrollmentMetadata$Outbound
    | null
    | undefined;
  ira_simple_enrollment_metadata?:
    | IraSimpleEnrollmentMetadata$Outbound
    | null
    | undefined;
  ira_traditional_enrollment_metadata?:
    | IraTraditionalEnrollmentMetadata$Outbound
    | null
    | undefined;
  joint_community_property_enrollment_metadata?:
    | JointCommunityPropertyEnrollmentMetadata$Outbound
    | null
    | undefined;
  joint_tenants_by_entirety_enrollment_metadata?:
    | JointTenantsByEntiretyEnrollmentMetadata$Outbound
    | null
    | undefined;
  joint_tenants_in_common_enrollment_metadata?:
    | JointTenantsInCommonEnrollmentMetadata$Outbound
    | null
    | undefined;
  joint_with_rights_of_survivorship_enrollment_metadata?:
    | JointWithRightsOfSurvivorshipEnrollmentMetadata$Outbound
    | null
    | undefined;
  llc_enrollment_metadata?: LlcEnrollmentMetadata$Outbound | null | undefined;
  name?: string | undefined;
  operating_enrollment_metadata?:
    | OperatingEnrollmentMetadata$Outbound
    | null
    | undefined;
  orders_options_trading_enrollment_metadata?:
    | OrdersOptionsTradingEnrollmentMetadata$Outbound
    | null
    | undefined;
  principal_approver_id?: string | undefined;
  state?: string | undefined;
  trust_enrollment_metadata?:
    | TrustEnrollmentMetadata$Outbound
    | null
    | undefined;
  type?: string | undefined;
  unenrollment_time?: string | null | undefined;
  virtual_account_number_enrollment_metadata?:
    | VirtualAccountNumberEnrollmentMetadata$Outbound
    | null
    | undefined;
};

/** @internal */
export const Enrollment$outboundSchema: z.ZodType<
  Enrollment$Outbound,
  z.ZodTypeDef,
  Enrollment
> = z.object({
  beneficiaryEnrollmentMetadata: z.nullable(
    z.lazy(() => BeneficiaryEnrollmentMetadata$outboundSchema),
  ).optional(),
  consentMethod: ConsentMethod$outboundSchema.optional(),
  corporationEnrollmentMetadata: z.nullable(
    z.lazy(() => CorporationEnrollmentMetadata$outboundSchema),
  ).optional(),
  custodialEnrollmentMetadata: z.nullable(
    z.lazy(() => CustodialEnrollmentMetadata$outboundSchema),
  ).optional(),
  enrollmentId: z.string().optional(),
  enrollmentTime: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  estateEnrollmentMetadata: z.nullable(
    z.lazy(() => EstateEnrollmentMetadata$outboundSchema),
  ).optional(),
  foreignIndividualAccountEnrollmentMetadata: z.nullable(
    z.lazy(() => ForeignIndividualAccountEnrollmentMetadata$outboundSchema),
  ).optional(),
  foreignJointAccountEnrollmentMetadata: z.nullable(
    z.lazy(() => ForeignJointAccountEnrollmentMetadata$outboundSchema),
  ).optional(),
  fpslEnrollmentMetadata: z.nullable(
    z.lazy(() => FpslEnrollmentMetadata$outboundSchema),
  ).optional(),
  individualEnrollmentMetadata: z.nullable(
    z.lazy(() => IndividualEnrollmentMetadata$outboundSchema),
  ).optional(),
  iraBeneficiaryEnrollmentMetadata: z.nullable(
    z.lazy(() => IraBeneficiaryEnrollmentMetadata$outboundSchema),
  ).optional(),
  iraRolloverEnrollmentMetadata: z.nullable(
    z.lazy(() => IraRolloverEnrollmentMetadata$outboundSchema),
  ).optional(),
  iraRothEnrollmentMetadata: z.nullable(
    z.lazy(() => IraRothEnrollmentMetadata$outboundSchema),
  ).optional(),
  iraSepEnrollmentMetadata: z.nullable(
    z.lazy(() => IraSepEnrollmentMetadata$outboundSchema),
  ).optional(),
  iraSimpleEnrollmentMetadata: z.nullable(
    z.lazy(() => IraSimpleEnrollmentMetadata$outboundSchema),
  ).optional(),
  iraTraditionalEnrollmentMetadata: z.nullable(
    z.lazy(() => IraTraditionalEnrollmentMetadata$outboundSchema),
  ).optional(),
  jointCommunityPropertyEnrollmentMetadata: z.nullable(
    z.lazy(() => JointCommunityPropertyEnrollmentMetadata$outboundSchema),
  ).optional(),
  jointTenantsByEntiretyEnrollmentMetadata: z.nullable(
    z.lazy(() => JointTenantsByEntiretyEnrollmentMetadata$outboundSchema),
  ).optional(),
  jointTenantsInCommonEnrollmentMetadata: z.nullable(
    z.lazy(() => JointTenantsInCommonEnrollmentMetadata$outboundSchema),
  ).optional(),
  jointWithRightsOfSurvivorshipEnrollmentMetadata: z.nullable(
    z.lazy(() =>
      JointWithRightsOfSurvivorshipEnrollmentMetadata$outboundSchema
    ),
  ).optional(),
  llcEnrollmentMetadata: z.nullable(
    z.lazy(() => LlcEnrollmentMetadata$outboundSchema),
  ).optional(),
  name: z.string().optional(),
  operatingEnrollmentMetadata: z.nullable(
    z.lazy(() => OperatingEnrollmentMetadata$outboundSchema),
  ).optional(),
  ordersOptionsTradingEnrollmentMetadata: z.nullable(
    z.lazy(() => OrdersOptionsTradingEnrollmentMetadata$outboundSchema),
  ).optional(),
  principalApproverId: z.string().optional(),
  state: EnrollmentState$outboundSchema.optional(),
  trustEnrollmentMetadata: z.nullable(
    z.lazy(() => TrustEnrollmentMetadata$outboundSchema),
  ).optional(),
  type: EnrollmentType1$outboundSchema.optional(),
  unenrollmentTime: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  virtualAccountNumberEnrollmentMetadata: z.nullable(
    z.lazy(() => VirtualAccountNumberEnrollmentMetadata$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    beneficiaryEnrollmentMetadata: "beneficiary_enrollment_metadata",
    consentMethod: "consent_method",
    corporationEnrollmentMetadata: "corporation_enrollment_metadata",
    custodialEnrollmentMetadata: "custodial_enrollment_metadata",
    enrollmentId: "enrollment_id",
    enrollmentTime: "enrollment_time",
    estateEnrollmentMetadata: "estate_enrollment_metadata",
    foreignIndividualAccountEnrollmentMetadata:
      "foreign_individual_account_enrollment_metadata",
    foreignJointAccountEnrollmentMetadata:
      "foreign_joint_account_enrollment_metadata",
    fpslEnrollmentMetadata: "fpsl_enrollment_metadata",
    individualEnrollmentMetadata: "individual_enrollment_metadata",
    iraBeneficiaryEnrollmentMetadata: "ira_beneficiary_enrollment_metadata",
    iraRolloverEnrollmentMetadata: "ira_rollover_enrollment_metadata",
    iraRothEnrollmentMetadata: "ira_roth_enrollment_metadata",
    iraSepEnrollmentMetadata: "ira_sep_enrollment_metadata",
    iraSimpleEnrollmentMetadata: "ira_simple_enrollment_metadata",
    iraTraditionalEnrollmentMetadata: "ira_traditional_enrollment_metadata",
    jointCommunityPropertyEnrollmentMetadata:
      "joint_community_property_enrollment_metadata",
    jointTenantsByEntiretyEnrollmentMetadata:
      "joint_tenants_by_entirety_enrollment_metadata",
    jointTenantsInCommonEnrollmentMetadata:
      "joint_tenants_in_common_enrollment_metadata",
    jointWithRightsOfSurvivorshipEnrollmentMetadata:
      "joint_with_rights_of_survivorship_enrollment_metadata",
    llcEnrollmentMetadata: "llc_enrollment_metadata",
    operatingEnrollmentMetadata: "operating_enrollment_metadata",
    ordersOptionsTradingEnrollmentMetadata:
      "orders_options_trading_enrollment_metadata",
    principalApproverId: "principal_approver_id",
    trustEnrollmentMetadata: "trust_enrollment_metadata",
    unenrollmentTime: "unenrollment_time",
    virtualAccountNumberEnrollmentMetadata:
      "virtual_account_number_enrollment_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Enrollment$ {
  /** @deprecated use `Enrollment$inboundSchema` instead. */
  export const inboundSchema = Enrollment$inboundSchema;
  /** @deprecated use `Enrollment$outboundSchema` instead. */
  export const outboundSchema = Enrollment$outboundSchema;
  /** @deprecated use `Enrollment$Outbound` instead. */
  export type Outbound = Enrollment$Outbound;
}
