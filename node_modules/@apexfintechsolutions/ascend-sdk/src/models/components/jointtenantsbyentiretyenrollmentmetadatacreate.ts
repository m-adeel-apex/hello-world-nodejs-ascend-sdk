/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export enum JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan {
  AutoEnrollDividendReinvestmentUnspecified =
    "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED",
  DividendReinvestmentEnroll = "DIVIDEND_REINVESTMENT_ENROLL",
  DividendReinvestmentDecline = "DIVIDEND_REINVESTMENT_DECLINE",
}
/**
 * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
 */
export type JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlanOpen =
  OpenEnum<
    typeof JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan
  >;

/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export enum JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep {
  AutoEnrollFdicCashSweepUnspecified =
    "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED",
  FdicCashSweepEnroll = "FDIC_CASH_SWEEP_ENROLL",
  FdicCashSweepDecline = "FDIC_CASH_SWEEP_DECLINE",
}
/**
 * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
 */
export type JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweepOpen =
  OpenEnum<typeof JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep>;

/**
 * The legal residency state of a married couple
 */
export enum JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple {
  LegalResidencyStateOfMarriedCoupleUnspecified =
    "LEGAL_RESIDENCY_STATE_OF_MARRIED_COUPLE_UNSPECIFIED",
  Ak = "AK",
  Az = "AZ",
  Ar = "AR",
  Ca = "CA",
  De = "DE",
  Fl = "FL",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ky = "KY",
  La = "LA",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Ms = "MS",
  Mo = "MO",
  Nv = "NV",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Ri = "RI",
  Tn = "TN",
  Tx = "TX",
  Vt = "VT",
  Va = "VA",
  Wa = "WA",
  Wi = "WI",
  Wy = "WY",
}
/**
 * The legal residency state of a married couple
 */
export type JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCoupleOpen =
  OpenEnum<
    typeof JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple
  >;

/**
 * Enrollment metadata for the Joint Tenants by Entirety Registration enrollment type
 */
export type JointTenantsByEntiretyEnrollmentMetadataCreate = {
  /**
   * Option to auto-enroll in Dividend Reinvestment; defaults to DIVIDEND_REINVESTMENT_ENROLL
   */
  dividendReinvestmentPlan?:
    | JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlanOpen
    | undefined;
  /**
   * Option to auto-enroll in FDIC cash sweep; defaults to FDIC_CASH_SWEEP_ENROLL
   */
  fdicCashSweep?:
    | JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweepOpen
    | undefined;
  /**
   * The legal residency state of a married couple
   */
  legalResidencyStateOfMarriedCouple:
    JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCoupleOpen;
};

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$inboundSchema:
  z.ZodType<
    JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$outboundSchema:
  z.ZodType<
    JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlanOpen,
    z.ZodTypeDef,
    JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlanOpen
  > = z.union([
    z.nativeEnum(
      JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$ {
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$inboundSchema` instead. */
  export const inboundSchema =
    JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$inboundSchema;
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$outboundSchema` instead. */
  export const outboundSchema =
    JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$outboundSchema;
}

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$inboundSchema:
  z.ZodType<
    JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweepOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$outboundSchema:
  z.ZodType<
    JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweepOpen,
    z.ZodTypeDef,
    JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweepOpen
  > = z.union([
    z.nativeEnum(JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$ {
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$inboundSchema` instead. */
  export const inboundSchema =
    JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$inboundSchema;
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$outboundSchema` instead. */
  export const outboundSchema =
    JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$outboundSchema;
}

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$inboundSchema:
  z.ZodType<
    JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCoupleOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$outboundSchema:
  z.ZodType<
    JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCoupleOpen,
    z.ZodTypeDef,
    JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCoupleOpen
  > = z.union([
    z.nativeEnum(
      JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$ {
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$inboundSchema` instead. */
  export const inboundSchema =
    JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$inboundSchema;
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$outboundSchema` instead. */
  export const outboundSchema =
    JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$outboundSchema;
}

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadataCreate$inboundSchema:
  z.ZodType<
    JointTenantsByEntiretyEnrollmentMetadataCreate,
    z.ZodTypeDef,
    unknown
  > = z.object({
    dividend_reinvestment_plan:
      JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$inboundSchema
        .optional(),
    fdic_cash_sweep:
      JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$inboundSchema
        .optional(),
    legal_residency_state_of_married_couple:
      JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "dividend_reinvestment_plan": "dividendReinvestmentPlan",
      "fdic_cash_sweep": "fdicCashSweep",
      "legal_residency_state_of_married_couple":
        "legalResidencyStateOfMarriedCouple",
    });
  });

/** @internal */
export type JointTenantsByEntiretyEnrollmentMetadataCreate$Outbound = {
  dividend_reinvestment_plan?: string | undefined;
  fdic_cash_sweep?: string | undefined;
  legal_residency_state_of_married_couple: string;
};

/** @internal */
export const JointTenantsByEntiretyEnrollmentMetadataCreate$outboundSchema:
  z.ZodType<
    JointTenantsByEntiretyEnrollmentMetadataCreate$Outbound,
    z.ZodTypeDef,
    JointTenantsByEntiretyEnrollmentMetadataCreate
  > = z.object({
    dividendReinvestmentPlan:
      JointTenantsByEntiretyEnrollmentMetadataCreateDividendReinvestmentPlan$outboundSchema
        .optional(),
    fdicCashSweep:
      JointTenantsByEntiretyEnrollmentMetadataCreateFdicCashSweep$outboundSchema
        .optional(),
    legalResidencyStateOfMarriedCouple:
      JointTenantsByEntiretyEnrollmentMetadataCreateLegalResidencyStateOfMarriedCouple$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      dividendReinvestmentPlan: "dividend_reinvestment_plan",
      fdicCashSweep: "fdic_cash_sweep",
      legalResidencyStateOfMarriedCouple:
        "legal_residency_state_of_married_couple",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JointTenantsByEntiretyEnrollmentMetadataCreate$ {
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreate$inboundSchema` instead. */
  export const inboundSchema =
    JointTenantsByEntiretyEnrollmentMetadataCreate$inboundSchema;
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreate$outboundSchema` instead. */
  export const outboundSchema =
    JointTenantsByEntiretyEnrollmentMetadataCreate$outboundSchema;
  /** @deprecated use `JointTenantsByEntiretyEnrollmentMetadataCreate$Outbound` instead. */
  export type Outbound =
    JointTenantsByEntiretyEnrollmentMetadataCreate$Outbound;
}
