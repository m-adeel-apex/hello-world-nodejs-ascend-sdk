/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import {
  Lot,
  Lot$inboundSchema,
  Lot$Outbound,
  Lot$outboundSchema,
} from "./lot.js";
import {
  YieldRecord,
  YieldRecord$inboundSchema,
  YieldRecord$Outbound,
  YieldRecord$outboundSchema,
} from "./yieldrecord.js";

/**
 * Used to calculate broadridge blotter code
 */
export enum RebookTradeResponseBrokerCapacity {
  CapacityUnspecified = "CAPACITY_UNSPECIFIED",
  Agency = "AGENCY",
  Principal = "PRINCIPAL",
  Mixed = "MIXED",
}
/**
 * Used to calculate broadridge blotter code
 */
export type RebookTradeResponseBrokerCapacityOpen = OpenEnum<
  typeof RebookTradeResponseBrokerCapacity
>;

/**
 * The price for the instrument that is prevailing in the market.
 */
export type RebookTradeResponsePrevailingMarketPrice = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Total monetary value of the price_adjustment
 */
export type RebookTradeResponsePriceAdjustmentAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type RebookTradeResponsePriceAdjustmentPercent = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export enum RebookTradeResponsePriceAdjustmentType {
  PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
  Markup = "MARKUP",
  Markdown = "MARKDOWN",
  SalesLoad = "SALES_LOAD",
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type RebookTradeResponsePriceAdjustmentTypeOpen = OpenEnum<
  typeof RebookTradeResponsePriceAdjustmentType
>;

/**
 * Information about any price adjustments applied to the security
 */
export type RebookTradeResponsePriceAdjustmentRecord = {
  /**
   * Total monetary value of the price_adjustment
   */
  priceAdjustmentAmount?:
    | RebookTradeResponsePriceAdjustmentAmount
    | null
    | undefined;
  /**
   * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
   */
  priceAdjustmentPercent?:
    | RebookTradeResponsePriceAdjustmentPercent
    | null
    | undefined;
  /**
   * The type of price adjustment being applied by the broker to the net price of the security
   */
  priceAdjustmentType?: RebookTradeResponsePriceAdjustmentTypeOpen | undefined;
};

/**
 * The new trade that is booked.
 */
export type NewTrade = {
  /**
   * Free form text field containing additional information for a trade
   */
  additionalInstructions?: Array<string> | undefined;
  /**
   * Max Length 100 characters. Alternate order id from the street used for FRAC trades
   */
  alternateOrderId?: string | undefined;
  /**
   * uuid assigned by the Booking API if a trade belongs to an allocation
   */
  bookingApiTradeAllocationId?: string | undefined;
  /**
   * uuid assigned by the Booking API to all trades
   */
  bookingApiTradeId?: string | undefined;
  /**
   * Executing broker of the trade
   */
  broker?: string | undefined;
  /**
   * Used to calculate broadridge blotter code
   */
  brokerCapacity?: RebookTradeResponseBrokerCapacityOpen | undefined;
  /**
   * Free form text submitted by the client for internal purposes
   */
  clientMemos?: Array<string> | undefined;
  /**
   * 32 characters. The client order ID from the order submitted
   */
  clientOrderId?: string | undefined;
  /**
   * MIC code for the exchange
   */
  exchange?: string | undefined;
  /**
   * Execution id from the street
   */
  executionId?: string | undefined;
  /**
   * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
   */
  executionOnly?: boolean | undefined;
  /**
   * Max Length 100 characters. External system id provided by a client
   */
  externalId?: string | undefined;
  /**
   * The confirmation number associated with a mutual fund trade
   */
  fundConfirmationNumber?: string | undefined;
  /**
   * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
   */
  gatewayClientOrderId?: string | undefined;
  /**
   * If set to true, indicates the trade should be omitted from client billing
   */
  internalError?: boolean | undefined;
  /**
   * Set on penny-for-the-lot trades
   */
  isWriteoff?: boolean | undefined;
  /**
   * Repeated record containing information about the tax lots, if specified
   */
  lots?: Array<Lot> | undefined;
  /**
   * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
   */
  orderId?: string | undefined;
  /**
   * The price for the instrument that is prevailing in the market.
   */
  prevailingMarketPrice?:
    | RebookTradeResponsePrevailingMarketPrice
    | null
    | undefined;
  /**
   * Information about any price adjustments applied to the security
   */
  priceAdjustmentRecord?:
    | RebookTradeResponsePriceAdjustmentRecord
    | null
    | undefined;
  /**
   * Used to calculate broadridge blotter code
   */
  route?: string | undefined;
  /**
   * The special instructions for a trade
   */
  specialInstructions?: Array<string> | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the particular issue
   */
  symbolDescription?: string | undefined;
  /**
   * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
   */
  whenIssued?: boolean | undefined;
  /**
   * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
   */
  yieldRecords?: Array<YieldRecord> | undefined;
};

/**
 * Used to calculate broadridge blotter code
 */
export enum RebookTradeResponseOriginalTradeBrokerCapacity {
  CapacityUnspecified = "CAPACITY_UNSPECIFIED",
  Agency = "AGENCY",
  Principal = "PRINCIPAL",
  Mixed = "MIXED",
}
/**
 * Used to calculate broadridge blotter code
 */
export type RebookTradeResponseOriginalTradeBrokerCapacityOpen = OpenEnum<
  typeof RebookTradeResponseOriginalTradeBrokerCapacity
>;

/**
 * The price for the instrument that is prevailing in the market.
 */
export type RebookTradeResponseOriginalTradePrevailingMarketPrice = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Total monetary value of the price_adjustment
 */
export type RebookTradeResponseOriginalTradePriceAdjustmentAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type RebookTradeResponseOriginalTradePriceAdjustmentPercent = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export enum RebookTradeResponseOriginalTradePriceAdjustmentType {
  PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
  Markup = "MARKUP",
  Markdown = "MARKDOWN",
  SalesLoad = "SALES_LOAD",
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen = OpenEnum<
  typeof RebookTradeResponseOriginalTradePriceAdjustmentType
>;

/**
 * Information about any price adjustments applied to the security
 */
export type RebookTradeResponseOriginalTradePriceAdjustmentRecord = {
  /**
   * Total monetary value of the price_adjustment
   */
  priceAdjustmentAmount?:
    | RebookTradeResponseOriginalTradePriceAdjustmentAmount
    | null
    | undefined;
  /**
   * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
   */
  priceAdjustmentPercent?:
    | RebookTradeResponseOriginalTradePriceAdjustmentPercent
    | null
    | undefined;
  /**
   * The type of price adjustment being applied by the broker to the net price of the security
   */
  priceAdjustmentType?:
    | RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen
    | undefined;
};

/**
 * The original trade that was rebooked.
 */
export type OriginalTrade = {
  /**
   * Free form text field containing additional information for a trade
   */
  additionalInstructions?: Array<string> | undefined;
  /**
   * Max Length 100 characters. Alternate order id from the street used for FRAC trades
   */
  alternateOrderId?: string | undefined;
  /**
   * uuid assigned by the Booking API if a trade belongs to an allocation
   */
  bookingApiTradeAllocationId?: string | undefined;
  /**
   * uuid assigned by the Booking API to all trades
   */
  bookingApiTradeId?: string | undefined;
  /**
   * Executing broker of the trade
   */
  broker?: string | undefined;
  /**
   * Used to calculate broadridge blotter code
   */
  brokerCapacity?:
    | RebookTradeResponseOriginalTradeBrokerCapacityOpen
    | undefined;
  /**
   * Free form text submitted by the client for internal purposes
   */
  clientMemos?: Array<string> | undefined;
  /**
   * 32 characters. The client order ID from the order submitted
   */
  clientOrderId?: string | undefined;
  /**
   * MIC code for the exchange
   */
  exchange?: string | undefined;
  /**
   * Execution id from the street
   */
  executionId?: string | undefined;
  /**
   * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
   */
  executionOnly?: boolean | undefined;
  /**
   * Max Length 100 characters. External system id provided by a client
   */
  externalId?: string | undefined;
  /**
   * The confirmation number associated with a mutual fund trade
   */
  fundConfirmationNumber?: string | undefined;
  /**
   * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
   */
  gatewayClientOrderId?: string | undefined;
  /**
   * If set to true, indicates the trade should be omitted from client billing
   */
  internalError?: boolean | undefined;
  /**
   * Set on penny-for-the-lot trades
   */
  isWriteoff?: boolean | undefined;
  /**
   * Repeated record containing information about the tax lots, if specified
   */
  lots?: Array<Lot> | undefined;
  /**
   * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
   */
  orderId?: string | undefined;
  /**
   * The price for the instrument that is prevailing in the market.
   */
  prevailingMarketPrice?:
    | RebookTradeResponseOriginalTradePrevailingMarketPrice
    | null
    | undefined;
  /**
   * Information about any price adjustments applied to the security
   */
  priceAdjustmentRecord?:
    | RebookTradeResponseOriginalTradePriceAdjustmentRecord
    | null
    | undefined;
  /**
   * Used to calculate broadridge blotter code
   */
  route?: string | undefined;
  /**
   * The special instructions for a trade
   */
  specialInstructions?: Array<string> | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the particular issue
   */
  symbolDescription?: string | undefined;
  /**
   * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
   */
  whenIssued?: boolean | undefined;
  /**
   * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
   */
  yieldRecords?: Array<YieldRecord> | undefined;
};

/**
 * A response for the rebook trade method.
 */
export type RebookTradeResponse = {
  /**
   * The new trade that is booked.
   */
  newTrade?: NewTrade | null | undefined;
  /**
   * The original trade that was rebooked.
   */
  originalTrade?: OriginalTrade | null | undefined;
};

/** @internal */
export const RebookTradeResponseBrokerCapacity$inboundSchema: z.ZodType<
  RebookTradeResponseBrokerCapacityOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RebookTradeResponseBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RebookTradeResponseBrokerCapacity$outboundSchema: z.ZodType<
  RebookTradeResponseBrokerCapacityOpen,
  z.ZodTypeDef,
  RebookTradeResponseBrokerCapacityOpen
> = z.union([
  z.nativeEnum(RebookTradeResponseBrokerCapacity),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponseBrokerCapacity$ {
  /** @deprecated use `RebookTradeResponseBrokerCapacity$inboundSchema` instead. */
  export const inboundSchema = RebookTradeResponseBrokerCapacity$inboundSchema;
  /** @deprecated use `RebookTradeResponseBrokerCapacity$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponseBrokerCapacity$outboundSchema;
}

/** @internal */
export const RebookTradeResponsePrevailingMarketPrice$inboundSchema: z.ZodType<
  RebookTradeResponsePrevailingMarketPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type RebookTradeResponsePrevailingMarketPrice$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const RebookTradeResponsePrevailingMarketPrice$outboundSchema: z.ZodType<
  RebookTradeResponsePrevailingMarketPrice$Outbound,
  z.ZodTypeDef,
  RebookTradeResponsePrevailingMarketPrice
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponsePrevailingMarketPrice$ {
  /** @deprecated use `RebookTradeResponsePrevailingMarketPrice$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponsePrevailingMarketPrice$inboundSchema;
  /** @deprecated use `RebookTradeResponsePrevailingMarketPrice$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponsePrevailingMarketPrice$outboundSchema;
  /** @deprecated use `RebookTradeResponsePrevailingMarketPrice$Outbound` instead. */
  export type Outbound = RebookTradeResponsePrevailingMarketPrice$Outbound;
}

/** @internal */
export const RebookTradeResponsePriceAdjustmentAmount$inboundSchema: z.ZodType<
  RebookTradeResponsePriceAdjustmentAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type RebookTradeResponsePriceAdjustmentAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const RebookTradeResponsePriceAdjustmentAmount$outboundSchema: z.ZodType<
  RebookTradeResponsePriceAdjustmentAmount$Outbound,
  z.ZodTypeDef,
  RebookTradeResponsePriceAdjustmentAmount
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponsePriceAdjustmentAmount$ {
  /** @deprecated use `RebookTradeResponsePriceAdjustmentAmount$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponsePriceAdjustmentAmount$inboundSchema;
  /** @deprecated use `RebookTradeResponsePriceAdjustmentAmount$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponsePriceAdjustmentAmount$outboundSchema;
  /** @deprecated use `RebookTradeResponsePriceAdjustmentAmount$Outbound` instead. */
  export type Outbound = RebookTradeResponsePriceAdjustmentAmount$Outbound;
}

/** @internal */
export const RebookTradeResponsePriceAdjustmentPercent$inboundSchema: z.ZodType<
  RebookTradeResponsePriceAdjustmentPercent,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type RebookTradeResponsePriceAdjustmentPercent$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const RebookTradeResponsePriceAdjustmentPercent$outboundSchema:
  z.ZodType<
    RebookTradeResponsePriceAdjustmentPercent$Outbound,
    z.ZodTypeDef,
    RebookTradeResponsePriceAdjustmentPercent
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponsePriceAdjustmentPercent$ {
  /** @deprecated use `RebookTradeResponsePriceAdjustmentPercent$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponsePriceAdjustmentPercent$inboundSchema;
  /** @deprecated use `RebookTradeResponsePriceAdjustmentPercent$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponsePriceAdjustmentPercent$outboundSchema;
  /** @deprecated use `RebookTradeResponsePriceAdjustmentPercent$Outbound` instead. */
  export type Outbound = RebookTradeResponsePriceAdjustmentPercent$Outbound;
}

/** @internal */
export const RebookTradeResponsePriceAdjustmentType$inboundSchema: z.ZodType<
  RebookTradeResponsePriceAdjustmentTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RebookTradeResponsePriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RebookTradeResponsePriceAdjustmentType$outboundSchema: z.ZodType<
  RebookTradeResponsePriceAdjustmentTypeOpen,
  z.ZodTypeDef,
  RebookTradeResponsePriceAdjustmentTypeOpen
> = z.union([
  z.nativeEnum(RebookTradeResponsePriceAdjustmentType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponsePriceAdjustmentType$ {
  /** @deprecated use `RebookTradeResponsePriceAdjustmentType$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponsePriceAdjustmentType$inboundSchema;
  /** @deprecated use `RebookTradeResponsePriceAdjustmentType$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponsePriceAdjustmentType$outboundSchema;
}

/** @internal */
export const RebookTradeResponsePriceAdjustmentRecord$inboundSchema: z.ZodType<
  RebookTradeResponsePriceAdjustmentRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_adjustment_amount: z.nullable(
    z.lazy(() => RebookTradeResponsePriceAdjustmentAmount$inboundSchema),
  ).optional(),
  price_adjustment_percent: z.nullable(
    z.lazy(() => RebookTradeResponsePriceAdjustmentPercent$inboundSchema),
  ).optional(),
  price_adjustment_type: RebookTradeResponsePriceAdjustmentType$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "price_adjustment_amount": "priceAdjustmentAmount",
    "price_adjustment_percent": "priceAdjustmentPercent",
    "price_adjustment_type": "priceAdjustmentType",
  });
});

/** @internal */
export type RebookTradeResponsePriceAdjustmentRecord$Outbound = {
  price_adjustment_amount?:
    | RebookTradeResponsePriceAdjustmentAmount$Outbound
    | null
    | undefined;
  price_adjustment_percent?:
    | RebookTradeResponsePriceAdjustmentPercent$Outbound
    | null
    | undefined;
  price_adjustment_type?: string | undefined;
};

/** @internal */
export const RebookTradeResponsePriceAdjustmentRecord$outboundSchema: z.ZodType<
  RebookTradeResponsePriceAdjustmentRecord$Outbound,
  z.ZodTypeDef,
  RebookTradeResponsePriceAdjustmentRecord
> = z.object({
  priceAdjustmentAmount: z.nullable(
    z.lazy(() => RebookTradeResponsePriceAdjustmentAmount$outboundSchema),
  ).optional(),
  priceAdjustmentPercent: z.nullable(
    z.lazy(() => RebookTradeResponsePriceAdjustmentPercent$outboundSchema),
  ).optional(),
  priceAdjustmentType: RebookTradeResponsePriceAdjustmentType$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    priceAdjustmentAmount: "price_adjustment_amount",
    priceAdjustmentPercent: "price_adjustment_percent",
    priceAdjustmentType: "price_adjustment_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponsePriceAdjustmentRecord$ {
  /** @deprecated use `RebookTradeResponsePriceAdjustmentRecord$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponsePriceAdjustmentRecord$inboundSchema;
  /** @deprecated use `RebookTradeResponsePriceAdjustmentRecord$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponsePriceAdjustmentRecord$outboundSchema;
  /** @deprecated use `RebookTradeResponsePriceAdjustmentRecord$Outbound` instead. */
  export type Outbound = RebookTradeResponsePriceAdjustmentRecord$Outbound;
}

/** @internal */
export const NewTrade$inboundSchema: z.ZodType<
  NewTrade,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.array(z.string()).optional(),
  alternate_order_id: z.string().optional(),
  booking_api_trade_allocation_id: z.string().optional(),
  booking_api_trade_id: z.string().optional(),
  broker: z.string().optional(),
  broker_capacity: RebookTradeResponseBrokerCapacity$inboundSchema.optional(),
  client_memos: z.array(z.string()).optional(),
  client_order_id: z.string().optional(),
  exchange: z.string().optional(),
  execution_id: z.string().optional(),
  execution_only: z.boolean().optional(),
  external_id: z.string().optional(),
  fund_confirmation_number: z.string().optional(),
  gateway_client_order_id: z.string().optional(),
  internal_error: z.boolean().optional(),
  is_writeoff: z.boolean().optional(),
  lots: z.array(Lot$inboundSchema).optional(),
  order_id: z.string().optional(),
  prevailing_market_price: z.nullable(
    z.lazy(() => RebookTradeResponsePrevailingMarketPrice$inboundSchema),
  ).optional(),
  price_adjustment_record: z.nullable(
    z.lazy(() => RebookTradeResponsePriceAdjustmentRecord$inboundSchema),
  ).optional(),
  route: z.string().optional(),
  special_instructions: z.array(z.string()).optional(),
  symbol_description: z.string().optional(),
  when_issued: z.boolean().optional(),
  yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
    "alternate_order_id": "alternateOrderId",
    "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
    "booking_api_trade_id": "bookingApiTradeId",
    "broker_capacity": "brokerCapacity",
    "client_memos": "clientMemos",
    "client_order_id": "clientOrderId",
    "execution_id": "executionId",
    "execution_only": "executionOnly",
    "external_id": "externalId",
    "fund_confirmation_number": "fundConfirmationNumber",
    "gateway_client_order_id": "gatewayClientOrderId",
    "internal_error": "internalError",
    "is_writeoff": "isWriteoff",
    "order_id": "orderId",
    "prevailing_market_price": "prevailingMarketPrice",
    "price_adjustment_record": "priceAdjustmentRecord",
    "special_instructions": "specialInstructions",
    "symbol_description": "symbolDescription",
    "when_issued": "whenIssued",
    "yield_records": "yieldRecords",
  });
});

/** @internal */
export type NewTrade$Outbound = {
  additional_instructions?: Array<string> | undefined;
  alternate_order_id?: string | undefined;
  booking_api_trade_allocation_id?: string | undefined;
  booking_api_trade_id?: string | undefined;
  broker?: string | undefined;
  broker_capacity?: string | undefined;
  client_memos?: Array<string> | undefined;
  client_order_id?: string | undefined;
  exchange?: string | undefined;
  execution_id?: string | undefined;
  execution_only?: boolean | undefined;
  external_id?: string | undefined;
  fund_confirmation_number?: string | undefined;
  gateway_client_order_id?: string | undefined;
  internal_error?: boolean | undefined;
  is_writeoff?: boolean | undefined;
  lots?: Array<Lot$Outbound> | undefined;
  order_id?: string | undefined;
  prevailing_market_price?:
    | RebookTradeResponsePrevailingMarketPrice$Outbound
    | null
    | undefined;
  price_adjustment_record?:
    | RebookTradeResponsePriceAdjustmentRecord$Outbound
    | null
    | undefined;
  route?: string | undefined;
  special_instructions?: Array<string> | undefined;
  symbol_description?: string | undefined;
  when_issued?: boolean | undefined;
  yield_records?: Array<YieldRecord$Outbound> | undefined;
};

/** @internal */
export const NewTrade$outboundSchema: z.ZodType<
  NewTrade$Outbound,
  z.ZodTypeDef,
  NewTrade
> = z.object({
  additionalInstructions: z.array(z.string()).optional(),
  alternateOrderId: z.string().optional(),
  bookingApiTradeAllocationId: z.string().optional(),
  bookingApiTradeId: z.string().optional(),
  broker: z.string().optional(),
  brokerCapacity: RebookTradeResponseBrokerCapacity$outboundSchema.optional(),
  clientMemos: z.array(z.string()).optional(),
  clientOrderId: z.string().optional(),
  exchange: z.string().optional(),
  executionId: z.string().optional(),
  executionOnly: z.boolean().optional(),
  externalId: z.string().optional(),
  fundConfirmationNumber: z.string().optional(),
  gatewayClientOrderId: z.string().optional(),
  internalError: z.boolean().optional(),
  isWriteoff: z.boolean().optional(),
  lots: z.array(Lot$outboundSchema).optional(),
  orderId: z.string().optional(),
  prevailingMarketPrice: z.nullable(
    z.lazy(() => RebookTradeResponsePrevailingMarketPrice$outboundSchema),
  ).optional(),
  priceAdjustmentRecord: z.nullable(
    z.lazy(() => RebookTradeResponsePriceAdjustmentRecord$outboundSchema),
  ).optional(),
  route: z.string().optional(),
  specialInstructions: z.array(z.string()).optional(),
  symbolDescription: z.string().optional(),
  whenIssued: z.boolean().optional(),
  yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
    alternateOrderId: "alternate_order_id",
    bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
    bookingApiTradeId: "booking_api_trade_id",
    brokerCapacity: "broker_capacity",
    clientMemos: "client_memos",
    clientOrderId: "client_order_id",
    executionId: "execution_id",
    executionOnly: "execution_only",
    externalId: "external_id",
    fundConfirmationNumber: "fund_confirmation_number",
    gatewayClientOrderId: "gateway_client_order_id",
    internalError: "internal_error",
    isWriteoff: "is_writeoff",
    orderId: "order_id",
    prevailingMarketPrice: "prevailing_market_price",
    priceAdjustmentRecord: "price_adjustment_record",
    specialInstructions: "special_instructions",
    symbolDescription: "symbol_description",
    whenIssued: "when_issued",
    yieldRecords: "yield_records",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewTrade$ {
  /** @deprecated use `NewTrade$inboundSchema` instead. */
  export const inboundSchema = NewTrade$inboundSchema;
  /** @deprecated use `NewTrade$outboundSchema` instead. */
  export const outboundSchema = NewTrade$outboundSchema;
  /** @deprecated use `NewTrade$Outbound` instead. */
  export type Outbound = NewTrade$Outbound;
}

/** @internal */
export const RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradeBrokerCapacityOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(RebookTradeResponseOriginalTradeBrokerCapacity),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradeBrokerCapacityOpen,
    z.ZodTypeDef,
    RebookTradeResponseOriginalTradeBrokerCapacityOpen
  > = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradeBrokerCapacity),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponseOriginalTradeBrokerCapacity$ {
  /** @deprecated use `RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema;
}

/** @internal */
export const RebookTradeResponseOriginalTradePrevailingMarketPrice$inboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePrevailingMarketPrice,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
  });

/** @internal */
export type RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const RebookTradeResponseOriginalTradePrevailingMarketPrice$outboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound,
    z.ZodTypeDef,
    RebookTradeResponseOriginalTradePrevailingMarketPrice
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponseOriginalTradePrevailingMarketPrice$ {
  /** @deprecated use `RebookTradeResponseOriginalTradePrevailingMarketPrice$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponseOriginalTradePrevailingMarketPrice$inboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePrevailingMarketPrice$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponseOriginalTradePrevailingMarketPrice$outboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound` instead. */
  export type Outbound =
    RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound;
}

/** @internal */
export const RebookTradeResponseOriginalTradePriceAdjustmentAmount$inboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePriceAdjustmentAmount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
  });

/** @internal */
export type RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const RebookTradeResponseOriginalTradePriceAdjustmentAmount$outboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound,
    z.ZodTypeDef,
    RebookTradeResponseOriginalTradePriceAdjustmentAmount
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponseOriginalTradePriceAdjustmentAmount$ {
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentAmount$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponseOriginalTradePriceAdjustmentAmount$inboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentAmount$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponseOriginalTradePriceAdjustmentAmount$outboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound` instead. */
  export type Outbound =
    RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound;
}

/** @internal */
export const RebookTradeResponseOriginalTradePriceAdjustmentPercent$inboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePriceAdjustmentPercent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
  });

/** @internal */
export type RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const RebookTradeResponseOriginalTradePriceAdjustmentPercent$outboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound,
    z.ZodTypeDef,
    RebookTradeResponseOriginalTradePriceAdjustmentPercent
  > = z.object({
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponseOriginalTradePriceAdjustmentPercent$ {
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentPercent$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponseOriginalTradePriceAdjustmentPercent$inboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentPercent$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponseOriginalTradePriceAdjustmentPercent$outboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound` instead. */
  export type Outbound =
    RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound;
}

/** @internal */
export const RebookTradeResponseOriginalTradePriceAdjustmentType$inboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(RebookTradeResponseOriginalTradePriceAdjustmentType),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const RebookTradeResponseOriginalTradePriceAdjustmentType$outboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen,
    z.ZodTypeDef,
    RebookTradeResponseOriginalTradePriceAdjustmentTypeOpen
  > = z.union([
    z.nativeEnum(RebookTradeResponseOriginalTradePriceAdjustmentType),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponseOriginalTradePriceAdjustmentType$ {
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentType$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponseOriginalTradePriceAdjustmentType$inboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentType$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponseOriginalTradePriceAdjustmentType$outboundSchema;
}

/** @internal */
export const RebookTradeResponseOriginalTradePriceAdjustmentRecord$inboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePriceAdjustmentRecord,
    z.ZodTypeDef,
    unknown
  > = z.object({
    price_adjustment_amount: z.nullable(
      z.lazy(() =>
        RebookTradeResponseOriginalTradePriceAdjustmentAmount$inboundSchema
      ),
    ).optional(),
    price_adjustment_percent: z.nullable(
      z.lazy(() =>
        RebookTradeResponseOriginalTradePriceAdjustmentPercent$inboundSchema
      ),
    ).optional(),
    price_adjustment_type:
      RebookTradeResponseOriginalTradePriceAdjustmentType$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "price_adjustment_amount": "priceAdjustmentAmount",
      "price_adjustment_percent": "priceAdjustmentPercent",
      "price_adjustment_type": "priceAdjustmentType",
    });
  });

/** @internal */
export type RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound = {
  price_adjustment_amount?:
    | RebookTradeResponseOriginalTradePriceAdjustmentAmount$Outbound
    | null
    | undefined;
  price_adjustment_percent?:
    | RebookTradeResponseOriginalTradePriceAdjustmentPercent$Outbound
    | null
    | undefined;
  price_adjustment_type?: string | undefined;
};

/** @internal */
export const RebookTradeResponseOriginalTradePriceAdjustmentRecord$outboundSchema:
  z.ZodType<
    RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound,
    z.ZodTypeDef,
    RebookTradeResponseOriginalTradePriceAdjustmentRecord
  > = z.object({
    priceAdjustmentAmount: z.nullable(
      z.lazy(() =>
        RebookTradeResponseOriginalTradePriceAdjustmentAmount$outboundSchema
      ),
    ).optional(),
    priceAdjustmentPercent: z.nullable(
      z.lazy(() =>
        RebookTradeResponseOriginalTradePriceAdjustmentPercent$outboundSchema
      ),
    ).optional(),
    priceAdjustmentType:
      RebookTradeResponseOriginalTradePriceAdjustmentType$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      priceAdjustmentAmount: "price_adjustment_amount",
      priceAdjustmentPercent: "price_adjustment_percent",
      priceAdjustmentType: "price_adjustment_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponseOriginalTradePriceAdjustmentRecord$ {
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentRecord$inboundSchema` instead. */
  export const inboundSchema =
    RebookTradeResponseOriginalTradePriceAdjustmentRecord$inboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentRecord$outboundSchema` instead. */
  export const outboundSchema =
    RebookTradeResponseOriginalTradePriceAdjustmentRecord$outboundSchema;
  /** @deprecated use `RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound` instead. */
  export type Outbound =
    RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound;
}

/** @internal */
export const OriginalTrade$inboundSchema: z.ZodType<
  OriginalTrade,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.array(z.string()).optional(),
  alternate_order_id: z.string().optional(),
  booking_api_trade_allocation_id: z.string().optional(),
  booking_api_trade_id: z.string().optional(),
  broker: z.string().optional(),
  broker_capacity: RebookTradeResponseOriginalTradeBrokerCapacity$inboundSchema
    .optional(),
  client_memos: z.array(z.string()).optional(),
  client_order_id: z.string().optional(),
  exchange: z.string().optional(),
  execution_id: z.string().optional(),
  execution_only: z.boolean().optional(),
  external_id: z.string().optional(),
  fund_confirmation_number: z.string().optional(),
  gateway_client_order_id: z.string().optional(),
  internal_error: z.boolean().optional(),
  is_writeoff: z.boolean().optional(),
  lots: z.array(Lot$inboundSchema).optional(),
  order_id: z.string().optional(),
  prevailing_market_price: z.nullable(
    z.lazy(() =>
      RebookTradeResponseOriginalTradePrevailingMarketPrice$inboundSchema
    ),
  ).optional(),
  price_adjustment_record: z.nullable(
    z.lazy(() =>
      RebookTradeResponseOriginalTradePriceAdjustmentRecord$inboundSchema
    ),
  ).optional(),
  route: z.string().optional(),
  special_instructions: z.array(z.string()).optional(),
  symbol_description: z.string().optional(),
  when_issued: z.boolean().optional(),
  yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
    "alternate_order_id": "alternateOrderId",
    "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
    "booking_api_trade_id": "bookingApiTradeId",
    "broker_capacity": "brokerCapacity",
    "client_memos": "clientMemos",
    "client_order_id": "clientOrderId",
    "execution_id": "executionId",
    "execution_only": "executionOnly",
    "external_id": "externalId",
    "fund_confirmation_number": "fundConfirmationNumber",
    "gateway_client_order_id": "gatewayClientOrderId",
    "internal_error": "internalError",
    "is_writeoff": "isWriteoff",
    "order_id": "orderId",
    "prevailing_market_price": "prevailingMarketPrice",
    "price_adjustment_record": "priceAdjustmentRecord",
    "special_instructions": "specialInstructions",
    "symbol_description": "symbolDescription",
    "when_issued": "whenIssued",
    "yield_records": "yieldRecords",
  });
});

/** @internal */
export type OriginalTrade$Outbound = {
  additional_instructions?: Array<string> | undefined;
  alternate_order_id?: string | undefined;
  booking_api_trade_allocation_id?: string | undefined;
  booking_api_trade_id?: string | undefined;
  broker?: string | undefined;
  broker_capacity?: string | undefined;
  client_memos?: Array<string> | undefined;
  client_order_id?: string | undefined;
  exchange?: string | undefined;
  execution_id?: string | undefined;
  execution_only?: boolean | undefined;
  external_id?: string | undefined;
  fund_confirmation_number?: string | undefined;
  gateway_client_order_id?: string | undefined;
  internal_error?: boolean | undefined;
  is_writeoff?: boolean | undefined;
  lots?: Array<Lot$Outbound> | undefined;
  order_id?: string | undefined;
  prevailing_market_price?:
    | RebookTradeResponseOriginalTradePrevailingMarketPrice$Outbound
    | null
    | undefined;
  price_adjustment_record?:
    | RebookTradeResponseOriginalTradePriceAdjustmentRecord$Outbound
    | null
    | undefined;
  route?: string | undefined;
  special_instructions?: Array<string> | undefined;
  symbol_description?: string | undefined;
  when_issued?: boolean | undefined;
  yield_records?: Array<YieldRecord$Outbound> | undefined;
};

/** @internal */
export const OriginalTrade$outboundSchema: z.ZodType<
  OriginalTrade$Outbound,
  z.ZodTypeDef,
  OriginalTrade
> = z.object({
  additionalInstructions: z.array(z.string()).optional(),
  alternateOrderId: z.string().optional(),
  bookingApiTradeAllocationId: z.string().optional(),
  bookingApiTradeId: z.string().optional(),
  broker: z.string().optional(),
  brokerCapacity: RebookTradeResponseOriginalTradeBrokerCapacity$outboundSchema
    .optional(),
  clientMemos: z.array(z.string()).optional(),
  clientOrderId: z.string().optional(),
  exchange: z.string().optional(),
  executionId: z.string().optional(),
  executionOnly: z.boolean().optional(),
  externalId: z.string().optional(),
  fundConfirmationNumber: z.string().optional(),
  gatewayClientOrderId: z.string().optional(),
  internalError: z.boolean().optional(),
  isWriteoff: z.boolean().optional(),
  lots: z.array(Lot$outboundSchema).optional(),
  orderId: z.string().optional(),
  prevailingMarketPrice: z.nullable(
    z.lazy(() =>
      RebookTradeResponseOriginalTradePrevailingMarketPrice$outboundSchema
    ),
  ).optional(),
  priceAdjustmentRecord: z.nullable(
    z.lazy(() =>
      RebookTradeResponseOriginalTradePriceAdjustmentRecord$outboundSchema
    ),
  ).optional(),
  route: z.string().optional(),
  specialInstructions: z.array(z.string()).optional(),
  symbolDescription: z.string().optional(),
  whenIssued: z.boolean().optional(),
  yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
    alternateOrderId: "alternate_order_id",
    bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
    bookingApiTradeId: "booking_api_trade_id",
    brokerCapacity: "broker_capacity",
    clientMemos: "client_memos",
    clientOrderId: "client_order_id",
    executionId: "execution_id",
    executionOnly: "execution_only",
    externalId: "external_id",
    fundConfirmationNumber: "fund_confirmation_number",
    gatewayClientOrderId: "gateway_client_order_id",
    internalError: "internal_error",
    isWriteoff: "is_writeoff",
    orderId: "order_id",
    prevailingMarketPrice: "prevailing_market_price",
    priceAdjustmentRecord: "price_adjustment_record",
    specialInstructions: "special_instructions",
    symbolDescription: "symbol_description",
    whenIssued: "when_issued",
    yieldRecords: "yield_records",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OriginalTrade$ {
  /** @deprecated use `OriginalTrade$inboundSchema` instead. */
  export const inboundSchema = OriginalTrade$inboundSchema;
  /** @deprecated use `OriginalTrade$outboundSchema` instead. */
  export const outboundSchema = OriginalTrade$outboundSchema;
  /** @deprecated use `OriginalTrade$Outbound` instead. */
  export type Outbound = OriginalTrade$Outbound;
}

/** @internal */
export const RebookTradeResponse$inboundSchema: z.ZodType<
  RebookTradeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  new_trade: z.nullable(z.lazy(() => NewTrade$inboundSchema)).optional(),
  original_trade: z.nullable(z.lazy(() => OriginalTrade$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "new_trade": "newTrade",
    "original_trade": "originalTrade",
  });
});

/** @internal */
export type RebookTradeResponse$Outbound = {
  new_trade?: NewTrade$Outbound | null | undefined;
  original_trade?: OriginalTrade$Outbound | null | undefined;
};

/** @internal */
export const RebookTradeResponse$outboundSchema: z.ZodType<
  RebookTradeResponse$Outbound,
  z.ZodTypeDef,
  RebookTradeResponse
> = z.object({
  newTrade: z.nullable(z.lazy(() => NewTrade$outboundSchema)).optional(),
  originalTrade: z.nullable(z.lazy(() => OriginalTrade$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    newTrade: "new_trade",
    originalTrade: "original_trade",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebookTradeResponse$ {
  /** @deprecated use `RebookTradeResponse$inboundSchema` instead. */
  export const inboundSchema = RebookTradeResponse$inboundSchema;
  /** @deprecated use `RebookTradeResponse$outboundSchema` instead. */
  export const outboundSchema = RebookTradeResponse$outboundSchema;
  /** @deprecated use `RebookTradeResponse$Outbound` instead. */
  export type Outbound = RebookTradeResponse$Outbound;
}
