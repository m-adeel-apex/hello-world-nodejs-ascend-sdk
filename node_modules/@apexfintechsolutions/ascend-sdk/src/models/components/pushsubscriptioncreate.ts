/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  HttpPushCallbackCreate,
  HttpPushCallbackCreate$inboundSchema,
  HttpPushCallbackCreate$Outbound,
  HttpPushCallbackCreate$outboundSchema,
} from "./httppushcallbackcreate.js";

/**
 * Configuration information about a push subscription
 */
export type PushSubscriptionCreate = {
  /**
   * The client that owns the subscription. A client subscription will receive events for it and all of its correspondents. This can only be set at creation time and is mutually exclusive with correspondent_id.
   */
  clientId?: string | undefined;
  /**
   * The correspondent that owns the subscription. A correspondent subscription will receive events only for itself. This can only be set at creation time and is mutually exclusive with client_id.
   */
  correspondentId?: string | undefined;
  /**
   * The user-defined name for the subscription
   */
  displayName: string;
  /**
   * Filter for event types; ["\*"] matches all values; Suffix wildcards using "\*" (e.g. ["account.\*"]) are supported
   */
  eventTypes: Array<string>;
  /**
   * Configuration information about an HTTP target callback
   */
  httpCallback?: HttpPushCallbackCreate | undefined;
};

/** @internal */
export const PushSubscriptionCreate$inboundSchema: z.ZodType<
  PushSubscriptionCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_id: z.string().optional(),
  correspondent_id: z.string().optional(),
  display_name: z.string(),
  event_types: z.array(z.string()),
  http_callback: HttpPushCallbackCreate$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "correspondent_id": "correspondentId",
    "display_name": "displayName",
    "event_types": "eventTypes",
    "http_callback": "httpCallback",
  });
});

/** @internal */
export type PushSubscriptionCreate$Outbound = {
  client_id?: string | undefined;
  correspondent_id?: string | undefined;
  display_name: string;
  event_types: Array<string>;
  http_callback?: HttpPushCallbackCreate$Outbound | undefined;
};

/** @internal */
export const PushSubscriptionCreate$outboundSchema: z.ZodType<
  PushSubscriptionCreate$Outbound,
  z.ZodTypeDef,
  PushSubscriptionCreate
> = z.object({
  clientId: z.string().optional(),
  correspondentId: z.string().optional(),
  displayName: z.string(),
  eventTypes: z.array(z.string()),
  httpCallback: HttpPushCallbackCreate$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    correspondentId: "correspondent_id",
    displayName: "display_name",
    eventTypes: "event_types",
    httpCallback: "http_callback",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushSubscriptionCreate$ {
  /** @deprecated use `PushSubscriptionCreate$inboundSchema` instead. */
  export const inboundSchema = PushSubscriptionCreate$inboundSchema;
  /** @deprecated use `PushSubscriptionCreate$outboundSchema` instead. */
  export const outboundSchema = PushSubscriptionCreate$outboundSchema;
  /** @deprecated use `PushSubscriptionCreate$Outbound` instead. */
  export type Outbound = PushSubscriptionCreate$Outbound;
}
