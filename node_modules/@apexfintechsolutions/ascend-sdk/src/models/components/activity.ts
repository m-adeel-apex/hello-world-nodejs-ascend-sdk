/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import {
  AccruedInterest,
  AccruedInterest$inboundSchema,
  AccruedInterest$Outbound,
  AccruedInterest$outboundSchema,
} from "./accruedinterest.js";
import {
  Commission,
  Commission$inboundSchema,
  Commission$Outbound,
  Commission$outboundSchema,
} from "./commission.js";
import {
  Fee,
  Fee$inboundSchema,
  Fee$Outbound,
  Fee$outboundSchema,
} from "./fee.js";
import {
  Lot,
  Lot$inboundSchema,
  Lot$Outbound,
  Lot$outboundSchema,
} from "./lot.js";
import {
  Withholding,
  Withholding$inboundSchema,
  Withholding$Outbound,
  Withholding$outboundSchema,
} from "./withholding.js";
import {
  WithholdingData,
  WithholdingData$inboundSchema,
  WithholdingData$Outbound,
  WithholdingData$outboundSchema,
} from "./withholdingdata.js";
import {
  YieldRecord,
  YieldRecord$inboundSchema,
  YieldRecord$Outbound,
  YieldRecord$outboundSchema,
} from "./yieldrecord.js";

/**
 * Used to record the movement of funds or shares to/ from the pending_acats memo location
 */
export type ActivityAcatsPendingOut = {
  /**
   * Unique Identifier generated by the NSCC ACATS when a transfer is initiated or submitted
   */
  acatsControlNumber?: string | undefined;
  /**
   * Free form text field containing additional information about a transaction
   */
  additionalInstructions?: string | undefined;
};

/**
 * Indicates the memo location impacted by an entry
 */
export enum ActivityAccountMemo {
  MemoTypeUnspecified = "MEMO_TYPE_UNSPECIFIED",
  FullyPaidStockLoan = "FULLY_PAID_STOCK_LOAN",
  Free = "FREE",
  PendingOutgoingAcat = "PENDING_OUTGOING_ACAT",
  PendingDrip = "PENDING_DRIP",
  PendingWithdrawal = "PENDING_WITHDRAWAL",
}
/**
 * Indicates the memo location impacted by an entry
 */
export type ActivityAccountMemoOpen = OpenEnum<typeof ActivityAccountMemo>;

/**
 * Denotes whether the shares are incoming or outgoing
 */
export enum ActivityAction {
  ActionUnspecified = "ACTION_UNSPECIFIED",
  Incoming = "INCOMING",
  Outgoing = "OUTGOING",
  CashInLieu = "CASH_IN_LIEU",
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityActionOpen = OpenEnum<typeof ActivityAction>;

/**
 * The method used for the account transfer
 */
export enum ActivityMethod {
  AccountTransferMethodUnspecified = "ACCOUNT_TRANSFER_METHOD_UNSPECIFIED",
  Acats = "ACATS",
  Internal = "INTERNAL",
  Manual = "MANUAL",
}
/**
 * The method used for the account transfer
 */
export type ActivityMethodOpen = OpenEnum<typeof ActivityMethod>;

/**
 * Used to record the movement of funds or shares during the bookkeeping phase of an account transfer and details related to the account transfer
 */
export type ActivityAccountTransfer = {
  /**
   * Sequence number assigned by the DTCC ACATS transfer system for each asset transferred
   */
  acatsAssetSequenceNumber?: string | undefined;
  /**
   * Unique Identifier generated by the NSCC ACATS when a transfer is initiated or submitted
   */
  acatsControlNumber?: string | undefined;
  /**
   * Denotes whether the shares are incoming or outgoing
   */
  action?: ActivityActionOpen | undefined;
  /**
   * Free form text field containing additional information about a transaction
   */
  additionalInstructions?: string | undefined;
  /**
   * Account number at the contra firm
   */
  contraPartyAccountNumber?: string | undefined;
  /**
   * Contra party identifier
   */
  contraPartyId?: string | undefined;
  /**
   * Contra party institution for the account transfer
   */
  institution?: string | undefined;
  /**
   * The method used for the account transfer
   */
  method?: ActivityMethodOpen | undefined;
};

/**
 * Used to record the amount of interest that has been earned but not yet paid between the last interest payment and the date of the trade
 */
export type AccruedInterestDesc = {};

/**
 * The activity date refers to the specific calendar day on which a financial transaction, such as a trade at an exchange or a deposit at a bank, was executed. This date is specific to the institution where the transaction took place, capturing the exact day on which the institution formally records and effects the transaction
 */
export type ActivityActivityDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivityCapitalGainsQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Used to record a distribution of cash that an issuer has determined will be declared as income financed from capital gains and not ordinary income and details related to the capital gain
 */
export type ActivityCapitalGains = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * Can indicate the capital gain is eligible for preferential tax treatment
   */
  longTermGain?: boolean | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityPaymentDate | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivityCapitalGainsQuantity | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivityRecordDate | null | undefined;
  /**
   * Indicates whether the cash dividend was reinvested
   */
  reinvested?: boolean | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityCashDividendCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Number of shares loaned out via the FPSL program on record_date
 */
export type ActivityCashDividendFpsl = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Number of shares not loaned out via the FPSL program on record_date
 */
export type ActivityFree = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityCashDividendPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * When ex-date occurs before the record date, quantity will equal the settled date position balance on the position date of the event When ex-date occurs after the record date, quantity will equal the trade date position balance on the position date of the event
 */
export type ActivityCashDividendQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityCashDividendRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivitySettled = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The subtype for the corporate action event
 */
export enum ActivitySubtype {
  CorporateactionsubtypeUnspecified = "CORPORATEACTIONSUBTYPE_UNSPECIFIED",
  AdditionalDividend = "ADDITIONAL_DIVIDEND",
  ApproximateRate = "APPROXIMATE_RATE",
  DividendArrears = "DIVIDEND_ARREARS",
  DividendCancelled = "DIVIDEND_CANCELLED",
  DividendPaymentTaxClassifications = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS",
  DividendRescinded = "DIVIDEND_RESCINDED",
  EstimatedReturnOfCapital = "ESTIMATED_RETURN_OF_CAPITAL",
  EstimatedReturnOfCapitalPlusIncome =
    "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME",
  ExtraDividend = "EXTRA_DIVIDEND",
  ExtraDividendPlusIncome = "EXTRA_DIVIDEND_PLUS_INCOME",
  FinalPaymentTransferBooksAreClosed =
    "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED",
  GrossRate = "GROSS_RATE",
  InitialDividend = "INITIAL_DIVIDEND",
  InitialDividendLongPeriod = "INITIAL_DIVIDEND_LONG_PERIOD",
  InitialDividendShortPeriod = "INITIAL_DIVIDEND_SHORT_PERIOD",
  LimitedPartnershipDistribution = "LIMITED_PARTNERSHIP_DISTRIBUTION",
  Liquidation = "LIQUIDATION",
  NetRate = "NET_RATE",
  Other = "OTHER",
  ProceedsFromSaleOfRights = "PROCEEDS_FROM_SALE_OF_RIGHTS",
  RegularDividend = "REGULAR_DIVIDEND",
  ReturnOfCapital = "RETURN_OF_CAPITAL",
  ReturnOfCapitalPlusIncome = "RETURN_OF_CAPITAL_PLUS_INCOME",
  SpecialDividend = "SPECIAL_DIVIDEND",
  SpecialDividendPlusIncome = "SPECIAL_DIVIDEND_PLUS_INCOME",
  YearEndDividend = "YEAR_END_DIVIDEND",
  YearEndDividendPlusIncome = "YEAR_END_DIVIDEND_PLUS_INCOME",
  Partial = "PARTIAL",
  Full = "FULL",
  Maturity = "MATURITY",
  Termination = "TERMINATION",
  RedemptionOfWarrants = "REDEMPTION_OF_WARRANTS",
}
/**
 * The subtype for the corporate action event
 */
export type ActivitySubtypeOpen = OpenEnum<typeof ActivitySubtype>;

/**
 * Used to record the distribution of cash to shareholders, paid by the issuer, usually based upon current earnings and/or accumulated profits as declared by the board of directors and details related to the cash dividend
 */
export type ActivityCashDividend = {
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityCashDividendCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * Number of shares loaned out via the FPSL program on record_date
   */
  fpsl?: ActivityCashDividendFpsl | null | undefined;
  /**
   * Number of shares not loaned out via the FPSL program on record_date
   */
  free?: ActivityFree | null | undefined;
  /**
   * Can indicate the capital gain is eligible for preferential tax treatment
   */
  longTermGain?: boolean | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityCashDividendPaymentDate | null | undefined;
  /**
   * If populated, can indicates whether the transaction may be taxed at a preferential rate
   */
  qualified?: boolean | undefined;
  /**
   * When ex-date occurs before the record date, quantity will equal the settled date position balance on the position date of the event When ex-date occurs after the record date, quantity will equal the trade date position balance on the position date of the event
   */
  quantity?: ActivityCashDividendQuantity | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivityCashDividendRecordDate | null | undefined;
  /**
   * Indicates whether the cash dividend was reinvested
   */
  reinvested?: boolean | undefined;
  /**
   * The accounts settled position for which the corporate action was paid
   */
  settled?: ActivitySettled | null | undefined;
  /**
   * Indicates that this portion of the dividend was paid on a position that is currently loaned out
   */
  substitutePayment?: boolean | undefined;
  /**
   * The subtype for the corporate action event
   */
  subtype?: ActivitySubtypeOpen | undefined;
};

/**
 * Used to record commission charged by brokers or financial intermediaries for executing financial transactions on behalf of clients
 */
export type ActivityCommission = {};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityConversionCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityConversionCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityStockRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The subtype for the corporate action event
 */
export enum ActivityConversionType {
  EventTypeUnspecified = "EVENT_TYPE_UNSPECIFIED",
  Cash = "CASH",
  Stock = "STOCK",
  CashAndStock = "CASH_AND_STOCK",
}
/**
 * The subtype for the corporate action event
 */
export type ActivityConversionTypeOpen = OpenEnum<
  typeof ActivityConversionType
>;

/**
 * Used to record the conversion of securities (generally convertible bonds or preferred shares) into another form of securities (usually common shares) at a pre-stated price or rate and details related to the conversion
 */
export type ActivityConversion = {
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityConversionCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityConversionCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
   */
  stockRate?: ActivityStockRate | null | undefined;
  /**
   * The subtype for the corporate action event
   */
  type?: ActivityConversionTypeOpen | undefined;
};

/**
 * Used to record memo location adjustments initiated by the corporate action system due to reorg events
 */
export type ActivityCorporateActionMemoAdjustment = {
  /**
   * This field serves as a unique identifier for the specific corporate action linked to the memo adjustment
   */
  corporateActionId?: string | undefined;
  /**
   * Used to capture the specific type of corporate action related to the memo adjustment
   */
  corporateActionType?: string | undefined;
};

/**
 * Further detail describing the type of credit
 */
export enum ActivityCreditType {
  CreditTypeUnspecified = "CREDIT_TYPE_UNSPECIFIED",
  FullyPaidStockLoan = "FULLY_PAID_STOCK_LOAN",
  WriteOff = "WRITE_OFF",
  Reimbursement = "REIMBURSEMENT",
  Promotional = "PROMOTIONAL",
  FdicInsuredDepositProgram = "FDIC_INSURED_DEPOSIT_PROGRAM",
  AccountTransferAdjustment = "ACCOUNT_TRANSFER_ADJUSTMENT",
}
/**
 * Further detail describing the type of credit
 */
export type ActivityCreditTypeOpen = OpenEnum<typeof ActivityCreditType>;

/**
 * Used to disburse funds into a customer's account, typically for purposes such as refunds, interest payments, or rewards from enrolled programs and details related to the credit
 */
export type ActivityCredit = {
  /**
   * Free form text field providing additional information about a transaction
   */
  additionalInstructions?: string | undefined;
  /**
   * Further detail describing the type of credit
   */
  creditType?: ActivityCreditTypeOpen | undefined;
  /**
   * No longer applicable
   */
  taxable?: boolean | undefined;
};

/**
 * Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
 */
export enum ActivityContributionType {
  ContributionTypeUnspecified = "CONTRIBUTION_TYPE_UNSPECIFIED",
  Regular = "REGULAR",
  Employee = "EMPLOYEE",
  Employer = "EMPLOYER",
  Recharacterization = "RECHARACTERIZATION",
  Rollover60Day = "ROLLOVER_60_DAY",
  RolloverDirect = "ROLLOVER_DIRECT",
  Transfer = "TRANSFER",
  TrusteeFee = "TRUSTEE_FEE",
  Conversion = "CONVERSION",
  Repayment = "REPAYMENT",
  ContributionNonReportable = "CONTRIBUTION_NON_REPORTABLE",
}
/**
 * Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
 */
export type ActivityContributionTypeOpen = OpenEnum<
  typeof ActivityContributionType
>;

/**
 * The mechanism by which funds were deposited
 */
export enum ActivityDepositType {
  ExternalMovementTypeUnspecified = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED",
  Ach = "ACH",
  Check = "CHECK",
  Wire = "WIRE",
  Paypal = "PAYPAL",
  Rtp = "RTP",
  Ict = "ICT",
  Journal = "JOURNAL",
}
/**
 * The mechanism by which funds were deposited
 */
export type ActivityDepositTypeOpen = OpenEnum<typeof ActivityDepositType>;

/**
 * Used to record deposits of funds into an account and capture details related to the deposit
 */
export type ActivityDeposit = {
  /**
   * Free form text field providing additional information about a transaction
   */
  additionalInstructions?: string | undefined;
  /**
   * Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
   */
  contributionType?: ActivityContributionTypeOpen | undefined;
  /**
   * Integer representing the tax year the contribution should be applied to
   */
  contributionYear?: number | undefined;
  /**
   * Unique tracking number provided to allow tracking a wire transfer from the initiating bank to the receiving bank
   */
  fedReferenceNumber?: string | undefined;
  /**
   * Human readable account identifier for the account the assets were journaled from. To be populated when the Deposit type is Journal
   */
  originatingAccountNumber?: string | undefined;
  /**
   * The mechanism by which funds were deposited
   */
  type?: ActivityDepositTypeOpen | undefined;
};

/**
 * Denotes whether the reinvestment is pending or complete
 */
export enum ActivityDripAction {
  DripActionUnspecified = "DRIP_ACTION_UNSPECIFIED",
  DripPending = "DRIP_PENDING",
  DripComplete = "DRIP_COMPLETE",
}
/**
 * Denotes whether the reinvestment is pending or complete
 */
export type ActivityDripActionOpen = OpenEnum<typeof ActivityDripAction>;

/**
 * Used to record the movement of funds to/ from the pending_drip memo location
 */
export type ActivityDrip = {
  /**
   * Denotes whether the reinvestment is pending or complete
   */
  action?: ActivityDripActionOpen | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityExchangeCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityExchangeCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityExchangeStockRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Indicates whether the merger was for cash, stock, or both
 */
export enum ActivityExchangeType {
  EventTypeUnspecified = "EVENT_TYPE_UNSPECIFIED",
  Cash = "CASH",
  Stock = "STOCK",
  CashAndStock = "CASH_AND_STOCK",
}
/**
 * Indicates whether the merger was for cash, stock, or both
 */
export type ActivityExchangeTypeOpen = OpenEnum<typeof ActivityExchangeType>;

/**
 * Used to record the exchange of certificates for a new security or cash and details related to the exchange
 */
export type ActivityExchange = {
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityExchangeCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityExchangeCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
   */
  stockRate?: ActivityExchangeStockRate | null | undefined;
  /**
   * Indicates whether the merger was for cash, stock, or both
   */
  type?: ActivityExchangeTypeOpen | undefined;
};

/**
 * Used to record Fees that have been assessed to account and capture details related to the fee
 */
export type ActivityFee = {
  /**
   * Free form text field providing additional information about a transaction
   */
  additionalInstructions?: string | undefined;
};

/**
 * Denotes whether the shares are incoming or outgoing
 */
export enum ActivityFpslAction {
  FpslActionUnspecified = "FPSL_ACTION_UNSPECIFIED",
  Allocate = "ALLOCATE",
  Deallocate = "DEALLOCATE",
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityFpslActionOpen = OpenEnum<typeof ActivityFpslAction>;

/**
 * Used to record the movements of shares to/ from the fpsl memo location and details related to the fpsl memo
 */
export type ActivityFpsl = {
  /**
   * Denotes whether the shares are incoming or outgoing
   */
  action?: ActivityFpslActionOpen | undefined;
};

/**
 * The monetary value of an activity, exclusive of any fees, withholdings, accrued_interest, or commissions (First money)
 */
export type ActivityGrossAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Date on which interest accrues before the calculation is made for payment or charge
 */
export type ActivityInterestAccrualEndDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Date on which interest begins to accrue on a cash balance or borrowed funds
 */
export type ActivityInterestAccrualStartDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

export enum ActivityInterestType {
  InterestTypeUnspecified = "INTEREST_TYPE_UNSPECIFIED",
  Credit = "CREDIT",
  Debit = "DEBIT",
}
export type ActivityInterestTypeOpen = OpenEnum<typeof ActivityInterestType>;

/**
 * Used to record the payment of interest to accounts that have maintained a cash balance or the charging of interest to accounts that have used margin and details related to the interest
 */
export type ActivityInterest = {
  /**
   * Date on which interest accrues before the calculation is made for payment or charge
   */
  interestAccrualEndDate?: ActivityInterestAccrualEndDate | null | undefined;
  /**
   * Date on which interest begins to accrue on a cash balance or borrowed funds
   */
  interestAccrualStartDate?:
    | ActivityInterestAccrualStartDate
    | null
    | undefined;
  interestType?: ActivityInterestTypeOpen | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityInterestPaymentCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityInterestPaymentCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityInterestPaymentPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityInterestPaymentRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivityInterestPaymentSettled = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used to record the The payment of an obligation an issuer has agreed to make to holders of an interest-bearing security and details related to the interest payment. Usually, the payment is made in cash and on a scheduled basis
 */
export type ActivityInterestPayment = {
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityInterestPaymentCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityInterestPaymentCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityInterestPaymentPaymentDate | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivityInterestPaymentRecordDate | null | undefined;
  /**
   * The accounts settled position for which the corporate action was paid
   */
  settled?: ActivityInterestPaymentSettled | null | undefined;
};

/**
 * Denotes whether the shares are incoming or outgoing
 */
export enum ActivityLiquidationAction {
  ActionUnspecified = "ACTION_UNSPECIFIED",
  Incoming = "INCOMING",
  Outgoing = "OUTGOING",
  CashInLieu = "CASH_IN_LIEU",
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityLiquidationActionOpen = OpenEnum<
  typeof ActivityLiquidationAction
>;

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityLiquidationCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityLiquidationCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
 */
export type ActivityEffectiveDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityLiquidationPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivityLiquidationQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityLiquidationRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivityLiquidationSettled = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The subtype for the corporate action event
 */
export enum ActivityLiquidationSubtype {
  CorporateactionsubtypeUnspecified = "CORPORATEACTIONSUBTYPE_UNSPECIFIED",
  AdditionalDividend = "ADDITIONAL_DIVIDEND",
  ApproximateRate = "APPROXIMATE_RATE",
  DividendArrears = "DIVIDEND_ARREARS",
  DividendCancelled = "DIVIDEND_CANCELLED",
  DividendPaymentTaxClassifications = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS",
  DividendRescinded = "DIVIDEND_RESCINDED",
  EstimatedReturnOfCapital = "ESTIMATED_RETURN_OF_CAPITAL",
  EstimatedReturnOfCapitalPlusIncome =
    "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME",
  ExtraDividend = "EXTRA_DIVIDEND",
  ExtraDividendPlusIncome = "EXTRA_DIVIDEND_PLUS_INCOME",
  FinalPaymentTransferBooksAreClosed =
    "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED",
  GrossRate = "GROSS_RATE",
  InitialDividend = "INITIAL_DIVIDEND",
  InitialDividendLongPeriod = "INITIAL_DIVIDEND_LONG_PERIOD",
  InitialDividendShortPeriod = "INITIAL_DIVIDEND_SHORT_PERIOD",
  LimitedPartnershipDistribution = "LIMITED_PARTNERSHIP_DISTRIBUTION",
  Liquidation = "LIQUIDATION",
  NetRate = "NET_RATE",
  Other = "OTHER",
  ProceedsFromSaleOfRights = "PROCEEDS_FROM_SALE_OF_RIGHTS",
  RegularDividend = "REGULAR_DIVIDEND",
  ReturnOfCapital = "RETURN_OF_CAPITAL",
  ReturnOfCapitalPlusIncome = "RETURN_OF_CAPITAL_PLUS_INCOME",
  SpecialDividend = "SPECIAL_DIVIDEND",
  SpecialDividendPlusIncome = "SPECIAL_DIVIDEND_PLUS_INCOME",
  YearEndDividend = "YEAR_END_DIVIDEND",
  YearEndDividendPlusIncome = "YEAR_END_DIVIDEND_PLUS_INCOME",
  Partial = "PARTIAL",
  Full = "FULL",
  Maturity = "MATURITY",
  Termination = "TERMINATION",
  RedemptionOfWarrants = "REDEMPTION_OF_WARRANTS",
}
/**
 * The subtype for the corporate action event
 */
export type ActivityLiquidationSubtypeOpen = OpenEnum<
  typeof ActivityLiquidationSubtype
>;

/**
 * Used to record the dismantling of a business by an issuer, paying off debts in order of priority and distributing the remaining assets in cash and/or securities to the owners of the securities and details related to the liquidation
 */
export type ActivityLiquidation = {
  /**
   * Denotes whether the shares are incoming or outgoing
   */
  action?: ActivityLiquidationActionOpen | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityLiquidationCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityLiquidationCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
   */
  effectiveDate?: ActivityEffectiveDate | null | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityLiquidationPaymentDate | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivityLiquidationQuantity | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivityLiquidationRecordDate | null | undefined;
  /**
   * The accounts settled position for which the corporate action was paid
   */
  settled?: ActivityLiquidationSettled | null | undefined;
  /**
   * The subtype for the corporate action event
   */
  subtype?: ActivityLiquidationSubtypeOpen | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityMaturityCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityMaturityCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository.
 */
export type ActivityMaturityPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The trade position quantity used to calculate the disbursed amount
 */
export type ActivityMaturityQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used to record he final repayment, usually in cash, by an issuer for the entire issue, or remaining outstanding securities of a specific security on a specified date and details related to the maturity
 */
export type ActivityMaturity = {
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityMaturityCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityMaturityCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository.
   */
  paymentDate?: ActivityMaturityPaymentDate | null | undefined;
  /**
   * The trade position quantity used to calculate the disbursed amount
   */
  quantity?: ActivityMaturityQuantity | null | undefined;
};

/**
 * Denotes whether the shares are incoming or outgoing
 */
export enum ActivityMergerAction {
  ActionUnspecified = "ACTION_UNSPECIFIED",
  Incoming = "INCOMING",
  Outgoing = "OUTGOING",
  CashInLieu = "CASH_IN_LIEU",
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityMergerActionOpen = OpenEnum<typeof ActivityMergerAction>;

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityMergerCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityMergerCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
 */
export type ActivityMergerEffectiveDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivityMergerQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityMergerStockRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The subtype for the corporate action event
 */
export enum ActivityMergerType {
  EventTypeUnspecified = "EVENT_TYPE_UNSPECIFIED",
  Cash = "CASH",
  Stock = "STOCK",
  CashAndStock = "CASH_AND_STOCK",
}
/**
 * The subtype for the corporate action event
 */
export type ActivityMergerTypeOpen = OpenEnum<typeof ActivityMergerType>;

/**
 * Used to record the exchange of one company's security for another company's security, cash, or a combination of cash and securities and details related to the merger
 */
export type ActivityMerger = {
  /**
   * Denotes whether the shares are incoming or outgoing
   */
  action?: ActivityMergerActionOpen | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityMergerCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityMergerCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
   */
  effectiveDate?: ActivityMergerEffectiveDate | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivityMergerQuantity | null | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
   */
  stockRate?: ActivityMergerStockRate | null | undefined;
  /**
   * The subtype for the corporate action event
   */
  type?: ActivityMergerTypeOpen | undefined;
};

/**
 * Denotes whether the shares are incoming or outgoing
 */
export enum ActivityNameChangeAction {
  ActionUnspecified = "ACTION_UNSPECIFIED",
  Incoming = "INCOMING",
  Outgoing = "OUTGOING",
  CashInLieu = "CASH_IN_LIEU",
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityNameChangeActionOpen = OpenEnum<
  typeof ActivityNameChangeAction
>;

/**
 * Common fields for corporate actions
 */
export type ActivityNameChangeCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
 */
export type ActivityNameChangeEffectiveDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivityNameChangeQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used to record changes in the name of a security/securities by the issuer which result in surrendering physical securities or the assigning of a new security identifier which result in new securities being issued and details related to the name changes
 */
export type ActivityNameChange = {
  /**
   * Denotes whether the shares are incoming or outgoing
   */
  action?: ActivityNameChangeActionOpen | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityNameChangeCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
   */
  effectiveDate?: ActivityNameChangeEffectiveDate | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivityNameChangeQuantity | null | undefined;
};

/**
 * The monetary value of an activity, inclusive of fees, withholding, commisions, etc (Second Money)
 */
export type ActivityNetAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * the process date of the next activity(nil if the next_activity_id is an empty string)
 */
export type NextActivityProcessDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * None
 */
export type None = {};

/**
 * Common fields for corporate actions
 */
export type ActivityPaymentInKindCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityPaymentInKindPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityPaymentInKindRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Corresponds to the position's settled quantity
 */
export type ActivityPaymentInKindSettled = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityPaymentInKindStockRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used to record payments on interest-bearing securities where the payment is made in additional securities rather than cash and details related to the payment
 */
export type ActivityPaymentInKind = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityPaymentInKindCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityPaymentInKindPaymentDate | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivityPaymentInKindRecordDate | null | undefined;
  /**
   * Corresponds to the position's settled quantity
   */
  settled?: ActivityPaymentInKindSettled | null | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
   */
  stockRate?: ActivityPaymentInKindStockRate | null | undefined;
};

/**
 * When populated, the processing_date of the previous_activity_id
 */
export type PreviousProcessDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The monetary value paid for a given security in a trade Not populated on a currency only movement
 */
export type ActivityPrice = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The date that the activity was booked to the ledger
 */
export type ActivityProcessDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The quantity of shares bought, sold, or moved for a given entry/activity Required if activity.state != PENDING
 */
export type ActivityQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Denotes whether the shares are incoming or outgoing
 */
export enum ActivityRedemptionFullAction {
  ActionUnspecified = "ACTION_UNSPECIFIED",
  Incoming = "INCOMING",
  Outgoing = "OUTGOING",
  CashInLieu = "CASH_IN_LIEU",
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityRedemptionFullActionOpen = OpenEnum<
  typeof ActivityRedemptionFullAction
>;

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityRedemptionFullCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityRedemptionFullCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityRedemptionFullPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivityRedemptionFullQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The subtype for the corporate action event
 */
export enum ActivityRedemptionFullSubtype {
  CorporateactionsubtypeUnspecified = "CORPORATEACTIONSUBTYPE_UNSPECIFIED",
  AdditionalDividend = "ADDITIONAL_DIVIDEND",
  ApproximateRate = "APPROXIMATE_RATE",
  DividendArrears = "DIVIDEND_ARREARS",
  DividendCancelled = "DIVIDEND_CANCELLED",
  DividendPaymentTaxClassifications = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS",
  DividendRescinded = "DIVIDEND_RESCINDED",
  EstimatedReturnOfCapital = "ESTIMATED_RETURN_OF_CAPITAL",
  EstimatedReturnOfCapitalPlusIncome =
    "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME",
  ExtraDividend = "EXTRA_DIVIDEND",
  ExtraDividendPlusIncome = "EXTRA_DIVIDEND_PLUS_INCOME",
  FinalPaymentTransferBooksAreClosed =
    "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED",
  GrossRate = "GROSS_RATE",
  InitialDividend = "INITIAL_DIVIDEND",
  InitialDividendLongPeriod = "INITIAL_DIVIDEND_LONG_PERIOD",
  InitialDividendShortPeriod = "INITIAL_DIVIDEND_SHORT_PERIOD",
  LimitedPartnershipDistribution = "LIMITED_PARTNERSHIP_DISTRIBUTION",
  Liquidation = "LIQUIDATION",
  NetRate = "NET_RATE",
  Other = "OTHER",
  ProceedsFromSaleOfRights = "PROCEEDS_FROM_SALE_OF_RIGHTS",
  RegularDividend = "REGULAR_DIVIDEND",
  ReturnOfCapital = "RETURN_OF_CAPITAL",
  ReturnOfCapitalPlusIncome = "RETURN_OF_CAPITAL_PLUS_INCOME",
  SpecialDividend = "SPECIAL_DIVIDEND",
  SpecialDividendPlusIncome = "SPECIAL_DIVIDEND_PLUS_INCOME",
  YearEndDividend = "YEAR_END_DIVIDEND",
  YearEndDividendPlusIncome = "YEAR_END_DIVIDEND_PLUS_INCOME",
  Partial = "PARTIAL",
  Full = "FULL",
  Maturity = "MATURITY",
  Termination = "TERMINATION",
  RedemptionOfWarrants = "REDEMPTION_OF_WARRANTS",
}
/**
 * The subtype for the corporate action event
 */
export type ActivityRedemptionFullSubtypeOpen = OpenEnum<
  typeof ActivityRedemptionFullSubtype
>;

/**
 * Used to record the redemption of a security for cash in its entirety for which the holders receive the principal amount of the security and details related to the redemption
 */
export type ActivityRedemptionFull = {
  /**
   * Denotes whether the shares are incoming or outgoing
   */
  action?: ActivityRedemptionFullActionOpen | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityRedemptionFullCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityRedemptionFullCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityRedemptionFullPaymentDate | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivityRedemptionFullQuantity | null | undefined;
  /**
   * The subtype for the corporate action event
   */
  subtype?: ActivityRedemptionFullSubtypeOpen | undefined;
};

/**
 * Corresponds to whether the entry is incoming or outgoing
 */
export enum ActivityRedemptionPartialAction {
  ActionUnspecified = "ACTION_UNSPECIFIED",
  Incoming = "INCOMING",
  Outgoing = "OUTGOING",
  CashInLieu = "CASH_IN_LIEU",
}
/**
 * Corresponds to whether the entry is incoming or outgoing
 */
export type ActivityRedemptionPartialActionOpen = OpenEnum<
  typeof ActivityRedemptionPartialAction
>;

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityRedemptionPartialCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityRedemptionPartialCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityRedemptionPartialPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Corresponds to the position's trade quantity
 */
export type ActivityRedemptionPartialQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used when securities are redeemed by the issuer for cash, in part, before their scheduled maturity date and details related to the redemption. The outstanding amount of securities will be proportionally reduced based on a specific percentage of holding
 */
export type ActivityRedemptionPartial = {
  /**
   * Corresponds to whether the entry is incoming or outgoing
   */
  action?: ActivityRedemptionPartialActionOpen | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityRedemptionPartialCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityRedemptionPartialCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityRedemptionPartialPaymentDate | null | undefined;
  /**
   * Corresponds to the position's trade quantity
   */
  quantity?: ActivityRedemptionPartialQuantity | null | undefined;
};

/**
 * Denotes whether the shares are incoming or outgoing
 */
export enum ActivityReverseStockSplitAction {
  ActionUnspecified = "ACTION_UNSPECIFIED",
  Incoming = "INCOMING",
  Outgoing = "OUTGOING",
  CashInLieu = "CASH_IN_LIEU",
}
/**
 * Denotes whether the shares are incoming or outgoing
 */
export type ActivityReverseStockSplitActionOpen = OpenEnum<
  typeof ActivityReverseStockSplitAction
>;

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityReverseStockSplitCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityReverseStockSplitCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
 */
export type ActivityReverseStockSplitEffectiveDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The old rate of the security
 */
export type ActivityFactorDenominator = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The new rate of the security
 */
export type ActivityFactorNumerator = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivityReverseStockSplitQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used to record the exchange of a company's security for the same company's new security at a preset rate and details related to the reverse stock split
 */
export type ActivityReverseStockSplit = {
  /**
   * Denotes whether the shares are incoming or outgoing
   */
  action?: ActivityReverseStockSplitActionOpen | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityReverseStockSplitCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityReverseStockSplitCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
   */
  effectiveDate?: ActivityReverseStockSplitEffectiveDate | null | undefined;
  /**
   * The old rate of the security
   */
  factorDenominator?: ActivityFactorDenominator | null | undefined;
  /**
   * The new rate of the security
   */
  factorNumerator?: ActivityFactorNumerator | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivityReverseStockSplitQuantity | null | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityRightsDistributionCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityRightsDistributionPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityRightsDistributionRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivityRightsDistributionSettled = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used to record distributions to common stock holders of a company that grant the option to purchase new or additional securities of the same company during a predetermined time period at a predetermined price and details related to the rights distribution
 */
export type ActivityRightsDistribution = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityRightsDistributionCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityRightsDistributionPaymentDate | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivityRightsDistributionRecordDate | null | undefined;
  /**
   * The accounts settled position for which the corporate action was paid
   */
  settled?: ActivityRightsDistributionSettled | null | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityRightsSubscriptionCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Used to record the purchase of new or additional securities and details related to the subscription. Rights are often tradable in a secondary market
 */
export type ActivityRightsSubscription = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityRightsSubscriptionCorporateActionGeneralInformation
    | null
    | undefined;
};

/**
 * Used to record rounding adjustments when the sum(price x quantity) of all entries for a given activity do not equal the price x quantity of the fully formed activity record
 */
export type ActivityRoundingAdjustment = {
  /**
   * Free form text field providing reason for rounding
   */
  roundingReason?: string | undefined;
};

/**
 * the difference between the aggregation of gross_amount from the trade entries and the rounded gross_amount of the fully formed activity This amount can also be found as a rounding_adjustment entry
 */
export type RoundingAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivitySaleOfRightsCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivitySaleOfRightsCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivitySaleOfRightsPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivitySaleOfRightsRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The accounts settled position for which the corporate action was paid
 */
export type ActivitySaleOfRightsSettled = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used to record payments made by the issuer to security holders when the security is subject to redemptions other than full and partial calls (e.g., early CD redemptions) and details related to the sale of rights
 */
export type ActivitySaleOfRights = {
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivitySaleOfRightsCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivitySaleOfRightsCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivitySaleOfRightsPaymentDate | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivitySaleOfRightsRecordDate | null | undefined;
  /**
   * The accounts settled position for which the corporate action was paid
   */
  settled?: ActivitySaleOfRightsSettled | null | undefined;
};

/**
 * The date a given activity will officially settle
 */
export type ActivitySettleDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Denotes whether the trade is a buy or sell
 */
export enum ActivitySide {
  SideUnspecified = "SIDE_UNSPECIFIED",
  Buy = "BUY",
  Sell = "SELL",
}
/**
 * Denotes whether the trade is a buy or sell
 */
export type ActivitySideOpen = OpenEnum<typeof ActivitySide>;

/**
 * Common fields for corporate actions
 */
export type ActivitySpinoffCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityPayDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivitySpinoffQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivitySpinoffRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Used to record a distribution of subsidiary securities to the shareholders of the parent company without a surrender of securities or payment and details related to the spinoff. A spin-off represents a form of divestiture resulting in an independent company
 */
export type ActivitySpinoff = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivitySpinoffCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository
   */
  payDate?: ActivityPayDate | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivitySpinoffQuantity | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivitySpinoffRecordDate | null | undefined;
};

/**
 * The state of the activity
 */
export enum ActivityState {
  ActivityStateUnspecified = "ACTIVITY_STATE_UNSPECIFIED",
  Pending = "PENDING",
  Current = "CURRENT",
  Canceled = "CANCELED",
  Rebooked = "REBOOKED",
  Rebook = "REBOOK",
  Cancel = "CANCEL",
}
/**
 * The state of the activity
 */
export type ActivityStateOpen = OpenEnum<typeof ActivityState>;

/**
 * Common fields for corporate actions
 */
export type ActivityStockDividendCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityStockDividendPayDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivityStockDividendQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityStockDividendRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Used to record a dividend paid to shareholders in the form of shares of stock in either the issuing company or in another company and details related to the stock dividend
 */
export type ActivityStockDividend = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityStockDividendCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The anticipated payment date at the depository
   */
  payDate?: ActivityStockDividendPayDate | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivityStockDividendQuantity | null | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
   */
  rate?: ActivityRate | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivityStockDividendRecordDate | null | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityStockSplitCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The old rate of the security
 */
export type ActivityStockSplitFactorDenominator = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The new rate of the security
 */
export type ActivityStockSplitFactorNumerator = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityStockSplitPayDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The position on which the corporate action was paid
 */
export type ActivityStockSplitQuantity = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The date on which positions are recorded in order to calculate entitlement
 */
export type ActivityStockSplitRecordDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Used to record the increase in a company's number of outstanding shares of stock without any change in the shareholder's equity or the aggregate market value at the time of the split and details related to the stock split
 */
export type ActivityStockSplit = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityStockSplitCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The old rate of the security
   */
  factorDenominator?: ActivityStockSplitFactorDenominator | null | undefined;
  /**
   * The new rate of the security
   */
  factorNumerator?: ActivityStockSplitFactorNumerator | null | undefined;
  /**
   * The anticipated payment date at the depository
   */
  payDate?: ActivityStockSplitPayDate | null | undefined;
  /**
   * The position on which the corporate action was paid
   */
  quantity?: ActivityStockSplitQuantity | null | undefined;
  /**
   * The date on which positions are recorded in order to calculate entitlement
   */
  recordDate?: ActivityStockSplitRecordDate | null | undefined;
};

/**
 * Indicates purchase or redemption of the sweep asset
 */
export enum ActivitySweepAction {
  SweepActionUnspecified = "SWEEP_ACTION_UNSPECIFIED",
  Purchase = "PURCHASE",
  Redemption = "REDEMPTION",
}
/**
 * Indicates purchase or redemption of the sweep asset
 */
export type ActivitySweepActionOpen = OpenEnum<typeof ActivitySweepAction>;

/**
 * Sweep program that cash is being swept to/ from
 */
export enum ActivitySweepType {
  SweepTypeUnspecified = "SWEEP_TYPE_UNSPECIFIED",
  Fdic = "FDIC",
  MoneyMarket = "MONEY_MARKET",
}
/**
 * Sweep program that cash is being swept to/ from
 */
export type ActivitySweepTypeOpen = OpenEnum<typeof ActivitySweepType>;

/**
 * Used to record sweeps from a cash balance to an alternative asset or vice versa and details related to the sweep
 */
export type ActivitySweep = {
  /**
   * Indicates purchase or redemption of the sweep asset
   */
  action?: ActivitySweepActionOpen | undefined;
  /**
   * Indicates the sweep was performed books were closed to prevent an investor account from carrying a negative cash balance overnight
   */
  eodRedemption?: boolean | undefined;
  /**
   * Sweep program that cash is being swept to/ from
   */
  type?: ActivitySweepTypeOpen | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
 */
export type ActivityTenderOfferCashRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityTenderOfferCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Used to record the sale of securities for a specified price due to an offer from the issuer or a third party and details related to the tender offer
 */
export type ActivityTenderOffer = {
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
   */
  cashRate?: ActivityTenderOfferCashRate | null | undefined;
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityTenderOfferCorporateActionGeneralInformation
    | null
    | undefined;
};

/**
 * Used to calculate broadridge blotter code
 */
export enum ActivityBrokerCapacity {
  CapacityUnspecified = "CAPACITY_UNSPECIFIED",
  Agency = "AGENCY",
  Principal = "PRINCIPAL",
  Mixed = "MIXED",
}
/**
 * Used to calculate broadridge blotter code
 */
export type ActivityBrokerCapacityOpen = OpenEnum<
  typeof ActivityBrokerCapacity
>;

/**
 * The price for the instrument that is prevailing in the market.
 */
export type ActivityPrevailingMarketPrice = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Total monetary value of the price_adjustment
 */
export type ActivityPriceAdjustmentAmount = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
 */
export type ActivityPriceAdjustmentPercent = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export enum ActivityPriceAdjustmentType {
  PriceAdjustmentTypeUnspecified = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED",
  Markup = "MARKUP",
  Markdown = "MARKDOWN",
  SalesLoad = "SALES_LOAD",
}
/**
 * The type of price adjustment being applied by the broker to the net price of the security
 */
export type ActivityPriceAdjustmentTypeOpen = OpenEnum<
  typeof ActivityPriceAdjustmentType
>;

/**
 * Information about any price adjustments applied to the security
 */
export type ActivityPriceAdjustmentRecord = {
  /**
   * Total monetary value of the price_adjustment
   */
  priceAdjustmentAmount?: ActivityPriceAdjustmentAmount | null | undefined;
  /**
   * The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
   */
  priceAdjustmentPercent?: ActivityPriceAdjustmentPercent | null | undefined;
  /**
   * The type of price adjustment being applied by the broker to the net price of the security
   */
  priceAdjustmentType?: ActivityPriceAdjustmentTypeOpen | undefined;
};

/**
 * Used to record the the execution of a buy or sell transaction resulting in the transfer of securities and corresponding payment and details related to the trade
 */
export type ActivityTrade = {
  /**
   * Free form text field containing additional information for a trade
   */
  additionalInstructions?: Array<string> | undefined;
  /**
   * Max Length 100 characters. Alternate order id from the street used for FRAC trades
   */
  alternateOrderId?: string | undefined;
  /**
   * uuid assigned by the Booking API if a trade belongs to an allocation
   */
  bookingApiTradeAllocationId?: string | undefined;
  /**
   * uuid assigned by the Booking API to all trades
   */
  bookingApiTradeId?: string | undefined;
  /**
   * Executing broker of the trade
   */
  broker?: string | undefined;
  /**
   * Used to calculate broadridge blotter code
   */
  brokerCapacity?: ActivityBrokerCapacityOpen | undefined;
  /**
   * Free form text submitted by the client for internal purposes
   */
  clientMemos?: Array<string> | undefined;
  /**
   * 32 characters. The client order ID from the order submitted
   */
  clientOrderId?: string | undefined;
  /**
   * MIC code for the exchange
   */
  exchange?: string | undefined;
  /**
   * Execution id from the street
   */
  executionId?: string | undefined;
  /**
   * Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
   */
  executionOnly?: boolean | undefined;
  /**
   * Max Length 100 characters. External system id provided by a client
   */
  externalId?: string | undefined;
  /**
   * The confirmation number associated with a mutual fund trade
   */
  fundConfirmationNumber?: string | undefined;
  /**
   * Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
   */
  gatewayClientOrderId?: string | undefined;
  /**
   * If set to true, indicates the trade should be omitted from client billing
   */
  internalError?: boolean | undefined;
  /**
   * Set on penny-for-the-lot trades
   */
  isWriteoff?: boolean | undefined;
  /**
   * Repeated record containing information about the tax lots, if specified
   */
  lots?: Array<Lot> | undefined;
  /**
   * Max Length 100 characters. Internally generated order id that is returned to client on exec reports
   */
  orderId?: string | undefined;
  /**
   * The price for the instrument that is prevailing in the market.
   */
  prevailingMarketPrice?: ActivityPrevailingMarketPrice | null | undefined;
  /**
   * Information about any price adjustments applied to the security
   */
  priceAdjustmentRecord?: ActivityPriceAdjustmentRecord | null | undefined;
  /**
   * Used to calculate broadridge blotter code
   */
  route?: string | undefined;
  /**
   * The special instructions for a trade
   */
  specialInstructions?: Array<string> | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the particular issue
   */
  symbolDescription?: string | undefined;
  /**
   * Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
   */
  whenIssued?: boolean | undefined;
  /**
   * The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
   */
  yieldRecords?: Array<YieldRecord> | undefined;
};

/**
 * Provides more granular detail on the purpose of transfer
 */
export enum ActivityTransferType {
  TransferTypeUnspecified = "TRANSFER_TYPE_UNSPECIFIED",
  TransferConversion = "TRANSFER_CONVERSION",
  Deconversion = "DECONVERSION",
  Migration = "MIGRATION",
  ManualAdjustment = "MANUAL_ADJUSTMENT",
  InternalConversion = "INTERNAL_CONVERSION",
}
/**
 * Provides more granular detail on the purpose of transfer
 */
export type ActivityTransferTypeOpen = OpenEnum<typeof ActivityTransferType>;

/**
 * Used to record more generic transfers of funds or securities and details related to the transfer. The transfer type and activity_description can be used to provide more specific context
 */
export type ActivityTransfer = {
  /**
   * Free form text for additional sweep messages or instructions
   */
  additionalInstructions?: string | undefined;
  /**
   * String field that can be populated with the broker dealer undergoing a clearing platform conversion. Used for activity description purposes
   */
  clientBrokerage?: string | undefined;
  /**
   * Provides more granular detail on the purpose of transfer
   */
  transferType?: ActivityTransferTypeOpen | undefined;
};

/**
 * The type of activity this is
 */
export enum ActivityType {
  TypeUnspecified = "TYPE_UNSPECIFIED",
  Trade = "TRADE",
  Movement = "MOVEMENT",
  Memo = "MEMO",
  CorporateAction = "CORPORATE_ACTION",
}
/**
 * The type of activity this is
 */
export type ActivityTypeOpen = OpenEnum<typeof ActivityType>;

/**
 * Common fields for corporate actions
 */
export type ActivityUnitSplitCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
 */
export type ActivityUnitSplitStockRate = {
  /**
   * The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
   */
  value?: string | undefined;
};

/**
 * Used to record increases in the number of units outstanding through the issuing of more units to current shareholders and details related to the unit split
 */
export type ActivityUnitSplit = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityUnitSplitCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
   */
  stockRate?: ActivityUnitSplitStockRate | null | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityWarrantExerciseCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Used to record the exchange of warrants for shares and details related to the warrant exercise. The exercise will commonly require a payment based upon a pre-determined value and time and details related to the warrant exercise
 */
export type ActivityWarrantExercise = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityWarrantExerciseCorporateActionGeneralInformation
    | null
    | undefined;
};

/**
 * Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
 */
export enum ActivityDistributionType {
  DistributionTypeUnspecified = "DISTRIBUTION_TYPE_UNSPECIFIED",
  Premature = "PREMATURE",
  Disability = "DISABILITY",
  Death = "DEATH",
  Normal = "NORMAL",
  Sosepp = "SOSEPP",
  RolloverToQualifiedPlan = "ROLLOVER_TO_QUALIFIED_PLAN",
  RolloverToIra = "ROLLOVER_TO_IRA",
  DistTransfer = "DIST_TRANSFER",
  ExcessContributionRemovalBeforeTaxDeadline =
    "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE",
  ExcessContributionRemovalAfterTaxDeadline =
    "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE",
  RecharacterizationPriorYear = "RECHARACTERIZATION_PRIOR_YEAR",
  RecharacterizationCurrentYear = "RECHARACTERIZATION_CURRENT_YEAR",
  DistConversion = "DIST_CONVERSION",
  ManagementFee = "MANAGEMENT_FEE",
  PrematureSimpleIraLessThan2Years = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS",
  NormalRothIraGreaterThan5Years = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS",
  PlanLoan401K = "PLAN_LOAN_401K",
  NetIncomeAttributable = "NET_INCOME_ATTRIBUTABLE",
  Revocation = "REVOCATION",
  NonReportable = "NON_REPORTABLE",
}
/**
 * Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
 */
export type ActivityDistributionTypeOpen = OpenEnum<
  typeof ActivityDistributionType
>;

/**
 * The type of retirement account the withdrawal is being made from
 */
export enum ActivityRetirementType {
  RetirementTypeUnspecified = "RETIREMENT_TYPE_UNSPECIFIED",
  Ira = "IRA",
  Sep = "SEP",
  Simple = "SIMPLE",
  Keogh = "KEOGH",
  Roth = "ROTH",
  Qp = "QP",
  RolloverIra = "ROLLOVER_IRA",
}
/**
 * The type of retirement account the withdrawal is being made from
 */
export type ActivityRetirementTypeOpen = OpenEnum<
  typeof ActivityRetirementType
>;

/**
 * The mechanism by which the funds will be withdrawn
 */
export enum ActivityWithdrawalType {
  ExternalMovementTypeUnspecified = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED",
  Ach = "ACH",
  Check = "CHECK",
  Wire = "WIRE",
  Paypal = "PAYPAL",
  Rtp = "RTP",
  Ict = "ICT",
  Journal = "JOURNAL",
}
/**
 * The mechanism by which the funds will be withdrawn
 */
export type ActivityWithdrawalTypeOpen = OpenEnum<
  typeof ActivityWithdrawalType
>;

/**
 * Used to record withdrawals of funds from an account and capture details related to the withdrawal
 */
export type ActivityWithdrawal = {
  /**
   * Free form text for additional sweep messages or instructions
   */
  additionalInstructions?: string | undefined;
  /**
   * indicates whether the withdrawal is a cash advance
   */
  advance?: boolean | undefined;
  /**
   * Indicates whether this withdrawal is intended to fully deplete and close an account
   */
  closingAccount?: boolean | undefined;
  /**
   * Indicates whether this transaction is converting a retirement account to a ROTH IRA
   */
  conversion?: boolean | undefined;
  /**
   * Human readable account identifier for the account the assets were journaled. To be populated when the Withdrawal type is Journal
   */
  destinationAccountNumber?: string | undefined;
  /**
   * Name of the firm which was the destination of funds out of the account
   */
  destinationInstitution?: string | undefined;
  /**
   * Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
   */
  distributionType?: ActivityDistributionTypeOpen | undefined;
  /**
   * The tax year the withdrawal should be applied to (YYYY)
   */
  distributionYear?: number | undefined;
  /**
   * Unique tracking number provided to allow tracking a wire transfer from the initiating bank to the receiving bank
   */
  fedReferenceNumber?: string | undefined;
  /**
   * Indicates whether the transaction is for a futures related transaction
   */
  futuresSettlement?: boolean | undefined;
  /**
   * Indicates whether this transaction is a micro withdrawal to validate ACH Relationships
   */
  micro?: boolean | undefined;
  /**
   * Name of the firm which was the source of funds into the account
   */
  originatingInstitution?: string | undefined;
  /**
   * Indicates whether the transaction is a scheduled periodic withdrawal
   */
  periodic?: boolean | undefined;
  /**
   * The type of retirement account the withdrawal is being made from
   */
  retirementType?: ActivityRetirementTypeOpen | undefined;
  /**
   * Indicates whether the transaction is taxable
   */
  taxable?: boolean | undefined;
  /**
   * The mechanism by which the funds will be withdrawn
   */
  type?: ActivityWithdrawalTypeOpen | undefined;
};

/**
 * Denotes whether the withdrawal is pending or complete
 */
export enum ActivityReview {
  ReviewStateUnspecified = "REVIEW_STATE_UNSPECIFIED",
  ReviewStatePending = "REVIEW_STATE_PENDING",
  ReviewStateComplete = "REVIEW_STATE_COMPLETE",
}
/**
 * Denotes whether the withdrawal is pending or complete
 */
export type ActivityReviewOpen = OpenEnum<typeof ActivityReview>;

/**
 * Used to record the movement of funds to/ from the pending_withdrawal memo location
 */
export type ActivityWithdrawalPendingReview = {
  /**
   * Denotes whether the withdrawal is pending or complete
   */
  review?: ActivityReviewOpen | undefined;
};

/**
 * Used to record tax withholdings and details related to the withholding
 */
export type ActivityWithholding = {
  /**
   * Contains information about the tax withholdings associated with a 'parent' activity
   */
  data?: Array<WithholdingData> | undefined;
};

/**
 * Common fields for corporate actions
 */
export type ActivityWorthlessCorporateActionGeneralInformation = {
  /**
   * A unique alphanumeric value that is assigned to uniquely identify each corporate action event
   */
  corporateActionId?: string | undefined;
  /**
   * Asset Id of the new security after the corporate action event is processed
   */
  disbursedAssetId?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedCusip?: string | undefined;
  /**
   * When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
   */
  disbursedSymbolDescription?: string | undefined;
  /**
   * Asset Id of the existing security before the corporate action event is processed
   */
  targetAssetId?: string | undefined;
  /**
   * External Identifier of the existing security before the corporate action event is processed
   */
  targetCusip?: string | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
   */
  targetSymbolDescription?: string | undefined;
};

/**
 * Corresponds to corporateactions.announcement.effective_date
 */
export type ActivityWorthlessEffectiveDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * The anticipated payment date at the depository
 */
export type ActivityWorthlessPaymentDate = {
  /**
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
   */
  day?: number | undefined;
  /**
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
   */
  month?: number | undefined;
  /**
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
   */
  year?: number | undefined;
};

/**
 * Used to record the removal of positions in a given security when the DTC has received formal notice that the security is worthless and details related to the worthless event
 */
export type ActivityWorthless = {
  /**
   * Common fields for corporate actions
   */
  corporateActionGeneralInformation?:
    | ActivityWorthlessCorporateActionGeneralInformation
    | null
    | undefined;
  /**
   * Corresponds to corporateactions.announcement.effective_date
   */
  effectiveDate?: ActivityWorthlessEffectiveDate | null | undefined;
  /**
   * The anticipated payment date at the depository
   */
  paymentDate?: ActivityWorthlessPaymentDate | null | undefined;
};

/**
 * Activity is a representation of several ledger entries rolled up for easy correlation and usage
 */
export type Activity = {
  /**
   * Used to record the movement of funds or shares to/ from the pending_acats memo location
   */
  acatsPendingOut?: ActivityAcatsPendingOut | null | undefined;
  /**
   * A globally unique identifier referencing a single account; this is the main identifier for an account used for machine-to-machine interactions
   */
  accountId?: string | undefined;
  /**
   * Indicates the memo location impacted by an entry
   */
  accountMemo?: ActivityAccountMemoOpen | undefined;
  /**
   * Used to record the movement of funds or shares during the bookkeeping phase of an account transfer and details related to the account transfer
   */
  accountTransfer?: ActivityAccountTransfer | null | undefined;
  /**
   * Any accrued interest that has been earned but not yet paid between the last interest payment and the date of the activity
   */
  accruedInterest?: Array<AccruedInterest> | undefined;
  /**
   * Used to record the amount of interest that has been earned but not yet paid between the last interest payment and the date of the trade
   */
  accruedInterestDesc?: AccruedInterestDesc | null | undefined;
  /**
   * The activity date refers to the specific calendar day on which a financial transaction, such as a trade at an exchange or a deposit at a bank, was executed. This date is specific to the institution where the transaction took place, capturing the exact day on which the institution formally records and effects the transaction
   */
  activityDate?: ActivityActivityDate | null | undefined;
  /**
   * The description for an activity. This may include special instructions, symbol description, etc when relavant
   */
  activityDescription?: string | undefined;
  /**
   * Apex-generated unique activity identifier
   */
  activityId?: string | undefined;
  /**
   * Activity time refers to the precise moment, recorded in Coordinated Universal Time (UTC), when a financial transaction is executed as reported to Apex
   */
  activityTime?: Date | null | undefined;
  /**
   * Name of the issuer of a security and additional descriptive information about the particular issue
   */
  assetDescription?: string | undefined;
  /**
   * An Apex-provided, global identifier created on a per asset bases which provides connectivity across all areas Not populated on a currency only movement
   */
  assetId?: string | undefined;
  /**
   * Used to record a distribution of cash that an issuer has determined will be declared as income financed from capital gains and not ordinary income and details related to the capital gain
   */
  capitalGains?: ActivityCapitalGains | null | undefined;
  /**
   * Used to record the distribution of cash to shareholders, paid by the issuer, usually based upon current earnings and/or accumulated profits as declared by the board of directors and details related to the cash dividend
   */
  cashDividend?: ActivityCashDividend | null | undefined;
  /**
   * Used to record commission charged by brokers or financial intermediaries for executing financial transactions on behalf of clients
   */
  commission?: ActivityCommission | null | undefined;
  /**
   * Any commissions associated with the activity
   */
  commissions?: Array<Commission> | undefined;
  /**
   * Used to record the conversion of securities (generally convertible bonds or preferred shares) into another form of securities (usually common shares) at a pre-stated price or rate and details related to the conversion
   */
  conversion?: ActivityConversion | null | undefined;
  /**
   * Used to record memo location adjustments initiated by the corporate action system due to reorg events
   */
  corporateActionMemoAdjustment?:
    | ActivityCorporateActionMemoAdjustment
    | null
    | undefined;
  /**
   * A unique identifier referencing a Correspondent
   */
  correspondentId?: string | undefined;
  /**
   * The date/time an activity was created in the ledger
   */
  creationTime?: Date | null | undefined;
  /**
   * Used to disburse funds into a customer's account, typically for purposes such as refunds, interest payments, or rewards from enrolled programs and details related to the credit
   */
  credit?: ActivityCredit | null | undefined;
  /**
   * Required if any currency field like `price, gross_amount, trade.markup, fee.amount` is provided. The currency's ascend asset_id
   */
  currencyAssetId?: string | undefined;
  /**
   * The currency associated with the security Populated on a currency movement
   */
  currencyCode?: string | undefined;
  /**
   * Used to record deposits of funds into an account and capture details related to the deposit
   */
  deposit?: ActivityDeposit | null | undefined;
  /**
   * Used to record the movement of funds to/ from the pending_drip memo location
   */
  drip?: ActivityDrip | null | undefined;
  /**
   * Used to record the exchange of certificates for a new security or cash and details related to the exchange
   */
  exchange?: ActivityExchange | null | undefined;
  /**
   * Used to record Fees that have been assessed to account and capture details related to the fee
   */
  fee?: ActivityFee | null | undefined;
  /**
   * Any fees associated with the activity
   */
  fees?: Array<Fee> | undefined;
  /**
   * Used to record the movements of shares to/ from the fpsl memo location and details related to the fpsl memo
   */
  fpsl?: ActivityFpsl | null | undefined;
  /**
   * For a given set of activity that are part of the same lineage the highest generation will be the most recent activity
   */
  generation?: string | undefined;
  /**
   * The monetary value of an activity, exclusive of any fees, withholdings, accrued_interest, or commissions (First money)
   */
  grossAmount?: ActivityGrossAmount | null | undefined;
  /**
   * Used to record the payment of interest to accounts that have maintained a cash balance or the charging of interest to accounts that have used margin and details related to the interest
   */
  interest?: ActivityInterest | null | undefined;
  /**
   * Used to record the The payment of an obligation an issuer has agreed to make to holders of an interest-bearing security and details related to the interest payment. Usually, the payment is made in cash and on a scheduled basis
   */
  interestPayment?: ActivityInterestPayment | null | undefined;
  /**
   * Used to record the dismantling of a business by an issuer, paying off debts in order of priority and distributing the remaining assets in cash and/or securities to the owners of the securities and details related to the liquidation
   */
  liquidation?: ActivityLiquidation | null | undefined;
  /**
   * Used to record he final repayment, usually in cash, by an issuer for the entire issue, or remaining outstanding securities of a specific security on a specified date and details related to the maturity
   */
  maturity?: ActivityMaturity | null | undefined;
  /**
   * Used to record the exchange of one company's security for another company's security, cash, or a combination of cash and securities and details related to the merger
   */
  merger?: ActivityMerger | null | undefined;
  /**
   * accounts/{account_id}/activities/{activity_id}
   */
  name?: string | undefined;
  /**
   * Used to record changes in the name of a security/securities by the issuer which result in surrendering physical securities or the assigning of a new security identifier which result in new securities being issued and details related to the name changes
   */
  nameChange?: ActivityNameChange | null | undefined;
  /**
   * The monetary value of an activity, inclusive of fees, withholding, commisions, etc (Second Money)
   */
  netAmount?: ActivityNetAmount | null | undefined;
  /**
   * can be an empty string if there is no next activity is populated when there is a modification resulting in a new activity
   */
  nextActivityId?: string | undefined;
  /**
   * the process date of the next activity(nil if the next_activity_id is an empty string)
   */
  nextActivityProcessDate?: NextActivityProcessDate | null | undefined;
  /**
   * None
   */
  none?: None | null | undefined;
  /**
   * Used to record payments on interest-bearing securities where the payment is made in additional securities rather than cash and details related to the payment
   */
  paymentInKind?: ActivityPaymentInKind | null | undefined;
  /**
   * When populated, the activity_id of that precedes this one
   */
  previousActivityId?: string | undefined;
  /**
   * When populated, the processing_date of the previous_activity_id
   */
  previousProcessDate?: PreviousProcessDate | null | undefined;
  /**
   * The monetary value paid for a given security in a trade Not populated on a currency only movement
   */
  price?: ActivityPrice | null | undefined;
  /**
   * The date that the activity was booked to the ledger
   */
  processDate?: ActivityProcessDate | null | undefined;
  /**
   * The quantity of shares bought, sold, or moved for a given entry/activity Required if activity.state != PENDING
   */
  quantity?: ActivityQuantity | null | undefined;
  /**
   * Used to record the redemption of a security for cash in its entirety for which the holders receive the principal amount of the security and details related to the redemption
   */
  redemptionFull?: ActivityRedemptionFull | null | undefined;
  /**
   * Used when securities are redeemed by the issuer for cash, in part, before their scheduled maturity date and details related to the redemption. The outstanding amount of securities will be proportionally reduced based on a specific percentage of holding
   */
  redemptionPartial?: ActivityRedemptionPartial | null | undefined;
  /**
   * Two character region code, complies with https://cldr.unicode.org/index
   */
  regionCode?: string | undefined;
  /**
   * Used to record the exchange of a company's security for the same company's new security at a preset rate and details related to the reverse stock split
   */
  reverseStockSplit?: ActivityReverseStockSplit | null | undefined;
  /**
   * Used to record distributions to common stock holders of a company that grant the option to purchase new or additional securities of the same company during a predetermined time period at a predetermined price and details related to the rights distribution
   */
  rightsDistribution?: ActivityRightsDistribution | null | undefined;
  /**
   * Used to record the purchase of new or additional securities and details related to the subscription. Rights are often tradable in a secondary market
   */
  rightsSubscription?: ActivityRightsSubscription | null | undefined;
  /**
   * Used to record rounding adjustments when the sum(price x quantity) of all entries for a given activity do not equal the price x quantity of the fully formed activity record
   */
  roundingAdjustment?: ActivityRoundingAdjustment | null | undefined;
  /**
   * the difference between the aggregation of gross_amount from the trade entries and the rounded gross_amount of the fully formed activity This amount can also be found as a rounding_adjustment entry
   */
  roundingAmount?: RoundingAmount | null | undefined;
  /**
   * Free form text field providing reason for rounding
   */
  roundingReason?: string | undefined;
  /**
   * Used to record payments made by the issuer to security holders when the security is subject to redemptions other than full and partial calls (e.g., early CD redemptions) and details related to the sale of rights
   */
  saleOfRights?: ActivitySaleOfRights | null | undefined;
  /**
   * The date a given activity will officially settle
   */
  settleDate?: ActivitySettleDate | null | undefined;
  /**
   * Denotes whether the trade is a buy or sell
   */
  side?: ActivitySideOpen | undefined;
  /**
   * Used to record a distribution of subsidiary securities to the shareholders of the parent company without a surrender of securities or payment and details related to the spinoff. A spin-off represents a form of divestiture resulting in an independent company
   */
  spinoff?: ActivitySpinoff | null | undefined;
  /**
   * The state of the activity
   */
  state?: ActivityStateOpen | undefined;
  /**
   * Used to record a dividend paid to shareholders in the form of shares of stock in either the issuing company or in another company and details related to the stock dividend
   */
  stockDividend?: ActivityStockDividend | null | undefined;
  /**
   * Used to record the increase in a company's number of outstanding shares of stock without any change in the shareholder's equity or the aggregate market value at the time of the split and details related to the stock split
   */
  stockSplit?: ActivityStockSplit | null | undefined;
  /**
   * String representation of the metadata object containing more information about an entry/ activity
   */
  subtypeCategory?: string | undefined;
  /**
   * Used to record sweeps from a cash balance to an alternative asset or vice versa and details related to the sweep
   */
  sweep?: ActivitySweep | null | undefined;
  /**
   * Used to record the sale of securities for a specified price due to an offer from the issuer or a third party and details related to the tender offer
   */
  tenderOffer?: ActivityTenderOffer | null | undefined;
  /**
   * Used to record the the execution of a buy or sell transaction resulting in the transfer of securities and corresponding payment and details related to the trade
   */
  trade?: ActivityTrade | null | undefined;
  /**
   * Used to record more generic transfers of funds or securities and details related to the transfer. The transfer type and activity_description can be used to provide more specific context
   */
  transfer?: ActivityTransfer | null | undefined;
  /**
   * The type of activity this is
   */
  type?: ActivityTypeOpen | undefined;
  /**
   * Used to record increases in the number of units outstanding through the issuing of more units to current shareholders and details related to the unit split
   */
  unitSplit?: ActivityUnitSplit | null | undefined;
  /**
   * Used to record the exchange of warrants for shares and details related to the warrant exercise. The exercise will commonly require a payment based upon a pre-determined value and time and details related to the warrant exercise
   */
  warrantExercise?: ActivityWarrantExercise | null | undefined;
  /**
   * Used to record withdrawals of funds from an account and capture details related to the withdrawal
   */
  withdrawal?: ActivityWithdrawal | null | undefined;
  /**
   * Used to record the movement of funds to/ from the pending_withdrawal memo location
   */
  withdrawalPendingReview?: ActivityWithdrawalPendingReview | null | undefined;
  /**
   * Used to record tax withholdings and details related to the withholding
   */
  withholding?: ActivityWithholding | null | undefined;
  /**
   * Any withholdings associated with the activity
   */
  withholdings?: Array<Withholding> | undefined;
  /**
   * Used to record the removal of positions in a given security when the DTC has received formal notice that the security is worthless and details related to the worthless event
   */
  worthless?: ActivityWorthless | null | undefined;
};

/** @internal */
export const ActivityAcatsPendingOut$inboundSchema: z.ZodType<
  ActivityAcatsPendingOut,
  z.ZodTypeDef,
  unknown
> = z.object({
  acats_control_number: z.string().optional(),
  additional_instructions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "acats_control_number": "acatsControlNumber",
    "additional_instructions": "additionalInstructions",
  });
});

/** @internal */
export type ActivityAcatsPendingOut$Outbound = {
  acats_control_number?: string | undefined;
  additional_instructions?: string | undefined;
};

/** @internal */
export const ActivityAcatsPendingOut$outboundSchema: z.ZodType<
  ActivityAcatsPendingOut$Outbound,
  z.ZodTypeDef,
  ActivityAcatsPendingOut
> = z.object({
  acatsControlNumber: z.string().optional(),
  additionalInstructions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    acatsControlNumber: "acats_control_number",
    additionalInstructions: "additional_instructions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityAcatsPendingOut$ {
  /** @deprecated use `ActivityAcatsPendingOut$inboundSchema` instead. */
  export const inboundSchema = ActivityAcatsPendingOut$inboundSchema;
  /** @deprecated use `ActivityAcatsPendingOut$outboundSchema` instead. */
  export const outboundSchema = ActivityAcatsPendingOut$outboundSchema;
  /** @deprecated use `ActivityAcatsPendingOut$Outbound` instead. */
  export type Outbound = ActivityAcatsPendingOut$Outbound;
}

/** @internal */
export const ActivityAccountMemo$inboundSchema: z.ZodType<
  ActivityAccountMemoOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityAccountMemo),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityAccountMemo$outboundSchema: z.ZodType<
  ActivityAccountMemoOpen,
  z.ZodTypeDef,
  ActivityAccountMemoOpen
> = z.union([
  z.nativeEnum(ActivityAccountMemo),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityAccountMemo$ {
  /** @deprecated use `ActivityAccountMemo$inboundSchema` instead. */
  export const inboundSchema = ActivityAccountMemo$inboundSchema;
  /** @deprecated use `ActivityAccountMemo$outboundSchema` instead. */
  export const outboundSchema = ActivityAccountMemo$outboundSchema;
}

/** @internal */
export const ActivityAction$inboundSchema: z.ZodType<
  ActivityActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityAction$outboundSchema: z.ZodType<
  ActivityActionOpen,
  z.ZodTypeDef,
  ActivityActionOpen
> = z.union([
  z.nativeEnum(ActivityAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityAction$ {
  /** @deprecated use `ActivityAction$inboundSchema` instead. */
  export const inboundSchema = ActivityAction$inboundSchema;
  /** @deprecated use `ActivityAction$outboundSchema` instead. */
  export const outboundSchema = ActivityAction$outboundSchema;
}

/** @internal */
export const ActivityMethod$inboundSchema: z.ZodType<
  ActivityMethodOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityMethod$outboundSchema: z.ZodType<
  ActivityMethodOpen,
  z.ZodTypeDef,
  ActivityMethodOpen
> = z.union([
  z.nativeEnum(ActivityMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMethod$ {
  /** @deprecated use `ActivityMethod$inboundSchema` instead. */
  export const inboundSchema = ActivityMethod$inboundSchema;
  /** @deprecated use `ActivityMethod$outboundSchema` instead. */
  export const outboundSchema = ActivityMethod$outboundSchema;
}

/** @internal */
export const ActivityAccountTransfer$inboundSchema: z.ZodType<
  ActivityAccountTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  acats_asset_sequence_number: z.string().optional(),
  acats_control_number: z.string().optional(),
  action: ActivityAction$inboundSchema.optional(),
  additional_instructions: z.string().optional(),
  contra_party_account_number: z.string().optional(),
  contra_party_id: z.string().optional(),
  institution: z.string().optional(),
  method: ActivityMethod$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "acats_asset_sequence_number": "acatsAssetSequenceNumber",
    "acats_control_number": "acatsControlNumber",
    "additional_instructions": "additionalInstructions",
    "contra_party_account_number": "contraPartyAccountNumber",
    "contra_party_id": "contraPartyId",
  });
});

/** @internal */
export type ActivityAccountTransfer$Outbound = {
  acats_asset_sequence_number?: string | undefined;
  acats_control_number?: string | undefined;
  action?: string | undefined;
  additional_instructions?: string | undefined;
  contra_party_account_number?: string | undefined;
  contra_party_id?: string | undefined;
  institution?: string | undefined;
  method?: string | undefined;
};

/** @internal */
export const ActivityAccountTransfer$outboundSchema: z.ZodType<
  ActivityAccountTransfer$Outbound,
  z.ZodTypeDef,
  ActivityAccountTransfer
> = z.object({
  acatsAssetSequenceNumber: z.string().optional(),
  acatsControlNumber: z.string().optional(),
  action: ActivityAction$outboundSchema.optional(),
  additionalInstructions: z.string().optional(),
  contraPartyAccountNumber: z.string().optional(),
  contraPartyId: z.string().optional(),
  institution: z.string().optional(),
  method: ActivityMethod$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    acatsAssetSequenceNumber: "acats_asset_sequence_number",
    acatsControlNumber: "acats_control_number",
    additionalInstructions: "additional_instructions",
    contraPartyAccountNumber: "contra_party_account_number",
    contraPartyId: "contra_party_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityAccountTransfer$ {
  /** @deprecated use `ActivityAccountTransfer$inboundSchema` instead. */
  export const inboundSchema = ActivityAccountTransfer$inboundSchema;
  /** @deprecated use `ActivityAccountTransfer$outboundSchema` instead. */
  export const outboundSchema = ActivityAccountTransfer$outboundSchema;
  /** @deprecated use `ActivityAccountTransfer$Outbound` instead. */
  export type Outbound = ActivityAccountTransfer$Outbound;
}

/** @internal */
export const AccruedInterestDesc$inboundSchema: z.ZodType<
  AccruedInterestDesc,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AccruedInterestDesc$Outbound = {};

/** @internal */
export const AccruedInterestDesc$outboundSchema: z.ZodType<
  AccruedInterestDesc$Outbound,
  z.ZodTypeDef,
  AccruedInterestDesc
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccruedInterestDesc$ {
  /** @deprecated use `AccruedInterestDesc$inboundSchema` instead. */
  export const inboundSchema = AccruedInterestDesc$inboundSchema;
  /** @deprecated use `AccruedInterestDesc$outboundSchema` instead. */
  export const outboundSchema = AccruedInterestDesc$outboundSchema;
  /** @deprecated use `AccruedInterestDesc$Outbound` instead. */
  export type Outbound = AccruedInterestDesc$Outbound;
}

/** @internal */
export const ActivityActivityDate$inboundSchema: z.ZodType<
  ActivityActivityDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityActivityDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityActivityDate$outboundSchema: z.ZodType<
  ActivityActivityDate$Outbound,
  z.ZodTypeDef,
  ActivityActivityDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityActivityDate$ {
  /** @deprecated use `ActivityActivityDate$inboundSchema` instead. */
  export const inboundSchema = ActivityActivityDate$inboundSchema;
  /** @deprecated use `ActivityActivityDate$outboundSchema` instead. */
  export const outboundSchema = ActivityActivityDate$outboundSchema;
  /** @deprecated use `ActivityActivityDate$Outbound` instead. */
  export type Outbound = ActivityActivityDate$Outbound;
}

/** @internal */
export const ActivityCorporateActionGeneralInformation$inboundSchema: z.ZodType<
  ActivityCorporateActionGeneralInformation,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_id: z.string().optional(),
  disbursed_asset_id: z.string().optional(),
  disbursed_cusip: z.string().optional(),
  disbursed_symbol_description: z.string().optional(),
  target_asset_id: z.string().optional(),
  target_cusip: z.string().optional(),
  target_symbol_description: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_id": "corporateActionId",
    "disbursed_asset_id": "disbursedAssetId",
    "disbursed_cusip": "disbursedCusip",
    "disbursed_symbol_description": "disbursedSymbolDescription",
    "target_asset_id": "targetAssetId",
    "target_cusip": "targetCusip",
    "target_symbol_description": "targetSymbolDescription",
  });
});

/** @internal */
export type ActivityCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound = ActivityCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityPaymentDate$inboundSchema: z.ZodType<
  ActivityPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityPaymentDate$outboundSchema: z.ZodType<
  ActivityPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPaymentDate$ {
  /** @deprecated use `ActivityPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivityPaymentDate$inboundSchema;
  /** @deprecated use `ActivityPaymentDate$outboundSchema` instead. */
  export const outboundSchema = ActivityPaymentDate$outboundSchema;
  /** @deprecated use `ActivityPaymentDate$Outbound` instead. */
  export type Outbound = ActivityPaymentDate$Outbound;
}

/** @internal */
export const ActivityCapitalGainsQuantity$inboundSchema: z.ZodType<
  ActivityCapitalGainsQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityCapitalGainsQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityCapitalGainsQuantity$outboundSchema: z.ZodType<
  ActivityCapitalGainsQuantity$Outbound,
  z.ZodTypeDef,
  ActivityCapitalGainsQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCapitalGainsQuantity$ {
  /** @deprecated use `ActivityCapitalGainsQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityCapitalGainsQuantity$inboundSchema;
  /** @deprecated use `ActivityCapitalGainsQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityCapitalGainsQuantity$outboundSchema;
  /** @deprecated use `ActivityCapitalGainsQuantity$Outbound` instead. */
  export type Outbound = ActivityCapitalGainsQuantity$Outbound;
}

/** @internal */
export const ActivityRecordDate$inboundSchema: z.ZodType<
  ActivityRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityRecordDate$outboundSchema: z.ZodType<
  ActivityRecordDate$Outbound,
  z.ZodTypeDef,
  ActivityRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRecordDate$ {
  /** @deprecated use `ActivityRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivityRecordDate$inboundSchema;
  /** @deprecated use `ActivityRecordDate$outboundSchema` instead. */
  export const outboundSchema = ActivityRecordDate$outboundSchema;
  /** @deprecated use `ActivityRecordDate$Outbound` instead. */
  export type Outbound = ActivityRecordDate$Outbound;
}

/** @internal */
export const ActivityCapitalGains$inboundSchema: z.ZodType<
  ActivityCapitalGains,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() => ActivityCorporateActionGeneralInformation$inboundSchema),
  ).optional(),
  long_term_gain: z.boolean().optional(),
  payment_date: z.nullable(z.lazy(() => ActivityPaymentDate$inboundSchema))
    .optional(),
  quantity: z.nullable(z.lazy(() => ActivityCapitalGainsQuantity$inboundSchema))
    .optional(),
  record_date: z.nullable(z.lazy(() => ActivityRecordDate$inboundSchema))
    .optional(),
  reinvested: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "long_term_gain": "longTermGain",
    "payment_date": "paymentDate",
    "record_date": "recordDate",
  });
});

/** @internal */
export type ActivityCapitalGains$Outbound = {
  corporate_action_general_information?:
    | ActivityCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  long_term_gain?: boolean | undefined;
  payment_date?: ActivityPaymentDate$Outbound | null | undefined;
  quantity?: ActivityCapitalGainsQuantity$Outbound | null | undefined;
  record_date?: ActivityRecordDate$Outbound | null | undefined;
  reinvested?: boolean | undefined;
};

/** @internal */
export const ActivityCapitalGains$outboundSchema: z.ZodType<
  ActivityCapitalGains$Outbound,
  z.ZodTypeDef,
  ActivityCapitalGains
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() => ActivityCorporateActionGeneralInformation$outboundSchema),
  ).optional(),
  longTermGain: z.boolean().optional(),
  paymentDate: z.nullable(z.lazy(() => ActivityPaymentDate$outboundSchema))
    .optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityCapitalGainsQuantity$outboundSchema),
  ).optional(),
  recordDate: z.nullable(z.lazy(() => ActivityRecordDate$outboundSchema))
    .optional(),
  reinvested: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    longTermGain: "long_term_gain",
    paymentDate: "payment_date",
    recordDate: "record_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCapitalGains$ {
  /** @deprecated use `ActivityCapitalGains$inboundSchema` instead. */
  export const inboundSchema = ActivityCapitalGains$inboundSchema;
  /** @deprecated use `ActivityCapitalGains$outboundSchema` instead. */
  export const outboundSchema = ActivityCapitalGains$outboundSchema;
  /** @deprecated use `ActivityCapitalGains$Outbound` instead. */
  export type Outbound = ActivityCapitalGains$Outbound;
}

/** @internal */
export const ActivityCashRate$inboundSchema: z.ZodType<
  ActivityCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityCashRate$outboundSchema: z.ZodType<
  ActivityCashRate$Outbound,
  z.ZodTypeDef,
  ActivityCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCashRate$ {
  /** @deprecated use `ActivityCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityCashRate$inboundSchema;
  /** @deprecated use `ActivityCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityCashRate$outboundSchema;
  /** @deprecated use `ActivityCashRate$Outbound` instead. */
  export type Outbound = ActivityCashRate$Outbound;
}

/** @internal */
export const ActivityCashDividendCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityCashDividendCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityCashDividendCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityCashDividendCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityCashDividendCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityCashDividendCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCashDividendCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityCashDividendCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityCashDividendCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityCashDividendCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityCashDividendCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityCashDividendFpsl$inboundSchema: z.ZodType<
  ActivityCashDividendFpsl,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityCashDividendFpsl$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityCashDividendFpsl$outboundSchema: z.ZodType<
  ActivityCashDividendFpsl$Outbound,
  z.ZodTypeDef,
  ActivityCashDividendFpsl
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCashDividendFpsl$ {
  /** @deprecated use `ActivityCashDividendFpsl$inboundSchema` instead. */
  export const inboundSchema = ActivityCashDividendFpsl$inboundSchema;
  /** @deprecated use `ActivityCashDividendFpsl$outboundSchema` instead. */
  export const outboundSchema = ActivityCashDividendFpsl$outboundSchema;
  /** @deprecated use `ActivityCashDividendFpsl$Outbound` instead. */
  export type Outbound = ActivityCashDividendFpsl$Outbound;
}

/** @internal */
export const ActivityFree$inboundSchema: z.ZodType<
  ActivityFree,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityFree$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityFree$outboundSchema: z.ZodType<
  ActivityFree$Outbound,
  z.ZodTypeDef,
  ActivityFree
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityFree$ {
  /** @deprecated use `ActivityFree$inboundSchema` instead. */
  export const inboundSchema = ActivityFree$inboundSchema;
  /** @deprecated use `ActivityFree$outboundSchema` instead. */
  export const outboundSchema = ActivityFree$outboundSchema;
  /** @deprecated use `ActivityFree$Outbound` instead. */
  export type Outbound = ActivityFree$Outbound;
}

/** @internal */
export const ActivityCashDividendPaymentDate$inboundSchema: z.ZodType<
  ActivityCashDividendPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityCashDividendPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityCashDividendPaymentDate$outboundSchema: z.ZodType<
  ActivityCashDividendPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityCashDividendPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCashDividendPaymentDate$ {
  /** @deprecated use `ActivityCashDividendPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivityCashDividendPaymentDate$inboundSchema;
  /** @deprecated use `ActivityCashDividendPaymentDate$outboundSchema` instead. */
  export const outboundSchema = ActivityCashDividendPaymentDate$outboundSchema;
  /** @deprecated use `ActivityCashDividendPaymentDate$Outbound` instead. */
  export type Outbound = ActivityCashDividendPaymentDate$Outbound;
}

/** @internal */
export const ActivityCashDividendQuantity$inboundSchema: z.ZodType<
  ActivityCashDividendQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityCashDividendQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityCashDividendQuantity$outboundSchema: z.ZodType<
  ActivityCashDividendQuantity$Outbound,
  z.ZodTypeDef,
  ActivityCashDividendQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCashDividendQuantity$ {
  /** @deprecated use `ActivityCashDividendQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityCashDividendQuantity$inboundSchema;
  /** @deprecated use `ActivityCashDividendQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityCashDividendQuantity$outboundSchema;
  /** @deprecated use `ActivityCashDividendQuantity$Outbound` instead. */
  export type Outbound = ActivityCashDividendQuantity$Outbound;
}

/** @internal */
export const ActivityCashDividendRecordDate$inboundSchema: z.ZodType<
  ActivityCashDividendRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityCashDividendRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityCashDividendRecordDate$outboundSchema: z.ZodType<
  ActivityCashDividendRecordDate$Outbound,
  z.ZodTypeDef,
  ActivityCashDividendRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCashDividendRecordDate$ {
  /** @deprecated use `ActivityCashDividendRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivityCashDividendRecordDate$inboundSchema;
  /** @deprecated use `ActivityCashDividendRecordDate$outboundSchema` instead. */
  export const outboundSchema = ActivityCashDividendRecordDate$outboundSchema;
  /** @deprecated use `ActivityCashDividendRecordDate$Outbound` instead. */
  export type Outbound = ActivityCashDividendRecordDate$Outbound;
}

/** @internal */
export const ActivitySettled$inboundSchema: z.ZodType<
  ActivitySettled,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivitySettled$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivitySettled$outboundSchema: z.ZodType<
  ActivitySettled$Outbound,
  z.ZodTypeDef,
  ActivitySettled
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySettled$ {
  /** @deprecated use `ActivitySettled$inboundSchema` instead. */
  export const inboundSchema = ActivitySettled$inboundSchema;
  /** @deprecated use `ActivitySettled$outboundSchema` instead. */
  export const outboundSchema = ActivitySettled$outboundSchema;
  /** @deprecated use `ActivitySettled$Outbound` instead. */
  export type Outbound = ActivitySettled$Outbound;
}

/** @internal */
export const ActivitySubtype$inboundSchema: z.ZodType<
  ActivitySubtypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivitySubtype),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivitySubtype$outboundSchema: z.ZodType<
  ActivitySubtypeOpen,
  z.ZodTypeDef,
  ActivitySubtypeOpen
> = z.union([
  z.nativeEnum(ActivitySubtype),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySubtype$ {
  /** @deprecated use `ActivitySubtype$inboundSchema` instead. */
  export const inboundSchema = ActivitySubtype$inboundSchema;
  /** @deprecated use `ActivitySubtype$outboundSchema` instead. */
  export const outboundSchema = ActivitySubtype$outboundSchema;
}

/** @internal */
export const ActivityCashDividend$inboundSchema: z.ZodType<
  ActivityCashDividend,
  z.ZodTypeDef,
  unknown
> = z.object({
  cash_rate: z.nullable(z.lazy(() => ActivityCashRate$inboundSchema))
    .optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityCashDividendCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  fpsl: z.nullable(z.lazy(() => ActivityCashDividendFpsl$inboundSchema))
    .optional(),
  free: z.nullable(z.lazy(() => ActivityFree$inboundSchema)).optional(),
  long_term_gain: z.boolean().optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityCashDividendPaymentDate$inboundSchema),
  ).optional(),
  qualified: z.boolean().optional(),
  quantity: z.nullable(z.lazy(() => ActivityCashDividendQuantity$inboundSchema))
    .optional(),
  record_date: z.nullable(
    z.lazy(() => ActivityCashDividendRecordDate$inboundSchema),
  ).optional(),
  reinvested: z.boolean().optional(),
  settled: z.nullable(z.lazy(() => ActivitySettled$inboundSchema)).optional(),
  substitute_payment: z.boolean().optional(),
  subtype: ActivitySubtype$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "long_term_gain": "longTermGain",
    "payment_date": "paymentDate",
    "record_date": "recordDate",
    "substitute_payment": "substitutePayment",
  });
});

/** @internal */
export type ActivityCashDividend$Outbound = {
  cash_rate?: ActivityCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityCashDividendCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  fpsl?: ActivityCashDividendFpsl$Outbound | null | undefined;
  free?: ActivityFree$Outbound | null | undefined;
  long_term_gain?: boolean | undefined;
  payment_date?: ActivityCashDividendPaymentDate$Outbound | null | undefined;
  qualified?: boolean | undefined;
  quantity?: ActivityCashDividendQuantity$Outbound | null | undefined;
  record_date?: ActivityCashDividendRecordDate$Outbound | null | undefined;
  reinvested?: boolean | undefined;
  settled?: ActivitySettled$Outbound | null | undefined;
  substitute_payment?: boolean | undefined;
  subtype?: string | undefined;
};

/** @internal */
export const ActivityCashDividend$outboundSchema: z.ZodType<
  ActivityCashDividend$Outbound,
  z.ZodTypeDef,
  ActivityCashDividend
> = z.object({
  cashRate: z.nullable(z.lazy(() => ActivityCashRate$outboundSchema))
    .optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityCashDividendCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  fpsl: z.nullable(z.lazy(() => ActivityCashDividendFpsl$outboundSchema))
    .optional(),
  free: z.nullable(z.lazy(() => ActivityFree$outboundSchema)).optional(),
  longTermGain: z.boolean().optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityCashDividendPaymentDate$outboundSchema),
  ).optional(),
  qualified: z.boolean().optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityCashDividendQuantity$outboundSchema),
  ).optional(),
  recordDate: z.nullable(
    z.lazy(() => ActivityCashDividendRecordDate$outboundSchema),
  ).optional(),
  reinvested: z.boolean().optional(),
  settled: z.nullable(z.lazy(() => ActivitySettled$outboundSchema)).optional(),
  substitutePayment: z.boolean().optional(),
  subtype: ActivitySubtype$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    longTermGain: "long_term_gain",
    paymentDate: "payment_date",
    recordDate: "record_date",
    substitutePayment: "substitute_payment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCashDividend$ {
  /** @deprecated use `ActivityCashDividend$inboundSchema` instead. */
  export const inboundSchema = ActivityCashDividend$inboundSchema;
  /** @deprecated use `ActivityCashDividend$outboundSchema` instead. */
  export const outboundSchema = ActivityCashDividend$outboundSchema;
  /** @deprecated use `ActivityCashDividend$Outbound` instead. */
  export type Outbound = ActivityCashDividend$Outbound;
}

/** @internal */
export const ActivityCommission$inboundSchema: z.ZodType<
  ActivityCommission,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityCommission$Outbound = {};

/** @internal */
export const ActivityCommission$outboundSchema: z.ZodType<
  ActivityCommission$Outbound,
  z.ZodTypeDef,
  ActivityCommission
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCommission$ {
  /** @deprecated use `ActivityCommission$inboundSchema` instead. */
  export const inboundSchema = ActivityCommission$inboundSchema;
  /** @deprecated use `ActivityCommission$outboundSchema` instead. */
  export const outboundSchema = ActivityCommission$outboundSchema;
  /** @deprecated use `ActivityCommission$Outbound` instead. */
  export type Outbound = ActivityCommission$Outbound;
}

/** @internal */
export const ActivityConversionCashRate$inboundSchema: z.ZodType<
  ActivityConversionCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityConversionCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityConversionCashRate$outboundSchema: z.ZodType<
  ActivityConversionCashRate$Outbound,
  z.ZodTypeDef,
  ActivityConversionCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityConversionCashRate$ {
  /** @deprecated use `ActivityConversionCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityConversionCashRate$inboundSchema;
  /** @deprecated use `ActivityConversionCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityConversionCashRate$outboundSchema;
  /** @deprecated use `ActivityConversionCashRate$Outbound` instead. */
  export type Outbound = ActivityConversionCashRate$Outbound;
}

/** @internal */
export const ActivityConversionCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityConversionCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityConversionCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityConversionCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityConversionCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityConversionCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityConversionCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityConversionCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityConversionCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityConversionCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityConversionCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityStockRate$inboundSchema: z.ZodType<
  ActivityStockRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityStockRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityStockRate$outboundSchema: z.ZodType<
  ActivityStockRate$Outbound,
  z.ZodTypeDef,
  ActivityStockRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockRate$ {
  /** @deprecated use `ActivityStockRate$inboundSchema` instead. */
  export const inboundSchema = ActivityStockRate$inboundSchema;
  /** @deprecated use `ActivityStockRate$outboundSchema` instead. */
  export const outboundSchema = ActivityStockRate$outboundSchema;
  /** @deprecated use `ActivityStockRate$Outbound` instead. */
  export type Outbound = ActivityStockRate$Outbound;
}

/** @internal */
export const ActivityConversionType$inboundSchema: z.ZodType<
  ActivityConversionTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityConversionType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityConversionType$outboundSchema: z.ZodType<
  ActivityConversionTypeOpen,
  z.ZodTypeDef,
  ActivityConversionTypeOpen
> = z.union([
  z.nativeEnum(ActivityConversionType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityConversionType$ {
  /** @deprecated use `ActivityConversionType$inboundSchema` instead. */
  export const inboundSchema = ActivityConversionType$inboundSchema;
  /** @deprecated use `ActivityConversionType$outboundSchema` instead. */
  export const outboundSchema = ActivityConversionType$outboundSchema;
}

/** @internal */
export const ActivityConversion$inboundSchema: z.ZodType<
  ActivityConversion,
  z.ZodTypeDef,
  unknown
> = z.object({
  cash_rate: z.nullable(z.lazy(() => ActivityConversionCashRate$inboundSchema))
    .optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityConversionCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  stock_rate: z.nullable(z.lazy(() => ActivityStockRate$inboundSchema))
    .optional(),
  type: ActivityConversionType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "stock_rate": "stockRate",
  });
});

/** @internal */
export type ActivityConversion$Outbound = {
  cash_rate?: ActivityConversionCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityConversionCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  stock_rate?: ActivityStockRate$Outbound | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const ActivityConversion$outboundSchema: z.ZodType<
  ActivityConversion$Outbound,
  z.ZodTypeDef,
  ActivityConversion
> = z.object({
  cashRate: z.nullable(z.lazy(() => ActivityConversionCashRate$outboundSchema))
    .optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityConversionCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  stockRate: z.nullable(z.lazy(() => ActivityStockRate$outboundSchema))
    .optional(),
  type: ActivityConversionType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    stockRate: "stock_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityConversion$ {
  /** @deprecated use `ActivityConversion$inboundSchema` instead. */
  export const inboundSchema = ActivityConversion$inboundSchema;
  /** @deprecated use `ActivityConversion$outboundSchema` instead. */
  export const outboundSchema = ActivityConversion$outboundSchema;
  /** @deprecated use `ActivityConversion$Outbound` instead. */
  export type Outbound = ActivityConversion$Outbound;
}

/** @internal */
export const ActivityCorporateActionMemoAdjustment$inboundSchema: z.ZodType<
  ActivityCorporateActionMemoAdjustment,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_id: z.string().optional(),
  corporate_action_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_id": "corporateActionId",
    "corporate_action_type": "corporateActionType",
  });
});

/** @internal */
export type ActivityCorporateActionMemoAdjustment$Outbound = {
  corporate_action_id?: string | undefined;
  corporate_action_type?: string | undefined;
};

/** @internal */
export const ActivityCorporateActionMemoAdjustment$outboundSchema: z.ZodType<
  ActivityCorporateActionMemoAdjustment$Outbound,
  z.ZodTypeDef,
  ActivityCorporateActionMemoAdjustment
> = z.object({
  corporateActionId: z.string().optional(),
  corporateActionType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionId: "corporate_action_id",
    corporateActionType: "corporate_action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCorporateActionMemoAdjustment$ {
  /** @deprecated use `ActivityCorporateActionMemoAdjustment$inboundSchema` instead. */
  export const inboundSchema =
    ActivityCorporateActionMemoAdjustment$inboundSchema;
  /** @deprecated use `ActivityCorporateActionMemoAdjustment$outboundSchema` instead. */
  export const outboundSchema =
    ActivityCorporateActionMemoAdjustment$outboundSchema;
  /** @deprecated use `ActivityCorporateActionMemoAdjustment$Outbound` instead. */
  export type Outbound = ActivityCorporateActionMemoAdjustment$Outbound;
}

/** @internal */
export const ActivityCreditType$inboundSchema: z.ZodType<
  ActivityCreditTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityCreditType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityCreditType$outboundSchema: z.ZodType<
  ActivityCreditTypeOpen,
  z.ZodTypeDef,
  ActivityCreditTypeOpen
> = z.union([
  z.nativeEnum(ActivityCreditType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCreditType$ {
  /** @deprecated use `ActivityCreditType$inboundSchema` instead. */
  export const inboundSchema = ActivityCreditType$inboundSchema;
  /** @deprecated use `ActivityCreditType$outboundSchema` instead. */
  export const outboundSchema = ActivityCreditType$outboundSchema;
}

/** @internal */
export const ActivityCredit$inboundSchema: z.ZodType<
  ActivityCredit,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.string().optional(),
  credit_type: ActivityCreditType$inboundSchema.optional(),
  taxable: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
    "credit_type": "creditType",
  });
});

/** @internal */
export type ActivityCredit$Outbound = {
  additional_instructions?: string | undefined;
  credit_type?: string | undefined;
  taxable?: boolean | undefined;
};

/** @internal */
export const ActivityCredit$outboundSchema: z.ZodType<
  ActivityCredit$Outbound,
  z.ZodTypeDef,
  ActivityCredit
> = z.object({
  additionalInstructions: z.string().optional(),
  creditType: ActivityCreditType$outboundSchema.optional(),
  taxable: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
    creditType: "credit_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCredit$ {
  /** @deprecated use `ActivityCredit$inboundSchema` instead. */
  export const inboundSchema = ActivityCredit$inboundSchema;
  /** @deprecated use `ActivityCredit$outboundSchema` instead. */
  export const outboundSchema = ActivityCredit$outboundSchema;
  /** @deprecated use `ActivityCredit$Outbound` instead. */
  export type Outbound = ActivityCredit$Outbound;
}

/** @internal */
export const ActivityContributionType$inboundSchema: z.ZodType<
  ActivityContributionTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityContributionType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityContributionType$outboundSchema: z.ZodType<
  ActivityContributionTypeOpen,
  z.ZodTypeDef,
  ActivityContributionTypeOpen
> = z.union([
  z.nativeEnum(ActivityContributionType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityContributionType$ {
  /** @deprecated use `ActivityContributionType$inboundSchema` instead. */
  export const inboundSchema = ActivityContributionType$inboundSchema;
  /** @deprecated use `ActivityContributionType$outboundSchema` instead. */
  export const outboundSchema = ActivityContributionType$outboundSchema;
}

/** @internal */
export const ActivityDepositType$inboundSchema: z.ZodType<
  ActivityDepositTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityDepositType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityDepositType$outboundSchema: z.ZodType<
  ActivityDepositTypeOpen,
  z.ZodTypeDef,
  ActivityDepositTypeOpen
> = z.union([
  z.nativeEnum(ActivityDepositType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityDepositType$ {
  /** @deprecated use `ActivityDepositType$inboundSchema` instead. */
  export const inboundSchema = ActivityDepositType$inboundSchema;
  /** @deprecated use `ActivityDepositType$outboundSchema` instead. */
  export const outboundSchema = ActivityDepositType$outboundSchema;
}

/** @internal */
export const ActivityDeposit$inboundSchema: z.ZodType<
  ActivityDeposit,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.string().optional(),
  contribution_type: ActivityContributionType$inboundSchema.optional(),
  contribution_year: z.number().int().optional(),
  fed_reference_number: z.string().optional(),
  originating_account_number: z.string().optional(),
  type: ActivityDepositType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
    "contribution_type": "contributionType",
    "contribution_year": "contributionYear",
    "fed_reference_number": "fedReferenceNumber",
    "originating_account_number": "originatingAccountNumber",
  });
});

/** @internal */
export type ActivityDeposit$Outbound = {
  additional_instructions?: string | undefined;
  contribution_type?: string | undefined;
  contribution_year?: number | undefined;
  fed_reference_number?: string | undefined;
  originating_account_number?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ActivityDeposit$outboundSchema: z.ZodType<
  ActivityDeposit$Outbound,
  z.ZodTypeDef,
  ActivityDeposit
> = z.object({
  additionalInstructions: z.string().optional(),
  contributionType: ActivityContributionType$outboundSchema.optional(),
  contributionYear: z.number().int().optional(),
  fedReferenceNumber: z.string().optional(),
  originatingAccountNumber: z.string().optional(),
  type: ActivityDepositType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
    contributionType: "contribution_type",
    contributionYear: "contribution_year",
    fedReferenceNumber: "fed_reference_number",
    originatingAccountNumber: "originating_account_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityDeposit$ {
  /** @deprecated use `ActivityDeposit$inboundSchema` instead. */
  export const inboundSchema = ActivityDeposit$inboundSchema;
  /** @deprecated use `ActivityDeposit$outboundSchema` instead. */
  export const outboundSchema = ActivityDeposit$outboundSchema;
  /** @deprecated use `ActivityDeposit$Outbound` instead. */
  export type Outbound = ActivityDeposit$Outbound;
}

/** @internal */
export const ActivityDripAction$inboundSchema: z.ZodType<
  ActivityDripActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityDripAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityDripAction$outboundSchema: z.ZodType<
  ActivityDripActionOpen,
  z.ZodTypeDef,
  ActivityDripActionOpen
> = z.union([
  z.nativeEnum(ActivityDripAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityDripAction$ {
  /** @deprecated use `ActivityDripAction$inboundSchema` instead. */
  export const inboundSchema = ActivityDripAction$inboundSchema;
  /** @deprecated use `ActivityDripAction$outboundSchema` instead. */
  export const outboundSchema = ActivityDripAction$outboundSchema;
}

/** @internal */
export const ActivityDrip$inboundSchema: z.ZodType<
  ActivityDrip,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivityDripAction$inboundSchema.optional(),
});

/** @internal */
export type ActivityDrip$Outbound = {
  action?: string | undefined;
};

/** @internal */
export const ActivityDrip$outboundSchema: z.ZodType<
  ActivityDrip$Outbound,
  z.ZodTypeDef,
  ActivityDrip
> = z.object({
  action: ActivityDripAction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityDrip$ {
  /** @deprecated use `ActivityDrip$inboundSchema` instead. */
  export const inboundSchema = ActivityDrip$inboundSchema;
  /** @deprecated use `ActivityDrip$outboundSchema` instead. */
  export const outboundSchema = ActivityDrip$outboundSchema;
  /** @deprecated use `ActivityDrip$Outbound` instead. */
  export type Outbound = ActivityDrip$Outbound;
}

/** @internal */
export const ActivityExchangeCashRate$inboundSchema: z.ZodType<
  ActivityExchangeCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityExchangeCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityExchangeCashRate$outboundSchema: z.ZodType<
  ActivityExchangeCashRate$Outbound,
  z.ZodTypeDef,
  ActivityExchangeCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityExchangeCashRate$ {
  /** @deprecated use `ActivityExchangeCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityExchangeCashRate$inboundSchema;
  /** @deprecated use `ActivityExchangeCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityExchangeCashRate$outboundSchema;
  /** @deprecated use `ActivityExchangeCashRate$Outbound` instead. */
  export type Outbound = ActivityExchangeCashRate$Outbound;
}

/** @internal */
export const ActivityExchangeCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityExchangeCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityExchangeCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityExchangeCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityExchangeCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityExchangeCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityExchangeCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityExchangeCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityExchangeCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityExchangeCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityExchangeCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityExchangeStockRate$inboundSchema: z.ZodType<
  ActivityExchangeStockRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityExchangeStockRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityExchangeStockRate$outboundSchema: z.ZodType<
  ActivityExchangeStockRate$Outbound,
  z.ZodTypeDef,
  ActivityExchangeStockRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityExchangeStockRate$ {
  /** @deprecated use `ActivityExchangeStockRate$inboundSchema` instead. */
  export const inboundSchema = ActivityExchangeStockRate$inboundSchema;
  /** @deprecated use `ActivityExchangeStockRate$outboundSchema` instead. */
  export const outboundSchema = ActivityExchangeStockRate$outboundSchema;
  /** @deprecated use `ActivityExchangeStockRate$Outbound` instead. */
  export type Outbound = ActivityExchangeStockRate$Outbound;
}

/** @internal */
export const ActivityExchangeType$inboundSchema: z.ZodType<
  ActivityExchangeTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityExchangeType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityExchangeType$outboundSchema: z.ZodType<
  ActivityExchangeTypeOpen,
  z.ZodTypeDef,
  ActivityExchangeTypeOpen
> = z.union([
  z.nativeEnum(ActivityExchangeType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityExchangeType$ {
  /** @deprecated use `ActivityExchangeType$inboundSchema` instead. */
  export const inboundSchema = ActivityExchangeType$inboundSchema;
  /** @deprecated use `ActivityExchangeType$outboundSchema` instead. */
  export const outboundSchema = ActivityExchangeType$outboundSchema;
}

/** @internal */
export const ActivityExchange$inboundSchema: z.ZodType<
  ActivityExchange,
  z.ZodTypeDef,
  unknown
> = z.object({
  cash_rate: z.nullable(z.lazy(() => ActivityExchangeCashRate$inboundSchema))
    .optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityExchangeCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  stock_rate: z.nullable(z.lazy(() => ActivityExchangeStockRate$inboundSchema))
    .optional(),
  type: ActivityExchangeType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "stock_rate": "stockRate",
  });
});

/** @internal */
export type ActivityExchange$Outbound = {
  cash_rate?: ActivityExchangeCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityExchangeCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  stock_rate?: ActivityExchangeStockRate$Outbound | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const ActivityExchange$outboundSchema: z.ZodType<
  ActivityExchange$Outbound,
  z.ZodTypeDef,
  ActivityExchange
> = z.object({
  cashRate: z.nullable(z.lazy(() => ActivityExchangeCashRate$outboundSchema))
    .optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityExchangeCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  stockRate: z.nullable(z.lazy(() => ActivityExchangeStockRate$outboundSchema))
    .optional(),
  type: ActivityExchangeType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    stockRate: "stock_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityExchange$ {
  /** @deprecated use `ActivityExchange$inboundSchema` instead. */
  export const inboundSchema = ActivityExchange$inboundSchema;
  /** @deprecated use `ActivityExchange$outboundSchema` instead. */
  export const outboundSchema = ActivityExchange$outboundSchema;
  /** @deprecated use `ActivityExchange$Outbound` instead. */
  export type Outbound = ActivityExchange$Outbound;
}

/** @internal */
export const ActivityFee$inboundSchema: z.ZodType<
  ActivityFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
  });
});

/** @internal */
export type ActivityFee$Outbound = {
  additional_instructions?: string | undefined;
};

/** @internal */
export const ActivityFee$outboundSchema: z.ZodType<
  ActivityFee$Outbound,
  z.ZodTypeDef,
  ActivityFee
> = z.object({
  additionalInstructions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityFee$ {
  /** @deprecated use `ActivityFee$inboundSchema` instead. */
  export const inboundSchema = ActivityFee$inboundSchema;
  /** @deprecated use `ActivityFee$outboundSchema` instead. */
  export const outboundSchema = ActivityFee$outboundSchema;
  /** @deprecated use `ActivityFee$Outbound` instead. */
  export type Outbound = ActivityFee$Outbound;
}

/** @internal */
export const ActivityFpslAction$inboundSchema: z.ZodType<
  ActivityFpslActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityFpslAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityFpslAction$outboundSchema: z.ZodType<
  ActivityFpslActionOpen,
  z.ZodTypeDef,
  ActivityFpslActionOpen
> = z.union([
  z.nativeEnum(ActivityFpslAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityFpslAction$ {
  /** @deprecated use `ActivityFpslAction$inboundSchema` instead. */
  export const inboundSchema = ActivityFpslAction$inboundSchema;
  /** @deprecated use `ActivityFpslAction$outboundSchema` instead. */
  export const outboundSchema = ActivityFpslAction$outboundSchema;
}

/** @internal */
export const ActivityFpsl$inboundSchema: z.ZodType<
  ActivityFpsl,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivityFpslAction$inboundSchema.optional(),
});

/** @internal */
export type ActivityFpsl$Outbound = {
  action?: string | undefined;
};

/** @internal */
export const ActivityFpsl$outboundSchema: z.ZodType<
  ActivityFpsl$Outbound,
  z.ZodTypeDef,
  ActivityFpsl
> = z.object({
  action: ActivityFpslAction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityFpsl$ {
  /** @deprecated use `ActivityFpsl$inboundSchema` instead. */
  export const inboundSchema = ActivityFpsl$inboundSchema;
  /** @deprecated use `ActivityFpsl$outboundSchema` instead. */
  export const outboundSchema = ActivityFpsl$outboundSchema;
  /** @deprecated use `ActivityFpsl$Outbound` instead. */
  export type Outbound = ActivityFpsl$Outbound;
}

/** @internal */
export const ActivityGrossAmount$inboundSchema: z.ZodType<
  ActivityGrossAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityGrossAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityGrossAmount$outboundSchema: z.ZodType<
  ActivityGrossAmount$Outbound,
  z.ZodTypeDef,
  ActivityGrossAmount
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGrossAmount$ {
  /** @deprecated use `ActivityGrossAmount$inboundSchema` instead. */
  export const inboundSchema = ActivityGrossAmount$inboundSchema;
  /** @deprecated use `ActivityGrossAmount$outboundSchema` instead. */
  export const outboundSchema = ActivityGrossAmount$outboundSchema;
  /** @deprecated use `ActivityGrossAmount$Outbound` instead. */
  export type Outbound = ActivityGrossAmount$Outbound;
}

/** @internal */
export const ActivityInterestAccrualEndDate$inboundSchema: z.ZodType<
  ActivityInterestAccrualEndDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityInterestAccrualEndDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityInterestAccrualEndDate$outboundSchema: z.ZodType<
  ActivityInterestAccrualEndDate$Outbound,
  z.ZodTypeDef,
  ActivityInterestAccrualEndDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestAccrualEndDate$ {
  /** @deprecated use `ActivityInterestAccrualEndDate$inboundSchema` instead. */
  export const inboundSchema = ActivityInterestAccrualEndDate$inboundSchema;
  /** @deprecated use `ActivityInterestAccrualEndDate$outboundSchema` instead. */
  export const outboundSchema = ActivityInterestAccrualEndDate$outboundSchema;
  /** @deprecated use `ActivityInterestAccrualEndDate$Outbound` instead. */
  export type Outbound = ActivityInterestAccrualEndDate$Outbound;
}

/** @internal */
export const ActivityInterestAccrualStartDate$inboundSchema: z.ZodType<
  ActivityInterestAccrualStartDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityInterestAccrualStartDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityInterestAccrualStartDate$outboundSchema: z.ZodType<
  ActivityInterestAccrualStartDate$Outbound,
  z.ZodTypeDef,
  ActivityInterestAccrualStartDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestAccrualStartDate$ {
  /** @deprecated use `ActivityInterestAccrualStartDate$inboundSchema` instead. */
  export const inboundSchema = ActivityInterestAccrualStartDate$inboundSchema;
  /** @deprecated use `ActivityInterestAccrualStartDate$outboundSchema` instead. */
  export const outboundSchema = ActivityInterestAccrualStartDate$outboundSchema;
  /** @deprecated use `ActivityInterestAccrualStartDate$Outbound` instead. */
  export type Outbound = ActivityInterestAccrualStartDate$Outbound;
}

/** @internal */
export const ActivityInterestType$inboundSchema: z.ZodType<
  ActivityInterestTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityInterestType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityInterestType$outboundSchema: z.ZodType<
  ActivityInterestTypeOpen,
  z.ZodTypeDef,
  ActivityInterestTypeOpen
> = z.union([
  z.nativeEnum(ActivityInterestType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestType$ {
  /** @deprecated use `ActivityInterestType$inboundSchema` instead. */
  export const inboundSchema = ActivityInterestType$inboundSchema;
  /** @deprecated use `ActivityInterestType$outboundSchema` instead. */
  export const outboundSchema = ActivityInterestType$outboundSchema;
}

/** @internal */
export const ActivityInterest$inboundSchema: z.ZodType<
  ActivityInterest,
  z.ZodTypeDef,
  unknown
> = z.object({
  interest_accrual_end_date: z.nullable(
    z.lazy(() => ActivityInterestAccrualEndDate$inboundSchema),
  ).optional(),
  interest_accrual_start_date: z.nullable(
    z.lazy(() => ActivityInterestAccrualStartDate$inboundSchema),
  ).optional(),
  interest_type: ActivityInterestType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "interest_accrual_end_date": "interestAccrualEndDate",
    "interest_accrual_start_date": "interestAccrualStartDate",
    "interest_type": "interestType",
  });
});

/** @internal */
export type ActivityInterest$Outbound = {
  interest_accrual_end_date?:
    | ActivityInterestAccrualEndDate$Outbound
    | null
    | undefined;
  interest_accrual_start_date?:
    | ActivityInterestAccrualStartDate$Outbound
    | null
    | undefined;
  interest_type?: string | undefined;
};

/** @internal */
export const ActivityInterest$outboundSchema: z.ZodType<
  ActivityInterest$Outbound,
  z.ZodTypeDef,
  ActivityInterest
> = z.object({
  interestAccrualEndDate: z.nullable(
    z.lazy(() => ActivityInterestAccrualEndDate$outboundSchema),
  ).optional(),
  interestAccrualStartDate: z.nullable(
    z.lazy(() => ActivityInterestAccrualStartDate$outboundSchema),
  ).optional(),
  interestType: ActivityInterestType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    interestAccrualEndDate: "interest_accrual_end_date",
    interestAccrualStartDate: "interest_accrual_start_date",
    interestType: "interest_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterest$ {
  /** @deprecated use `ActivityInterest$inboundSchema` instead. */
  export const inboundSchema = ActivityInterest$inboundSchema;
  /** @deprecated use `ActivityInterest$outboundSchema` instead. */
  export const outboundSchema = ActivityInterest$outboundSchema;
  /** @deprecated use `ActivityInterest$Outbound` instead. */
  export type Outbound = ActivityInterest$Outbound;
}

/** @internal */
export const ActivityInterestPaymentCashRate$inboundSchema: z.ZodType<
  ActivityInterestPaymentCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityInterestPaymentCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityInterestPaymentCashRate$outboundSchema: z.ZodType<
  ActivityInterestPaymentCashRate$Outbound,
  z.ZodTypeDef,
  ActivityInterestPaymentCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestPaymentCashRate$ {
  /** @deprecated use `ActivityInterestPaymentCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityInterestPaymentCashRate$inboundSchema;
  /** @deprecated use `ActivityInterestPaymentCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityInterestPaymentCashRate$outboundSchema;
  /** @deprecated use `ActivityInterestPaymentCashRate$Outbound` instead. */
  export type Outbound = ActivityInterestPaymentCashRate$Outbound;
}

/** @internal */
export const ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityInterestPaymentCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityInterestPaymentCorporateActionGeneralInformation$Outbound =
  {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
  };

/** @internal */
export const ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityInterestPaymentCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityInterestPaymentCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestPaymentCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityInterestPaymentCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityInterestPaymentCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityInterestPaymentPaymentDate$inboundSchema: z.ZodType<
  ActivityInterestPaymentPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityInterestPaymentPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityInterestPaymentPaymentDate$outboundSchema: z.ZodType<
  ActivityInterestPaymentPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityInterestPaymentPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestPaymentPaymentDate$ {
  /** @deprecated use `ActivityInterestPaymentPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivityInterestPaymentPaymentDate$inboundSchema;
  /** @deprecated use `ActivityInterestPaymentPaymentDate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityInterestPaymentPaymentDate$outboundSchema;
  /** @deprecated use `ActivityInterestPaymentPaymentDate$Outbound` instead. */
  export type Outbound = ActivityInterestPaymentPaymentDate$Outbound;
}

/** @internal */
export const ActivityInterestPaymentRecordDate$inboundSchema: z.ZodType<
  ActivityInterestPaymentRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityInterestPaymentRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityInterestPaymentRecordDate$outboundSchema: z.ZodType<
  ActivityInterestPaymentRecordDate$Outbound,
  z.ZodTypeDef,
  ActivityInterestPaymentRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestPaymentRecordDate$ {
  /** @deprecated use `ActivityInterestPaymentRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivityInterestPaymentRecordDate$inboundSchema;
  /** @deprecated use `ActivityInterestPaymentRecordDate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityInterestPaymentRecordDate$outboundSchema;
  /** @deprecated use `ActivityInterestPaymentRecordDate$Outbound` instead. */
  export type Outbound = ActivityInterestPaymentRecordDate$Outbound;
}

/** @internal */
export const ActivityInterestPaymentSettled$inboundSchema: z.ZodType<
  ActivityInterestPaymentSettled,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityInterestPaymentSettled$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityInterestPaymentSettled$outboundSchema: z.ZodType<
  ActivityInterestPaymentSettled$Outbound,
  z.ZodTypeDef,
  ActivityInterestPaymentSettled
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestPaymentSettled$ {
  /** @deprecated use `ActivityInterestPaymentSettled$inboundSchema` instead. */
  export const inboundSchema = ActivityInterestPaymentSettled$inboundSchema;
  /** @deprecated use `ActivityInterestPaymentSettled$outboundSchema` instead. */
  export const outboundSchema = ActivityInterestPaymentSettled$outboundSchema;
  /** @deprecated use `ActivityInterestPaymentSettled$Outbound` instead. */
  export type Outbound = ActivityInterestPaymentSettled$Outbound;
}

/** @internal */
export const ActivityInterestPayment$inboundSchema: z.ZodType<
  ActivityInterestPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  cash_rate: z.nullable(
    z.lazy(() => ActivityInterestPaymentCashRate$inboundSchema),
  ).optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityInterestPaymentCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityInterestPaymentPaymentDate$inboundSchema),
  ).optional(),
  record_date: z.nullable(
    z.lazy(() => ActivityInterestPaymentRecordDate$inboundSchema),
  ).optional(),
  settled: z.nullable(
    z.lazy(() => ActivityInterestPaymentSettled$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "payment_date": "paymentDate",
    "record_date": "recordDate",
  });
});

/** @internal */
export type ActivityInterestPayment$Outbound = {
  cash_rate?: ActivityInterestPaymentCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityInterestPaymentCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  payment_date?: ActivityInterestPaymentPaymentDate$Outbound | null | undefined;
  record_date?: ActivityInterestPaymentRecordDate$Outbound | null | undefined;
  settled?: ActivityInterestPaymentSettled$Outbound | null | undefined;
};

/** @internal */
export const ActivityInterestPayment$outboundSchema: z.ZodType<
  ActivityInterestPayment$Outbound,
  z.ZodTypeDef,
  ActivityInterestPayment
> = z.object({
  cashRate: z.nullable(
    z.lazy(() => ActivityInterestPaymentCashRate$outboundSchema),
  ).optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityInterestPaymentCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityInterestPaymentPaymentDate$outboundSchema),
  ).optional(),
  recordDate: z.nullable(
    z.lazy(() => ActivityInterestPaymentRecordDate$outboundSchema),
  ).optional(),
  settled: z.nullable(
    z.lazy(() => ActivityInterestPaymentSettled$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    paymentDate: "payment_date",
    recordDate: "record_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityInterestPayment$ {
  /** @deprecated use `ActivityInterestPayment$inboundSchema` instead. */
  export const inboundSchema = ActivityInterestPayment$inboundSchema;
  /** @deprecated use `ActivityInterestPayment$outboundSchema` instead. */
  export const outboundSchema = ActivityInterestPayment$outboundSchema;
  /** @deprecated use `ActivityInterestPayment$Outbound` instead. */
  export type Outbound = ActivityInterestPayment$Outbound;
}

/** @internal */
export const ActivityLiquidationAction$inboundSchema: z.ZodType<
  ActivityLiquidationActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityLiquidationAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityLiquidationAction$outboundSchema: z.ZodType<
  ActivityLiquidationActionOpen,
  z.ZodTypeDef,
  ActivityLiquidationActionOpen
> = z.union([
  z.nativeEnum(ActivityLiquidationAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidationAction$ {
  /** @deprecated use `ActivityLiquidationAction$inboundSchema` instead. */
  export const inboundSchema = ActivityLiquidationAction$inboundSchema;
  /** @deprecated use `ActivityLiquidationAction$outboundSchema` instead. */
  export const outboundSchema = ActivityLiquidationAction$outboundSchema;
}

/** @internal */
export const ActivityLiquidationCashRate$inboundSchema: z.ZodType<
  ActivityLiquidationCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityLiquidationCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityLiquidationCashRate$outboundSchema: z.ZodType<
  ActivityLiquidationCashRate$Outbound,
  z.ZodTypeDef,
  ActivityLiquidationCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidationCashRate$ {
  /** @deprecated use `ActivityLiquidationCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityLiquidationCashRate$inboundSchema;
  /** @deprecated use `ActivityLiquidationCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityLiquidationCashRate$outboundSchema;
  /** @deprecated use `ActivityLiquidationCashRate$Outbound` instead. */
  export type Outbound = ActivityLiquidationCashRate$Outbound;
}

/** @internal */
export const ActivityLiquidationCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityLiquidationCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityLiquidationCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityLiquidationCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityLiquidationCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityLiquidationCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidationCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityLiquidationCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityLiquidationCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityLiquidationCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityLiquidationCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityEffectiveDate$inboundSchema: z.ZodType<
  ActivityEffectiveDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityEffectiveDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityEffectiveDate$outboundSchema: z.ZodType<
  ActivityEffectiveDate$Outbound,
  z.ZodTypeDef,
  ActivityEffectiveDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityEffectiveDate$ {
  /** @deprecated use `ActivityEffectiveDate$inboundSchema` instead. */
  export const inboundSchema = ActivityEffectiveDate$inboundSchema;
  /** @deprecated use `ActivityEffectiveDate$outboundSchema` instead. */
  export const outboundSchema = ActivityEffectiveDate$outboundSchema;
  /** @deprecated use `ActivityEffectiveDate$Outbound` instead. */
  export type Outbound = ActivityEffectiveDate$Outbound;
}

/** @internal */
export const ActivityLiquidationPaymentDate$inboundSchema: z.ZodType<
  ActivityLiquidationPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityLiquidationPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityLiquidationPaymentDate$outboundSchema: z.ZodType<
  ActivityLiquidationPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityLiquidationPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidationPaymentDate$ {
  /** @deprecated use `ActivityLiquidationPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivityLiquidationPaymentDate$inboundSchema;
  /** @deprecated use `ActivityLiquidationPaymentDate$outboundSchema` instead. */
  export const outboundSchema = ActivityLiquidationPaymentDate$outboundSchema;
  /** @deprecated use `ActivityLiquidationPaymentDate$Outbound` instead. */
  export type Outbound = ActivityLiquidationPaymentDate$Outbound;
}

/** @internal */
export const ActivityLiquidationQuantity$inboundSchema: z.ZodType<
  ActivityLiquidationQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityLiquidationQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityLiquidationQuantity$outboundSchema: z.ZodType<
  ActivityLiquidationQuantity$Outbound,
  z.ZodTypeDef,
  ActivityLiquidationQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidationQuantity$ {
  /** @deprecated use `ActivityLiquidationQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityLiquidationQuantity$inboundSchema;
  /** @deprecated use `ActivityLiquidationQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityLiquidationQuantity$outboundSchema;
  /** @deprecated use `ActivityLiquidationQuantity$Outbound` instead. */
  export type Outbound = ActivityLiquidationQuantity$Outbound;
}

/** @internal */
export const ActivityLiquidationRecordDate$inboundSchema: z.ZodType<
  ActivityLiquidationRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityLiquidationRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityLiquidationRecordDate$outboundSchema: z.ZodType<
  ActivityLiquidationRecordDate$Outbound,
  z.ZodTypeDef,
  ActivityLiquidationRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidationRecordDate$ {
  /** @deprecated use `ActivityLiquidationRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivityLiquidationRecordDate$inboundSchema;
  /** @deprecated use `ActivityLiquidationRecordDate$outboundSchema` instead. */
  export const outboundSchema = ActivityLiquidationRecordDate$outboundSchema;
  /** @deprecated use `ActivityLiquidationRecordDate$Outbound` instead. */
  export type Outbound = ActivityLiquidationRecordDate$Outbound;
}

/** @internal */
export const ActivityLiquidationSettled$inboundSchema: z.ZodType<
  ActivityLiquidationSettled,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityLiquidationSettled$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityLiquidationSettled$outboundSchema: z.ZodType<
  ActivityLiquidationSettled$Outbound,
  z.ZodTypeDef,
  ActivityLiquidationSettled
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidationSettled$ {
  /** @deprecated use `ActivityLiquidationSettled$inboundSchema` instead. */
  export const inboundSchema = ActivityLiquidationSettled$inboundSchema;
  /** @deprecated use `ActivityLiquidationSettled$outboundSchema` instead. */
  export const outboundSchema = ActivityLiquidationSettled$outboundSchema;
  /** @deprecated use `ActivityLiquidationSettled$Outbound` instead. */
  export type Outbound = ActivityLiquidationSettled$Outbound;
}

/** @internal */
export const ActivityLiquidationSubtype$inboundSchema: z.ZodType<
  ActivityLiquidationSubtypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityLiquidationSubtype),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityLiquidationSubtype$outboundSchema: z.ZodType<
  ActivityLiquidationSubtypeOpen,
  z.ZodTypeDef,
  ActivityLiquidationSubtypeOpen
> = z.union([
  z.nativeEnum(ActivityLiquidationSubtype),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidationSubtype$ {
  /** @deprecated use `ActivityLiquidationSubtype$inboundSchema` instead. */
  export const inboundSchema = ActivityLiquidationSubtype$inboundSchema;
  /** @deprecated use `ActivityLiquidationSubtype$outboundSchema` instead. */
  export const outboundSchema = ActivityLiquidationSubtype$outboundSchema;
}

/** @internal */
export const ActivityLiquidation$inboundSchema: z.ZodType<
  ActivityLiquidation,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivityLiquidationAction$inboundSchema.optional(),
  cash_rate: z.nullable(z.lazy(() => ActivityLiquidationCashRate$inboundSchema))
    .optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityLiquidationCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  effective_date: z.nullable(z.lazy(() => ActivityEffectiveDate$inboundSchema))
    .optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityLiquidationPaymentDate$inboundSchema),
  ).optional(),
  quantity: z.nullable(z.lazy(() => ActivityLiquidationQuantity$inboundSchema))
    .optional(),
  record_date: z.nullable(
    z.lazy(() => ActivityLiquidationRecordDate$inboundSchema),
  ).optional(),
  settled: z.nullable(z.lazy(() => ActivityLiquidationSettled$inboundSchema))
    .optional(),
  subtype: ActivityLiquidationSubtype$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "effective_date": "effectiveDate",
    "payment_date": "paymentDate",
    "record_date": "recordDate",
  });
});

/** @internal */
export type ActivityLiquidation$Outbound = {
  action?: string | undefined;
  cash_rate?: ActivityLiquidationCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityLiquidationCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  effective_date?: ActivityEffectiveDate$Outbound | null | undefined;
  payment_date?: ActivityLiquidationPaymentDate$Outbound | null | undefined;
  quantity?: ActivityLiquidationQuantity$Outbound | null | undefined;
  record_date?: ActivityLiquidationRecordDate$Outbound | null | undefined;
  settled?: ActivityLiquidationSettled$Outbound | null | undefined;
  subtype?: string | undefined;
};

/** @internal */
export const ActivityLiquidation$outboundSchema: z.ZodType<
  ActivityLiquidation$Outbound,
  z.ZodTypeDef,
  ActivityLiquidation
> = z.object({
  action: ActivityLiquidationAction$outboundSchema.optional(),
  cashRate: z.nullable(z.lazy(() => ActivityLiquidationCashRate$outboundSchema))
    .optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityLiquidationCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  effectiveDate: z.nullable(z.lazy(() => ActivityEffectiveDate$outboundSchema))
    .optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityLiquidationPaymentDate$outboundSchema),
  ).optional(),
  quantity: z.nullable(z.lazy(() => ActivityLiquidationQuantity$outboundSchema))
    .optional(),
  recordDate: z.nullable(
    z.lazy(() => ActivityLiquidationRecordDate$outboundSchema),
  ).optional(),
  settled: z.nullable(z.lazy(() => ActivityLiquidationSettled$outboundSchema))
    .optional(),
  subtype: ActivityLiquidationSubtype$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    effectiveDate: "effective_date",
    paymentDate: "payment_date",
    recordDate: "record_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLiquidation$ {
  /** @deprecated use `ActivityLiquidation$inboundSchema` instead. */
  export const inboundSchema = ActivityLiquidation$inboundSchema;
  /** @deprecated use `ActivityLiquidation$outboundSchema` instead. */
  export const outboundSchema = ActivityLiquidation$outboundSchema;
  /** @deprecated use `ActivityLiquidation$Outbound` instead. */
  export type Outbound = ActivityLiquidation$Outbound;
}

/** @internal */
export const ActivityMaturityCashRate$inboundSchema: z.ZodType<
  ActivityMaturityCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityMaturityCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityMaturityCashRate$outboundSchema: z.ZodType<
  ActivityMaturityCashRate$Outbound,
  z.ZodTypeDef,
  ActivityMaturityCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMaturityCashRate$ {
  /** @deprecated use `ActivityMaturityCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityMaturityCashRate$inboundSchema;
  /** @deprecated use `ActivityMaturityCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityMaturityCashRate$outboundSchema;
  /** @deprecated use `ActivityMaturityCashRate$Outbound` instead. */
  export type Outbound = ActivityMaturityCashRate$Outbound;
}

/** @internal */
export const ActivityMaturityCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityMaturityCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityMaturityCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityMaturityCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityMaturityCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityMaturityCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMaturityCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityMaturityCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityMaturityCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityMaturityCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityMaturityCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityMaturityPaymentDate$inboundSchema: z.ZodType<
  ActivityMaturityPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityMaturityPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityMaturityPaymentDate$outboundSchema: z.ZodType<
  ActivityMaturityPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityMaturityPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMaturityPaymentDate$ {
  /** @deprecated use `ActivityMaturityPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivityMaturityPaymentDate$inboundSchema;
  /** @deprecated use `ActivityMaturityPaymentDate$outboundSchema` instead. */
  export const outboundSchema = ActivityMaturityPaymentDate$outboundSchema;
  /** @deprecated use `ActivityMaturityPaymentDate$Outbound` instead. */
  export type Outbound = ActivityMaturityPaymentDate$Outbound;
}

/** @internal */
export const ActivityMaturityQuantity$inboundSchema: z.ZodType<
  ActivityMaturityQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityMaturityQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityMaturityQuantity$outboundSchema: z.ZodType<
  ActivityMaturityQuantity$Outbound,
  z.ZodTypeDef,
  ActivityMaturityQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMaturityQuantity$ {
  /** @deprecated use `ActivityMaturityQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityMaturityQuantity$inboundSchema;
  /** @deprecated use `ActivityMaturityQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityMaturityQuantity$outboundSchema;
  /** @deprecated use `ActivityMaturityQuantity$Outbound` instead. */
  export type Outbound = ActivityMaturityQuantity$Outbound;
}

/** @internal */
export const ActivityMaturity$inboundSchema: z.ZodType<
  ActivityMaturity,
  z.ZodTypeDef,
  unknown
> = z.object({
  cash_rate: z.nullable(z.lazy(() => ActivityMaturityCashRate$inboundSchema))
    .optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityMaturityCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityMaturityPaymentDate$inboundSchema),
  ).optional(),
  quantity: z.nullable(z.lazy(() => ActivityMaturityQuantity$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "payment_date": "paymentDate",
  });
});

/** @internal */
export type ActivityMaturity$Outbound = {
  cash_rate?: ActivityMaturityCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityMaturityCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  payment_date?: ActivityMaturityPaymentDate$Outbound | null | undefined;
  quantity?: ActivityMaturityQuantity$Outbound | null | undefined;
};

/** @internal */
export const ActivityMaturity$outboundSchema: z.ZodType<
  ActivityMaturity$Outbound,
  z.ZodTypeDef,
  ActivityMaturity
> = z.object({
  cashRate: z.nullable(z.lazy(() => ActivityMaturityCashRate$outboundSchema))
    .optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityMaturityCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityMaturityPaymentDate$outboundSchema),
  ).optional(),
  quantity: z.nullable(z.lazy(() => ActivityMaturityQuantity$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    paymentDate: "payment_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMaturity$ {
  /** @deprecated use `ActivityMaturity$inboundSchema` instead. */
  export const inboundSchema = ActivityMaturity$inboundSchema;
  /** @deprecated use `ActivityMaturity$outboundSchema` instead. */
  export const outboundSchema = ActivityMaturity$outboundSchema;
  /** @deprecated use `ActivityMaturity$Outbound` instead. */
  export type Outbound = ActivityMaturity$Outbound;
}

/** @internal */
export const ActivityMergerAction$inboundSchema: z.ZodType<
  ActivityMergerActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityMergerAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityMergerAction$outboundSchema: z.ZodType<
  ActivityMergerActionOpen,
  z.ZodTypeDef,
  ActivityMergerActionOpen
> = z.union([
  z.nativeEnum(ActivityMergerAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMergerAction$ {
  /** @deprecated use `ActivityMergerAction$inboundSchema` instead. */
  export const inboundSchema = ActivityMergerAction$inboundSchema;
  /** @deprecated use `ActivityMergerAction$outboundSchema` instead. */
  export const outboundSchema = ActivityMergerAction$outboundSchema;
}

/** @internal */
export const ActivityMergerCashRate$inboundSchema: z.ZodType<
  ActivityMergerCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityMergerCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityMergerCashRate$outboundSchema: z.ZodType<
  ActivityMergerCashRate$Outbound,
  z.ZodTypeDef,
  ActivityMergerCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMergerCashRate$ {
  /** @deprecated use `ActivityMergerCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityMergerCashRate$inboundSchema;
  /** @deprecated use `ActivityMergerCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityMergerCashRate$outboundSchema;
  /** @deprecated use `ActivityMergerCashRate$Outbound` instead. */
  export type Outbound = ActivityMergerCashRate$Outbound;
}

/** @internal */
export const ActivityMergerCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityMergerCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityMergerCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityMergerCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityMergerCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityMergerCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMergerCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityMergerCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityMergerCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityMergerCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityMergerCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityMergerEffectiveDate$inboundSchema: z.ZodType<
  ActivityMergerEffectiveDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityMergerEffectiveDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityMergerEffectiveDate$outboundSchema: z.ZodType<
  ActivityMergerEffectiveDate$Outbound,
  z.ZodTypeDef,
  ActivityMergerEffectiveDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMergerEffectiveDate$ {
  /** @deprecated use `ActivityMergerEffectiveDate$inboundSchema` instead. */
  export const inboundSchema = ActivityMergerEffectiveDate$inboundSchema;
  /** @deprecated use `ActivityMergerEffectiveDate$outboundSchema` instead. */
  export const outboundSchema = ActivityMergerEffectiveDate$outboundSchema;
  /** @deprecated use `ActivityMergerEffectiveDate$Outbound` instead. */
  export type Outbound = ActivityMergerEffectiveDate$Outbound;
}

/** @internal */
export const ActivityMergerQuantity$inboundSchema: z.ZodType<
  ActivityMergerQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityMergerQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityMergerQuantity$outboundSchema: z.ZodType<
  ActivityMergerQuantity$Outbound,
  z.ZodTypeDef,
  ActivityMergerQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMergerQuantity$ {
  /** @deprecated use `ActivityMergerQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityMergerQuantity$inboundSchema;
  /** @deprecated use `ActivityMergerQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityMergerQuantity$outboundSchema;
  /** @deprecated use `ActivityMergerQuantity$Outbound` instead. */
  export type Outbound = ActivityMergerQuantity$Outbound;
}

/** @internal */
export const ActivityMergerStockRate$inboundSchema: z.ZodType<
  ActivityMergerStockRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityMergerStockRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityMergerStockRate$outboundSchema: z.ZodType<
  ActivityMergerStockRate$Outbound,
  z.ZodTypeDef,
  ActivityMergerStockRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMergerStockRate$ {
  /** @deprecated use `ActivityMergerStockRate$inboundSchema` instead. */
  export const inboundSchema = ActivityMergerStockRate$inboundSchema;
  /** @deprecated use `ActivityMergerStockRate$outboundSchema` instead. */
  export const outboundSchema = ActivityMergerStockRate$outboundSchema;
  /** @deprecated use `ActivityMergerStockRate$Outbound` instead. */
  export type Outbound = ActivityMergerStockRate$Outbound;
}

/** @internal */
export const ActivityMergerType$inboundSchema: z.ZodType<
  ActivityMergerTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityMergerType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityMergerType$outboundSchema: z.ZodType<
  ActivityMergerTypeOpen,
  z.ZodTypeDef,
  ActivityMergerTypeOpen
> = z.union([
  z.nativeEnum(ActivityMergerType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMergerType$ {
  /** @deprecated use `ActivityMergerType$inboundSchema` instead. */
  export const inboundSchema = ActivityMergerType$inboundSchema;
  /** @deprecated use `ActivityMergerType$outboundSchema` instead. */
  export const outboundSchema = ActivityMergerType$outboundSchema;
}

/** @internal */
export const ActivityMerger$inboundSchema: z.ZodType<
  ActivityMerger,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivityMergerAction$inboundSchema.optional(),
  cash_rate: z.nullable(z.lazy(() => ActivityMergerCashRate$inboundSchema))
    .optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() => ActivityMergerCorporateActionGeneralInformation$inboundSchema),
  ).optional(),
  effective_date: z.nullable(
    z.lazy(() => ActivityMergerEffectiveDate$inboundSchema),
  ).optional(),
  quantity: z.nullable(z.lazy(() => ActivityMergerQuantity$inboundSchema))
    .optional(),
  stock_rate: z.nullable(z.lazy(() => ActivityMergerStockRate$inboundSchema))
    .optional(),
  type: ActivityMergerType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "effective_date": "effectiveDate",
    "stock_rate": "stockRate",
  });
});

/** @internal */
export type ActivityMerger$Outbound = {
  action?: string | undefined;
  cash_rate?: ActivityMergerCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityMergerCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  effective_date?: ActivityMergerEffectiveDate$Outbound | null | undefined;
  quantity?: ActivityMergerQuantity$Outbound | null | undefined;
  stock_rate?: ActivityMergerStockRate$Outbound | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const ActivityMerger$outboundSchema: z.ZodType<
  ActivityMerger$Outbound,
  z.ZodTypeDef,
  ActivityMerger
> = z.object({
  action: ActivityMergerAction$outboundSchema.optional(),
  cashRate: z.nullable(z.lazy(() => ActivityMergerCashRate$outboundSchema))
    .optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityMergerCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  effectiveDate: z.nullable(
    z.lazy(() => ActivityMergerEffectiveDate$outboundSchema),
  ).optional(),
  quantity: z.nullable(z.lazy(() => ActivityMergerQuantity$outboundSchema))
    .optional(),
  stockRate: z.nullable(z.lazy(() => ActivityMergerStockRate$outboundSchema))
    .optional(),
  type: ActivityMergerType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    effectiveDate: "effective_date",
    stockRate: "stock_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityMerger$ {
  /** @deprecated use `ActivityMerger$inboundSchema` instead. */
  export const inboundSchema = ActivityMerger$inboundSchema;
  /** @deprecated use `ActivityMerger$outboundSchema` instead. */
  export const outboundSchema = ActivityMerger$outboundSchema;
  /** @deprecated use `ActivityMerger$Outbound` instead. */
  export type Outbound = ActivityMerger$Outbound;
}

/** @internal */
export const ActivityNameChangeAction$inboundSchema: z.ZodType<
  ActivityNameChangeActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityNameChangeAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityNameChangeAction$outboundSchema: z.ZodType<
  ActivityNameChangeActionOpen,
  z.ZodTypeDef,
  ActivityNameChangeActionOpen
> = z.union([
  z.nativeEnum(ActivityNameChangeAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNameChangeAction$ {
  /** @deprecated use `ActivityNameChangeAction$inboundSchema` instead. */
  export const inboundSchema = ActivityNameChangeAction$inboundSchema;
  /** @deprecated use `ActivityNameChangeAction$outboundSchema` instead. */
  export const outboundSchema = ActivityNameChangeAction$outboundSchema;
}

/** @internal */
export const ActivityNameChangeCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityNameChangeCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityNameChangeCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityNameChangeCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityNameChangeCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityNameChangeCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNameChangeCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityNameChangeCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityNameChangeCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityNameChangeCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityNameChangeCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityNameChangeEffectiveDate$inboundSchema: z.ZodType<
  ActivityNameChangeEffectiveDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityNameChangeEffectiveDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityNameChangeEffectiveDate$outboundSchema: z.ZodType<
  ActivityNameChangeEffectiveDate$Outbound,
  z.ZodTypeDef,
  ActivityNameChangeEffectiveDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNameChangeEffectiveDate$ {
  /** @deprecated use `ActivityNameChangeEffectiveDate$inboundSchema` instead. */
  export const inboundSchema = ActivityNameChangeEffectiveDate$inboundSchema;
  /** @deprecated use `ActivityNameChangeEffectiveDate$outboundSchema` instead. */
  export const outboundSchema = ActivityNameChangeEffectiveDate$outboundSchema;
  /** @deprecated use `ActivityNameChangeEffectiveDate$Outbound` instead. */
  export type Outbound = ActivityNameChangeEffectiveDate$Outbound;
}

/** @internal */
export const ActivityNameChangeQuantity$inboundSchema: z.ZodType<
  ActivityNameChangeQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityNameChangeQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityNameChangeQuantity$outboundSchema: z.ZodType<
  ActivityNameChangeQuantity$Outbound,
  z.ZodTypeDef,
  ActivityNameChangeQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNameChangeQuantity$ {
  /** @deprecated use `ActivityNameChangeQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityNameChangeQuantity$inboundSchema;
  /** @deprecated use `ActivityNameChangeQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityNameChangeQuantity$outboundSchema;
  /** @deprecated use `ActivityNameChangeQuantity$Outbound` instead. */
  export type Outbound = ActivityNameChangeQuantity$Outbound;
}

/** @internal */
export const ActivityNameChange$inboundSchema: z.ZodType<
  ActivityNameChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivityNameChangeAction$inboundSchema.optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityNameChangeCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  effective_date: z.nullable(
    z.lazy(() => ActivityNameChangeEffectiveDate$inboundSchema),
  ).optional(),
  quantity: z.nullable(z.lazy(() => ActivityNameChangeQuantity$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "effective_date": "effectiveDate",
  });
});

/** @internal */
export type ActivityNameChange$Outbound = {
  action?: string | undefined;
  corporate_action_general_information?:
    | ActivityNameChangeCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  effective_date?: ActivityNameChangeEffectiveDate$Outbound | null | undefined;
  quantity?: ActivityNameChangeQuantity$Outbound | null | undefined;
};

/** @internal */
export const ActivityNameChange$outboundSchema: z.ZodType<
  ActivityNameChange$Outbound,
  z.ZodTypeDef,
  ActivityNameChange
> = z.object({
  action: ActivityNameChangeAction$outboundSchema.optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityNameChangeCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  effectiveDate: z.nullable(
    z.lazy(() => ActivityNameChangeEffectiveDate$outboundSchema),
  ).optional(),
  quantity: z.nullable(z.lazy(() => ActivityNameChangeQuantity$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    effectiveDate: "effective_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNameChange$ {
  /** @deprecated use `ActivityNameChange$inboundSchema` instead. */
  export const inboundSchema = ActivityNameChange$inboundSchema;
  /** @deprecated use `ActivityNameChange$outboundSchema` instead. */
  export const outboundSchema = ActivityNameChange$outboundSchema;
  /** @deprecated use `ActivityNameChange$Outbound` instead. */
  export type Outbound = ActivityNameChange$Outbound;
}

/** @internal */
export const ActivityNetAmount$inboundSchema: z.ZodType<
  ActivityNetAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityNetAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityNetAmount$outboundSchema: z.ZodType<
  ActivityNetAmount$Outbound,
  z.ZodTypeDef,
  ActivityNetAmount
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNetAmount$ {
  /** @deprecated use `ActivityNetAmount$inboundSchema` instead. */
  export const inboundSchema = ActivityNetAmount$inboundSchema;
  /** @deprecated use `ActivityNetAmount$outboundSchema` instead. */
  export const outboundSchema = ActivityNetAmount$outboundSchema;
  /** @deprecated use `ActivityNetAmount$Outbound` instead. */
  export type Outbound = ActivityNetAmount$Outbound;
}

/** @internal */
export const NextActivityProcessDate$inboundSchema: z.ZodType<
  NextActivityProcessDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type NextActivityProcessDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const NextActivityProcessDate$outboundSchema: z.ZodType<
  NextActivityProcessDate$Outbound,
  z.ZodTypeDef,
  NextActivityProcessDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NextActivityProcessDate$ {
  /** @deprecated use `NextActivityProcessDate$inboundSchema` instead. */
  export const inboundSchema = NextActivityProcessDate$inboundSchema;
  /** @deprecated use `NextActivityProcessDate$outboundSchema` instead. */
  export const outboundSchema = NextActivityProcessDate$outboundSchema;
  /** @deprecated use `NextActivityProcessDate$Outbound` instead. */
  export type Outbound = NextActivityProcessDate$Outbound;
}

/** @internal */
export const None$inboundSchema: z.ZodType<None, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type None$Outbound = {};

/** @internal */
export const None$outboundSchema: z.ZodType<None$Outbound, z.ZodTypeDef, None> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace None$ {
  /** @deprecated use `None$inboundSchema` instead. */
  export const inboundSchema = None$inboundSchema;
  /** @deprecated use `None$outboundSchema` instead. */
  export const outboundSchema = None$outboundSchema;
  /** @deprecated use `None$Outbound` instead. */
  export type Outbound = None$Outbound;
}

/** @internal */
export const ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityPaymentInKindCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityPaymentInKindCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityPaymentInKindCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityPaymentInKindCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPaymentInKindCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityPaymentInKindCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityPaymentInKindCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityPaymentInKindPaymentDate$inboundSchema: z.ZodType<
  ActivityPaymentInKindPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityPaymentInKindPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityPaymentInKindPaymentDate$outboundSchema: z.ZodType<
  ActivityPaymentInKindPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityPaymentInKindPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPaymentInKindPaymentDate$ {
  /** @deprecated use `ActivityPaymentInKindPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivityPaymentInKindPaymentDate$inboundSchema;
  /** @deprecated use `ActivityPaymentInKindPaymentDate$outboundSchema` instead. */
  export const outboundSchema = ActivityPaymentInKindPaymentDate$outboundSchema;
  /** @deprecated use `ActivityPaymentInKindPaymentDate$Outbound` instead. */
  export type Outbound = ActivityPaymentInKindPaymentDate$Outbound;
}

/** @internal */
export const ActivityPaymentInKindRecordDate$inboundSchema: z.ZodType<
  ActivityPaymentInKindRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityPaymentInKindRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityPaymentInKindRecordDate$outboundSchema: z.ZodType<
  ActivityPaymentInKindRecordDate$Outbound,
  z.ZodTypeDef,
  ActivityPaymentInKindRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPaymentInKindRecordDate$ {
  /** @deprecated use `ActivityPaymentInKindRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivityPaymentInKindRecordDate$inboundSchema;
  /** @deprecated use `ActivityPaymentInKindRecordDate$outboundSchema` instead. */
  export const outboundSchema = ActivityPaymentInKindRecordDate$outboundSchema;
  /** @deprecated use `ActivityPaymentInKindRecordDate$Outbound` instead. */
  export type Outbound = ActivityPaymentInKindRecordDate$Outbound;
}

/** @internal */
export const ActivityPaymentInKindSettled$inboundSchema: z.ZodType<
  ActivityPaymentInKindSettled,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityPaymentInKindSettled$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityPaymentInKindSettled$outboundSchema: z.ZodType<
  ActivityPaymentInKindSettled$Outbound,
  z.ZodTypeDef,
  ActivityPaymentInKindSettled
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPaymentInKindSettled$ {
  /** @deprecated use `ActivityPaymentInKindSettled$inboundSchema` instead. */
  export const inboundSchema = ActivityPaymentInKindSettled$inboundSchema;
  /** @deprecated use `ActivityPaymentInKindSettled$outboundSchema` instead. */
  export const outboundSchema = ActivityPaymentInKindSettled$outboundSchema;
  /** @deprecated use `ActivityPaymentInKindSettled$Outbound` instead. */
  export type Outbound = ActivityPaymentInKindSettled$Outbound;
}

/** @internal */
export const ActivityPaymentInKindStockRate$inboundSchema: z.ZodType<
  ActivityPaymentInKindStockRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityPaymentInKindStockRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityPaymentInKindStockRate$outboundSchema: z.ZodType<
  ActivityPaymentInKindStockRate$Outbound,
  z.ZodTypeDef,
  ActivityPaymentInKindStockRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPaymentInKindStockRate$ {
  /** @deprecated use `ActivityPaymentInKindStockRate$inboundSchema` instead. */
  export const inboundSchema = ActivityPaymentInKindStockRate$inboundSchema;
  /** @deprecated use `ActivityPaymentInKindStockRate$outboundSchema` instead. */
  export const outboundSchema = ActivityPaymentInKindStockRate$outboundSchema;
  /** @deprecated use `ActivityPaymentInKindStockRate$Outbound` instead. */
  export type Outbound = ActivityPaymentInKindStockRate$Outbound;
}

/** @internal */
export const ActivityPaymentInKind$inboundSchema: z.ZodType<
  ActivityPaymentInKind,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityPaymentInKindCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityPaymentInKindPaymentDate$inboundSchema),
  ).optional(),
  record_date: z.nullable(
    z.lazy(() => ActivityPaymentInKindRecordDate$inboundSchema),
  ).optional(),
  settled: z.nullable(z.lazy(() => ActivityPaymentInKindSettled$inboundSchema))
    .optional(),
  stock_rate: z.nullable(
    z.lazy(() => ActivityPaymentInKindStockRate$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "payment_date": "paymentDate",
    "record_date": "recordDate",
    "stock_rate": "stockRate",
  });
});

/** @internal */
export type ActivityPaymentInKind$Outbound = {
  corporate_action_general_information?:
    | ActivityPaymentInKindCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  payment_date?: ActivityPaymentInKindPaymentDate$Outbound | null | undefined;
  record_date?: ActivityPaymentInKindRecordDate$Outbound | null | undefined;
  settled?: ActivityPaymentInKindSettled$Outbound | null | undefined;
  stock_rate?: ActivityPaymentInKindStockRate$Outbound | null | undefined;
};

/** @internal */
export const ActivityPaymentInKind$outboundSchema: z.ZodType<
  ActivityPaymentInKind$Outbound,
  z.ZodTypeDef,
  ActivityPaymentInKind
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityPaymentInKindCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityPaymentInKindPaymentDate$outboundSchema),
  ).optional(),
  recordDate: z.nullable(
    z.lazy(() => ActivityPaymentInKindRecordDate$outboundSchema),
  ).optional(),
  settled: z.nullable(z.lazy(() => ActivityPaymentInKindSettled$outboundSchema))
    .optional(),
  stockRate: z.nullable(
    z.lazy(() => ActivityPaymentInKindStockRate$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    paymentDate: "payment_date",
    recordDate: "record_date",
    stockRate: "stock_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPaymentInKind$ {
  /** @deprecated use `ActivityPaymentInKind$inboundSchema` instead. */
  export const inboundSchema = ActivityPaymentInKind$inboundSchema;
  /** @deprecated use `ActivityPaymentInKind$outboundSchema` instead. */
  export const outboundSchema = ActivityPaymentInKind$outboundSchema;
  /** @deprecated use `ActivityPaymentInKind$Outbound` instead. */
  export type Outbound = ActivityPaymentInKind$Outbound;
}

/** @internal */
export const PreviousProcessDate$inboundSchema: z.ZodType<
  PreviousProcessDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type PreviousProcessDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const PreviousProcessDate$outboundSchema: z.ZodType<
  PreviousProcessDate$Outbound,
  z.ZodTypeDef,
  PreviousProcessDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviousProcessDate$ {
  /** @deprecated use `PreviousProcessDate$inboundSchema` instead. */
  export const inboundSchema = PreviousProcessDate$inboundSchema;
  /** @deprecated use `PreviousProcessDate$outboundSchema` instead. */
  export const outboundSchema = PreviousProcessDate$outboundSchema;
  /** @deprecated use `PreviousProcessDate$Outbound` instead. */
  export type Outbound = PreviousProcessDate$Outbound;
}

/** @internal */
export const ActivityPrice$inboundSchema: z.ZodType<
  ActivityPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityPrice$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityPrice$outboundSchema: z.ZodType<
  ActivityPrice$Outbound,
  z.ZodTypeDef,
  ActivityPrice
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPrice$ {
  /** @deprecated use `ActivityPrice$inboundSchema` instead. */
  export const inboundSchema = ActivityPrice$inboundSchema;
  /** @deprecated use `ActivityPrice$outboundSchema` instead. */
  export const outboundSchema = ActivityPrice$outboundSchema;
  /** @deprecated use `ActivityPrice$Outbound` instead. */
  export type Outbound = ActivityPrice$Outbound;
}

/** @internal */
export const ActivityProcessDate$inboundSchema: z.ZodType<
  ActivityProcessDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityProcessDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityProcessDate$outboundSchema: z.ZodType<
  ActivityProcessDate$Outbound,
  z.ZodTypeDef,
  ActivityProcessDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityProcessDate$ {
  /** @deprecated use `ActivityProcessDate$inboundSchema` instead. */
  export const inboundSchema = ActivityProcessDate$inboundSchema;
  /** @deprecated use `ActivityProcessDate$outboundSchema` instead. */
  export const outboundSchema = ActivityProcessDate$outboundSchema;
  /** @deprecated use `ActivityProcessDate$Outbound` instead. */
  export type Outbound = ActivityProcessDate$Outbound;
}

/** @internal */
export const ActivityQuantity$inboundSchema: z.ZodType<
  ActivityQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityQuantity$outboundSchema: z.ZodType<
  ActivityQuantity$Outbound,
  z.ZodTypeDef,
  ActivityQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityQuantity$ {
  /** @deprecated use `ActivityQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityQuantity$inboundSchema;
  /** @deprecated use `ActivityQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityQuantity$outboundSchema;
  /** @deprecated use `ActivityQuantity$Outbound` instead. */
  export type Outbound = ActivityQuantity$Outbound;
}

/** @internal */
export const ActivityRedemptionFullAction$inboundSchema: z.ZodType<
  ActivityRedemptionFullActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityRedemptionFullAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityRedemptionFullAction$outboundSchema: z.ZodType<
  ActivityRedemptionFullActionOpen,
  z.ZodTypeDef,
  ActivityRedemptionFullActionOpen
> = z.union([
  z.nativeEnum(ActivityRedemptionFullAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionFullAction$ {
  /** @deprecated use `ActivityRedemptionFullAction$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionFullAction$inboundSchema;
  /** @deprecated use `ActivityRedemptionFullAction$outboundSchema` instead. */
  export const outboundSchema = ActivityRedemptionFullAction$outboundSchema;
}

/** @internal */
export const ActivityRedemptionFullCashRate$inboundSchema: z.ZodType<
  ActivityRedemptionFullCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityRedemptionFullCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityRedemptionFullCashRate$outboundSchema: z.ZodType<
  ActivityRedemptionFullCashRate$Outbound,
  z.ZodTypeDef,
  ActivityRedemptionFullCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionFullCashRate$ {
  /** @deprecated use `ActivityRedemptionFullCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionFullCashRate$inboundSchema;
  /** @deprecated use `ActivityRedemptionFullCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityRedemptionFullCashRate$outboundSchema;
  /** @deprecated use `ActivityRedemptionFullCashRate$Outbound` instead. */
  export type Outbound = ActivityRedemptionFullCashRate$Outbound;
}

/** @internal */
export const ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityRedemptionFullCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityRedemptionFullCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityRedemptionFullCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityRedemptionFullCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionFullCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityRedemptionFullCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityRedemptionFullCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityRedemptionFullPaymentDate$inboundSchema: z.ZodType<
  ActivityRedemptionFullPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityRedemptionFullPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityRedemptionFullPaymentDate$outboundSchema: z.ZodType<
  ActivityRedemptionFullPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityRedemptionFullPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionFullPaymentDate$ {
  /** @deprecated use `ActivityRedemptionFullPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionFullPaymentDate$inboundSchema;
  /** @deprecated use `ActivityRedemptionFullPaymentDate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRedemptionFullPaymentDate$outboundSchema;
  /** @deprecated use `ActivityRedemptionFullPaymentDate$Outbound` instead. */
  export type Outbound = ActivityRedemptionFullPaymentDate$Outbound;
}

/** @internal */
export const ActivityRedemptionFullQuantity$inboundSchema: z.ZodType<
  ActivityRedemptionFullQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityRedemptionFullQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityRedemptionFullQuantity$outboundSchema: z.ZodType<
  ActivityRedemptionFullQuantity$Outbound,
  z.ZodTypeDef,
  ActivityRedemptionFullQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionFullQuantity$ {
  /** @deprecated use `ActivityRedemptionFullQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionFullQuantity$inboundSchema;
  /** @deprecated use `ActivityRedemptionFullQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityRedemptionFullQuantity$outboundSchema;
  /** @deprecated use `ActivityRedemptionFullQuantity$Outbound` instead. */
  export type Outbound = ActivityRedemptionFullQuantity$Outbound;
}

/** @internal */
export const ActivityRedemptionFullSubtype$inboundSchema: z.ZodType<
  ActivityRedemptionFullSubtypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityRedemptionFullSubtype),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityRedemptionFullSubtype$outboundSchema: z.ZodType<
  ActivityRedemptionFullSubtypeOpen,
  z.ZodTypeDef,
  ActivityRedemptionFullSubtypeOpen
> = z.union([
  z.nativeEnum(ActivityRedemptionFullSubtype),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionFullSubtype$ {
  /** @deprecated use `ActivityRedemptionFullSubtype$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionFullSubtype$inboundSchema;
  /** @deprecated use `ActivityRedemptionFullSubtype$outboundSchema` instead. */
  export const outboundSchema = ActivityRedemptionFullSubtype$outboundSchema;
}

/** @internal */
export const ActivityRedemptionFull$inboundSchema: z.ZodType<
  ActivityRedemptionFull,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivityRedemptionFullAction$inboundSchema.optional(),
  cash_rate: z.nullable(
    z.lazy(() => ActivityRedemptionFullCashRate$inboundSchema),
  ).optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityRedemptionFullCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityRedemptionFullPaymentDate$inboundSchema),
  ).optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityRedemptionFullQuantity$inboundSchema),
  ).optional(),
  subtype: ActivityRedemptionFullSubtype$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "payment_date": "paymentDate",
  });
});

/** @internal */
export type ActivityRedemptionFull$Outbound = {
  action?: string | undefined;
  cash_rate?: ActivityRedemptionFullCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityRedemptionFullCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  payment_date?: ActivityRedemptionFullPaymentDate$Outbound | null | undefined;
  quantity?: ActivityRedemptionFullQuantity$Outbound | null | undefined;
  subtype?: string | undefined;
};

/** @internal */
export const ActivityRedemptionFull$outboundSchema: z.ZodType<
  ActivityRedemptionFull$Outbound,
  z.ZodTypeDef,
  ActivityRedemptionFull
> = z.object({
  action: ActivityRedemptionFullAction$outboundSchema.optional(),
  cashRate: z.nullable(
    z.lazy(() => ActivityRedemptionFullCashRate$outboundSchema),
  ).optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityRedemptionFullCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityRedemptionFullPaymentDate$outboundSchema),
  ).optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityRedemptionFullQuantity$outboundSchema),
  ).optional(),
  subtype: ActivityRedemptionFullSubtype$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    paymentDate: "payment_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionFull$ {
  /** @deprecated use `ActivityRedemptionFull$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionFull$inboundSchema;
  /** @deprecated use `ActivityRedemptionFull$outboundSchema` instead. */
  export const outboundSchema = ActivityRedemptionFull$outboundSchema;
  /** @deprecated use `ActivityRedemptionFull$Outbound` instead. */
  export type Outbound = ActivityRedemptionFull$Outbound;
}

/** @internal */
export const ActivityRedemptionPartialAction$inboundSchema: z.ZodType<
  ActivityRedemptionPartialActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityRedemptionPartialAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityRedemptionPartialAction$outboundSchema: z.ZodType<
  ActivityRedemptionPartialActionOpen,
  z.ZodTypeDef,
  ActivityRedemptionPartialActionOpen
> = z.union([
  z.nativeEnum(ActivityRedemptionPartialAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionPartialAction$ {
  /** @deprecated use `ActivityRedemptionPartialAction$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionPartialAction$inboundSchema;
  /** @deprecated use `ActivityRedemptionPartialAction$outboundSchema` instead. */
  export const outboundSchema = ActivityRedemptionPartialAction$outboundSchema;
}

/** @internal */
export const ActivityRedemptionPartialCashRate$inboundSchema: z.ZodType<
  ActivityRedemptionPartialCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityRedemptionPartialCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityRedemptionPartialCashRate$outboundSchema: z.ZodType<
  ActivityRedemptionPartialCashRate$Outbound,
  z.ZodTypeDef,
  ActivityRedemptionPartialCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionPartialCashRate$ {
  /** @deprecated use `ActivityRedemptionPartialCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionPartialCashRate$inboundSchema;
  /** @deprecated use `ActivityRedemptionPartialCashRate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRedemptionPartialCashRate$outboundSchema;
  /** @deprecated use `ActivityRedemptionPartialCashRate$Outbound` instead. */
  export type Outbound = ActivityRedemptionPartialCashRate$Outbound;
}

/** @internal */
export const ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityRedemptionPartialCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound =
  {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
  };

/** @internal */
export const ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityRedemptionPartialCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionPartialCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityRedemptionPartialPaymentDate$inboundSchema: z.ZodType<
  ActivityRedemptionPartialPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityRedemptionPartialPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityRedemptionPartialPaymentDate$outboundSchema: z.ZodType<
  ActivityRedemptionPartialPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityRedemptionPartialPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionPartialPaymentDate$ {
  /** @deprecated use `ActivityRedemptionPartialPaymentDate$inboundSchema` instead. */
  export const inboundSchema =
    ActivityRedemptionPartialPaymentDate$inboundSchema;
  /** @deprecated use `ActivityRedemptionPartialPaymentDate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRedemptionPartialPaymentDate$outboundSchema;
  /** @deprecated use `ActivityRedemptionPartialPaymentDate$Outbound` instead. */
  export type Outbound = ActivityRedemptionPartialPaymentDate$Outbound;
}

/** @internal */
export const ActivityRedemptionPartialQuantity$inboundSchema: z.ZodType<
  ActivityRedemptionPartialQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityRedemptionPartialQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityRedemptionPartialQuantity$outboundSchema: z.ZodType<
  ActivityRedemptionPartialQuantity$Outbound,
  z.ZodTypeDef,
  ActivityRedemptionPartialQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionPartialQuantity$ {
  /** @deprecated use `ActivityRedemptionPartialQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionPartialQuantity$inboundSchema;
  /** @deprecated use `ActivityRedemptionPartialQuantity$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRedemptionPartialQuantity$outboundSchema;
  /** @deprecated use `ActivityRedemptionPartialQuantity$Outbound` instead. */
  export type Outbound = ActivityRedemptionPartialQuantity$Outbound;
}

/** @internal */
export const ActivityRedemptionPartial$inboundSchema: z.ZodType<
  ActivityRedemptionPartial,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivityRedemptionPartialAction$inboundSchema.optional(),
  cash_rate: z.nullable(
    z.lazy(() => ActivityRedemptionPartialCashRate$inboundSchema),
  ).optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityRedemptionPartialCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityRedemptionPartialPaymentDate$inboundSchema),
  ).optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityRedemptionPartialQuantity$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "payment_date": "paymentDate",
  });
});

/** @internal */
export type ActivityRedemptionPartial$Outbound = {
  action?: string | undefined;
  cash_rate?: ActivityRedemptionPartialCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityRedemptionPartialCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  payment_date?:
    | ActivityRedemptionPartialPaymentDate$Outbound
    | null
    | undefined;
  quantity?: ActivityRedemptionPartialQuantity$Outbound | null | undefined;
};

/** @internal */
export const ActivityRedemptionPartial$outboundSchema: z.ZodType<
  ActivityRedemptionPartial$Outbound,
  z.ZodTypeDef,
  ActivityRedemptionPartial
> = z.object({
  action: ActivityRedemptionPartialAction$outboundSchema.optional(),
  cashRate: z.nullable(
    z.lazy(() => ActivityRedemptionPartialCashRate$outboundSchema),
  ).optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityRedemptionPartialCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityRedemptionPartialPaymentDate$outboundSchema),
  ).optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityRedemptionPartialQuantity$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    paymentDate: "payment_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRedemptionPartial$ {
  /** @deprecated use `ActivityRedemptionPartial$inboundSchema` instead. */
  export const inboundSchema = ActivityRedemptionPartial$inboundSchema;
  /** @deprecated use `ActivityRedemptionPartial$outboundSchema` instead. */
  export const outboundSchema = ActivityRedemptionPartial$outboundSchema;
  /** @deprecated use `ActivityRedemptionPartial$Outbound` instead. */
  export type Outbound = ActivityRedemptionPartial$Outbound;
}

/** @internal */
export const ActivityReverseStockSplitAction$inboundSchema: z.ZodType<
  ActivityReverseStockSplitActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityReverseStockSplitAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityReverseStockSplitAction$outboundSchema: z.ZodType<
  ActivityReverseStockSplitActionOpen,
  z.ZodTypeDef,
  ActivityReverseStockSplitActionOpen
> = z.union([
  z.nativeEnum(ActivityReverseStockSplitAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityReverseStockSplitAction$ {
  /** @deprecated use `ActivityReverseStockSplitAction$inboundSchema` instead. */
  export const inboundSchema = ActivityReverseStockSplitAction$inboundSchema;
  /** @deprecated use `ActivityReverseStockSplitAction$outboundSchema` instead. */
  export const outboundSchema = ActivityReverseStockSplitAction$outboundSchema;
}

/** @internal */
export const ActivityReverseStockSplitCashRate$inboundSchema: z.ZodType<
  ActivityReverseStockSplitCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityReverseStockSplitCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityReverseStockSplitCashRate$outboundSchema: z.ZodType<
  ActivityReverseStockSplitCashRate$Outbound,
  z.ZodTypeDef,
  ActivityReverseStockSplitCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityReverseStockSplitCashRate$ {
  /** @deprecated use `ActivityReverseStockSplitCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityReverseStockSplitCashRate$inboundSchema;
  /** @deprecated use `ActivityReverseStockSplitCashRate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityReverseStockSplitCashRate$outboundSchema;
  /** @deprecated use `ActivityReverseStockSplitCashRate$Outbound` instead. */
  export type Outbound = ActivityReverseStockSplitCashRate$Outbound;
}

/** @internal */
export const ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityReverseStockSplitCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound =
  {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
  };

/** @internal */
export const ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityReverseStockSplitCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityReverseStockSplitCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityReverseStockSplitEffectiveDate$inboundSchema: z.ZodType<
  ActivityReverseStockSplitEffectiveDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityReverseStockSplitEffectiveDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityReverseStockSplitEffectiveDate$outboundSchema: z.ZodType<
  ActivityReverseStockSplitEffectiveDate$Outbound,
  z.ZodTypeDef,
  ActivityReverseStockSplitEffectiveDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityReverseStockSplitEffectiveDate$ {
  /** @deprecated use `ActivityReverseStockSplitEffectiveDate$inboundSchema` instead. */
  export const inboundSchema =
    ActivityReverseStockSplitEffectiveDate$inboundSchema;
  /** @deprecated use `ActivityReverseStockSplitEffectiveDate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityReverseStockSplitEffectiveDate$outboundSchema;
  /** @deprecated use `ActivityReverseStockSplitEffectiveDate$Outbound` instead. */
  export type Outbound = ActivityReverseStockSplitEffectiveDate$Outbound;
}

/** @internal */
export const ActivityFactorDenominator$inboundSchema: z.ZodType<
  ActivityFactorDenominator,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityFactorDenominator$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityFactorDenominator$outboundSchema: z.ZodType<
  ActivityFactorDenominator$Outbound,
  z.ZodTypeDef,
  ActivityFactorDenominator
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityFactorDenominator$ {
  /** @deprecated use `ActivityFactorDenominator$inboundSchema` instead. */
  export const inboundSchema = ActivityFactorDenominator$inboundSchema;
  /** @deprecated use `ActivityFactorDenominator$outboundSchema` instead. */
  export const outboundSchema = ActivityFactorDenominator$outboundSchema;
  /** @deprecated use `ActivityFactorDenominator$Outbound` instead. */
  export type Outbound = ActivityFactorDenominator$Outbound;
}

/** @internal */
export const ActivityFactorNumerator$inboundSchema: z.ZodType<
  ActivityFactorNumerator,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityFactorNumerator$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityFactorNumerator$outboundSchema: z.ZodType<
  ActivityFactorNumerator$Outbound,
  z.ZodTypeDef,
  ActivityFactorNumerator
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityFactorNumerator$ {
  /** @deprecated use `ActivityFactorNumerator$inboundSchema` instead. */
  export const inboundSchema = ActivityFactorNumerator$inboundSchema;
  /** @deprecated use `ActivityFactorNumerator$outboundSchema` instead. */
  export const outboundSchema = ActivityFactorNumerator$outboundSchema;
  /** @deprecated use `ActivityFactorNumerator$Outbound` instead. */
  export type Outbound = ActivityFactorNumerator$Outbound;
}

/** @internal */
export const ActivityReverseStockSplitQuantity$inboundSchema: z.ZodType<
  ActivityReverseStockSplitQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityReverseStockSplitQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityReverseStockSplitQuantity$outboundSchema: z.ZodType<
  ActivityReverseStockSplitQuantity$Outbound,
  z.ZodTypeDef,
  ActivityReverseStockSplitQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityReverseStockSplitQuantity$ {
  /** @deprecated use `ActivityReverseStockSplitQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityReverseStockSplitQuantity$inboundSchema;
  /** @deprecated use `ActivityReverseStockSplitQuantity$outboundSchema` instead. */
  export const outboundSchema =
    ActivityReverseStockSplitQuantity$outboundSchema;
  /** @deprecated use `ActivityReverseStockSplitQuantity$Outbound` instead. */
  export type Outbound = ActivityReverseStockSplitQuantity$Outbound;
}

/** @internal */
export const ActivityReverseStockSplit$inboundSchema: z.ZodType<
  ActivityReverseStockSplit,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivityReverseStockSplitAction$inboundSchema.optional(),
  cash_rate: z.nullable(
    z.lazy(() => ActivityReverseStockSplitCashRate$inboundSchema),
  ).optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityReverseStockSplitCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  effective_date: z.nullable(
    z.lazy(() => ActivityReverseStockSplitEffectiveDate$inboundSchema),
  ).optional(),
  factor_denominator: z.nullable(
    z.lazy(() => ActivityFactorDenominator$inboundSchema),
  ).optional(),
  factor_numerator: z.nullable(
    z.lazy(() => ActivityFactorNumerator$inboundSchema),
  ).optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityReverseStockSplitQuantity$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "effective_date": "effectiveDate",
    "factor_denominator": "factorDenominator",
    "factor_numerator": "factorNumerator",
  });
});

/** @internal */
export type ActivityReverseStockSplit$Outbound = {
  action?: string | undefined;
  cash_rate?: ActivityReverseStockSplitCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityReverseStockSplitCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  effective_date?:
    | ActivityReverseStockSplitEffectiveDate$Outbound
    | null
    | undefined;
  factor_denominator?: ActivityFactorDenominator$Outbound | null | undefined;
  factor_numerator?: ActivityFactorNumerator$Outbound | null | undefined;
  quantity?: ActivityReverseStockSplitQuantity$Outbound | null | undefined;
};

/** @internal */
export const ActivityReverseStockSplit$outboundSchema: z.ZodType<
  ActivityReverseStockSplit$Outbound,
  z.ZodTypeDef,
  ActivityReverseStockSplit
> = z.object({
  action: ActivityReverseStockSplitAction$outboundSchema.optional(),
  cashRate: z.nullable(
    z.lazy(() => ActivityReverseStockSplitCashRate$outboundSchema),
  ).optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityReverseStockSplitCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  effectiveDate: z.nullable(
    z.lazy(() => ActivityReverseStockSplitEffectiveDate$outboundSchema),
  ).optional(),
  factorDenominator: z.nullable(
    z.lazy(() => ActivityFactorDenominator$outboundSchema),
  ).optional(),
  factorNumerator: z.nullable(
    z.lazy(() => ActivityFactorNumerator$outboundSchema),
  ).optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityReverseStockSplitQuantity$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    effectiveDate: "effective_date",
    factorDenominator: "factor_denominator",
    factorNumerator: "factor_numerator",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityReverseStockSplit$ {
  /** @deprecated use `ActivityReverseStockSplit$inboundSchema` instead. */
  export const inboundSchema = ActivityReverseStockSplit$inboundSchema;
  /** @deprecated use `ActivityReverseStockSplit$outboundSchema` instead. */
  export const outboundSchema = ActivityReverseStockSplit$outboundSchema;
  /** @deprecated use `ActivityReverseStockSplit$Outbound` instead. */
  export type Outbound = ActivityReverseStockSplit$Outbound;
}

/** @internal */
export const ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityRightsDistributionCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityRightsDistributionCorporateActionGeneralInformation$Outbound =
  {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
  };

/** @internal */
export const ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityRightsDistributionCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityRightsDistributionCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRightsDistributionCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityRightsDistributionCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityRightsDistributionCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityRightsDistributionPaymentDate$inboundSchema: z.ZodType<
  ActivityRightsDistributionPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityRightsDistributionPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityRightsDistributionPaymentDate$outboundSchema: z.ZodType<
  ActivityRightsDistributionPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityRightsDistributionPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRightsDistributionPaymentDate$ {
  /** @deprecated use `ActivityRightsDistributionPaymentDate$inboundSchema` instead. */
  export const inboundSchema =
    ActivityRightsDistributionPaymentDate$inboundSchema;
  /** @deprecated use `ActivityRightsDistributionPaymentDate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRightsDistributionPaymentDate$outboundSchema;
  /** @deprecated use `ActivityRightsDistributionPaymentDate$Outbound` instead. */
  export type Outbound = ActivityRightsDistributionPaymentDate$Outbound;
}

/** @internal */
export const ActivityRightsDistributionRecordDate$inboundSchema: z.ZodType<
  ActivityRightsDistributionRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityRightsDistributionRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityRightsDistributionRecordDate$outboundSchema: z.ZodType<
  ActivityRightsDistributionRecordDate$Outbound,
  z.ZodTypeDef,
  ActivityRightsDistributionRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRightsDistributionRecordDate$ {
  /** @deprecated use `ActivityRightsDistributionRecordDate$inboundSchema` instead. */
  export const inboundSchema =
    ActivityRightsDistributionRecordDate$inboundSchema;
  /** @deprecated use `ActivityRightsDistributionRecordDate$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRightsDistributionRecordDate$outboundSchema;
  /** @deprecated use `ActivityRightsDistributionRecordDate$Outbound` instead. */
  export type Outbound = ActivityRightsDistributionRecordDate$Outbound;
}

/** @internal */
export const ActivityRightsDistributionSettled$inboundSchema: z.ZodType<
  ActivityRightsDistributionSettled,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityRightsDistributionSettled$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityRightsDistributionSettled$outboundSchema: z.ZodType<
  ActivityRightsDistributionSettled$Outbound,
  z.ZodTypeDef,
  ActivityRightsDistributionSettled
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRightsDistributionSettled$ {
  /** @deprecated use `ActivityRightsDistributionSettled$inboundSchema` instead. */
  export const inboundSchema = ActivityRightsDistributionSettled$inboundSchema;
  /** @deprecated use `ActivityRightsDistributionSettled$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRightsDistributionSettled$outboundSchema;
  /** @deprecated use `ActivityRightsDistributionSettled$Outbound` instead. */
  export type Outbound = ActivityRightsDistributionSettled$Outbound;
}

/** @internal */
export const ActivityRightsDistribution$inboundSchema: z.ZodType<
  ActivityRightsDistribution,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityRightsDistributionCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityRightsDistributionPaymentDate$inboundSchema),
  ).optional(),
  record_date: z.nullable(
    z.lazy(() => ActivityRightsDistributionRecordDate$inboundSchema),
  ).optional(),
  settled: z.nullable(
    z.lazy(() => ActivityRightsDistributionSettled$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "payment_date": "paymentDate",
    "record_date": "recordDate",
  });
});

/** @internal */
export type ActivityRightsDistribution$Outbound = {
  corporate_action_general_information?:
    | ActivityRightsDistributionCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  payment_date?:
    | ActivityRightsDistributionPaymentDate$Outbound
    | null
    | undefined;
  record_date?:
    | ActivityRightsDistributionRecordDate$Outbound
    | null
    | undefined;
  settled?: ActivityRightsDistributionSettled$Outbound | null | undefined;
};

/** @internal */
export const ActivityRightsDistribution$outboundSchema: z.ZodType<
  ActivityRightsDistribution$Outbound,
  z.ZodTypeDef,
  ActivityRightsDistribution
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityRightsDistributionCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityRightsDistributionPaymentDate$outboundSchema),
  ).optional(),
  recordDate: z.nullable(
    z.lazy(() => ActivityRightsDistributionRecordDate$outboundSchema),
  ).optional(),
  settled: z.nullable(
    z.lazy(() => ActivityRightsDistributionSettled$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    paymentDate: "payment_date",
    recordDate: "record_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRightsDistribution$ {
  /** @deprecated use `ActivityRightsDistribution$inboundSchema` instead. */
  export const inboundSchema = ActivityRightsDistribution$inboundSchema;
  /** @deprecated use `ActivityRightsDistribution$outboundSchema` instead. */
  export const outboundSchema = ActivityRightsDistribution$outboundSchema;
  /** @deprecated use `ActivityRightsDistribution$Outbound` instead. */
  export type Outbound = ActivityRightsDistribution$Outbound;
}

/** @internal */
export const ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityRightsSubscriptionCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound =
  {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
  };

/** @internal */
export const ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityRightsSubscriptionCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRightsSubscriptionCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityRightsSubscription$inboundSchema: z.ZodType<
  ActivityRightsSubscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityRightsSubscriptionCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
  });
});

/** @internal */
export type ActivityRightsSubscription$Outbound = {
  corporate_action_general_information?:
    | ActivityRightsSubscriptionCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
};

/** @internal */
export const ActivityRightsSubscription$outboundSchema: z.ZodType<
  ActivityRightsSubscription$Outbound,
  z.ZodTypeDef,
  ActivityRightsSubscription
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityRightsSubscriptionCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRightsSubscription$ {
  /** @deprecated use `ActivityRightsSubscription$inboundSchema` instead. */
  export const inboundSchema = ActivityRightsSubscription$inboundSchema;
  /** @deprecated use `ActivityRightsSubscription$outboundSchema` instead. */
  export const outboundSchema = ActivityRightsSubscription$outboundSchema;
  /** @deprecated use `ActivityRightsSubscription$Outbound` instead. */
  export type Outbound = ActivityRightsSubscription$Outbound;
}

/** @internal */
export const ActivityRoundingAdjustment$inboundSchema: z.ZodType<
  ActivityRoundingAdjustment,
  z.ZodTypeDef,
  unknown
> = z.object({
  rounding_reason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "rounding_reason": "roundingReason",
  });
});

/** @internal */
export type ActivityRoundingAdjustment$Outbound = {
  rounding_reason?: string | undefined;
};

/** @internal */
export const ActivityRoundingAdjustment$outboundSchema: z.ZodType<
  ActivityRoundingAdjustment$Outbound,
  z.ZodTypeDef,
  ActivityRoundingAdjustment
> = z.object({
  roundingReason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    roundingReason: "rounding_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRoundingAdjustment$ {
  /** @deprecated use `ActivityRoundingAdjustment$inboundSchema` instead. */
  export const inboundSchema = ActivityRoundingAdjustment$inboundSchema;
  /** @deprecated use `ActivityRoundingAdjustment$outboundSchema` instead. */
  export const outboundSchema = ActivityRoundingAdjustment$outboundSchema;
  /** @deprecated use `ActivityRoundingAdjustment$Outbound` instead. */
  export type Outbound = ActivityRoundingAdjustment$Outbound;
}

/** @internal */
export const RoundingAmount$inboundSchema: z.ZodType<
  RoundingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type RoundingAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const RoundingAmount$outboundSchema: z.ZodType<
  RoundingAmount$Outbound,
  z.ZodTypeDef,
  RoundingAmount
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoundingAmount$ {
  /** @deprecated use `RoundingAmount$inboundSchema` instead. */
  export const inboundSchema = RoundingAmount$inboundSchema;
  /** @deprecated use `RoundingAmount$outboundSchema` instead. */
  export const outboundSchema = RoundingAmount$outboundSchema;
  /** @deprecated use `RoundingAmount$Outbound` instead. */
  export type Outbound = RoundingAmount$Outbound;
}

/** @internal */
export const ActivitySaleOfRightsCashRate$inboundSchema: z.ZodType<
  ActivitySaleOfRightsCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivitySaleOfRightsCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivitySaleOfRightsCashRate$outboundSchema: z.ZodType<
  ActivitySaleOfRightsCashRate$Outbound,
  z.ZodTypeDef,
  ActivitySaleOfRightsCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySaleOfRightsCashRate$ {
  /** @deprecated use `ActivitySaleOfRightsCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivitySaleOfRightsCashRate$inboundSchema;
  /** @deprecated use `ActivitySaleOfRightsCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivitySaleOfRightsCashRate$outboundSchema;
  /** @deprecated use `ActivitySaleOfRightsCashRate$Outbound` instead. */
  export type Outbound = ActivitySaleOfRightsCashRate$Outbound;
}

/** @internal */
export const ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivitySaleOfRightsCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivitySaleOfRightsCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySaleOfRightsCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivitySaleOfRightsPaymentDate$inboundSchema: z.ZodType<
  ActivitySaleOfRightsPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivitySaleOfRightsPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivitySaleOfRightsPaymentDate$outboundSchema: z.ZodType<
  ActivitySaleOfRightsPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivitySaleOfRightsPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySaleOfRightsPaymentDate$ {
  /** @deprecated use `ActivitySaleOfRightsPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivitySaleOfRightsPaymentDate$inboundSchema;
  /** @deprecated use `ActivitySaleOfRightsPaymentDate$outboundSchema` instead. */
  export const outboundSchema = ActivitySaleOfRightsPaymentDate$outboundSchema;
  /** @deprecated use `ActivitySaleOfRightsPaymentDate$Outbound` instead. */
  export type Outbound = ActivitySaleOfRightsPaymentDate$Outbound;
}

/** @internal */
export const ActivitySaleOfRightsRecordDate$inboundSchema: z.ZodType<
  ActivitySaleOfRightsRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivitySaleOfRightsRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivitySaleOfRightsRecordDate$outboundSchema: z.ZodType<
  ActivitySaleOfRightsRecordDate$Outbound,
  z.ZodTypeDef,
  ActivitySaleOfRightsRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySaleOfRightsRecordDate$ {
  /** @deprecated use `ActivitySaleOfRightsRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivitySaleOfRightsRecordDate$inboundSchema;
  /** @deprecated use `ActivitySaleOfRightsRecordDate$outboundSchema` instead. */
  export const outboundSchema = ActivitySaleOfRightsRecordDate$outboundSchema;
  /** @deprecated use `ActivitySaleOfRightsRecordDate$Outbound` instead. */
  export type Outbound = ActivitySaleOfRightsRecordDate$Outbound;
}

/** @internal */
export const ActivitySaleOfRightsSettled$inboundSchema: z.ZodType<
  ActivitySaleOfRightsSettled,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivitySaleOfRightsSettled$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivitySaleOfRightsSettled$outboundSchema: z.ZodType<
  ActivitySaleOfRightsSettled$Outbound,
  z.ZodTypeDef,
  ActivitySaleOfRightsSettled
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySaleOfRightsSettled$ {
  /** @deprecated use `ActivitySaleOfRightsSettled$inboundSchema` instead. */
  export const inboundSchema = ActivitySaleOfRightsSettled$inboundSchema;
  /** @deprecated use `ActivitySaleOfRightsSettled$outboundSchema` instead. */
  export const outboundSchema = ActivitySaleOfRightsSettled$outboundSchema;
  /** @deprecated use `ActivitySaleOfRightsSettled$Outbound` instead. */
  export type Outbound = ActivitySaleOfRightsSettled$Outbound;
}

/** @internal */
export const ActivitySaleOfRights$inboundSchema: z.ZodType<
  ActivitySaleOfRights,
  z.ZodTypeDef,
  unknown
> = z.object({
  cash_rate: z.nullable(
    z.lazy(() => ActivitySaleOfRightsCashRate$inboundSchema),
  ).optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivitySaleOfRightsCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivitySaleOfRightsPaymentDate$inboundSchema),
  ).optional(),
  record_date: z.nullable(
    z.lazy(() => ActivitySaleOfRightsRecordDate$inboundSchema),
  ).optional(),
  settled: z.nullable(z.lazy(() => ActivitySaleOfRightsSettled$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "payment_date": "paymentDate",
    "record_date": "recordDate",
  });
});

/** @internal */
export type ActivitySaleOfRights$Outbound = {
  cash_rate?: ActivitySaleOfRightsCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivitySaleOfRightsCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  payment_date?: ActivitySaleOfRightsPaymentDate$Outbound | null | undefined;
  record_date?: ActivitySaleOfRightsRecordDate$Outbound | null | undefined;
  settled?: ActivitySaleOfRightsSettled$Outbound | null | undefined;
};

/** @internal */
export const ActivitySaleOfRights$outboundSchema: z.ZodType<
  ActivitySaleOfRights$Outbound,
  z.ZodTypeDef,
  ActivitySaleOfRights
> = z.object({
  cashRate: z.nullable(
    z.lazy(() => ActivitySaleOfRightsCashRate$outboundSchema),
  ).optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivitySaleOfRightsCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivitySaleOfRightsPaymentDate$outboundSchema),
  ).optional(),
  recordDate: z.nullable(
    z.lazy(() => ActivitySaleOfRightsRecordDate$outboundSchema),
  ).optional(),
  settled: z.nullable(z.lazy(() => ActivitySaleOfRightsSettled$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
    paymentDate: "payment_date",
    recordDate: "record_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySaleOfRights$ {
  /** @deprecated use `ActivitySaleOfRights$inboundSchema` instead. */
  export const inboundSchema = ActivitySaleOfRights$inboundSchema;
  /** @deprecated use `ActivitySaleOfRights$outboundSchema` instead. */
  export const outboundSchema = ActivitySaleOfRights$outboundSchema;
  /** @deprecated use `ActivitySaleOfRights$Outbound` instead. */
  export type Outbound = ActivitySaleOfRights$Outbound;
}

/** @internal */
export const ActivitySettleDate$inboundSchema: z.ZodType<
  ActivitySettleDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivitySettleDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivitySettleDate$outboundSchema: z.ZodType<
  ActivitySettleDate$Outbound,
  z.ZodTypeDef,
  ActivitySettleDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySettleDate$ {
  /** @deprecated use `ActivitySettleDate$inboundSchema` instead. */
  export const inboundSchema = ActivitySettleDate$inboundSchema;
  /** @deprecated use `ActivitySettleDate$outboundSchema` instead. */
  export const outboundSchema = ActivitySettleDate$outboundSchema;
  /** @deprecated use `ActivitySettleDate$Outbound` instead. */
  export type Outbound = ActivitySettleDate$Outbound;
}

/** @internal */
export const ActivitySide$inboundSchema: z.ZodType<
  ActivitySideOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivitySide),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivitySide$outboundSchema: z.ZodType<
  ActivitySideOpen,
  z.ZodTypeDef,
  ActivitySideOpen
> = z.union([
  z.nativeEnum(ActivitySide),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySide$ {
  /** @deprecated use `ActivitySide$inboundSchema` instead. */
  export const inboundSchema = ActivitySide$inboundSchema;
  /** @deprecated use `ActivitySide$outboundSchema` instead. */
  export const outboundSchema = ActivitySide$outboundSchema;
}

/** @internal */
export const ActivitySpinoffCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivitySpinoffCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivitySpinoffCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivitySpinoffCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivitySpinoffCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivitySpinoffCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySpinoffCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivitySpinoffCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivitySpinoffCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivitySpinoffCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivitySpinoffCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityPayDate$inboundSchema: z.ZodType<
  ActivityPayDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityPayDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityPayDate$outboundSchema: z.ZodType<
  ActivityPayDate$Outbound,
  z.ZodTypeDef,
  ActivityPayDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPayDate$ {
  /** @deprecated use `ActivityPayDate$inboundSchema` instead. */
  export const inboundSchema = ActivityPayDate$inboundSchema;
  /** @deprecated use `ActivityPayDate$outboundSchema` instead. */
  export const outboundSchema = ActivityPayDate$outboundSchema;
  /** @deprecated use `ActivityPayDate$Outbound` instead. */
  export type Outbound = ActivityPayDate$Outbound;
}

/** @internal */
export const ActivitySpinoffQuantity$inboundSchema: z.ZodType<
  ActivitySpinoffQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivitySpinoffQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivitySpinoffQuantity$outboundSchema: z.ZodType<
  ActivitySpinoffQuantity$Outbound,
  z.ZodTypeDef,
  ActivitySpinoffQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySpinoffQuantity$ {
  /** @deprecated use `ActivitySpinoffQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivitySpinoffQuantity$inboundSchema;
  /** @deprecated use `ActivitySpinoffQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivitySpinoffQuantity$outboundSchema;
  /** @deprecated use `ActivitySpinoffQuantity$Outbound` instead. */
  export type Outbound = ActivitySpinoffQuantity$Outbound;
}

/** @internal */
export const ActivitySpinoffRecordDate$inboundSchema: z.ZodType<
  ActivitySpinoffRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivitySpinoffRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivitySpinoffRecordDate$outboundSchema: z.ZodType<
  ActivitySpinoffRecordDate$Outbound,
  z.ZodTypeDef,
  ActivitySpinoffRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySpinoffRecordDate$ {
  /** @deprecated use `ActivitySpinoffRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivitySpinoffRecordDate$inboundSchema;
  /** @deprecated use `ActivitySpinoffRecordDate$outboundSchema` instead. */
  export const outboundSchema = ActivitySpinoffRecordDate$outboundSchema;
  /** @deprecated use `ActivitySpinoffRecordDate$Outbound` instead. */
  export type Outbound = ActivitySpinoffRecordDate$Outbound;
}

/** @internal */
export const ActivitySpinoff$inboundSchema: z.ZodType<
  ActivitySpinoff,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivitySpinoffCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  pay_date: z.nullable(z.lazy(() => ActivityPayDate$inboundSchema)).optional(),
  quantity: z.nullable(z.lazy(() => ActivitySpinoffQuantity$inboundSchema))
    .optional(),
  record_date: z.nullable(z.lazy(() => ActivitySpinoffRecordDate$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "pay_date": "payDate",
    "record_date": "recordDate",
  });
});

/** @internal */
export type ActivitySpinoff$Outbound = {
  corporate_action_general_information?:
    | ActivitySpinoffCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  pay_date?: ActivityPayDate$Outbound | null | undefined;
  quantity?: ActivitySpinoffQuantity$Outbound | null | undefined;
  record_date?: ActivitySpinoffRecordDate$Outbound | null | undefined;
};

/** @internal */
export const ActivitySpinoff$outboundSchema: z.ZodType<
  ActivitySpinoff$Outbound,
  z.ZodTypeDef,
  ActivitySpinoff
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivitySpinoffCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  payDate: z.nullable(z.lazy(() => ActivityPayDate$outboundSchema)).optional(),
  quantity: z.nullable(z.lazy(() => ActivitySpinoffQuantity$outboundSchema))
    .optional(),
  recordDate: z.nullable(z.lazy(() => ActivitySpinoffRecordDate$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    payDate: "pay_date",
    recordDate: "record_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySpinoff$ {
  /** @deprecated use `ActivitySpinoff$inboundSchema` instead. */
  export const inboundSchema = ActivitySpinoff$inboundSchema;
  /** @deprecated use `ActivitySpinoff$outboundSchema` instead. */
  export const outboundSchema = ActivitySpinoff$outboundSchema;
  /** @deprecated use `ActivitySpinoff$Outbound` instead. */
  export type Outbound = ActivitySpinoff$Outbound;
}

/** @internal */
export const ActivityState$inboundSchema: z.ZodType<
  ActivityStateOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityState$outboundSchema: z.ZodType<
  ActivityStateOpen,
  z.ZodTypeDef,
  ActivityStateOpen
> = z.union([
  z.nativeEnum(ActivityState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityState$ {
  /** @deprecated use `ActivityState$inboundSchema` instead. */
  export const inboundSchema = ActivityState$inboundSchema;
  /** @deprecated use `ActivityState$outboundSchema` instead. */
  export const outboundSchema = ActivityState$outboundSchema;
}

/** @internal */
export const ActivityStockDividendCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityStockDividendCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityStockDividendCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityStockDividendCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityStockDividendCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityStockDividendCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockDividendCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityStockDividendCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityStockDividendCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityStockDividendCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityStockDividendCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityStockDividendPayDate$inboundSchema: z.ZodType<
  ActivityStockDividendPayDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityStockDividendPayDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityStockDividendPayDate$outboundSchema: z.ZodType<
  ActivityStockDividendPayDate$Outbound,
  z.ZodTypeDef,
  ActivityStockDividendPayDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockDividendPayDate$ {
  /** @deprecated use `ActivityStockDividendPayDate$inboundSchema` instead. */
  export const inboundSchema = ActivityStockDividendPayDate$inboundSchema;
  /** @deprecated use `ActivityStockDividendPayDate$outboundSchema` instead. */
  export const outboundSchema = ActivityStockDividendPayDate$outboundSchema;
  /** @deprecated use `ActivityStockDividendPayDate$Outbound` instead. */
  export type Outbound = ActivityStockDividendPayDate$Outbound;
}

/** @internal */
export const ActivityStockDividendQuantity$inboundSchema: z.ZodType<
  ActivityStockDividendQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityStockDividendQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityStockDividendQuantity$outboundSchema: z.ZodType<
  ActivityStockDividendQuantity$Outbound,
  z.ZodTypeDef,
  ActivityStockDividendQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockDividendQuantity$ {
  /** @deprecated use `ActivityStockDividendQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityStockDividendQuantity$inboundSchema;
  /** @deprecated use `ActivityStockDividendQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityStockDividendQuantity$outboundSchema;
  /** @deprecated use `ActivityStockDividendQuantity$Outbound` instead. */
  export type Outbound = ActivityStockDividendQuantity$Outbound;
}

/** @internal */
export const ActivityRate$inboundSchema: z.ZodType<
  ActivityRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityRate$outboundSchema: z.ZodType<
  ActivityRate$Outbound,
  z.ZodTypeDef,
  ActivityRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRate$ {
  /** @deprecated use `ActivityRate$inboundSchema` instead. */
  export const inboundSchema = ActivityRate$inboundSchema;
  /** @deprecated use `ActivityRate$outboundSchema` instead. */
  export const outboundSchema = ActivityRate$outboundSchema;
  /** @deprecated use `ActivityRate$Outbound` instead. */
  export type Outbound = ActivityRate$Outbound;
}

/** @internal */
export const ActivityStockDividendRecordDate$inboundSchema: z.ZodType<
  ActivityStockDividendRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityStockDividendRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityStockDividendRecordDate$outboundSchema: z.ZodType<
  ActivityStockDividendRecordDate$Outbound,
  z.ZodTypeDef,
  ActivityStockDividendRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockDividendRecordDate$ {
  /** @deprecated use `ActivityStockDividendRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivityStockDividendRecordDate$inboundSchema;
  /** @deprecated use `ActivityStockDividendRecordDate$outboundSchema` instead. */
  export const outboundSchema = ActivityStockDividendRecordDate$outboundSchema;
  /** @deprecated use `ActivityStockDividendRecordDate$Outbound` instead. */
  export type Outbound = ActivityStockDividendRecordDate$Outbound;
}

/** @internal */
export const ActivityStockDividend$inboundSchema: z.ZodType<
  ActivityStockDividend,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityStockDividendCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  pay_date: z.nullable(z.lazy(() => ActivityStockDividendPayDate$inboundSchema))
    .optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityStockDividendQuantity$inboundSchema),
  ).optional(),
  rate: z.nullable(z.lazy(() => ActivityRate$inboundSchema)).optional(),
  record_date: z.nullable(
    z.lazy(() => ActivityStockDividendRecordDate$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "pay_date": "payDate",
    "record_date": "recordDate",
  });
});

/** @internal */
export type ActivityStockDividend$Outbound = {
  corporate_action_general_information?:
    | ActivityStockDividendCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  pay_date?: ActivityStockDividendPayDate$Outbound | null | undefined;
  quantity?: ActivityStockDividendQuantity$Outbound | null | undefined;
  rate?: ActivityRate$Outbound | null | undefined;
  record_date?: ActivityStockDividendRecordDate$Outbound | null | undefined;
};

/** @internal */
export const ActivityStockDividend$outboundSchema: z.ZodType<
  ActivityStockDividend$Outbound,
  z.ZodTypeDef,
  ActivityStockDividend
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityStockDividendCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  payDate: z.nullable(z.lazy(() => ActivityStockDividendPayDate$outboundSchema))
    .optional(),
  quantity: z.nullable(
    z.lazy(() => ActivityStockDividendQuantity$outboundSchema),
  ).optional(),
  rate: z.nullable(z.lazy(() => ActivityRate$outboundSchema)).optional(),
  recordDate: z.nullable(
    z.lazy(() => ActivityStockDividendRecordDate$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    payDate: "pay_date",
    recordDate: "record_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockDividend$ {
  /** @deprecated use `ActivityStockDividend$inboundSchema` instead. */
  export const inboundSchema = ActivityStockDividend$inboundSchema;
  /** @deprecated use `ActivityStockDividend$outboundSchema` instead. */
  export const outboundSchema = ActivityStockDividend$outboundSchema;
  /** @deprecated use `ActivityStockDividend$Outbound` instead. */
  export type Outbound = ActivityStockDividend$Outbound;
}

/** @internal */
export const ActivityStockSplitCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityStockSplitCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityStockSplitCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityStockSplitCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityStockSplitCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityStockSplitCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockSplitCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityStockSplitCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityStockSplitCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityStockSplitCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityStockSplitCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityStockSplitFactorDenominator$inboundSchema: z.ZodType<
  ActivityStockSplitFactorDenominator,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityStockSplitFactorDenominator$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityStockSplitFactorDenominator$outboundSchema: z.ZodType<
  ActivityStockSplitFactorDenominator$Outbound,
  z.ZodTypeDef,
  ActivityStockSplitFactorDenominator
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockSplitFactorDenominator$ {
  /** @deprecated use `ActivityStockSplitFactorDenominator$inboundSchema` instead. */
  export const inboundSchema =
    ActivityStockSplitFactorDenominator$inboundSchema;
  /** @deprecated use `ActivityStockSplitFactorDenominator$outboundSchema` instead. */
  export const outboundSchema =
    ActivityStockSplitFactorDenominator$outboundSchema;
  /** @deprecated use `ActivityStockSplitFactorDenominator$Outbound` instead. */
  export type Outbound = ActivityStockSplitFactorDenominator$Outbound;
}

/** @internal */
export const ActivityStockSplitFactorNumerator$inboundSchema: z.ZodType<
  ActivityStockSplitFactorNumerator,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityStockSplitFactorNumerator$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityStockSplitFactorNumerator$outboundSchema: z.ZodType<
  ActivityStockSplitFactorNumerator$Outbound,
  z.ZodTypeDef,
  ActivityStockSplitFactorNumerator
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockSplitFactorNumerator$ {
  /** @deprecated use `ActivityStockSplitFactorNumerator$inboundSchema` instead. */
  export const inboundSchema = ActivityStockSplitFactorNumerator$inboundSchema;
  /** @deprecated use `ActivityStockSplitFactorNumerator$outboundSchema` instead. */
  export const outboundSchema =
    ActivityStockSplitFactorNumerator$outboundSchema;
  /** @deprecated use `ActivityStockSplitFactorNumerator$Outbound` instead. */
  export type Outbound = ActivityStockSplitFactorNumerator$Outbound;
}

/** @internal */
export const ActivityStockSplitPayDate$inboundSchema: z.ZodType<
  ActivityStockSplitPayDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityStockSplitPayDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityStockSplitPayDate$outboundSchema: z.ZodType<
  ActivityStockSplitPayDate$Outbound,
  z.ZodTypeDef,
  ActivityStockSplitPayDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockSplitPayDate$ {
  /** @deprecated use `ActivityStockSplitPayDate$inboundSchema` instead. */
  export const inboundSchema = ActivityStockSplitPayDate$inboundSchema;
  /** @deprecated use `ActivityStockSplitPayDate$outboundSchema` instead. */
  export const outboundSchema = ActivityStockSplitPayDate$outboundSchema;
  /** @deprecated use `ActivityStockSplitPayDate$Outbound` instead. */
  export type Outbound = ActivityStockSplitPayDate$Outbound;
}

/** @internal */
export const ActivityStockSplitQuantity$inboundSchema: z.ZodType<
  ActivityStockSplitQuantity,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityStockSplitQuantity$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityStockSplitQuantity$outboundSchema: z.ZodType<
  ActivityStockSplitQuantity$Outbound,
  z.ZodTypeDef,
  ActivityStockSplitQuantity
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockSplitQuantity$ {
  /** @deprecated use `ActivityStockSplitQuantity$inboundSchema` instead. */
  export const inboundSchema = ActivityStockSplitQuantity$inboundSchema;
  /** @deprecated use `ActivityStockSplitQuantity$outboundSchema` instead. */
  export const outboundSchema = ActivityStockSplitQuantity$outboundSchema;
  /** @deprecated use `ActivityStockSplitQuantity$Outbound` instead. */
  export type Outbound = ActivityStockSplitQuantity$Outbound;
}

/** @internal */
export const ActivityStockSplitRecordDate$inboundSchema: z.ZodType<
  ActivityStockSplitRecordDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityStockSplitRecordDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityStockSplitRecordDate$outboundSchema: z.ZodType<
  ActivityStockSplitRecordDate$Outbound,
  z.ZodTypeDef,
  ActivityStockSplitRecordDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockSplitRecordDate$ {
  /** @deprecated use `ActivityStockSplitRecordDate$inboundSchema` instead. */
  export const inboundSchema = ActivityStockSplitRecordDate$inboundSchema;
  /** @deprecated use `ActivityStockSplitRecordDate$outboundSchema` instead. */
  export const outboundSchema = ActivityStockSplitRecordDate$outboundSchema;
  /** @deprecated use `ActivityStockSplitRecordDate$Outbound` instead. */
  export type Outbound = ActivityStockSplitRecordDate$Outbound;
}

/** @internal */
export const ActivityStockSplit$inboundSchema: z.ZodType<
  ActivityStockSplit,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityStockSplitCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  factor_denominator: z.nullable(
    z.lazy(() => ActivityStockSplitFactorDenominator$inboundSchema),
  ).optional(),
  factor_numerator: z.nullable(
    z.lazy(() => ActivityStockSplitFactorNumerator$inboundSchema),
  ).optional(),
  pay_date: z.nullable(z.lazy(() => ActivityStockSplitPayDate$inboundSchema))
    .optional(),
  quantity: z.nullable(z.lazy(() => ActivityStockSplitQuantity$inboundSchema))
    .optional(),
  record_date: z.nullable(
    z.lazy(() => ActivityStockSplitRecordDate$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "factor_denominator": "factorDenominator",
    "factor_numerator": "factorNumerator",
    "pay_date": "payDate",
    "record_date": "recordDate",
  });
});

/** @internal */
export type ActivityStockSplit$Outbound = {
  corporate_action_general_information?:
    | ActivityStockSplitCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  factor_denominator?:
    | ActivityStockSplitFactorDenominator$Outbound
    | null
    | undefined;
  factor_numerator?:
    | ActivityStockSplitFactorNumerator$Outbound
    | null
    | undefined;
  pay_date?: ActivityStockSplitPayDate$Outbound | null | undefined;
  quantity?: ActivityStockSplitQuantity$Outbound | null | undefined;
  record_date?: ActivityStockSplitRecordDate$Outbound | null | undefined;
};

/** @internal */
export const ActivityStockSplit$outboundSchema: z.ZodType<
  ActivityStockSplit$Outbound,
  z.ZodTypeDef,
  ActivityStockSplit
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityStockSplitCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  factorDenominator: z.nullable(
    z.lazy(() => ActivityStockSplitFactorDenominator$outboundSchema),
  ).optional(),
  factorNumerator: z.nullable(
    z.lazy(() => ActivityStockSplitFactorNumerator$outboundSchema),
  ).optional(),
  payDate: z.nullable(z.lazy(() => ActivityStockSplitPayDate$outboundSchema))
    .optional(),
  quantity: z.nullable(z.lazy(() => ActivityStockSplitQuantity$outboundSchema))
    .optional(),
  recordDate: z.nullable(
    z.lazy(() => ActivityStockSplitRecordDate$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    factorDenominator: "factor_denominator",
    factorNumerator: "factor_numerator",
    payDate: "pay_date",
    recordDate: "record_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStockSplit$ {
  /** @deprecated use `ActivityStockSplit$inboundSchema` instead. */
  export const inboundSchema = ActivityStockSplit$inboundSchema;
  /** @deprecated use `ActivityStockSplit$outboundSchema` instead. */
  export const outboundSchema = ActivityStockSplit$outboundSchema;
  /** @deprecated use `ActivityStockSplit$Outbound` instead. */
  export type Outbound = ActivityStockSplit$Outbound;
}

/** @internal */
export const ActivitySweepAction$inboundSchema: z.ZodType<
  ActivitySweepActionOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivitySweepAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivitySweepAction$outboundSchema: z.ZodType<
  ActivitySweepActionOpen,
  z.ZodTypeDef,
  ActivitySweepActionOpen
> = z.union([
  z.nativeEnum(ActivitySweepAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySweepAction$ {
  /** @deprecated use `ActivitySweepAction$inboundSchema` instead. */
  export const inboundSchema = ActivitySweepAction$inboundSchema;
  /** @deprecated use `ActivitySweepAction$outboundSchema` instead. */
  export const outboundSchema = ActivitySweepAction$outboundSchema;
}

/** @internal */
export const ActivitySweepType$inboundSchema: z.ZodType<
  ActivitySweepTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivitySweepType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivitySweepType$outboundSchema: z.ZodType<
  ActivitySweepTypeOpen,
  z.ZodTypeDef,
  ActivitySweepTypeOpen
> = z.union([
  z.nativeEnum(ActivitySweepType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySweepType$ {
  /** @deprecated use `ActivitySweepType$inboundSchema` instead. */
  export const inboundSchema = ActivitySweepType$inboundSchema;
  /** @deprecated use `ActivitySweepType$outboundSchema` instead. */
  export const outboundSchema = ActivitySweepType$outboundSchema;
}

/** @internal */
export const ActivitySweep$inboundSchema: z.ZodType<
  ActivitySweep,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: ActivitySweepAction$inboundSchema.optional(),
  eod_redemption: z.boolean().optional(),
  type: ActivitySweepType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "eod_redemption": "eodRedemption",
  });
});

/** @internal */
export type ActivitySweep$Outbound = {
  action?: string | undefined;
  eod_redemption?: boolean | undefined;
  type?: string | undefined;
};

/** @internal */
export const ActivitySweep$outboundSchema: z.ZodType<
  ActivitySweep$Outbound,
  z.ZodTypeDef,
  ActivitySweep
> = z.object({
  action: ActivitySweepAction$outboundSchema.optional(),
  eodRedemption: z.boolean().optional(),
  type: ActivitySweepType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eodRedemption: "eod_redemption",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitySweep$ {
  /** @deprecated use `ActivitySweep$inboundSchema` instead. */
  export const inboundSchema = ActivitySweep$inboundSchema;
  /** @deprecated use `ActivitySweep$outboundSchema` instead. */
  export const outboundSchema = ActivitySweep$outboundSchema;
  /** @deprecated use `ActivitySweep$Outbound` instead. */
  export type Outbound = ActivitySweep$Outbound;
}

/** @internal */
export const ActivityTenderOfferCashRate$inboundSchema: z.ZodType<
  ActivityTenderOfferCashRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityTenderOfferCashRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityTenderOfferCashRate$outboundSchema: z.ZodType<
  ActivityTenderOfferCashRate$Outbound,
  z.ZodTypeDef,
  ActivityTenderOfferCashRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityTenderOfferCashRate$ {
  /** @deprecated use `ActivityTenderOfferCashRate$inboundSchema` instead. */
  export const inboundSchema = ActivityTenderOfferCashRate$inboundSchema;
  /** @deprecated use `ActivityTenderOfferCashRate$outboundSchema` instead. */
  export const outboundSchema = ActivityTenderOfferCashRate$outboundSchema;
  /** @deprecated use `ActivityTenderOfferCashRate$Outbound` instead. */
  export type Outbound = ActivityTenderOfferCashRate$Outbound;
}

/** @internal */
export const ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityTenderOfferCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityTenderOfferCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityTenderOfferCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityTenderOfferCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityTenderOfferCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityTenderOfferCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityTenderOfferCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityTenderOffer$inboundSchema: z.ZodType<
  ActivityTenderOffer,
  z.ZodTypeDef,
  unknown
> = z.object({
  cash_rate: z.nullable(z.lazy(() => ActivityTenderOfferCashRate$inboundSchema))
    .optional(),
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityTenderOfferCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "cash_rate": "cashRate",
    "corporate_action_general_information": "corporateActionGeneralInformation",
  });
});

/** @internal */
export type ActivityTenderOffer$Outbound = {
  cash_rate?: ActivityTenderOfferCashRate$Outbound | null | undefined;
  corporate_action_general_information?:
    | ActivityTenderOfferCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
};

/** @internal */
export const ActivityTenderOffer$outboundSchema: z.ZodType<
  ActivityTenderOffer$Outbound,
  z.ZodTypeDef,
  ActivityTenderOffer
> = z.object({
  cashRate: z.nullable(z.lazy(() => ActivityTenderOfferCashRate$outboundSchema))
    .optional(),
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityTenderOfferCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    cashRate: "cash_rate",
    corporateActionGeneralInformation: "corporate_action_general_information",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityTenderOffer$ {
  /** @deprecated use `ActivityTenderOffer$inboundSchema` instead. */
  export const inboundSchema = ActivityTenderOffer$inboundSchema;
  /** @deprecated use `ActivityTenderOffer$outboundSchema` instead. */
  export const outboundSchema = ActivityTenderOffer$outboundSchema;
  /** @deprecated use `ActivityTenderOffer$Outbound` instead. */
  export type Outbound = ActivityTenderOffer$Outbound;
}

/** @internal */
export const ActivityBrokerCapacity$inboundSchema: z.ZodType<
  ActivityBrokerCapacityOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityBrokerCapacity),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityBrokerCapacity$outboundSchema: z.ZodType<
  ActivityBrokerCapacityOpen,
  z.ZodTypeDef,
  ActivityBrokerCapacityOpen
> = z.union([
  z.nativeEnum(ActivityBrokerCapacity),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityBrokerCapacity$ {
  /** @deprecated use `ActivityBrokerCapacity$inboundSchema` instead. */
  export const inboundSchema = ActivityBrokerCapacity$inboundSchema;
  /** @deprecated use `ActivityBrokerCapacity$outboundSchema` instead. */
  export const outboundSchema = ActivityBrokerCapacity$outboundSchema;
}

/** @internal */
export const ActivityPrevailingMarketPrice$inboundSchema: z.ZodType<
  ActivityPrevailingMarketPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityPrevailingMarketPrice$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityPrevailingMarketPrice$outboundSchema: z.ZodType<
  ActivityPrevailingMarketPrice$Outbound,
  z.ZodTypeDef,
  ActivityPrevailingMarketPrice
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPrevailingMarketPrice$ {
  /** @deprecated use `ActivityPrevailingMarketPrice$inboundSchema` instead. */
  export const inboundSchema = ActivityPrevailingMarketPrice$inboundSchema;
  /** @deprecated use `ActivityPrevailingMarketPrice$outboundSchema` instead. */
  export const outboundSchema = ActivityPrevailingMarketPrice$outboundSchema;
  /** @deprecated use `ActivityPrevailingMarketPrice$Outbound` instead. */
  export type Outbound = ActivityPrevailingMarketPrice$Outbound;
}

/** @internal */
export const ActivityPriceAdjustmentAmount$inboundSchema: z.ZodType<
  ActivityPriceAdjustmentAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityPriceAdjustmentAmount$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityPriceAdjustmentAmount$outboundSchema: z.ZodType<
  ActivityPriceAdjustmentAmount$Outbound,
  z.ZodTypeDef,
  ActivityPriceAdjustmentAmount
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPriceAdjustmentAmount$ {
  /** @deprecated use `ActivityPriceAdjustmentAmount$inboundSchema` instead. */
  export const inboundSchema = ActivityPriceAdjustmentAmount$inboundSchema;
  /** @deprecated use `ActivityPriceAdjustmentAmount$outboundSchema` instead. */
  export const outboundSchema = ActivityPriceAdjustmentAmount$outboundSchema;
  /** @deprecated use `ActivityPriceAdjustmentAmount$Outbound` instead. */
  export type Outbound = ActivityPriceAdjustmentAmount$Outbound;
}

/** @internal */
export const ActivityPriceAdjustmentPercent$inboundSchema: z.ZodType<
  ActivityPriceAdjustmentPercent,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityPriceAdjustmentPercent$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityPriceAdjustmentPercent$outboundSchema: z.ZodType<
  ActivityPriceAdjustmentPercent$Outbound,
  z.ZodTypeDef,
  ActivityPriceAdjustmentPercent
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPriceAdjustmentPercent$ {
  /** @deprecated use `ActivityPriceAdjustmentPercent$inboundSchema` instead. */
  export const inboundSchema = ActivityPriceAdjustmentPercent$inboundSchema;
  /** @deprecated use `ActivityPriceAdjustmentPercent$outboundSchema` instead. */
  export const outboundSchema = ActivityPriceAdjustmentPercent$outboundSchema;
  /** @deprecated use `ActivityPriceAdjustmentPercent$Outbound` instead. */
  export type Outbound = ActivityPriceAdjustmentPercent$Outbound;
}

/** @internal */
export const ActivityPriceAdjustmentType$inboundSchema: z.ZodType<
  ActivityPriceAdjustmentTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityPriceAdjustmentType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityPriceAdjustmentType$outboundSchema: z.ZodType<
  ActivityPriceAdjustmentTypeOpen,
  z.ZodTypeDef,
  ActivityPriceAdjustmentTypeOpen
> = z.union([
  z.nativeEnum(ActivityPriceAdjustmentType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPriceAdjustmentType$ {
  /** @deprecated use `ActivityPriceAdjustmentType$inboundSchema` instead. */
  export const inboundSchema = ActivityPriceAdjustmentType$inboundSchema;
  /** @deprecated use `ActivityPriceAdjustmentType$outboundSchema` instead. */
  export const outboundSchema = ActivityPriceAdjustmentType$outboundSchema;
}

/** @internal */
export const ActivityPriceAdjustmentRecord$inboundSchema: z.ZodType<
  ActivityPriceAdjustmentRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_adjustment_amount: z.nullable(
    z.lazy(() => ActivityPriceAdjustmentAmount$inboundSchema),
  ).optional(),
  price_adjustment_percent: z.nullable(
    z.lazy(() => ActivityPriceAdjustmentPercent$inboundSchema),
  ).optional(),
  price_adjustment_type: ActivityPriceAdjustmentType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "price_adjustment_amount": "priceAdjustmentAmount",
    "price_adjustment_percent": "priceAdjustmentPercent",
    "price_adjustment_type": "priceAdjustmentType",
  });
});

/** @internal */
export type ActivityPriceAdjustmentRecord$Outbound = {
  price_adjustment_amount?:
    | ActivityPriceAdjustmentAmount$Outbound
    | null
    | undefined;
  price_adjustment_percent?:
    | ActivityPriceAdjustmentPercent$Outbound
    | null
    | undefined;
  price_adjustment_type?: string | undefined;
};

/** @internal */
export const ActivityPriceAdjustmentRecord$outboundSchema: z.ZodType<
  ActivityPriceAdjustmentRecord$Outbound,
  z.ZodTypeDef,
  ActivityPriceAdjustmentRecord
> = z.object({
  priceAdjustmentAmount: z.nullable(
    z.lazy(() => ActivityPriceAdjustmentAmount$outboundSchema),
  ).optional(),
  priceAdjustmentPercent: z.nullable(
    z.lazy(() => ActivityPriceAdjustmentPercent$outboundSchema),
  ).optional(),
  priceAdjustmentType: ActivityPriceAdjustmentType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    priceAdjustmentAmount: "price_adjustment_amount",
    priceAdjustmentPercent: "price_adjustment_percent",
    priceAdjustmentType: "price_adjustment_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPriceAdjustmentRecord$ {
  /** @deprecated use `ActivityPriceAdjustmentRecord$inboundSchema` instead. */
  export const inboundSchema = ActivityPriceAdjustmentRecord$inboundSchema;
  /** @deprecated use `ActivityPriceAdjustmentRecord$outboundSchema` instead. */
  export const outboundSchema = ActivityPriceAdjustmentRecord$outboundSchema;
  /** @deprecated use `ActivityPriceAdjustmentRecord$Outbound` instead. */
  export type Outbound = ActivityPriceAdjustmentRecord$Outbound;
}

/** @internal */
export const ActivityTrade$inboundSchema: z.ZodType<
  ActivityTrade,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.array(z.string()).optional(),
  alternate_order_id: z.string().optional(),
  booking_api_trade_allocation_id: z.string().optional(),
  booking_api_trade_id: z.string().optional(),
  broker: z.string().optional(),
  broker_capacity: ActivityBrokerCapacity$inboundSchema.optional(),
  client_memos: z.array(z.string()).optional(),
  client_order_id: z.string().optional(),
  exchange: z.string().optional(),
  execution_id: z.string().optional(),
  execution_only: z.boolean().optional(),
  external_id: z.string().optional(),
  fund_confirmation_number: z.string().optional(),
  gateway_client_order_id: z.string().optional(),
  internal_error: z.boolean().optional(),
  is_writeoff: z.boolean().optional(),
  lots: z.array(Lot$inboundSchema).optional(),
  order_id: z.string().optional(),
  prevailing_market_price: z.nullable(
    z.lazy(() => ActivityPrevailingMarketPrice$inboundSchema),
  ).optional(),
  price_adjustment_record: z.nullable(
    z.lazy(() => ActivityPriceAdjustmentRecord$inboundSchema),
  ).optional(),
  route: z.string().optional(),
  special_instructions: z.array(z.string()).optional(),
  symbol_description: z.string().optional(),
  when_issued: z.boolean().optional(),
  yield_records: z.array(YieldRecord$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
    "alternate_order_id": "alternateOrderId",
    "booking_api_trade_allocation_id": "bookingApiTradeAllocationId",
    "booking_api_trade_id": "bookingApiTradeId",
    "broker_capacity": "brokerCapacity",
    "client_memos": "clientMemos",
    "client_order_id": "clientOrderId",
    "execution_id": "executionId",
    "execution_only": "executionOnly",
    "external_id": "externalId",
    "fund_confirmation_number": "fundConfirmationNumber",
    "gateway_client_order_id": "gatewayClientOrderId",
    "internal_error": "internalError",
    "is_writeoff": "isWriteoff",
    "order_id": "orderId",
    "prevailing_market_price": "prevailingMarketPrice",
    "price_adjustment_record": "priceAdjustmentRecord",
    "special_instructions": "specialInstructions",
    "symbol_description": "symbolDescription",
    "when_issued": "whenIssued",
    "yield_records": "yieldRecords",
  });
});

/** @internal */
export type ActivityTrade$Outbound = {
  additional_instructions?: Array<string> | undefined;
  alternate_order_id?: string | undefined;
  booking_api_trade_allocation_id?: string | undefined;
  booking_api_trade_id?: string | undefined;
  broker?: string | undefined;
  broker_capacity?: string | undefined;
  client_memos?: Array<string> | undefined;
  client_order_id?: string | undefined;
  exchange?: string | undefined;
  execution_id?: string | undefined;
  execution_only?: boolean | undefined;
  external_id?: string | undefined;
  fund_confirmation_number?: string | undefined;
  gateway_client_order_id?: string | undefined;
  internal_error?: boolean | undefined;
  is_writeoff?: boolean | undefined;
  lots?: Array<Lot$Outbound> | undefined;
  order_id?: string | undefined;
  prevailing_market_price?:
    | ActivityPrevailingMarketPrice$Outbound
    | null
    | undefined;
  price_adjustment_record?:
    | ActivityPriceAdjustmentRecord$Outbound
    | null
    | undefined;
  route?: string | undefined;
  special_instructions?: Array<string> | undefined;
  symbol_description?: string | undefined;
  when_issued?: boolean | undefined;
  yield_records?: Array<YieldRecord$Outbound> | undefined;
};

/** @internal */
export const ActivityTrade$outboundSchema: z.ZodType<
  ActivityTrade$Outbound,
  z.ZodTypeDef,
  ActivityTrade
> = z.object({
  additionalInstructions: z.array(z.string()).optional(),
  alternateOrderId: z.string().optional(),
  bookingApiTradeAllocationId: z.string().optional(),
  bookingApiTradeId: z.string().optional(),
  broker: z.string().optional(),
  brokerCapacity: ActivityBrokerCapacity$outboundSchema.optional(),
  clientMemos: z.array(z.string()).optional(),
  clientOrderId: z.string().optional(),
  exchange: z.string().optional(),
  executionId: z.string().optional(),
  executionOnly: z.boolean().optional(),
  externalId: z.string().optional(),
  fundConfirmationNumber: z.string().optional(),
  gatewayClientOrderId: z.string().optional(),
  internalError: z.boolean().optional(),
  isWriteoff: z.boolean().optional(),
  lots: z.array(Lot$outboundSchema).optional(),
  orderId: z.string().optional(),
  prevailingMarketPrice: z.nullable(
    z.lazy(() => ActivityPrevailingMarketPrice$outboundSchema),
  ).optional(),
  priceAdjustmentRecord: z.nullable(
    z.lazy(() => ActivityPriceAdjustmentRecord$outboundSchema),
  ).optional(),
  route: z.string().optional(),
  specialInstructions: z.array(z.string()).optional(),
  symbolDescription: z.string().optional(),
  whenIssued: z.boolean().optional(),
  yieldRecords: z.array(YieldRecord$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
    alternateOrderId: "alternate_order_id",
    bookingApiTradeAllocationId: "booking_api_trade_allocation_id",
    bookingApiTradeId: "booking_api_trade_id",
    brokerCapacity: "broker_capacity",
    clientMemos: "client_memos",
    clientOrderId: "client_order_id",
    executionId: "execution_id",
    executionOnly: "execution_only",
    externalId: "external_id",
    fundConfirmationNumber: "fund_confirmation_number",
    gatewayClientOrderId: "gateway_client_order_id",
    internalError: "internal_error",
    isWriteoff: "is_writeoff",
    orderId: "order_id",
    prevailingMarketPrice: "prevailing_market_price",
    priceAdjustmentRecord: "price_adjustment_record",
    specialInstructions: "special_instructions",
    symbolDescription: "symbol_description",
    whenIssued: "when_issued",
    yieldRecords: "yield_records",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityTrade$ {
  /** @deprecated use `ActivityTrade$inboundSchema` instead. */
  export const inboundSchema = ActivityTrade$inboundSchema;
  /** @deprecated use `ActivityTrade$outboundSchema` instead. */
  export const outboundSchema = ActivityTrade$outboundSchema;
  /** @deprecated use `ActivityTrade$Outbound` instead. */
  export type Outbound = ActivityTrade$Outbound;
}

/** @internal */
export const ActivityTransferType$inboundSchema: z.ZodType<
  ActivityTransferTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityTransferType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityTransferType$outboundSchema: z.ZodType<
  ActivityTransferTypeOpen,
  z.ZodTypeDef,
  ActivityTransferTypeOpen
> = z.union([
  z.nativeEnum(ActivityTransferType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityTransferType$ {
  /** @deprecated use `ActivityTransferType$inboundSchema` instead. */
  export const inboundSchema = ActivityTransferType$inboundSchema;
  /** @deprecated use `ActivityTransferType$outboundSchema` instead. */
  export const outboundSchema = ActivityTransferType$outboundSchema;
}

/** @internal */
export const ActivityTransfer$inboundSchema: z.ZodType<
  ActivityTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.string().optional(),
  client_brokerage: z.string().optional(),
  transfer_type: ActivityTransferType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
    "client_brokerage": "clientBrokerage",
    "transfer_type": "transferType",
  });
});

/** @internal */
export type ActivityTransfer$Outbound = {
  additional_instructions?: string | undefined;
  client_brokerage?: string | undefined;
  transfer_type?: string | undefined;
};

/** @internal */
export const ActivityTransfer$outboundSchema: z.ZodType<
  ActivityTransfer$Outbound,
  z.ZodTypeDef,
  ActivityTransfer
> = z.object({
  additionalInstructions: z.string().optional(),
  clientBrokerage: z.string().optional(),
  transferType: ActivityTransferType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
    clientBrokerage: "client_brokerage",
    transferType: "transfer_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityTransfer$ {
  /** @deprecated use `ActivityTransfer$inboundSchema` instead. */
  export const inboundSchema = ActivityTransfer$inboundSchema;
  /** @deprecated use `ActivityTransfer$outboundSchema` instead. */
  export const outboundSchema = ActivityTransfer$outboundSchema;
  /** @deprecated use `ActivityTransfer$Outbound` instead. */
  export type Outbound = ActivityTransfer$Outbound;
}

/** @internal */
export const ActivityType$inboundSchema: z.ZodType<
  ActivityTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityType$outboundSchema: z.ZodType<
  ActivityTypeOpen,
  z.ZodTypeDef,
  ActivityTypeOpen
> = z.union([
  z.nativeEnum(ActivityType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityType$ {
  /** @deprecated use `ActivityType$inboundSchema` instead. */
  export const inboundSchema = ActivityType$inboundSchema;
  /** @deprecated use `ActivityType$outboundSchema` instead. */
  export const outboundSchema = ActivityType$outboundSchema;
}

/** @internal */
export const ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityUnitSplitCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityUnitSplitCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityUnitSplitCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityUnitSplitCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityUnitSplitCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityUnitSplitCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityUnitSplitCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityUnitSplitStockRate$inboundSchema: z.ZodType<
  ActivityUnitSplitStockRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
});

/** @internal */
export type ActivityUnitSplitStockRate$Outbound = {
  value?: string | undefined;
};

/** @internal */
export const ActivityUnitSplitStockRate$outboundSchema: z.ZodType<
  ActivityUnitSplitStockRate$Outbound,
  z.ZodTypeDef,
  ActivityUnitSplitStockRate
> = z.object({
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityUnitSplitStockRate$ {
  /** @deprecated use `ActivityUnitSplitStockRate$inboundSchema` instead. */
  export const inboundSchema = ActivityUnitSplitStockRate$inboundSchema;
  /** @deprecated use `ActivityUnitSplitStockRate$outboundSchema` instead. */
  export const outboundSchema = ActivityUnitSplitStockRate$outboundSchema;
  /** @deprecated use `ActivityUnitSplitStockRate$Outbound` instead. */
  export type Outbound = ActivityUnitSplitStockRate$Outbound;
}

/** @internal */
export const ActivityUnitSplit$inboundSchema: z.ZodType<
  ActivityUnitSplit,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityUnitSplitCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  stock_rate: z.nullable(z.lazy(() => ActivityUnitSplitStockRate$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "stock_rate": "stockRate",
  });
});

/** @internal */
export type ActivityUnitSplit$Outbound = {
  corporate_action_general_information?:
    | ActivityUnitSplitCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  stock_rate?: ActivityUnitSplitStockRate$Outbound | null | undefined;
};

/** @internal */
export const ActivityUnitSplit$outboundSchema: z.ZodType<
  ActivityUnitSplit$Outbound,
  z.ZodTypeDef,
  ActivityUnitSplit
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityUnitSplitCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  stockRate: z.nullable(z.lazy(() => ActivityUnitSplitStockRate$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    stockRate: "stock_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityUnitSplit$ {
  /** @deprecated use `ActivityUnitSplit$inboundSchema` instead. */
  export const inboundSchema = ActivityUnitSplit$inboundSchema;
  /** @deprecated use `ActivityUnitSplit$outboundSchema` instead. */
  export const outboundSchema = ActivityUnitSplit$outboundSchema;
  /** @deprecated use `ActivityUnitSplit$Outbound` instead. */
  export type Outbound = ActivityUnitSplit$Outbound;
}

/** @internal */
export const ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityWarrantExerciseCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound =
  {
    corporate_action_id?: string | undefined;
    disbursed_asset_id?: string | undefined;
    disbursed_cusip?: string | undefined;
    disbursed_symbol_description?: string | undefined;
    target_asset_id?: string | undefined;
    target_cusip?: string | undefined;
    target_symbol_description?: string | undefined;
  };

/** @internal */
export const ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityWarrantExerciseCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWarrantExerciseCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityWarrantExercise$inboundSchema: z.ZodType<
  ActivityWarrantExercise,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityWarrantExerciseCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
  });
});

/** @internal */
export type ActivityWarrantExercise$Outbound = {
  corporate_action_general_information?:
    | ActivityWarrantExerciseCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
};

/** @internal */
export const ActivityWarrantExercise$outboundSchema: z.ZodType<
  ActivityWarrantExercise$Outbound,
  z.ZodTypeDef,
  ActivityWarrantExercise
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityWarrantExerciseCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWarrantExercise$ {
  /** @deprecated use `ActivityWarrantExercise$inboundSchema` instead. */
  export const inboundSchema = ActivityWarrantExercise$inboundSchema;
  /** @deprecated use `ActivityWarrantExercise$outboundSchema` instead. */
  export const outboundSchema = ActivityWarrantExercise$outboundSchema;
  /** @deprecated use `ActivityWarrantExercise$Outbound` instead. */
  export type Outbound = ActivityWarrantExercise$Outbound;
}

/** @internal */
export const ActivityDistributionType$inboundSchema: z.ZodType<
  ActivityDistributionTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityDistributionType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityDistributionType$outboundSchema: z.ZodType<
  ActivityDistributionTypeOpen,
  z.ZodTypeDef,
  ActivityDistributionTypeOpen
> = z.union([
  z.nativeEnum(ActivityDistributionType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityDistributionType$ {
  /** @deprecated use `ActivityDistributionType$inboundSchema` instead. */
  export const inboundSchema = ActivityDistributionType$inboundSchema;
  /** @deprecated use `ActivityDistributionType$outboundSchema` instead. */
  export const outboundSchema = ActivityDistributionType$outboundSchema;
}

/** @internal */
export const ActivityRetirementType$inboundSchema: z.ZodType<
  ActivityRetirementTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityRetirementType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityRetirementType$outboundSchema: z.ZodType<
  ActivityRetirementTypeOpen,
  z.ZodTypeDef,
  ActivityRetirementTypeOpen
> = z.union([
  z.nativeEnum(ActivityRetirementType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityRetirementType$ {
  /** @deprecated use `ActivityRetirementType$inboundSchema` instead. */
  export const inboundSchema = ActivityRetirementType$inboundSchema;
  /** @deprecated use `ActivityRetirementType$outboundSchema` instead. */
  export const outboundSchema = ActivityRetirementType$outboundSchema;
}

/** @internal */
export const ActivityWithdrawalType$inboundSchema: z.ZodType<
  ActivityWithdrawalTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityWithdrawalType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityWithdrawalType$outboundSchema: z.ZodType<
  ActivityWithdrawalTypeOpen,
  z.ZodTypeDef,
  ActivityWithdrawalTypeOpen
> = z.union([
  z.nativeEnum(ActivityWithdrawalType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWithdrawalType$ {
  /** @deprecated use `ActivityWithdrawalType$inboundSchema` instead. */
  export const inboundSchema = ActivityWithdrawalType$inboundSchema;
  /** @deprecated use `ActivityWithdrawalType$outboundSchema` instead. */
  export const outboundSchema = ActivityWithdrawalType$outboundSchema;
}

/** @internal */
export const ActivityWithdrawal$inboundSchema: z.ZodType<
  ActivityWithdrawal,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_instructions: z.string().optional(),
  advance: z.boolean().optional(),
  closing_account: z.boolean().optional(),
  conversion: z.boolean().optional(),
  destination_account_number: z.string().optional(),
  destination_institution: z.string().optional(),
  distribution_type: ActivityDistributionType$inboundSchema.optional(),
  distribution_year: z.number().int().optional(),
  fed_reference_number: z.string().optional(),
  futures_settlement: z.boolean().optional(),
  micro: z.boolean().optional(),
  originating_institution: z.string().optional(),
  periodic: z.boolean().optional(),
  retirement_type: ActivityRetirementType$inboundSchema.optional(),
  taxable: z.boolean().optional(),
  type: ActivityWithdrawalType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_instructions": "additionalInstructions",
    "closing_account": "closingAccount",
    "destination_account_number": "destinationAccountNumber",
    "destination_institution": "destinationInstitution",
    "distribution_type": "distributionType",
    "distribution_year": "distributionYear",
    "fed_reference_number": "fedReferenceNumber",
    "futures_settlement": "futuresSettlement",
    "originating_institution": "originatingInstitution",
    "retirement_type": "retirementType",
  });
});

/** @internal */
export type ActivityWithdrawal$Outbound = {
  additional_instructions?: string | undefined;
  advance?: boolean | undefined;
  closing_account?: boolean | undefined;
  conversion?: boolean | undefined;
  destination_account_number?: string | undefined;
  destination_institution?: string | undefined;
  distribution_type?: string | undefined;
  distribution_year?: number | undefined;
  fed_reference_number?: string | undefined;
  futures_settlement?: boolean | undefined;
  micro?: boolean | undefined;
  originating_institution?: string | undefined;
  periodic?: boolean | undefined;
  retirement_type?: string | undefined;
  taxable?: boolean | undefined;
  type?: string | undefined;
};

/** @internal */
export const ActivityWithdrawal$outboundSchema: z.ZodType<
  ActivityWithdrawal$Outbound,
  z.ZodTypeDef,
  ActivityWithdrawal
> = z.object({
  additionalInstructions: z.string().optional(),
  advance: z.boolean().optional(),
  closingAccount: z.boolean().optional(),
  conversion: z.boolean().optional(),
  destinationAccountNumber: z.string().optional(),
  destinationInstitution: z.string().optional(),
  distributionType: ActivityDistributionType$outboundSchema.optional(),
  distributionYear: z.number().int().optional(),
  fedReferenceNumber: z.string().optional(),
  futuresSettlement: z.boolean().optional(),
  micro: z.boolean().optional(),
  originatingInstitution: z.string().optional(),
  periodic: z.boolean().optional(),
  retirementType: ActivityRetirementType$outboundSchema.optional(),
  taxable: z.boolean().optional(),
  type: ActivityWithdrawalType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    additionalInstructions: "additional_instructions",
    closingAccount: "closing_account",
    destinationAccountNumber: "destination_account_number",
    destinationInstitution: "destination_institution",
    distributionType: "distribution_type",
    distributionYear: "distribution_year",
    fedReferenceNumber: "fed_reference_number",
    futuresSettlement: "futures_settlement",
    originatingInstitution: "originating_institution",
    retirementType: "retirement_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWithdrawal$ {
  /** @deprecated use `ActivityWithdrawal$inboundSchema` instead. */
  export const inboundSchema = ActivityWithdrawal$inboundSchema;
  /** @deprecated use `ActivityWithdrawal$outboundSchema` instead. */
  export const outboundSchema = ActivityWithdrawal$outboundSchema;
  /** @deprecated use `ActivityWithdrawal$Outbound` instead. */
  export type Outbound = ActivityWithdrawal$Outbound;
}

/** @internal */
export const ActivityReview$inboundSchema: z.ZodType<
  ActivityReviewOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActivityReview),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActivityReview$outboundSchema: z.ZodType<
  ActivityReviewOpen,
  z.ZodTypeDef,
  ActivityReviewOpen
> = z.union([
  z.nativeEnum(ActivityReview),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityReview$ {
  /** @deprecated use `ActivityReview$inboundSchema` instead. */
  export const inboundSchema = ActivityReview$inboundSchema;
  /** @deprecated use `ActivityReview$outboundSchema` instead. */
  export const outboundSchema = ActivityReview$outboundSchema;
}

/** @internal */
export const ActivityWithdrawalPendingReview$inboundSchema: z.ZodType<
  ActivityWithdrawalPendingReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  review: ActivityReview$inboundSchema.optional(),
});

/** @internal */
export type ActivityWithdrawalPendingReview$Outbound = {
  review?: string | undefined;
};

/** @internal */
export const ActivityWithdrawalPendingReview$outboundSchema: z.ZodType<
  ActivityWithdrawalPendingReview$Outbound,
  z.ZodTypeDef,
  ActivityWithdrawalPendingReview
> = z.object({
  review: ActivityReview$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWithdrawalPendingReview$ {
  /** @deprecated use `ActivityWithdrawalPendingReview$inboundSchema` instead. */
  export const inboundSchema = ActivityWithdrawalPendingReview$inboundSchema;
  /** @deprecated use `ActivityWithdrawalPendingReview$outboundSchema` instead. */
  export const outboundSchema = ActivityWithdrawalPendingReview$outboundSchema;
  /** @deprecated use `ActivityWithdrawalPendingReview$Outbound` instead. */
  export type Outbound = ActivityWithdrawalPendingReview$Outbound;
}

/** @internal */
export const ActivityWithholding$inboundSchema: z.ZodType<
  ActivityWithholding,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(WithholdingData$inboundSchema).optional(),
});

/** @internal */
export type ActivityWithholding$Outbound = {
  data?: Array<WithholdingData$Outbound> | undefined;
};

/** @internal */
export const ActivityWithholding$outboundSchema: z.ZodType<
  ActivityWithholding$Outbound,
  z.ZodTypeDef,
  ActivityWithholding
> = z.object({
  data: z.array(WithholdingData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWithholding$ {
  /** @deprecated use `ActivityWithholding$inboundSchema` instead. */
  export const inboundSchema = ActivityWithholding$inboundSchema;
  /** @deprecated use `ActivityWithholding$outboundSchema` instead. */
  export const outboundSchema = ActivityWithholding$outboundSchema;
  /** @deprecated use `ActivityWithholding$Outbound` instead. */
  export type Outbound = ActivityWithholding$Outbound;
}

/** @internal */
export const ActivityWorthlessCorporateActionGeneralInformation$inboundSchema:
  z.ZodType<
    ActivityWorthlessCorporateActionGeneralInformation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    corporate_action_id: z.string().optional(),
    disbursed_asset_id: z.string().optional(),
    disbursed_cusip: z.string().optional(),
    disbursed_symbol_description: z.string().optional(),
    target_asset_id: z.string().optional(),
    target_cusip: z.string().optional(),
    target_symbol_description: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "corporate_action_id": "corporateActionId",
      "disbursed_asset_id": "disbursedAssetId",
      "disbursed_cusip": "disbursedCusip",
      "disbursed_symbol_description": "disbursedSymbolDescription",
      "target_asset_id": "targetAssetId",
      "target_cusip": "targetCusip",
      "target_symbol_description": "targetSymbolDescription",
    });
  });

/** @internal */
export type ActivityWorthlessCorporateActionGeneralInformation$Outbound = {
  corporate_action_id?: string | undefined;
  disbursed_asset_id?: string | undefined;
  disbursed_cusip?: string | undefined;
  disbursed_symbol_description?: string | undefined;
  target_asset_id?: string | undefined;
  target_cusip?: string | undefined;
  target_symbol_description?: string | undefined;
};

/** @internal */
export const ActivityWorthlessCorporateActionGeneralInformation$outboundSchema:
  z.ZodType<
    ActivityWorthlessCorporateActionGeneralInformation$Outbound,
    z.ZodTypeDef,
    ActivityWorthlessCorporateActionGeneralInformation
  > = z.object({
    corporateActionId: z.string().optional(),
    disbursedAssetId: z.string().optional(),
    disbursedCusip: z.string().optional(),
    disbursedSymbolDescription: z.string().optional(),
    targetAssetId: z.string().optional(),
    targetCusip: z.string().optional(),
    targetSymbolDescription: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      corporateActionId: "corporate_action_id",
      disbursedAssetId: "disbursed_asset_id",
      disbursedCusip: "disbursed_cusip",
      disbursedSymbolDescription: "disbursed_symbol_description",
      targetAssetId: "target_asset_id",
      targetCusip: "target_cusip",
      targetSymbolDescription: "target_symbol_description",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWorthlessCorporateActionGeneralInformation$ {
  /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$inboundSchema` instead. */
  export const inboundSchema =
    ActivityWorthlessCorporateActionGeneralInformation$inboundSchema;
  /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$outboundSchema` instead. */
  export const outboundSchema =
    ActivityWorthlessCorporateActionGeneralInformation$outboundSchema;
  /** @deprecated use `ActivityWorthlessCorporateActionGeneralInformation$Outbound` instead. */
  export type Outbound =
    ActivityWorthlessCorporateActionGeneralInformation$Outbound;
}

/** @internal */
export const ActivityWorthlessEffectiveDate$inboundSchema: z.ZodType<
  ActivityWorthlessEffectiveDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityWorthlessEffectiveDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityWorthlessEffectiveDate$outboundSchema: z.ZodType<
  ActivityWorthlessEffectiveDate$Outbound,
  z.ZodTypeDef,
  ActivityWorthlessEffectiveDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWorthlessEffectiveDate$ {
  /** @deprecated use `ActivityWorthlessEffectiveDate$inboundSchema` instead. */
  export const inboundSchema = ActivityWorthlessEffectiveDate$inboundSchema;
  /** @deprecated use `ActivityWorthlessEffectiveDate$outboundSchema` instead. */
  export const outboundSchema = ActivityWorthlessEffectiveDate$outboundSchema;
  /** @deprecated use `ActivityWorthlessEffectiveDate$Outbound` instead. */
  export type Outbound = ActivityWorthlessEffectiveDate$Outbound;
}

/** @internal */
export const ActivityWorthlessPaymentDate$inboundSchema: z.ZodType<
  ActivityWorthlessPaymentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/** @internal */
export type ActivityWorthlessPaymentDate$Outbound = {
  day?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

/** @internal */
export const ActivityWorthlessPaymentDate$outboundSchema: z.ZodType<
  ActivityWorthlessPaymentDate$Outbound,
  z.ZodTypeDef,
  ActivityWorthlessPaymentDate
> = z.object({
  day: z.number().int().optional(),
  month: z.number().int().optional(),
  year: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWorthlessPaymentDate$ {
  /** @deprecated use `ActivityWorthlessPaymentDate$inboundSchema` instead. */
  export const inboundSchema = ActivityWorthlessPaymentDate$inboundSchema;
  /** @deprecated use `ActivityWorthlessPaymentDate$outboundSchema` instead. */
  export const outboundSchema = ActivityWorthlessPaymentDate$outboundSchema;
  /** @deprecated use `ActivityWorthlessPaymentDate$Outbound` instead. */
  export type Outbound = ActivityWorthlessPaymentDate$Outbound;
}

/** @internal */
export const ActivityWorthless$inboundSchema: z.ZodType<
  ActivityWorthless,
  z.ZodTypeDef,
  unknown
> = z.object({
  corporate_action_general_information: z.nullable(
    z.lazy(() =>
      ActivityWorthlessCorporateActionGeneralInformation$inboundSchema
    ),
  ).optional(),
  effective_date: z.nullable(
    z.lazy(() => ActivityWorthlessEffectiveDate$inboundSchema),
  ).optional(),
  payment_date: z.nullable(
    z.lazy(() => ActivityWorthlessPaymentDate$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "corporate_action_general_information": "corporateActionGeneralInformation",
    "effective_date": "effectiveDate",
    "payment_date": "paymentDate",
  });
});

/** @internal */
export type ActivityWorthless$Outbound = {
  corporate_action_general_information?:
    | ActivityWorthlessCorporateActionGeneralInformation$Outbound
    | null
    | undefined;
  effective_date?: ActivityWorthlessEffectiveDate$Outbound | null | undefined;
  payment_date?: ActivityWorthlessPaymentDate$Outbound | null | undefined;
};

/** @internal */
export const ActivityWorthless$outboundSchema: z.ZodType<
  ActivityWorthless$Outbound,
  z.ZodTypeDef,
  ActivityWorthless
> = z.object({
  corporateActionGeneralInformation: z.nullable(
    z.lazy(() =>
      ActivityWorthlessCorporateActionGeneralInformation$outboundSchema
    ),
  ).optional(),
  effectiveDate: z.nullable(
    z.lazy(() => ActivityWorthlessEffectiveDate$outboundSchema),
  ).optional(),
  paymentDate: z.nullable(
    z.lazy(() => ActivityWorthlessPaymentDate$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    corporateActionGeneralInformation: "corporate_action_general_information",
    effectiveDate: "effective_date",
    paymentDate: "payment_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityWorthless$ {
  /** @deprecated use `ActivityWorthless$inboundSchema` instead. */
  export const inboundSchema = ActivityWorthless$inboundSchema;
  /** @deprecated use `ActivityWorthless$outboundSchema` instead. */
  export const outboundSchema = ActivityWorthless$outboundSchema;
  /** @deprecated use `ActivityWorthless$Outbound` instead. */
  export type Outbound = ActivityWorthless$Outbound;
}

/** @internal */
export const Activity$inboundSchema: z.ZodType<
  Activity,
  z.ZodTypeDef,
  unknown
> = z.object({
  acats_pending_out: z.nullable(
    z.lazy(() => ActivityAcatsPendingOut$inboundSchema),
  ).optional(),
  account_id: z.string().optional(),
  account_memo: ActivityAccountMemo$inboundSchema.optional(),
  account_transfer: z.nullable(
    z.lazy(() => ActivityAccountTransfer$inboundSchema),
  ).optional(),
  accrued_interest: z.array(AccruedInterest$inboundSchema).optional(),
  accrued_interest_desc: z.nullable(
    z.lazy(() => AccruedInterestDesc$inboundSchema),
  ).optional(),
  activity_date: z.nullable(z.lazy(() => ActivityActivityDate$inboundSchema))
    .optional(),
  activity_description: z.string().optional(),
  activity_id: z.string().optional(),
  activity_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  asset_description: z.string().optional(),
  asset_id: z.string().optional(),
  capital_gains: z.nullable(z.lazy(() => ActivityCapitalGains$inboundSchema))
    .optional(),
  cash_dividend: z.nullable(z.lazy(() => ActivityCashDividend$inboundSchema))
    .optional(),
  commission: z.nullable(z.lazy(() => ActivityCommission$inboundSchema))
    .optional(),
  commissions: z.array(Commission$inboundSchema).optional(),
  conversion: z.nullable(z.lazy(() => ActivityConversion$inboundSchema))
    .optional(),
  corporate_action_memo_adjustment: z.nullable(
    z.lazy(() => ActivityCorporateActionMemoAdjustment$inboundSchema),
  ).optional(),
  correspondent_id: z.string().optional(),
  creation_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  credit: z.nullable(z.lazy(() => ActivityCredit$inboundSchema)).optional(),
  currency_asset_id: z.string().optional(),
  currency_code: z.string().optional(),
  deposit: z.nullable(z.lazy(() => ActivityDeposit$inboundSchema)).optional(),
  drip: z.nullable(z.lazy(() => ActivityDrip$inboundSchema)).optional(),
  exchange: z.nullable(z.lazy(() => ActivityExchange$inboundSchema)).optional(),
  fee: z.nullable(z.lazy(() => ActivityFee$inboundSchema)).optional(),
  fees: z.array(Fee$inboundSchema).optional(),
  fpsl: z.nullable(z.lazy(() => ActivityFpsl$inboundSchema)).optional(),
  generation: z.string().optional(),
  gross_amount: z.nullable(z.lazy(() => ActivityGrossAmount$inboundSchema))
    .optional(),
  interest: z.nullable(z.lazy(() => ActivityInterest$inboundSchema)).optional(),
  interest_payment: z.nullable(
    z.lazy(() => ActivityInterestPayment$inboundSchema),
  ).optional(),
  liquidation: z.nullable(z.lazy(() => ActivityLiquidation$inboundSchema))
    .optional(),
  maturity: z.nullable(z.lazy(() => ActivityMaturity$inboundSchema)).optional(),
  merger: z.nullable(z.lazy(() => ActivityMerger$inboundSchema)).optional(),
  name: z.string().optional(),
  name_change: z.nullable(z.lazy(() => ActivityNameChange$inboundSchema))
    .optional(),
  net_amount: z.nullable(z.lazy(() => ActivityNetAmount$inboundSchema))
    .optional(),
  next_activity_id: z.string().optional(),
  next_activity_process_date: z.nullable(
    z.lazy(() => NextActivityProcessDate$inboundSchema),
  ).optional(),
  none: z.nullable(z.lazy(() => None$inboundSchema)).optional(),
  payment_in_kind: z.nullable(z.lazy(() => ActivityPaymentInKind$inboundSchema))
    .optional(),
  previous_activity_id: z.string().optional(),
  previous_process_date: z.nullable(
    z.lazy(() => PreviousProcessDate$inboundSchema),
  ).optional(),
  price: z.nullable(z.lazy(() => ActivityPrice$inboundSchema)).optional(),
  process_date: z.nullable(z.lazy(() => ActivityProcessDate$inboundSchema))
    .optional(),
  quantity: z.nullable(z.lazy(() => ActivityQuantity$inboundSchema)).optional(),
  redemption_full: z.nullable(
    z.lazy(() => ActivityRedemptionFull$inboundSchema),
  ).optional(),
  redemption_partial: z.nullable(
    z.lazy(() => ActivityRedemptionPartial$inboundSchema),
  ).optional(),
  region_code: z.string().optional(),
  reverse_stock_split: z.nullable(
    z.lazy(() => ActivityReverseStockSplit$inboundSchema),
  ).optional(),
  rights_distribution: z.nullable(
    z.lazy(() => ActivityRightsDistribution$inboundSchema),
  ).optional(),
  rights_subscription: z.nullable(
    z.lazy(() => ActivityRightsSubscription$inboundSchema),
  ).optional(),
  rounding_adjustment: z.nullable(
    z.lazy(() => ActivityRoundingAdjustment$inboundSchema),
  ).optional(),
  rounding_amount: z.nullable(z.lazy(() => RoundingAmount$inboundSchema))
    .optional(),
  rounding_reason: z.string().optional(),
  sale_of_rights: z.nullable(z.lazy(() => ActivitySaleOfRights$inboundSchema))
    .optional(),
  settle_date: z.nullable(z.lazy(() => ActivitySettleDate$inboundSchema))
    .optional(),
  side: ActivitySide$inboundSchema.optional(),
  spinoff: z.nullable(z.lazy(() => ActivitySpinoff$inboundSchema)).optional(),
  state: ActivityState$inboundSchema.optional(),
  stock_dividend: z.nullable(z.lazy(() => ActivityStockDividend$inboundSchema))
    .optional(),
  stock_split: z.nullable(z.lazy(() => ActivityStockSplit$inboundSchema))
    .optional(),
  subtype_category: z.string().optional(),
  sweep: z.nullable(z.lazy(() => ActivitySweep$inboundSchema)).optional(),
  tender_offer: z.nullable(z.lazy(() => ActivityTenderOffer$inboundSchema))
    .optional(),
  trade: z.nullable(z.lazy(() => ActivityTrade$inboundSchema)).optional(),
  transfer: z.nullable(z.lazy(() => ActivityTransfer$inboundSchema)).optional(),
  type: ActivityType$inboundSchema.optional(),
  unit_split: z.nullable(z.lazy(() => ActivityUnitSplit$inboundSchema))
    .optional(),
  warrant_exercise: z.nullable(
    z.lazy(() => ActivityWarrantExercise$inboundSchema),
  ).optional(),
  withdrawal: z.nullable(z.lazy(() => ActivityWithdrawal$inboundSchema))
    .optional(),
  withdrawal_pending_review: z.nullable(
    z.lazy(() => ActivityWithdrawalPendingReview$inboundSchema),
  ).optional(),
  withholding: z.nullable(z.lazy(() => ActivityWithholding$inboundSchema))
    .optional(),
  withholdings: z.array(Withholding$inboundSchema).optional(),
  worthless: z.nullable(z.lazy(() => ActivityWorthless$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "acats_pending_out": "acatsPendingOut",
    "account_id": "accountId",
    "account_memo": "accountMemo",
    "account_transfer": "accountTransfer",
    "accrued_interest": "accruedInterest",
    "accrued_interest_desc": "accruedInterestDesc",
    "activity_date": "activityDate",
    "activity_description": "activityDescription",
    "activity_id": "activityId",
    "activity_time": "activityTime",
    "asset_description": "assetDescription",
    "asset_id": "assetId",
    "capital_gains": "capitalGains",
    "cash_dividend": "cashDividend",
    "corporate_action_memo_adjustment": "corporateActionMemoAdjustment",
    "correspondent_id": "correspondentId",
    "creation_time": "creationTime",
    "currency_asset_id": "currencyAssetId",
    "currency_code": "currencyCode",
    "gross_amount": "grossAmount",
    "interest_payment": "interestPayment",
    "name_change": "nameChange",
    "net_amount": "netAmount",
    "next_activity_id": "nextActivityId",
    "next_activity_process_date": "nextActivityProcessDate",
    "payment_in_kind": "paymentInKind",
    "previous_activity_id": "previousActivityId",
    "previous_process_date": "previousProcessDate",
    "process_date": "processDate",
    "redemption_full": "redemptionFull",
    "redemption_partial": "redemptionPartial",
    "region_code": "regionCode",
    "reverse_stock_split": "reverseStockSplit",
    "rights_distribution": "rightsDistribution",
    "rights_subscription": "rightsSubscription",
    "rounding_adjustment": "roundingAdjustment",
    "rounding_amount": "roundingAmount",
    "rounding_reason": "roundingReason",
    "sale_of_rights": "saleOfRights",
    "settle_date": "settleDate",
    "stock_dividend": "stockDividend",
    "stock_split": "stockSplit",
    "subtype_category": "subtypeCategory",
    "tender_offer": "tenderOffer",
    "unit_split": "unitSplit",
    "warrant_exercise": "warrantExercise",
    "withdrawal_pending_review": "withdrawalPendingReview",
  });
});

/** @internal */
export type Activity$Outbound = {
  acats_pending_out?: ActivityAcatsPendingOut$Outbound | null | undefined;
  account_id?: string | undefined;
  account_memo?: string | undefined;
  account_transfer?: ActivityAccountTransfer$Outbound | null | undefined;
  accrued_interest?: Array<AccruedInterest$Outbound> | undefined;
  accrued_interest_desc?: AccruedInterestDesc$Outbound | null | undefined;
  activity_date?: ActivityActivityDate$Outbound | null | undefined;
  activity_description?: string | undefined;
  activity_id?: string | undefined;
  activity_time?: string | null | undefined;
  asset_description?: string | undefined;
  asset_id?: string | undefined;
  capital_gains?: ActivityCapitalGains$Outbound | null | undefined;
  cash_dividend?: ActivityCashDividend$Outbound | null | undefined;
  commission?: ActivityCommission$Outbound | null | undefined;
  commissions?: Array<Commission$Outbound> | undefined;
  conversion?: ActivityConversion$Outbound | null | undefined;
  corporate_action_memo_adjustment?:
    | ActivityCorporateActionMemoAdjustment$Outbound
    | null
    | undefined;
  correspondent_id?: string | undefined;
  creation_time?: string | null | undefined;
  credit?: ActivityCredit$Outbound | null | undefined;
  currency_asset_id?: string | undefined;
  currency_code?: string | undefined;
  deposit?: ActivityDeposit$Outbound | null | undefined;
  drip?: ActivityDrip$Outbound | null | undefined;
  exchange?: ActivityExchange$Outbound | null | undefined;
  fee?: ActivityFee$Outbound | null | undefined;
  fees?: Array<Fee$Outbound> | undefined;
  fpsl?: ActivityFpsl$Outbound | null | undefined;
  generation?: string | undefined;
  gross_amount?: ActivityGrossAmount$Outbound | null | undefined;
  interest?: ActivityInterest$Outbound | null | undefined;
  interest_payment?: ActivityInterestPayment$Outbound | null | undefined;
  liquidation?: ActivityLiquidation$Outbound | null | undefined;
  maturity?: ActivityMaturity$Outbound | null | undefined;
  merger?: ActivityMerger$Outbound | null | undefined;
  name?: string | undefined;
  name_change?: ActivityNameChange$Outbound | null | undefined;
  net_amount?: ActivityNetAmount$Outbound | null | undefined;
  next_activity_id?: string | undefined;
  next_activity_process_date?:
    | NextActivityProcessDate$Outbound
    | null
    | undefined;
  none?: None$Outbound | null | undefined;
  payment_in_kind?: ActivityPaymentInKind$Outbound | null | undefined;
  previous_activity_id?: string | undefined;
  previous_process_date?: PreviousProcessDate$Outbound | null | undefined;
  price?: ActivityPrice$Outbound | null | undefined;
  process_date?: ActivityProcessDate$Outbound | null | undefined;
  quantity?: ActivityQuantity$Outbound | null | undefined;
  redemption_full?: ActivityRedemptionFull$Outbound | null | undefined;
  redemption_partial?: ActivityRedemptionPartial$Outbound | null | undefined;
  region_code?: string | undefined;
  reverse_stock_split?: ActivityReverseStockSplit$Outbound | null | undefined;
  rights_distribution?: ActivityRightsDistribution$Outbound | null | undefined;
  rights_subscription?: ActivityRightsSubscription$Outbound | null | undefined;
  rounding_adjustment?: ActivityRoundingAdjustment$Outbound | null | undefined;
  rounding_amount?: RoundingAmount$Outbound | null | undefined;
  rounding_reason?: string | undefined;
  sale_of_rights?: ActivitySaleOfRights$Outbound | null | undefined;
  settle_date?: ActivitySettleDate$Outbound | null | undefined;
  side?: string | undefined;
  spinoff?: ActivitySpinoff$Outbound | null | undefined;
  state?: string | undefined;
  stock_dividend?: ActivityStockDividend$Outbound | null | undefined;
  stock_split?: ActivityStockSplit$Outbound | null | undefined;
  subtype_category?: string | undefined;
  sweep?: ActivitySweep$Outbound | null | undefined;
  tender_offer?: ActivityTenderOffer$Outbound | null | undefined;
  trade?: ActivityTrade$Outbound | null | undefined;
  transfer?: ActivityTransfer$Outbound | null | undefined;
  type?: string | undefined;
  unit_split?: ActivityUnitSplit$Outbound | null | undefined;
  warrant_exercise?: ActivityWarrantExercise$Outbound | null | undefined;
  withdrawal?: ActivityWithdrawal$Outbound | null | undefined;
  withdrawal_pending_review?:
    | ActivityWithdrawalPendingReview$Outbound
    | null
    | undefined;
  withholding?: ActivityWithholding$Outbound | null | undefined;
  withholdings?: Array<Withholding$Outbound> | undefined;
  worthless?: ActivityWorthless$Outbound | null | undefined;
};

/** @internal */
export const Activity$outboundSchema: z.ZodType<
  Activity$Outbound,
  z.ZodTypeDef,
  Activity
> = z.object({
  acatsPendingOut: z.nullable(
    z.lazy(() => ActivityAcatsPendingOut$outboundSchema),
  ).optional(),
  accountId: z.string().optional(),
  accountMemo: ActivityAccountMemo$outboundSchema.optional(),
  accountTransfer: z.nullable(
    z.lazy(() => ActivityAccountTransfer$outboundSchema),
  ).optional(),
  accruedInterest: z.array(AccruedInterest$outboundSchema).optional(),
  accruedInterestDesc: z.nullable(
    z.lazy(() => AccruedInterestDesc$outboundSchema),
  ).optional(),
  activityDate: z.nullable(z.lazy(() => ActivityActivityDate$outboundSchema))
    .optional(),
  activityDescription: z.string().optional(),
  activityId: z.string().optional(),
  activityTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  assetDescription: z.string().optional(),
  assetId: z.string().optional(),
  capitalGains: z.nullable(z.lazy(() => ActivityCapitalGains$outboundSchema))
    .optional(),
  cashDividend: z.nullable(z.lazy(() => ActivityCashDividend$outboundSchema))
    .optional(),
  commission: z.nullable(z.lazy(() => ActivityCommission$outboundSchema))
    .optional(),
  commissions: z.array(Commission$outboundSchema).optional(),
  conversion: z.nullable(z.lazy(() => ActivityConversion$outboundSchema))
    .optional(),
  corporateActionMemoAdjustment: z.nullable(
    z.lazy(() => ActivityCorporateActionMemoAdjustment$outboundSchema),
  ).optional(),
  correspondentId: z.string().optional(),
  creationTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  credit: z.nullable(z.lazy(() => ActivityCredit$outboundSchema)).optional(),
  currencyAssetId: z.string().optional(),
  currencyCode: z.string().optional(),
  deposit: z.nullable(z.lazy(() => ActivityDeposit$outboundSchema)).optional(),
  drip: z.nullable(z.lazy(() => ActivityDrip$outboundSchema)).optional(),
  exchange: z.nullable(z.lazy(() => ActivityExchange$outboundSchema))
    .optional(),
  fee: z.nullable(z.lazy(() => ActivityFee$outboundSchema)).optional(),
  fees: z.array(Fee$outboundSchema).optional(),
  fpsl: z.nullable(z.lazy(() => ActivityFpsl$outboundSchema)).optional(),
  generation: z.string().optional(),
  grossAmount: z.nullable(z.lazy(() => ActivityGrossAmount$outboundSchema))
    .optional(),
  interest: z.nullable(z.lazy(() => ActivityInterest$outboundSchema))
    .optional(),
  interestPayment: z.nullable(
    z.lazy(() => ActivityInterestPayment$outboundSchema),
  ).optional(),
  liquidation: z.nullable(z.lazy(() => ActivityLiquidation$outboundSchema))
    .optional(),
  maturity: z.nullable(z.lazy(() => ActivityMaturity$outboundSchema))
    .optional(),
  merger: z.nullable(z.lazy(() => ActivityMerger$outboundSchema)).optional(),
  name: z.string().optional(),
  nameChange: z.nullable(z.lazy(() => ActivityNameChange$outboundSchema))
    .optional(),
  netAmount: z.nullable(z.lazy(() => ActivityNetAmount$outboundSchema))
    .optional(),
  nextActivityId: z.string().optional(),
  nextActivityProcessDate: z.nullable(
    z.lazy(() => NextActivityProcessDate$outboundSchema),
  ).optional(),
  none: z.nullable(z.lazy(() => None$outboundSchema)).optional(),
  paymentInKind: z.nullable(z.lazy(() => ActivityPaymentInKind$outboundSchema))
    .optional(),
  previousActivityId: z.string().optional(),
  previousProcessDate: z.nullable(
    z.lazy(() => PreviousProcessDate$outboundSchema),
  ).optional(),
  price: z.nullable(z.lazy(() => ActivityPrice$outboundSchema)).optional(),
  processDate: z.nullable(z.lazy(() => ActivityProcessDate$outboundSchema))
    .optional(),
  quantity: z.nullable(z.lazy(() => ActivityQuantity$outboundSchema))
    .optional(),
  redemptionFull: z.nullable(
    z.lazy(() => ActivityRedemptionFull$outboundSchema),
  ).optional(),
  redemptionPartial: z.nullable(
    z.lazy(() => ActivityRedemptionPartial$outboundSchema),
  ).optional(),
  regionCode: z.string().optional(),
  reverseStockSplit: z.nullable(
    z.lazy(() => ActivityReverseStockSplit$outboundSchema),
  ).optional(),
  rightsDistribution: z.nullable(
    z.lazy(() => ActivityRightsDistribution$outboundSchema),
  ).optional(),
  rightsSubscription: z.nullable(
    z.lazy(() => ActivityRightsSubscription$outboundSchema),
  ).optional(),
  roundingAdjustment: z.nullable(
    z.lazy(() => ActivityRoundingAdjustment$outboundSchema),
  ).optional(),
  roundingAmount: z.nullable(z.lazy(() => RoundingAmount$outboundSchema))
    .optional(),
  roundingReason: z.string().optional(),
  saleOfRights: z.nullable(z.lazy(() => ActivitySaleOfRights$outboundSchema))
    .optional(),
  settleDate: z.nullable(z.lazy(() => ActivitySettleDate$outboundSchema))
    .optional(),
  side: ActivitySide$outboundSchema.optional(),
  spinoff: z.nullable(z.lazy(() => ActivitySpinoff$outboundSchema)).optional(),
  state: ActivityState$outboundSchema.optional(),
  stockDividend: z.nullable(z.lazy(() => ActivityStockDividend$outboundSchema))
    .optional(),
  stockSplit: z.nullable(z.lazy(() => ActivityStockSplit$outboundSchema))
    .optional(),
  subtypeCategory: z.string().optional(),
  sweep: z.nullable(z.lazy(() => ActivitySweep$outboundSchema)).optional(),
  tenderOffer: z.nullable(z.lazy(() => ActivityTenderOffer$outboundSchema))
    .optional(),
  trade: z.nullable(z.lazy(() => ActivityTrade$outboundSchema)).optional(),
  transfer: z.nullable(z.lazy(() => ActivityTransfer$outboundSchema))
    .optional(),
  type: ActivityType$outboundSchema.optional(),
  unitSplit: z.nullable(z.lazy(() => ActivityUnitSplit$outboundSchema))
    .optional(),
  warrantExercise: z.nullable(
    z.lazy(() => ActivityWarrantExercise$outboundSchema),
  ).optional(),
  withdrawal: z.nullable(z.lazy(() => ActivityWithdrawal$outboundSchema))
    .optional(),
  withdrawalPendingReview: z.nullable(
    z.lazy(() => ActivityWithdrawalPendingReview$outboundSchema),
  ).optional(),
  withholding: z.nullable(z.lazy(() => ActivityWithholding$outboundSchema))
    .optional(),
  withholdings: z.array(Withholding$outboundSchema).optional(),
  worthless: z.nullable(z.lazy(() => ActivityWorthless$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    acatsPendingOut: "acats_pending_out",
    accountId: "account_id",
    accountMemo: "account_memo",
    accountTransfer: "account_transfer",
    accruedInterest: "accrued_interest",
    accruedInterestDesc: "accrued_interest_desc",
    activityDate: "activity_date",
    activityDescription: "activity_description",
    activityId: "activity_id",
    activityTime: "activity_time",
    assetDescription: "asset_description",
    assetId: "asset_id",
    capitalGains: "capital_gains",
    cashDividend: "cash_dividend",
    corporateActionMemoAdjustment: "corporate_action_memo_adjustment",
    correspondentId: "correspondent_id",
    creationTime: "creation_time",
    currencyAssetId: "currency_asset_id",
    currencyCode: "currency_code",
    grossAmount: "gross_amount",
    interestPayment: "interest_payment",
    nameChange: "name_change",
    netAmount: "net_amount",
    nextActivityId: "next_activity_id",
    nextActivityProcessDate: "next_activity_process_date",
    paymentInKind: "payment_in_kind",
    previousActivityId: "previous_activity_id",
    previousProcessDate: "previous_process_date",
    processDate: "process_date",
    redemptionFull: "redemption_full",
    redemptionPartial: "redemption_partial",
    regionCode: "region_code",
    reverseStockSplit: "reverse_stock_split",
    rightsDistribution: "rights_distribution",
    rightsSubscription: "rights_subscription",
    roundingAdjustment: "rounding_adjustment",
    roundingAmount: "rounding_amount",
    roundingReason: "rounding_reason",
    saleOfRights: "sale_of_rights",
    settleDate: "settle_date",
    stockDividend: "stock_dividend",
    stockSplit: "stock_split",
    subtypeCategory: "subtype_category",
    tenderOffer: "tender_offer",
    unitSplit: "unit_split",
    warrantExercise: "warrant_exercise",
    withdrawalPendingReview: "withdrawal_pending_review",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Activity$ {
  /** @deprecated use `Activity$inboundSchema` instead. */
  export const inboundSchema = Activity$inboundSchema;
  /** @deprecated use `Activity$outboundSchema` instead. */
  export const outboundSchema = Activity$outboundSchema;
  /** @deprecated use `Activity$Outbound` instead. */
  export type Outbound = Activity$Outbound;
}
