/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import {
  CustomerIdentificationResult,
  CustomerIdentificationResult$inboundSchema,
  CustomerIdentificationResult$Outbound,
  CustomerIdentificationResult$outboundSchema,
} from "./customeridentificationresult.js";

export enum CheckTypes {
  CheckTypeUnspecified = "CHECK_TYPE_UNSPECIFIED",
  Database = "DATABASE",
  Documentary = "DOCUMENTARY",
}
export type CheckTypesOpen = OpenEnum<typeof CheckTypes>;

/**
 * CustomerIdentification includes the details of a customer identification check
 */
export type CustomerIdentification = {
  /**
   * The types of checks being requested
   */
  checkTypes?: Array<CheckTypesOpen> | undefined;
  /**
   * required format: correspondents/{correspondent_id}/customerIdentifications/{customer_identification_id}
   */
  name?: string | undefined;
  /**
   * The results of the identity verification check(s)
   */
  results?: Array<CustomerIdentificationResult> | undefined;
};

/** @internal */
export const CheckTypes$inboundSchema: z.ZodType<
  CheckTypesOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CheckTypes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CheckTypes$outboundSchema: z.ZodType<
  CheckTypesOpen,
  z.ZodTypeDef,
  CheckTypesOpen
> = z.union([
  z.nativeEnum(CheckTypes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckTypes$ {
  /** @deprecated use `CheckTypes$inboundSchema` instead. */
  export const inboundSchema = CheckTypes$inboundSchema;
  /** @deprecated use `CheckTypes$outboundSchema` instead. */
  export const outboundSchema = CheckTypes$outboundSchema;
}

/** @internal */
export const CustomerIdentification$inboundSchema: z.ZodType<
  CustomerIdentification,
  z.ZodTypeDef,
  unknown
> = z.object({
  check_types: z.array(CheckTypes$inboundSchema).optional(),
  name: z.string().optional(),
  results: z.array(CustomerIdentificationResult$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "check_types": "checkTypes",
  });
});

/** @internal */
export type CustomerIdentification$Outbound = {
  check_types?: Array<string> | undefined;
  name?: string | undefined;
  results?: Array<CustomerIdentificationResult$Outbound> | undefined;
};

/** @internal */
export const CustomerIdentification$outboundSchema: z.ZodType<
  CustomerIdentification$Outbound,
  z.ZodTypeDef,
  CustomerIdentification
> = z.object({
  checkTypes: z.array(CheckTypes$outboundSchema).optional(),
  name: z.string().optional(),
  results: z.array(CustomerIdentificationResult$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    checkTypes: "check_types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerIdentification$ {
  /** @deprecated use `CustomerIdentification$inboundSchema` instead. */
  export const inboundSchema = CustomerIdentification$inboundSchema;
  /** @deprecated use `CustomerIdentification$outboundSchema` instead. */
  export const outboundSchema = CustomerIdentification$outboundSchema;
  /** @deprecated use `CustomerIdentification$Outbound` instead. */
  export type Outbound = CustomerIdentification$Outbound;
}
