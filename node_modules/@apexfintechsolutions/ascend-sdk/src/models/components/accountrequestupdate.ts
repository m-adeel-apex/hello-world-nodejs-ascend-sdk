/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import {
  AccountTaxProfileUpdate,
  AccountTaxProfileUpdate$inboundSchema,
  AccountTaxProfileUpdate$Outbound,
  AccountTaxProfileUpdate$outboundSchema,
} from "./accounttaxprofileupdate.js";
import {
  IdentifierUpdate,
  IdentifierUpdate$inboundSchema,
  IdentifierUpdate$Outbound,
  IdentifierUpdate$outboundSchema,
} from "./identifierupdate.js";
import {
  InterestedPartyUpdate,
  InterestedPartyUpdate$inboundSchema,
  InterestedPartyUpdate$Outbound,
  InterestedPartyUpdate$outboundSchema,
} from "./interestedpartyupdate.js";
import {
  InvestmentProfileUpdate,
  InvestmentProfileUpdate$inboundSchema,
  InvestmentProfileUpdate$Outbound,
  InvestmentProfileUpdate$outboundSchema,
} from "./investmentprofileupdate.js";
import {
  PartyRequestUpdate,
  PartyRequestUpdate$inboundSchema,
  PartyRequestUpdate$Outbound,
  PartyRequestUpdate$outboundSchema,
} from "./partyrequestupdate.js";
import {
  TrustedContactUpdate,
  TrustedContactUpdate$inboundSchema,
  TrustedContactUpdate$Outbound,
  TrustedContactUpdate$outboundSchema,
} from "./trustedcontactupdate.js";

/**
 * The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
 */
export enum AccountRequestUpdateCatAccountHolderType {
  CatAccountHolderTypeUnspecified = "CAT_ACCOUNT_HOLDER_TYPE_UNSPECIFIED",
  AInstitutionalCustomer = "A_INSTITUTIONAL_CUSTOMER",
  EEmployeeAccount = "E_EMPLOYEE_ACCOUNT",
  FForeign = "F_FOREIGN",
  IIndividual = "I_INDIVIDUAL",
  OMarketMaking = "O_MARKET_MAKING",
  VAgencyAveragePriceAccount = "V_AGENCY_AVERAGE_PRICE_ACCOUNT",
  POtherProprietary = "P_OTHER_PROPRIETARY",
  XErrorAccount = "X_ERROR_ACCOUNT",
}
/**
 * The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
 */
export type AccountRequestUpdateCatAccountHolderTypeOpen = OpenEnum<
  typeof AccountRequestUpdateCatAccountHolderType
>;

/**
 * A single record representing an owner or manager of an Account.
 */
export type AccountRequestUpdate = {
  /**
   * Indicates if the issuer of a security held by the account is permitted to communicate directly with the shareholder versus through the brokerage firm; This can include sending proxy statements, annual reports, and other important information directly to the shareholder's address on file with the brokerage firm
   */
  acceptsIssuerDirectCommunication?: boolean | undefined;
  /**
   * A boolean to indicate if an account is advised
   */
  advised?: boolean | undefined;
  /**
   * The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
   */
  catAccountHolderType?:
    | AccountRequestUpdateCatAccountHolderTypeOpen
    | undefined;
  /**
   * A list of identifiers associated with the account
   */
  identifiers?: Array<IdentifierUpdate> | undefined;
  /**
   * A list of natural persons indicated to receive selected account documents such as account statements
   */
  interestedParties?: Array<InterestedPartyUpdate> | undefined;
  /**
   * Investor profile.
   */
  investmentProfile?: InvestmentProfileUpdate | undefined;
  /**
   * A boolean to indicate if an account is managed
   */
  managed?: boolean | undefined;
  /**
   * Parties associated with the account (e.g. custodian).
   */
  parties?: Array<PartyRequestUpdate> | undefined;
  /**
   * The primary registered representative for the account
   */
  primaryRegisteredRepId?: string | undefined;
  /**
   * The account tax profile.
   */
  taxProfile?: AccountTaxProfileUpdate | undefined;
  /**
   * A list of persons designated to verify the well being of the account holder.
   */
  trustedContacts?: Array<TrustedContactUpdate> | undefined;
  /**
   * A boolean to indicate if an account is a wrap brokerage account
   */
  wrapFeeBilled?: boolean | undefined;
};

/** @internal */
export const AccountRequestUpdateCatAccountHolderType$inboundSchema: z.ZodType<
  AccountRequestUpdateCatAccountHolderTypeOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountRequestUpdateCatAccountHolderType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountRequestUpdateCatAccountHolderType$outboundSchema: z.ZodType<
  AccountRequestUpdateCatAccountHolderTypeOpen,
  z.ZodTypeDef,
  AccountRequestUpdateCatAccountHolderTypeOpen
> = z.union([
  z.nativeEnum(AccountRequestUpdateCatAccountHolderType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountRequestUpdateCatAccountHolderType$ {
  /** @deprecated use `AccountRequestUpdateCatAccountHolderType$inboundSchema` instead. */
  export const inboundSchema =
    AccountRequestUpdateCatAccountHolderType$inboundSchema;
  /** @deprecated use `AccountRequestUpdateCatAccountHolderType$outboundSchema` instead. */
  export const outboundSchema =
    AccountRequestUpdateCatAccountHolderType$outboundSchema;
}

/** @internal */
export const AccountRequestUpdate$inboundSchema: z.ZodType<
  AccountRequestUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  accepts_issuer_direct_communication: z.boolean().optional(),
  advised: z.boolean().optional(),
  cat_account_holder_type:
    AccountRequestUpdateCatAccountHolderType$inboundSchema.optional(),
  identifiers: z.array(IdentifierUpdate$inboundSchema).optional(),
  interested_parties: z.array(InterestedPartyUpdate$inboundSchema).optional(),
  investment_profile: InvestmentProfileUpdate$inboundSchema.optional(),
  managed: z.boolean().optional(),
  parties: z.array(PartyRequestUpdate$inboundSchema).optional(),
  primary_registered_rep_id: z.string().optional(),
  tax_profile: AccountTaxProfileUpdate$inboundSchema.optional(),
  trusted_contacts: z.array(TrustedContactUpdate$inboundSchema).optional(),
  wrap_fee_billed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "accepts_issuer_direct_communication": "acceptsIssuerDirectCommunication",
    "cat_account_holder_type": "catAccountHolderType",
    "interested_parties": "interestedParties",
    "investment_profile": "investmentProfile",
    "primary_registered_rep_id": "primaryRegisteredRepId",
    "tax_profile": "taxProfile",
    "trusted_contacts": "trustedContacts",
    "wrap_fee_billed": "wrapFeeBilled",
  });
});

/** @internal */
export type AccountRequestUpdate$Outbound = {
  accepts_issuer_direct_communication?: boolean | undefined;
  advised?: boolean | undefined;
  cat_account_holder_type?: string | undefined;
  identifiers?: Array<IdentifierUpdate$Outbound> | undefined;
  interested_parties?: Array<InterestedPartyUpdate$Outbound> | undefined;
  investment_profile?: InvestmentProfileUpdate$Outbound | undefined;
  managed?: boolean | undefined;
  parties?: Array<PartyRequestUpdate$Outbound> | undefined;
  primary_registered_rep_id?: string | undefined;
  tax_profile?: AccountTaxProfileUpdate$Outbound | undefined;
  trusted_contacts?: Array<TrustedContactUpdate$Outbound> | undefined;
  wrap_fee_billed?: boolean | undefined;
};

/** @internal */
export const AccountRequestUpdate$outboundSchema: z.ZodType<
  AccountRequestUpdate$Outbound,
  z.ZodTypeDef,
  AccountRequestUpdate
> = z.object({
  acceptsIssuerDirectCommunication: z.boolean().optional(),
  advised: z.boolean().optional(),
  catAccountHolderType: AccountRequestUpdateCatAccountHolderType$outboundSchema
    .optional(),
  identifiers: z.array(IdentifierUpdate$outboundSchema).optional(),
  interestedParties: z.array(InterestedPartyUpdate$outboundSchema).optional(),
  investmentProfile: InvestmentProfileUpdate$outboundSchema.optional(),
  managed: z.boolean().optional(),
  parties: z.array(PartyRequestUpdate$outboundSchema).optional(),
  primaryRegisteredRepId: z.string().optional(),
  taxProfile: AccountTaxProfileUpdate$outboundSchema.optional(),
  trustedContacts: z.array(TrustedContactUpdate$outboundSchema).optional(),
  wrapFeeBilled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    acceptsIssuerDirectCommunication: "accepts_issuer_direct_communication",
    catAccountHolderType: "cat_account_holder_type",
    interestedParties: "interested_parties",
    investmentProfile: "investment_profile",
    primaryRegisteredRepId: "primary_registered_rep_id",
    taxProfile: "tax_profile",
    trustedContacts: "trusted_contacts",
    wrapFeeBilled: "wrap_fee_billed",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountRequestUpdate$ {
  /** @deprecated use `AccountRequestUpdate$inboundSchema` instead. */
  export const inboundSchema = AccountRequestUpdate$inboundSchema;
  /** @deprecated use `AccountRequestUpdate$outboundSchema` instead. */
  export const outboundSchema = AccountRequestUpdate$outboundSchema;
  /** @deprecated use `AccountRequestUpdate$Outbound` instead. */
  export type Outbound = AccountRequestUpdate$Outbound;
}
