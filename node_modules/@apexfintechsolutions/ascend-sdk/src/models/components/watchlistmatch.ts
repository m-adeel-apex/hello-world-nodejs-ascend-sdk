/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export enum MatchAttributes {
  MatchAttributeUnspecified = "MATCH_ATTRIBUTE_UNSPECIFIED",
  Name = "NAME",
  PhoneNumber = "PHONE_NUMBER",
  BirthDate = "BIRTH_DATE",
  Identification = "IDENTIFICATION",
  Email = "EMAIL",
  Address = "ADDRESS",
}
export type MatchAttributesOpen = OpenEnum<typeof MatchAttributes>;

/**
 * Match state - whether or not the match is confirmed
 */
export enum MatchState {
  MatchUnspecified = "MATCH_UNSPECIFIED",
  ConfirmedMatch = "CONFIRMED_MATCH",
  PotentialMatch = "POTENTIAL_MATCH",
  NoMatch = "NO_MATCH",
  Inconclusive = "INCONCLUSIVE",
}
/**
 * Match state - whether or not the match is confirmed
 */
export type MatchStateOpen = OpenEnum<typeof MatchState>;

/**
 * Matched profile details
 */
export type WatchlistMatch = {
  /**
   * Identifies if the entry is active or not
   */
  active?: boolean | undefined;
  /**
   * The time the watchlist match was created
   */
  createdAt?: Date | null | undefined;
  /**
   * Identifies that a confirmed watchlist match can be excluded when calculating the related screen state
   */
  excludeFromScreening?: boolean | undefined;
  /**
   * The attributes used to identify this watchlist match
   */
  matchAttributes?: Array<MatchAttributesOpen> | undefined;
  /**
   * Match state - whether or not the match is confirmed
   */
  matchState?: MatchStateOpen | undefined;
  /**
   * The time the watchlist match was last updated
   */
  updatedAt?: Date | null | undefined;
  /**
   * Indicates the watchlist source for a given match
   */
  watchlistId?: string | undefined;
  /**
   * Identification number for the watchlist item that was matched
   */
  watchlistItemId?: number | undefined;
};

/** @internal */
export const MatchAttributes$inboundSchema: z.ZodType<
  MatchAttributesOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(MatchAttributes),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const MatchAttributes$outboundSchema: z.ZodType<
  MatchAttributesOpen,
  z.ZodTypeDef,
  MatchAttributesOpen
> = z.union([
  z.nativeEnum(MatchAttributes),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MatchAttributes$ {
  /** @deprecated use `MatchAttributes$inboundSchema` instead. */
  export const inboundSchema = MatchAttributes$inboundSchema;
  /** @deprecated use `MatchAttributes$outboundSchema` instead. */
  export const outboundSchema = MatchAttributes$outboundSchema;
}

/** @internal */
export const MatchState$inboundSchema: z.ZodType<
  MatchStateOpen,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(MatchState),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const MatchState$outboundSchema: z.ZodType<
  MatchStateOpen,
  z.ZodTypeDef,
  MatchStateOpen
> = z.union([
  z.nativeEnum(MatchState),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MatchState$ {
  /** @deprecated use `MatchState$inboundSchema` instead. */
  export const inboundSchema = MatchState$inboundSchema;
  /** @deprecated use `MatchState$outboundSchema` instead. */
  export const outboundSchema = MatchState$outboundSchema;
}

/** @internal */
export const WatchlistMatch$inboundSchema: z.ZodType<
  WatchlistMatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.boolean().optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  exclude_from_screening: z.boolean().optional(),
  match_attributes: z.array(MatchAttributes$inboundSchema).optional(),
  match_state: MatchState$inboundSchema.optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  watchlist_id: z.string().optional(),
  watchlist_item_id: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "exclude_from_screening": "excludeFromScreening",
    "match_attributes": "matchAttributes",
    "match_state": "matchState",
    "updated_at": "updatedAt",
    "watchlist_id": "watchlistId",
    "watchlist_item_id": "watchlistItemId",
  });
});

/** @internal */
export type WatchlistMatch$Outbound = {
  active?: boolean | undefined;
  created_at?: string | null | undefined;
  exclude_from_screening?: boolean | undefined;
  match_attributes?: Array<string> | undefined;
  match_state?: string | undefined;
  updated_at?: string | null | undefined;
  watchlist_id?: string | undefined;
  watchlist_item_id?: number | undefined;
};

/** @internal */
export const WatchlistMatch$outboundSchema: z.ZodType<
  WatchlistMatch$Outbound,
  z.ZodTypeDef,
  WatchlistMatch
> = z.object({
  active: z.boolean().optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  excludeFromScreening: z.boolean().optional(),
  matchAttributes: z.array(MatchAttributes$outboundSchema).optional(),
  matchState: MatchState$outboundSchema.optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  watchlistId: z.string().optional(),
  watchlistItemId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    excludeFromScreening: "exclude_from_screening",
    matchAttributes: "match_attributes",
    matchState: "match_state",
    updatedAt: "updated_at",
    watchlistId: "watchlist_id",
    watchlistItemId: "watchlist_item_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WatchlistMatch$ {
  /** @deprecated use `WatchlistMatch$inboundSchema` instead. */
  export const inboundSchema = WatchlistMatch$inboundSchema;
  /** @deprecated use `WatchlistMatch$outboundSchema` instead. */
  export const outboundSchema = WatchlistMatch$outboundSchema;
  /** @deprecated use `WatchlistMatch$Outbound` instead. */
  export type Outbound = WatchlistMatch$Outbound;
}
