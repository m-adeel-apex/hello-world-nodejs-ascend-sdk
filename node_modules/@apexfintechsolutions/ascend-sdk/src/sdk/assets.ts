/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assetsGetAsset } from "../funcs/assetsGetAsset.js";
import { assetsGetAssetCorrespondent } from "../funcs/assetsGetAssetCorrespondent.js";
import { assetsListAssets } from "../funcs/assetsListAssets.js";
import { assetsListAssetsCorrespondent } from "../funcs/assetsListAssetsCorrespondent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Assets extends ClientSDK {
  /**
   * List Assets
   *
   * @remarks
   * Lists assets
   */
  async listAssets(
    parent?: string | undefined,
    pageSize?: number | undefined,
    pageToken?: string | undefined,
    filter?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.AssetsListAssets1Response> {
    return unwrapAsync(assetsListAssets(
      this,
      parent,
      pageSize,
      pageToken,
      filter,
      options,
    ));
  }

  /**
   * Get Asset
   *
   * @remarks
   * Gets assets
   */
  async getAsset(
    assetId: string,
    options?: RequestOptions,
  ): Promise<operations.AssetsGetAssetResponse> {
    return unwrapAsync(assetsGetAsset(
      this,
      assetId,
      options,
    ));
  }

  /**
   * List Assets (By Correspondent)
   *
   * @remarks
   * Lists assets
   */
  async listAssetsCorrespondent(
    correspondentId: string,
    pageSize?: number | undefined,
    pageToken?: string | undefined,
    filter?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.AssetsListAssetsCorrespondentResponse> {
    return unwrapAsync(assetsListAssetsCorrespondent(
      this,
      correspondentId,
      pageSize,
      pageToken,
      filter,
      options,
    ));
  }

  /**
   * Get Asset (By Correspondent)
   *
   * @remarks
   * Gets assets
   */
  async getAssetCorrespondent(
    correspondentId: string,
    assetId: string,
    options?: RequestOptions,
  ): Promise<operations.AssetsGetAssetCorrespondentResponse> {
    return unwrapAsync(assetsGetAssetCorrespondent(
      this,
      correspondentId,
      assetId,
      options,
    ));
  }
}
