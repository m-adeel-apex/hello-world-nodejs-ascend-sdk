/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { achTransfersCancelACHDeposit } from "../funcs/achTransfersCancelACHDeposit.js";
import { achTransfersCancelACHWithdrawal } from "../funcs/achTransfersCancelACHWithdrawal.js";
import { achTransfersCreateACHDeposit } from "../funcs/achTransfersCreateACHDeposit.js";
import { achTransfersCreateACHWithdrawal } from "../funcs/achTransfersCreateACHWithdrawal.js";
import { achTransfersGetACHDeposit } from "../funcs/achTransfersGetACHDeposit.js";
import { achTransfersGetACHWithdrawal } from "../funcs/achTransfersGetACHWithdrawal.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ACHTransfers extends ClientSDK {
  /**
   * Create ACH Deposit
   *
   * @remarks
   * Creates an ACH deposit.
   */
  async createAchDeposit(
    achDepositCreate: components.AchDepositCreate,
    accountId: string,
    options?: RequestOptions,
  ): Promise<operations.AchDepositsCreateAchDepositResponse> {
    return unwrapAsync(achTransfersCreateACHDeposit(
      this,
      achDepositCreate,
      accountId,
      options,
    ));
  }

  /**
   * Get ACH Deposit
   *
   * @remarks
   * Gets an existing ACH deposit.
   */
  async getAchDeposit(
    accountId: string,
    achDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.AchDepositsGetAchDepositResponse> {
    return unwrapAsync(achTransfersGetACHDeposit(
      this,
      accountId,
      achDepositId,
      options,
    ));
  }

  /**
   * Cancel ACH Deposit
   *
   * @remarks
   * Cancels an existing ACH deposit.
   */
  async cancelAchDeposit(
    cancelAchDepositRequestCreate: components.CancelAchDepositRequestCreate,
    accountId: string,
    achDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.AchDepositsCancelAchDepositResponse> {
    return unwrapAsync(achTransfersCancelACHDeposit(
      this,
      cancelAchDepositRequestCreate,
      accountId,
      achDepositId,
      options,
    ));
  }

  /**
   * Create ACH Withdrawal
   *
   * @remarks
   * Creates an ACH withdrawal.
   */
  async createAchWithdrawal(
    achWithdrawalCreate: components.AchWithdrawalCreate,
    accountId: string,
    options?: RequestOptions,
  ): Promise<operations.AchWithdrawalsCreateAchWithdrawalResponse> {
    return unwrapAsync(achTransfersCreateACHWithdrawal(
      this,
      achWithdrawalCreate,
      accountId,
      options,
    ));
  }

  /**
   * Get ACH Withdrawal
   *
   * @remarks
   * Gets an existing ACH withdrawal.
   */
  async getAchWithdrawal(
    accountId: string,
    achWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.AchWithdrawalsGetAchWithdrawalResponse> {
    return unwrapAsync(achTransfersGetACHWithdrawal(
      this,
      accountId,
      achWithdrawalId,
      options,
    ));
  }

  /**
   * Cancel ACH Withdrawal
   *
   * @remarks
   * Cancels an existing ACH withdrawal.
   */
  async cancelAchWithdrawal(
    cancelAchWithdrawalRequestCreate:
      components.CancelAchWithdrawalRequestCreate,
    accountId: string,
    achWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.AchWithdrawalsCancelAchWithdrawalResponse> {
    return unwrapAsync(achTransfersCancelACHWithdrawal(
      this,
      cancelAchWithdrawalRequestCreate,
      accountId,
      achWithdrawalId,
      options,
    ));
  }
}
