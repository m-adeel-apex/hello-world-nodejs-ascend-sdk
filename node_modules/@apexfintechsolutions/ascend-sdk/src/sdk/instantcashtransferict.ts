/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { instantCashTransferICTCancelICTDeposit } from "../funcs/instantCashTransferICTCancelICTDeposit.js";
import { instantCashTransferICTCancelICTWithdrawal } from "../funcs/instantCashTransferICTCancelICTWithdrawal.js";
import { instantCashTransferICTCreateICTDeposit } from "../funcs/instantCashTransferICTCreateICTDeposit.js";
import { instantCashTransferICTCreateICTWithdrawal } from "../funcs/instantCashTransferICTCreateICTWithdrawal.js";
import { instantCashTransferICTGetICTDeposit } from "../funcs/instantCashTransferICTGetICTDeposit.js";
import { instantCashTransferICTGetICTWithdrawal } from "../funcs/instantCashTransferICTGetICTWithdrawal.js";
import { instantCashTransferICTLocateICTReport } from "../funcs/instantCashTransferICTLocateICTReport.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class InstantCashTransferICT extends ClientSDK {
  /**
   * Create ICT Deposit
   *
   * @remarks
   * Creates an ICT deposit
   */
  async createIctDeposit(
    ictDepositCreate: components.IctDepositCreate,
    accountId: string,
    options?: RequestOptions,
  ): Promise<operations.IctDepositsCreateIctDepositResponse> {
    return unwrapAsync(instantCashTransferICTCreateICTDeposit(
      this,
      ictDepositCreate,
      accountId,
      options,
    ));
  }

  /**
   * Get ICT Deposit
   *
   * @remarks
   * Gets an existing ICT deposit
   */
  async getIctDeposit(
    accountId: string,
    ictDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.IctDepositsGetIctDepositResponse> {
    return unwrapAsync(instantCashTransferICTGetICTDeposit(
      this,
      accountId,
      ictDepositId,
      options,
    ));
  }

  /**
   * Cancel ICT Deposit
   *
   * @remarks
   * Cancels an existing ICT deposit
   */
  async cancelIctDeposit(
    cancelIctDepositRequestCreate: components.CancelIctDepositRequestCreate,
    accountId: string,
    ictDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.IctDepositsCancelIctDepositResponse> {
    return unwrapAsync(instantCashTransferICTCancelICTDeposit(
      this,
      cancelIctDepositRequestCreate,
      accountId,
      ictDepositId,
      options,
    ));
  }

  /**
   * Create ICT Withdrawal
   *
   * @remarks
   * Creates an ICT withdrawal
   */
  async createIctWithdrawal(
    ictWithdrawalCreate: components.IctWithdrawalCreate,
    accountId: string,
    options?: RequestOptions,
  ): Promise<operations.IctWithdrawalsCreateIctWithdrawalResponse> {
    return unwrapAsync(instantCashTransferICTCreateICTWithdrawal(
      this,
      ictWithdrawalCreate,
      accountId,
      options,
    ));
  }

  /**
   * Get ICT Withdrawal
   *
   * @remarks
   * Gets an existing ICT withdrawal
   */
  async getIctWithdrawal(
    accountId: string,
    ictWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.IctWithdrawalsGetIctWithdrawalResponse> {
    return unwrapAsync(instantCashTransferICTGetICTWithdrawal(
      this,
      accountId,
      ictWithdrawalId,
      options,
    ));
  }

  /**
   * Cancel ICT Withdrawal
   *
   * @remarks
   * Cancels an existing ICT withdrawal
   */
  async cancelIctWithdrawal(
    cancelIctWithdrawalRequestCreate:
      components.CancelIctWithdrawalRequestCreate,
    accountId: string,
    ictWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.IctWithdrawalsCancelIctWithdrawalResponse> {
    return unwrapAsync(instantCashTransferICTCancelICTWithdrawal(
      this,
      cancelIctWithdrawalRequestCreate,
      accountId,
      ictWithdrawalId,
      options,
    ));
  }

  /**
   * Locate ICT Report
   *
   * @remarks
   * Returns a signed link pointing to a recon report file for a specific ICT batch.
   */
  async locateIctReport(
    correspondentId: string,
    batchId?: string | undefined,
    programDateFilterProgram?: operations.ProgramDateFilterProgram | undefined,
    programDateFilterProcessDate?: components.DateCreate | undefined,
    options?: RequestOptions,
  ): Promise<operations.IctReconReportsLocateIctReportResponse> {
    return unwrapAsync(instantCashTransferICTLocateICTReport(
      this,
      correspondentId,
      batchId,
      programDateFilterProgram,
      programDateFilterProcessDate,
      options,
    ));
  }
}
