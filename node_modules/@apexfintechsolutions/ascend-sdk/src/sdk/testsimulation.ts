/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { testSimulationForceApproveAchDeposit } from "../funcs/testSimulationForceApproveAchDeposit.js";
import { testSimulationForceApproveAchWithdrawal } from "../funcs/testSimulationForceApproveAchWithdrawal.js";
import { testSimulationForceApproveCashJournal } from "../funcs/testSimulationForceApproveCashJournal.js";
import { testSimulationForceApproveIctDeposit } from "../funcs/testSimulationForceApproveIctDeposit.js";
import { testSimulationForceApproveIctWithdrawal } from "../funcs/testSimulationForceApproveIctWithdrawal.js";
import { testSimulationForceApproveWireWithdrawal } from "../funcs/testSimulationForceApproveWireWithdrawal.js";
import { testSimulationForceNocAchDeposit } from "../funcs/testSimulationForceNocAchDeposit.js";
import { testSimulationForceNocAchWithdrawal } from "../funcs/testSimulationForceNocAchWithdrawal.js";
import { testSimulationForceRejectAchDeposit } from "../funcs/testSimulationForceRejectAchDeposit.js";
import { testSimulationForceRejectAchWithdrawal } from "../funcs/testSimulationForceRejectAchWithdrawal.js";
import { testSimulationForceRejectCashJournal } from "../funcs/testSimulationForceRejectCashJournal.js";
import { testSimulationForceRejectIctDeposit } from "../funcs/testSimulationForceRejectIctDeposit.js";
import { testSimulationForceRejectIctWithdrawal } from "../funcs/testSimulationForceRejectIctWithdrawal.js";
import { testSimulationForceRejectWireWithdrawal } from "../funcs/testSimulationForceRejectWireWithdrawal.js";
import { testSimulationForceReturnAchDeposit } from "../funcs/testSimulationForceReturnAchDeposit.js";
import { testSimulationForceReturnAchWithdrawal } from "../funcs/testSimulationForceReturnAchWithdrawal.js";
import { testSimulationGetMicroDepositAmounts } from "../funcs/testSimulationGetMicroDepositAmounts.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TestSimulation extends ClientSDK {
  /**
   * ACH Deposit Approval
   *
   * @remarks
   * Forces approval of an existing ACH deposit that is pending review. FOR TESTING ONLY!
   */
  async forceApproveAchDeposit(
    forceApproveAchDepositRequestCreate:
      components.ForceApproveAchDepositRequestCreate,
    accountId: string,
    achDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.AchDepositsForceApproveAchDepositResponse> {
    return unwrapAsync(testSimulationForceApproveAchDeposit(
      this,
      forceApproveAchDepositRequestCreate,
      accountId,
      achDepositId,
      options,
    ));
  }

  /**
   * NOC for a Deposit
   *
   * @remarks
   * Forces a Nacha notice of change (NOC) on a completed ACH deposit. FOR TESTING ONLY!
   */
  async forceNocAchDeposit(
    forceNocAchDepositRequestCreate: components.ForceNocAchDepositRequestCreate,
    accountId: string,
    achDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.AchDepositsForceNocAchDepositResponse> {
    return unwrapAsync(testSimulationForceNocAchDeposit(
      this,
      forceNocAchDepositRequestCreate,
      accountId,
      achDepositId,
      options,
    ));
  }

  /**
   * ACH Deposit Rejection
   *
   * @remarks
   * Forces rejection of an existing ACH deposit that is pending review. FOR TESTING ONLY!
   */
  async forceRejectAchDeposit(
    forceRejectAchDepositRequestCreate:
      components.ForceRejectAchDepositRequestCreate,
    accountId: string,
    achDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.AchDepositsForceRejectAchDepositResponse> {
    return unwrapAsync(testSimulationForceRejectAchDeposit(
      this,
      forceRejectAchDepositRequestCreate,
      accountId,
      achDepositId,
      options,
    ));
  }

  /**
   * ACH Deposit Return
   *
   * @remarks
   * Forces a Nacha return on a completed ACH deposit. FOR TESTING ONLY!
   */
  async forceReturnAchDeposit(
    forceReturnAchDepositRequestCreate:
      components.ForceReturnAchDepositRequestCreate,
    accountId: string,
    achDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.AchDepositsForceReturnAchDepositResponse> {
    return unwrapAsync(testSimulationForceReturnAchDeposit(
      this,
      forceReturnAchDepositRequestCreate,
      accountId,
      achDepositId,
      options,
    ));
  }

  /**
   * ACH Withdrawal Approval
   *
   * @remarks
   * Forces approval of an existing ACH withdrawal that is pending review. FOR TESTING ONLY!
   */
  async forceApproveAchWithdrawal(
    forceApproveAchWithdrawalRequestCreate:
      components.ForceApproveAchWithdrawalRequestCreate,
    accountId: string,
    achWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.AchWithdrawalsForceApproveAchWithdrawalResponse> {
    return unwrapAsync(testSimulationForceApproveAchWithdrawal(
      this,
      forceApproveAchWithdrawalRequestCreate,
      accountId,
      achWithdrawalId,
      options,
    ));
  }

  /**
   * ACH Withdrawal NOC
   *
   * @remarks
   * Forces a Nacha notice of change (NOC) on a completed ACH withdrawal. FOR TESTING ONLY!
   */
  async forceNocAchWithdrawal(
    forceNocAchWithdrawalRequestCreate:
      components.ForceNocAchWithdrawalRequestCreate,
    accountId: string,
    achWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.AchWithdrawalsForceNocAchWithdrawalResponse> {
    return unwrapAsync(testSimulationForceNocAchWithdrawal(
      this,
      forceNocAchWithdrawalRequestCreate,
      accountId,
      achWithdrawalId,
      options,
    ));
  }

  /**
   * ACH Withdrawal Rejection
   *
   * @remarks
   * Forces rejection of an existing ACH withdrawal that is pending review. FOR TESTING ONLY!
   */
  async forceRejectAchWithdrawal(
    forceRejectAchWithdrawalRequestCreate:
      components.ForceRejectAchWithdrawalRequestCreate,
    accountId: string,
    achWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.AchWithdrawalsForceRejectAchWithdrawalResponse> {
    return unwrapAsync(testSimulationForceRejectAchWithdrawal(
      this,
      forceRejectAchWithdrawalRequestCreate,
      accountId,
      achWithdrawalId,
      options,
    ));
  }

  /**
   * ACH Withdrawal Return
   *
   * @remarks
   * Forces a Nacha return on a completed ACH withdrawal. FOR TESTING ONLY!
   */
  async forceReturnAchWithdrawal(
    forceReturnAchWithdrawalRequestCreate:
      components.ForceReturnAchWithdrawalRequestCreate,
    accountId: string,
    achWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.AchWithdrawalsForceReturnAchWithdrawalResponse> {
    return unwrapAsync(testSimulationForceReturnAchWithdrawal(
      this,
      forceReturnAchWithdrawalRequestCreate,
      accountId,
      achWithdrawalId,
      options,
    ));
  }

  /**
   * Get Relationship Micro Deposit Verification
   *
   * @remarks
   * Gets micro deposit amounts for bank relationships with the `MICRO_DEPOSIT` verification method. FOR TESTING ONLY!
   */
  async getMicroDepositAmounts(
    accountId: string,
    bankRelationshipId: string,
    options?: RequestOptions,
  ): Promise<operations.BankRelationshipsGetMicroDepositAmountsResponse> {
    return unwrapAsync(testSimulationGetMicroDepositAmounts(
      this,
      accountId,
      bankRelationshipId,
      options,
    ));
  }

  /**
   * Force Approve ICT Deposit
   *
   * @remarks
   * Forces an approval on an existing ICT deposit pending review - FOR TESTING
   */
  async forceApproveIctDeposit(
    forceApproveIctDepositRequestCreate:
      components.ForceApproveIctDepositRequestCreate,
    accountId: string,
    ictDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.IctDepositsForceApproveIctDepositResponse> {
    return unwrapAsync(testSimulationForceApproveIctDeposit(
      this,
      forceApproveIctDepositRequestCreate,
      accountId,
      ictDepositId,
      options,
    ));
  }

  /**
   * Force Reject ICT Deposit
   *
   * @remarks
   * Forces a rejection on an existing ICT deposit pending review - FOR TESTING
   */
  async forceRejectIctDeposit(
    forceRejectIctDepositRequestCreate:
      components.ForceRejectIctDepositRequestCreate,
    accountId: string,
    ictDepositId: string,
    options?: RequestOptions,
  ): Promise<operations.IctDepositsForceRejectIctDepositResponse> {
    return unwrapAsync(testSimulationForceRejectIctDeposit(
      this,
      forceRejectIctDepositRequestCreate,
      accountId,
      ictDepositId,
      options,
    ));
  }

  /**
   * Force Approve ICT Withdrawal
   *
   * @remarks
   * Forces an approval on an existing ICT withdrawal pending review - FOR TESTING
   */
  async forceApproveIctWithdrawal(
    forceApproveIctWithdrawalRequestCreate:
      components.ForceApproveIctWithdrawalRequestCreate,
    accountId: string,
    ictWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.IctWithdrawalsForceApproveIctWithdrawalResponse> {
    return unwrapAsync(testSimulationForceApproveIctWithdrawal(
      this,
      forceApproveIctWithdrawalRequestCreate,
      accountId,
      ictWithdrawalId,
      options,
    ));
  }

  /**
   * Force Reject ICT Withdrawal
   *
   * @remarks
   * Forces a rejection on an existing ICT withdrawal pending review - FOR TESTING
   */
  async forceRejectIctWithdrawal(
    forceRejectIctWithdrawalRequestCreate:
      components.ForceRejectIctWithdrawalRequestCreate,
    accountId: string,
    ictWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.IctWithdrawalsForceRejectIctWithdrawalResponse> {
    return unwrapAsync(testSimulationForceRejectIctWithdrawal(
      this,
      forceRejectIctWithdrawalRequestCreate,
      accountId,
      ictWithdrawalId,
      options,
    ));
  }

  /**
   * Force Approve Wire Withdrawal
   *
   * @remarks
   * Forces an approval on an existing wire withdrawal pending review - FOR TESTING
   */
  async forceApproveWireWithdrawal(
    forceApproveWireWithdrawalRequestCreate:
      components.ForceApproveWireWithdrawalRequestCreate,
    accountId: string,
    wireWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.WireWithdrawalsForceApproveWireWithdrawalResponse> {
    return unwrapAsync(testSimulationForceApproveWireWithdrawal(
      this,
      forceApproveWireWithdrawalRequestCreate,
      accountId,
      wireWithdrawalId,
      options,
    ));
  }

  /**
   * Force Reject Wire Withdrawal
   *
   * @remarks
   * Forces a rejection on an existing wire withdrawal pending review - FOR TESTING
   */
  async forceRejectWireWithdrawal(
    forceRejectWireWithdrawalRequestCreate:
      components.ForceRejectWireWithdrawalRequestCreate,
    accountId: string,
    wireWithdrawalId: string,
    options?: RequestOptions,
  ): Promise<operations.WireWithdrawalsForceRejectWireWithdrawalResponse> {
    return unwrapAsync(testSimulationForceRejectWireWithdrawal(
      this,
      forceRejectWireWithdrawalRequestCreate,
      accountId,
      wireWithdrawalId,
      options,
    ));
  }

  /**
   * Force Approve Cash Journal
   *
   * @remarks
   * Forces approval of an existing cash journal that is pending review FOR TESTING ONLY!
   */
  async forceApproveCashJournal(
    forceApproveCashJournalRequestCreate:
      components.ForceApproveCashJournalRequestCreate,
    cashJournalId: string,
    options?: RequestOptions,
  ): Promise<operations.CashJournalsForceApproveCashJournalResponse> {
    return unwrapAsync(testSimulationForceApproveCashJournal(
      this,
      forceApproveCashJournalRequestCreate,
      cashJournalId,
      options,
    ));
  }

  /**
   * Force Reject Cash Journal
   *
   * @remarks
   * Forces rejection of an existing cash journal that is pending review FOR TESTING ONLY!
   */
  async forceRejectCashJournal(
    forceRejectCashJournalRequestCreate:
      components.ForceRejectCashJournalRequestCreate,
    cashJournalId: string,
    options?: RequestOptions,
  ): Promise<operations.CashJournalsForceRejectCashJournalResponse> {
    return unwrapAsync(testSimulationForceRejectCashJournal(
      this,
      forceRejectCashJournalRequestCreate,
      cashJournalId,
      options,
    ));
  }
}
