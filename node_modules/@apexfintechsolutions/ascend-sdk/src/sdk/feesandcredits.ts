/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { feesAndCreditsCancelCredit } from "../funcs/feesAndCreditsCancelCredit.js";
import { feesAndCreditsCancelFee } from "../funcs/feesAndCreditsCancelFee.js";
import { feesAndCreditsCreateCredit } from "../funcs/feesAndCreditsCreateCredit.js";
import { feesAndCreditsCreateFee } from "../funcs/feesAndCreditsCreateFee.js";
import { feesAndCreditsGetCredit } from "../funcs/feesAndCreditsGetCredit.js";
import { feesAndCreditsGetFee } from "../funcs/feesAndCreditsGetFee.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FeesAndCredits extends ClientSDK {
  /**
   * Create Fee
   *
   * @remarks
   * Create a fee
   */
  async createFee(
    transfersFeeCreate: components.TransfersFeeCreate,
    accountId: string,
    options?: RequestOptions,
  ): Promise<operations.FeesCreateFeeResponse> {
    return unwrapAsync(feesAndCreditsCreateFee(
      this,
      transfersFeeCreate,
      accountId,
      options,
    ));
  }

  /**
   * Get Fee
   *
   * @remarks
   * Retrieve an existing fee
   */
  async getFee(
    accountId: string,
    feeId: string,
    options?: RequestOptions,
  ): Promise<operations.FeesGetFeeResponse> {
    return unwrapAsync(feesAndCreditsGetFee(
      this,
      accountId,
      feeId,
      options,
    ));
  }

  /**
   * Cancel Fee
   *
   * @remarks
   * Cancel an existing fee
   */
  async cancelFee(
    cancelFeeRequestCreate: components.CancelFeeRequestCreate,
    accountId: string,
    feeId: string,
    options?: RequestOptions,
  ): Promise<operations.FeesCancelFeeResponse> {
    return unwrapAsync(feesAndCreditsCancelFee(
      this,
      cancelFeeRequestCreate,
      accountId,
      feeId,
      options,
    ));
  }

  /**
   * Create Credit
   *
   * @remarks
   * Create a credit
   */
  async createCredit(
    transfersCreditCreate: components.TransfersCreditCreate,
    accountId: string,
    options?: RequestOptions,
  ): Promise<operations.CreditsCreateCreditResponse> {
    return unwrapAsync(feesAndCreditsCreateCredit(
      this,
      transfersCreditCreate,
      accountId,
      options,
    ));
  }

  /**
   * Get Credit
   *
   * @remarks
   * Retrieve an existing credit
   */
  async getCredit(
    accountId: string,
    creditId: string,
    options?: RequestOptions,
  ): Promise<operations.CreditsGetCreditResponse> {
    return unwrapAsync(feesAndCreditsGetCredit(
      this,
      accountId,
      creditId,
      options,
    ));
  }

  /**
   * Cancel Credit
   *
   * @remarks
   * Cancel an existing credit
   */
  async cancelCredit(
    cancelCreditRequestCreate: components.CancelCreditRequestCreate,
    accountId: string,
    creditId: string,
    options?: RequestOptions,
  ): Promise<operations.CreditsCancelCreditResponse> {
    return unwrapAsync(feesAndCreditsCancelCredit(
      this,
      cancelCreditRequestCreate,
      accountId,
      creditId,
      options,
    ));
  }
}
