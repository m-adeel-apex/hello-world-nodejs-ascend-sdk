/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { journalsCancelCashJournal } from "../funcs/journalsCancelCashJournal.js";
import { journalsCheckPartyType } from "../funcs/journalsCheckPartyType.js";
import { journalsCreateCashJournal } from "../funcs/journalsCreateCashJournal.js";
import { journalsGetCashJournal } from "../funcs/journalsGetCashJournal.js";
import { journalsRetrieveCashJournalConstraints } from "../funcs/journalsRetrieveCashJournalConstraints.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Journals extends ClientSDK {
  /**
   * Retrieve Cash Journal Constraints
   *
   * @remarks
   * Retrieves retirement contribution and distribution constraints for a cash journal transfer
   */
  async retrieveCashJournalConstraints(
    request: components.RetrieveCashJournalConstraintsRequestCreate,
    options?: RequestOptions,
  ): Promise<
    operations.RetirementConstraintsRetrieveCashJournalConstraintsResponse
  > {
    return unwrapAsync(journalsRetrieveCashJournalConstraints(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Cash Journal
   *
   * @remarks
   * Creates a cash journal
   */
  async createCashJournal(
    request: components.CashJournalCreate,
    options?: RequestOptions,
  ): Promise<operations.CashJournalsCreateCashJournalResponse> {
    return unwrapAsync(journalsCreateCashJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Cash Journal
   *
   * @remarks
   * Gets an existing cash journal
   */
  async getCashJournal(
    cashJournalId: string,
    options?: RequestOptions,
  ): Promise<operations.CashJournalsGetCashJournalResponse> {
    return unwrapAsync(journalsGetCashJournal(
      this,
      cashJournalId,
      options,
    ));
  }

  /**
   * Cancel Cash Journal
   *
   * @remarks
   * Cancels an existing cash journal
   */
  async cancelCashJournal(
    cancelCashJournalRequestCreate: components.CancelCashJournalRequestCreate,
    cashJournalId: string,
    options?: RequestOptions,
  ): Promise<operations.CashJournalsCancelCashJournalResponse> {
    return unwrapAsync(journalsCancelCashJournal(
      this,
      cancelCashJournalRequestCreate,
      cashJournalId,
      options,
    ));
  }

  /**
   * Retrieve Cash Journal Party
   *
   * @remarks
   * Determines whether a potential cash journal will be considered first party or third party given a source and destination account
   */
  async checkPartyType(
    request: components.CheckPartyTypeRequestCreate,
    options?: RequestOptions,
  ): Promise<operations.CashJournalsCheckPartyTypeResponse> {
    return unwrapAsync(journalsCheckPartyType(
      this,
      request,
      options,
    ));
  }
}
