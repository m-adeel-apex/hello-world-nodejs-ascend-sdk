/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { investigationsGetCustomerIdentification } from "../funcs/investigationsGetCustomerIdentification.js";
import { investigationsGetInvestigation } from "../funcs/investigationsGetInvestigation.js";
import { investigationsGetWatchlistItem } from "../funcs/investigationsGetWatchlistItem.js";
import { investigationsLinkDocuments } from "../funcs/investigationsLinkDocuments.js";
import { investigationsListInvestigations } from "../funcs/investigationsListInvestigations.js";
import { investigationsUpdateInvestigation } from "../funcs/investigationsUpdateInvestigation.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Investigations extends ClientSDK {
  /**
   * Get Investigations
   *
   * @remarks
   * Use this endpoint to get the current state of an investigation by request reference UUID.
   */
  async getInvestigation(
    investigationId: string,
    options?: RequestOptions,
  ): Promise<operations.InvestigationServiceGetInvestigationResponse> {
    return unwrapAsync(investigationsGetInvestigation(
      this,
      investigationId,
      options,
    ));
  }

  /**
   * Update Investigation
   *
   * @remarks
   * Use this endpoint to update the details of an investigation by request reference UUID.
   */
  async updateInvestigation(
    investigationUpdate: components.InvestigationUpdate,
    investigationId: string,
    updateMask?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.InvestigationServiceUpdateInvestigationResponse> {
    return unwrapAsync(investigationsUpdateInvestigation(
      this,
      investigationUpdate,
      investigationId,
      updateMask,
      options,
    ));
  }

  /**
   * List Investigations
   *
   * @remarks
   * Use this endpoint to retrieve a list of investigation summaries based on optional search parameters
   */
  async listInvestigations(
    pageSize?: number | undefined,
    pageToken?: string | undefined,
    filter?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.InvestigationServiceListInvestigationsResponse> {
    return unwrapAsync(investigationsListInvestigations(
      this,
      pageSize,
      pageToken,
      filter,
      options,
    ));
  }

  /**
   * Link Documents
   *
   * @remarks
   * Use this endpoint to update identity verification document IDs.
   */
  async linkDocuments(
    linkDocumentsRequestCreate: components.LinkDocumentsRequestCreate,
    investigationId: string,
    options?: RequestOptions,
  ): Promise<operations.InvestigationServiceLinkDocumentsResponse> {
    return unwrapAsync(investigationsLinkDocuments(
      this,
      linkDocumentsRequestCreate,
      investigationId,
      options,
    ));
  }

  /**
   * Get Watchlist Item
   *
   * @remarks
   * Gets the details of an investigation by watchlist type and valid watchlist id
   */
  async getWatchlistItem(
    watchlistId: string,
    itemId: string,
    options?: RequestOptions,
  ): Promise<operations.WatchlistServiceGetWatchlistItemResponse> {
    return unwrapAsync(investigationsGetWatchlistItem(
      this,
      watchlistId,
      itemId,
      options,
    ));
  }

  /**
   * Get Identity Verification
   *
   * @remarks
   * Gets a CustomerIdentification by CustomerIdentification ID.
   */
  async getCustomerIdentification(
    correspondentId: string,
    customerIdentificationId: string,
    view?:
      | operations.CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView
      | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.CustomerIdentificationResultServiceGetCustomerIdentificationResponse
  > {
    return unwrapAsync(investigationsGetCustomerIdentification(
      this,
      correspondentId,
      customerIdentificationId,
      view,
      options,
    ));
  }
}
